
CHIP_1_Control_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000dc  00800100  00001834  000018c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001834  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000645  008001dc  008001dc  000019a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000019a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000019d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d0  00000000  00000000  00001a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003204  00000000  00000000  00001ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ffe  00000000  00000000  00004ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000224b  00000000  00000000  00005ee6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000720  00000000  00000000  00008134  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010db  00000000  00000000  00008854  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d49  00000000  00000000  0000992f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c8  00000000  00000000  0000b678  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4f c0       	rjmp	.+158    	; 0xa0 <__ctors_end>
       2:	00 00       	nop
       4:	6b c0       	rjmp	.+214    	; 0xdc <__bad_interrupt>
       6:	00 00       	nop
       8:	69 c0       	rjmp	.+210    	; 0xdc <__bad_interrupt>
       a:	00 00       	nop
       c:	67 c0       	rjmp	.+206    	; 0xdc <__bad_interrupt>
       e:	00 00       	nop
      10:	65 c0       	rjmp	.+202    	; 0xdc <__bad_interrupt>
      12:	00 00       	nop
      14:	63 c0       	rjmp	.+198    	; 0xdc <__bad_interrupt>
      16:	00 00       	nop
      18:	61 c0       	rjmp	.+194    	; 0xdc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5f c0       	rjmp	.+190    	; 0xdc <__bad_interrupt>
      1e:	00 00       	nop
      20:	5d c0       	rjmp	.+186    	; 0xdc <__bad_interrupt>
      22:	00 00       	nop
      24:	5b c0       	rjmp	.+182    	; 0xdc <__bad_interrupt>
      26:	00 00       	nop
      28:	59 c0       	rjmp	.+178    	; 0xdc <__bad_interrupt>
      2a:	00 00       	nop
      2c:	57 c0       	rjmp	.+174    	; 0xdc <__bad_interrupt>
      2e:	00 00       	nop
      30:	55 c0       	rjmp	.+170    	; 0xdc <__bad_interrupt>
      32:	00 00       	nop
      34:	a2 c7       	rjmp	.+3908   	; 0xf7a <__vector_13>
      36:	00 00       	nop
      38:	51 c0       	rjmp	.+162    	; 0xdc <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4f c0       	rjmp	.+158    	; 0xdc <__bad_interrupt>
      3e:	00 00       	nop
      40:	4d c0       	rjmp	.+154    	; 0xdc <__bad_interrupt>
      42:	00 00       	nop
      44:	4b c0       	rjmp	.+150    	; 0xdc <__bad_interrupt>
      46:	00 00       	nop
      48:	49 c0       	rjmp	.+146    	; 0xdc <__bad_interrupt>
      4a:	00 00       	nop
      4c:	47 c0       	rjmp	.+142    	; 0xdc <__bad_interrupt>
      4e:	00 00       	nop
      50:	45 c0       	rjmp	.+138    	; 0xdc <__bad_interrupt>
      52:	00 00       	nop
      54:	43 c0       	rjmp	.+134    	; 0xdc <__bad_interrupt>
      56:	00 00       	nop
      58:	41 c0       	rjmp	.+130    	; 0xdc <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3f c0       	rjmp	.+126    	; 0xdc <__bad_interrupt>
      5e:	00 00       	nop
      60:	3d c0       	rjmp	.+122    	; 0xdc <__bad_interrupt>
      62:	00 00       	nop
      64:	3b c0       	rjmp	.+118    	; 0xdc <__bad_interrupt>
      66:	00 00       	nop
      68:	39 c0       	rjmp	.+114    	; 0xdc <__bad_interrupt>
      6a:	00 00       	nop
      6c:	37 c0       	rjmp	.+110    	; 0xdc <__bad_interrupt>
      6e:	00 00       	nop
      70:	35 c0       	rjmp	.+106    	; 0xdc <__bad_interrupt>
      72:	00 00       	nop
      74:	33 c0       	rjmp	.+102    	; 0xdc <__bad_interrupt>
      76:	00 00       	nop
      78:	31 c0       	rjmp	.+98     	; 0xdc <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2f c0       	rjmp	.+94     	; 0xdc <__bad_interrupt>
      7e:	00 00       	nop
      80:	2d c0       	rjmp	.+90     	; 0xdc <__bad_interrupt>
      82:	00 00       	nop
      84:	2b c0       	rjmp	.+86     	; 0xdc <__bad_interrupt>
      86:	00 00       	nop
      88:	29 c0       	rjmp	.+82     	; 0xdc <__bad_interrupt>
      8a:	00 00       	nop
      8c:	31 04       	cpc	r3, r1
      8e:	74 04       	cpc	r7, r4
      90:	38 04       	cpc	r3, r8
      92:	a9 04       	cpc	r10, r9
      94:	5c 05       	cpc	r21, r12
      96:	69 05       	cpc	r22, r9
      98:	2b 06       	cpc	r2, r27
      9a:	c4 05       	cpc	r28, r4
      9c:	f1 05       	cpc	r31, r1
      9e:	fe 05       	cpc	r31, r14

000000a0 <__ctors_end>:
      a0:	11 24       	eor	r1, r1
      a2:	1f be       	out	0x3f, r1	; 63
      a4:	cf ef       	ldi	r28, 0xFF	; 255
      a6:	d0 e4       	ldi	r29, 0x40	; 64
      a8:	de bf       	out	0x3e, r29	; 62
      aa:	cd bf       	out	0x3d, r28	; 61

000000ac <__do_copy_data>:
      ac:	11 e0       	ldi	r17, 0x01	; 1
      ae:	a0 e0       	ldi	r26, 0x00	; 0
      b0:	b1 e0       	ldi	r27, 0x01	; 1
      b2:	e4 e3       	ldi	r30, 0x34	; 52
      b4:	f8 e1       	ldi	r31, 0x18	; 24
      b6:	00 e0       	ldi	r16, 0x00	; 0
      b8:	0b bf       	out	0x3b, r16	; 59
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x14>
      bc:	07 90       	elpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ac 3d       	cpi	r26, 0xDC	; 220
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0x10>

000000c6 <__do_clear_bss>:
      c6:	28 e0       	ldi	r18, 0x08	; 8
      c8:	ac ed       	ldi	r26, 0xDC	; 220
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a1 32       	cpi	r26, 0x21	; 33
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	e8 d5       	rcall	.+3024   	; 0xca8 <main>
      d8:	0c 94 18 0c 	jmp	0x1830	; 0x1830 <_exit>

000000dc <__bad_interrupt>:
      dc:	91 cf       	rjmp	.-222    	; 0x0 <__vectors>

000000de <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
      de:	cf 93       	push	r28
      e0:	df 93       	push	r29
      e2:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
      e4:	0e 94 11 09 	call	0x1222	; 0x1222 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
      e8:	20 91 dc 01 	lds	r18, 0x01DC	; 0x8001dc <__data_end>
      ec:	30 91 dd 01 	lds	r19, 0x01DD	; 0x8001dd <__data_end+0x1>
      f0:	c9 01       	movw	r24, r18
      f2:	8c 0f       	add	r24, r28
      f4:	9d 1f       	adc	r25, r29
      f6:	8c 3d       	cpi	r24, 0xDC	; 220
      f8:	45 e0       	ldi	r20, 0x05	; 5
      fa:	94 07       	cpc	r25, r20
      fc:	58 f4       	brcc	.+22     	; 0x114 <pvPortMalloc+0x36>
      fe:	28 17       	cp	r18, r24
     100:	39 07       	cpc	r19, r25
     102:	58 f4       	brcc	.+22     	; 0x11a <pvPortMalloc+0x3c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     104:	e9 01       	movw	r28, r18
     106:	c2 52       	subi	r28, 0x22	; 34
     108:	de 4f       	sbci	r29, 0xFE	; 254
			xNextFreeByte += xWantedSize;			
     10a:	90 93 dd 01 	sts	0x01DD, r25	; 0x8001dd <__data_end+0x1>
     10e:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <__data_end>
     112:	05 c0       	rjmp	.+10     	; 0x11e <pvPortMalloc+0x40>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
     114:	c0 e0       	ldi	r28, 0x00	; 0
     116:	d0 e0       	ldi	r29, 0x00	; 0
     118:	02 c0       	rjmp	.+4      	; 0x11e <pvPortMalloc+0x40>
     11a:	c0 e0       	ldi	r28, 0x00	; 0
     11c:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     11e:	0e 94 db 09 	call	0x13b6	; 0x13b6 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     122:	ce 01       	movw	r24, r28
     124:	df 91       	pop	r29
     126:	cf 91       	pop	r28
     128:	08 95       	ret

0000012a <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     12a:	08 95       	ret

0000012c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     12c:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     12e:	03 96       	adiw	r24, 0x03	; 3
     130:	92 83       	std	Z+2, r25	; 0x02
     132:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     134:	2f ef       	ldi	r18, 0xFF	; 255
     136:	3f ef       	ldi	r19, 0xFF	; 255
     138:	34 83       	std	Z+4, r19	; 0x04
     13a:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     13c:	96 83       	std	Z+6, r25	; 0x06
     13e:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     140:	90 87       	std	Z+8, r25	; 0x08
     142:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     144:	10 82       	st	Z, r1
     146:	08 95       	ret

00000148 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     148:	fc 01       	movw	r30, r24
     14a:	11 86       	std	Z+9, r1	; 0x09
     14c:	10 86       	std	Z+8, r1	; 0x08
     14e:	08 95       	ret

00000150 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	fc 01       	movw	r30, r24
     156:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     158:	21 81       	ldd	r18, Z+1	; 0x01
     15a:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
     15c:	e9 01       	movw	r28, r18
     15e:	8a 81       	ldd	r24, Y+2	; 0x02
     160:	9b 81       	ldd	r25, Y+3	; 0x03
     162:	13 96       	adiw	r26, 0x03	; 3
     164:	9c 93       	st	X, r25
     166:	8e 93       	st	-X, r24
     168:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
     16a:	81 81       	ldd	r24, Z+1	; 0x01
     16c:	92 81       	ldd	r25, Z+2	; 0x02
     16e:	15 96       	adiw	r26, 0x05	; 5
     170:	9c 93       	st	X, r25
     172:	8e 93       	st	-X, r24
     174:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     176:	8a 81       	ldd	r24, Y+2	; 0x02
     178:	9b 81       	ldd	r25, Y+3	; 0x03
     17a:	ec 01       	movw	r28, r24
     17c:	7d 83       	std	Y+5, r23	; 0x05
     17e:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     180:	e9 01       	movw	r28, r18
     182:	7b 83       	std	Y+3, r23	; 0x03
     184:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     186:	72 83       	std	Z+2, r23	; 0x02
     188:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     18a:	19 96       	adiw	r26, 0x09	; 9
     18c:	fc 93       	st	X, r31
     18e:	ee 93       	st	-X, r30
     190:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
     192:	80 81       	ld	r24, Z
     194:	8f 5f       	subi	r24, 0xFF	; 255
     196:	80 83       	st	Z, r24
}
     198:	df 91       	pop	r29
     19a:	cf 91       	pop	r28
     19c:	08 95       	ret

0000019e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     19e:	cf 93       	push	r28
     1a0:	df 93       	push	r29
     1a2:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     1a4:	48 81       	ld	r20, Y
     1a6:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     1a8:	4f 3f       	cpi	r20, 0xFF	; 255
     1aa:	2f ef       	ldi	r18, 0xFF	; 255
     1ac:	52 07       	cpc	r21, r18
     1ae:	31 f4       	brne	.+12     	; 0x1bc <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     1b0:	dc 01       	movw	r26, r24
     1b2:	17 96       	adiw	r26, 0x07	; 7
     1b4:	ed 91       	ld	r30, X+
     1b6:	fc 91       	ld	r31, X
     1b8:	18 97       	sbiw	r26, 0x08	; 8
     1ba:	17 c0       	rjmp	.+46     	; 0x1ea <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     1bc:	fc 01       	movw	r30, r24
     1be:	33 96       	adiw	r30, 0x03	; 3
     1c0:	dc 01       	movw	r26, r24
     1c2:	15 96       	adiw	r26, 0x05	; 5
     1c4:	2d 91       	ld	r18, X+
     1c6:	3c 91       	ld	r19, X
     1c8:	16 97       	sbiw	r26, 0x06	; 6
     1ca:	d9 01       	movw	r26, r18
     1cc:	2d 91       	ld	r18, X+
     1ce:	3c 91       	ld	r19, X
     1d0:	42 17       	cp	r20, r18
     1d2:	53 07       	cpc	r21, r19
     1d4:	50 f0       	brcs	.+20     	; 0x1ea <vListInsert+0x4c>
     1d6:	02 80       	ldd	r0, Z+2	; 0x02
     1d8:	f3 81       	ldd	r31, Z+3	; 0x03
     1da:	e0 2d       	mov	r30, r0
     1dc:	a2 81       	ldd	r26, Z+2	; 0x02
     1de:	b3 81       	ldd	r27, Z+3	; 0x03
     1e0:	2d 91       	ld	r18, X+
     1e2:	3c 91       	ld	r19, X
     1e4:	42 17       	cp	r20, r18
     1e6:	53 07       	cpc	r21, r19
     1e8:	b0 f7       	brcc	.-20     	; 0x1d6 <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     1ea:	a2 81       	ldd	r26, Z+2	; 0x02
     1ec:	b3 81       	ldd	r27, Z+3	; 0x03
     1ee:	bb 83       	std	Y+3, r27	; 0x03
     1f0:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     1f2:	15 96       	adiw	r26, 0x05	; 5
     1f4:	dc 93       	st	X, r29
     1f6:	ce 93       	st	-X, r28
     1f8:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
     1fa:	fd 83       	std	Y+5, r31	; 0x05
     1fc:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     1fe:	d3 83       	std	Z+3, r29	; 0x03
     200:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     202:	99 87       	std	Y+9, r25	; 0x09
     204:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     206:	fc 01       	movw	r30, r24
     208:	20 81       	ld	r18, Z
     20a:	2f 5f       	subi	r18, 0xFF	; 255
     20c:	20 83       	st	Z, r18
}
     20e:	df 91       	pop	r29
     210:	cf 91       	pop	r28
     212:	08 95       	ret

00000214 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     214:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     216:	a2 81       	ldd	r26, Z+2	; 0x02
     218:	b3 81       	ldd	r27, Z+3	; 0x03
     21a:	84 81       	ldd	r24, Z+4	; 0x04
     21c:	95 81       	ldd	r25, Z+5	; 0x05
     21e:	15 96       	adiw	r26, 0x05	; 5
     220:	9c 93       	st	X, r25
     222:	8e 93       	st	-X, r24
     224:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     226:	a4 81       	ldd	r26, Z+4	; 0x04
     228:	b5 81       	ldd	r27, Z+5	; 0x05
     22a:	82 81       	ldd	r24, Z+2	; 0x02
     22c:	93 81       	ldd	r25, Z+3	; 0x03
     22e:	13 96       	adiw	r26, 0x03	; 3
     230:	9c 93       	st	X, r25
     232:	8e 93       	st	-X, r24
     234:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     236:	a0 85       	ldd	r26, Z+8	; 0x08
     238:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     23a:	11 96       	adiw	r26, 0x01	; 1
     23c:	8d 91       	ld	r24, X+
     23e:	9c 91       	ld	r25, X
     240:	12 97       	sbiw	r26, 0x02	; 2
     242:	e8 17       	cp	r30, r24
     244:	f9 07       	cpc	r31, r25
     246:	31 f4       	brne	.+12     	; 0x254 <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     248:	84 81       	ldd	r24, Z+4	; 0x04
     24a:	95 81       	ldd	r25, Z+5	; 0x05
     24c:	12 96       	adiw	r26, 0x02	; 2
     24e:	9c 93       	st	X, r25
     250:	8e 93       	st	-X, r24
     252:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
     254:	11 86       	std	Z+9, r1	; 0x09
     256:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     258:	8c 91       	ld	r24, X
     25a:	81 50       	subi	r24, 0x01	; 1
     25c:	8c 93       	st	X, r24
     25e:	08 95       	ret

00000260 <GetKeypadKey>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//menu FSM
enum MENUState {init_menu, main_menu_armed, main_menu_disarmed, arm_or_disarm, pass_enter, reset_pass, choice, user_pass, user_pass_wait, random_pass} menu_state;

void Menu_Init(){
	menu_state = init_menu;
     260:	8f ee       	ldi	r24, 0xEF	; 239
     262:	82 b9       	out	0x02, r24	; 2
     264:	00 00       	nop
     266:	00 9b       	sbis	0x00, 0	; 0
     268:	44 c0       	rjmp	.+136    	; 0x2f2 <GetKeypadKey+0x92>
     26a:	80 b1       	in	r24, 0x00	; 0
     26c:	80 95       	com	r24
     26e:	81 fd       	sbrc	r24, 1
     270:	42 c0       	rjmp	.+132    	; 0x2f6 <GetKeypadKey+0x96>
     272:	80 b1       	in	r24, 0x00	; 0
     274:	80 95       	com	r24
     276:	82 fd       	sbrc	r24, 2
     278:	40 c0       	rjmp	.+128    	; 0x2fa <GetKeypadKey+0x9a>
     27a:	80 b1       	in	r24, 0x00	; 0
     27c:	80 95       	com	r24
     27e:	83 fd       	sbrc	r24, 3
     280:	3e c0       	rjmp	.+124    	; 0x2fe <GetKeypadKey+0x9e>
     282:	8f ed       	ldi	r24, 0xDF	; 223
     284:	82 b9       	out	0x02, r24	; 2
     286:	00 00       	nop
     288:	00 9b       	sbis	0x00, 0	; 0
     28a:	3b c0       	rjmp	.+118    	; 0x302 <GetKeypadKey+0xa2>
     28c:	80 b1       	in	r24, 0x00	; 0
     28e:	80 95       	com	r24
     290:	81 fd       	sbrc	r24, 1
     292:	39 c0       	rjmp	.+114    	; 0x306 <GetKeypadKey+0xa6>
     294:	80 b1       	in	r24, 0x00	; 0
     296:	80 95       	com	r24
     298:	82 fd       	sbrc	r24, 2
     29a:	37 c0       	rjmp	.+110    	; 0x30a <GetKeypadKey+0xaa>
     29c:	80 b1       	in	r24, 0x00	; 0
     29e:	80 95       	com	r24
     2a0:	83 fd       	sbrc	r24, 3
     2a2:	35 c0       	rjmp	.+106    	; 0x30e <GetKeypadKey+0xae>
     2a4:	8f eb       	ldi	r24, 0xBF	; 191
     2a6:	82 b9       	out	0x02, r24	; 2
     2a8:	00 00       	nop
     2aa:	00 9b       	sbis	0x00, 0	; 0
     2ac:	32 c0       	rjmp	.+100    	; 0x312 <GetKeypadKey+0xb2>
     2ae:	80 b1       	in	r24, 0x00	; 0
     2b0:	80 95       	com	r24
     2b2:	81 fd       	sbrc	r24, 1
     2b4:	30 c0       	rjmp	.+96     	; 0x316 <GetKeypadKey+0xb6>
     2b6:	80 b1       	in	r24, 0x00	; 0
     2b8:	80 95       	com	r24
     2ba:	82 fd       	sbrc	r24, 2
     2bc:	2e c0       	rjmp	.+92     	; 0x31a <GetKeypadKey+0xba>
     2be:	80 b1       	in	r24, 0x00	; 0
     2c0:	80 95       	com	r24
     2c2:	83 fd       	sbrc	r24, 3
     2c4:	2c c0       	rjmp	.+88     	; 0x31e <GetKeypadKey+0xbe>
     2c6:	8f e7       	ldi	r24, 0x7F	; 127
     2c8:	82 b9       	out	0x02, r24	; 2
     2ca:	00 00       	nop
     2cc:	90 b1       	in	r25, 0x00	; 0
     2ce:	90 95       	com	r25
     2d0:	89 2f       	mov	r24, r25
     2d2:	81 70       	andi	r24, 0x01	; 1
     2d4:	90 fd       	sbrc	r25, 0
     2d6:	25 c0       	rjmp	.+74     	; 0x322 <GetKeypadKey+0xc2>
     2d8:	90 b1       	in	r25, 0x00	; 0
     2da:	90 95       	com	r25
     2dc:	91 fd       	sbrc	r25, 1
     2de:	23 c0       	rjmp	.+70     	; 0x326 <GetKeypadKey+0xc6>
     2e0:	90 b1       	in	r25, 0x00	; 0
     2e2:	90 95       	com	r25
     2e4:	92 fd       	sbrc	r25, 2
     2e6:	21 c0       	rjmp	.+66     	; 0x32a <GetKeypadKey+0xca>
     2e8:	90 b1       	in	r25, 0x00	; 0
     2ea:	90 95       	com	r25
     2ec:	93 fd       	sbrc	r25, 3
     2ee:	1f c0       	rjmp	.+62     	; 0x32e <GetKeypadKey+0xce>
     2f0:	08 95       	ret
     2f2:	81 e3       	ldi	r24, 0x31	; 49
     2f4:	08 95       	ret
     2f6:	84 e3       	ldi	r24, 0x34	; 52
     2f8:	08 95       	ret
     2fa:	87 e3       	ldi	r24, 0x37	; 55
     2fc:	08 95       	ret
     2fe:	8a e2       	ldi	r24, 0x2A	; 42
     300:	08 95       	ret
     302:	82 e3       	ldi	r24, 0x32	; 50
     304:	08 95       	ret
     306:	85 e3       	ldi	r24, 0x35	; 53
     308:	08 95       	ret
     30a:	88 e3       	ldi	r24, 0x38	; 56
     30c:	08 95       	ret
     30e:	80 e3       	ldi	r24, 0x30	; 48
     310:	08 95       	ret
     312:	83 e3       	ldi	r24, 0x33	; 51
     314:	08 95       	ret
     316:	86 e3       	ldi	r24, 0x36	; 54
     318:	08 95       	ret
     31a:	89 e3       	ldi	r24, 0x39	; 57
     31c:	08 95       	ret
     31e:	83 e2       	ldi	r24, 0x23	; 35
     320:	08 95       	ret
     322:	81 e4       	ldi	r24, 0x41	; 65
     324:	08 95       	ret
     326:	82 e4       	ldi	r24, 0x42	; 66
     328:	08 95       	ret
     32a:	83 e4       	ldi	r24, 0x43	; 67
     32c:	08 95       	ret
     32e:	84 e4       	ldi	r24, 0x44	; 68
     330:	08 95       	ret

00000332 <delay_ms>:
     332:	18 16       	cp	r1, r24
     334:	19 06       	cpc	r1, r25
     336:	5c f0       	brlt	.+22     	; 0x34e <delay_ms+0x1c>
     338:	08 95       	ret
     33a:	00 00       	nop
     33c:	21 50       	subi	r18, 0x01	; 1
     33e:	31 09       	sbc	r19, r1
     340:	e1 f7       	brne	.-8      	; 0x33a <delay_ms+0x8>
     342:	4f 5f       	subi	r20, 0xFF	; 255
     344:	5f 4f       	sbci	r21, 0xFF	; 255
     346:	84 17       	cp	r24, r20
     348:	95 07       	cpc	r25, r21
     34a:	19 f4       	brne	.+6      	; 0x352 <delay_ms+0x20>
     34c:	08 95       	ret
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	27 e0       	ldi	r18, 0x07	; 7
     354:	33 e0       	ldi	r19, 0x03	; 3
     356:	f1 cf       	rjmp	.-30     	; 0x33a <delay_ms+0x8>

00000358 <LCD_WriteCommand>:
     358:	5e 98       	cbi	0x0b, 6	; 11
     35a:	88 b9       	out	0x08, r24	; 8
     35c:	5f 9a       	sbi	0x0b, 7	; 11
     35e:	00 00       	nop
     360:	5f 98       	cbi	0x0b, 7	; 11
     362:	82 e0       	ldi	r24, 0x02	; 2
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	e5 cf       	rjmp	.-54     	; 0x332 <delay_ms>
     368:	08 95       	ret

0000036a <LCD_ClearScreen>:
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	f5 cf       	rjmp	.-22     	; 0x358 <LCD_WriteCommand>
     36e:	08 95       	ret

00000370 <LCD_Cursor>:
     370:	81 31       	cpi	r24, 0x11	; 17
     372:	18 f4       	brcc	.+6      	; 0x37a <LCD_Cursor+0xa>
     374:	81 58       	subi	r24, 0x81	; 129
     376:	f0 cf       	rjmp	.-32     	; 0x358 <LCD_WriteCommand>
     378:	08 95       	ret
     37a:	81 55       	subi	r24, 0x51	; 81
     37c:	ed cf       	rjmp	.-38     	; 0x358 <LCD_WriteCommand>
     37e:	08 95       	ret

00000380 <LCD_init>:
     380:	84 e6       	ldi	r24, 0x64	; 100
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	d6 df       	rcall	.-84     	; 0x332 <delay_ms>
     386:	88 e3       	ldi	r24, 0x38	; 56
     388:	e7 df       	rcall	.-50     	; 0x358 <LCD_WriteCommand>
     38a:	86 e0       	ldi	r24, 0x06	; 6
     38c:	e5 df       	rcall	.-54     	; 0x358 <LCD_WriteCommand>
     38e:	8f e0       	ldi	r24, 0x0F	; 15
     390:	e3 df       	rcall	.-58     	; 0x358 <LCD_WriteCommand>
     392:	81 e0       	ldi	r24, 0x01	; 1
     394:	e1 df       	rcall	.-62     	; 0x358 <LCD_WriteCommand>
     396:	8a e0       	ldi	r24, 0x0A	; 10
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	cb cf       	rjmp	.-106    	; 0x332 <delay_ms>
     39c:	08 95       	ret

0000039e <LCD_WriteData>:
     39e:	5e 9a       	sbi	0x0b, 6	; 11
     3a0:	88 b9       	out	0x08, r24	; 8
     3a2:	5f 9a       	sbi	0x0b, 7	; 11
     3a4:	00 00       	nop
     3a6:	5f 98       	cbi	0x0b, 7	; 11
     3a8:	81 e0       	ldi	r24, 0x01	; 1
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	c2 cf       	rjmp	.-124    	; 0x332 <delay_ms>
     3ae:	08 95       	ret

000003b0 <LCD_DisplayString>:
     3b0:	0f 93       	push	r16
     3b2:	1f 93       	push	r17
     3b4:	cf 93       	push	r28
     3b6:	df 93       	push	r29
     3b8:	18 2f       	mov	r17, r24
     3ba:	eb 01       	movw	r28, r22
     3bc:	d6 df       	rcall	.-84     	; 0x36a <LCD_ClearScreen>
     3be:	88 81       	ld	r24, Y
     3c0:	88 23       	and	r24, r24
     3c2:	51 f0       	breq	.+20     	; 0x3d8 <LCD_DisplayString+0x28>
     3c4:	01 e0       	ldi	r16, 0x01	; 1
     3c6:	01 0f       	add	r16, r17
     3c8:	81 2f       	mov	r24, r17
     3ca:	d2 df       	rcall	.-92     	; 0x370 <LCD_Cursor>
     3cc:	89 91       	ld	r24, Y+
     3ce:	e7 df       	rcall	.-50     	; 0x39e <LCD_WriteData>
     3d0:	10 2f       	mov	r17, r16
     3d2:	88 81       	ld	r24, Y
     3d4:	81 11       	cpse	r24, r1
     3d6:	f6 cf       	rjmp	.-20     	; 0x3c4 <LCD_DisplayString+0x14>
     3d8:	df 91       	pop	r29
     3da:	cf 91       	pop	r28
     3dc:	1f 91       	pop	r17
     3de:	0f 91       	pop	r16
     3e0:	08 95       	ret

000003e2 <alter_c_string>:
     3e2:	81 11       	cpse	r24, r1
     3e4:	06 c0       	rjmp	.+12     	; 0x3f2 <alter_c_string+0x10>
     3e6:	fb 01       	movw	r30, r22
     3e8:	e0 5f       	subi	r30, 0xF0	; 240
     3ea:	fe 4f       	sbci	r31, 0xFE	; 254
     3ec:	80 e3       	ldi	r24, 0x30	; 48
     3ee:	80 83       	st	Z, r24
     3f0:	08 95       	ret
     3f2:	81 30       	cpi	r24, 0x01	; 1
     3f4:	31 f4       	brne	.+12     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3f6:	fb 01       	movw	r30, r22
     3f8:	e0 5f       	subi	r30, 0xF0	; 240
     3fa:	fe 4f       	sbci	r31, 0xFE	; 254
     3fc:	81 e3       	ldi	r24, 0x31	; 49
     3fe:	80 83       	st	Z, r24
     400:	08 95       	ret
     402:	82 30       	cpi	r24, 0x02	; 2
     404:	31 f4       	brne	.+12     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     406:	fb 01       	movw	r30, r22
     408:	e0 5f       	subi	r30, 0xF0	; 240
     40a:	fe 4f       	sbci	r31, 0xFE	; 254
     40c:	82 e3       	ldi	r24, 0x32	; 50
     40e:	80 83       	st	Z, r24
     410:	08 95       	ret
     412:	83 30       	cpi	r24, 0x03	; 3
     414:	31 f4       	brne	.+12     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     416:	fb 01       	movw	r30, r22
     418:	e0 5f       	subi	r30, 0xF0	; 240
     41a:	fe 4f       	sbci	r31, 0xFE	; 254
     41c:	83 e3       	ldi	r24, 0x33	; 51
     41e:	80 83       	st	Z, r24
     420:	08 95       	ret
     422:	84 30       	cpi	r24, 0x04	; 4
     424:	31 f4       	brne	.+12     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     426:	fb 01       	movw	r30, r22
     428:	e0 5f       	subi	r30, 0xF0	; 240
     42a:	fe 4f       	sbci	r31, 0xFE	; 254
     42c:	84 e3       	ldi	r24, 0x34	; 52
     42e:	80 83       	st	Z, r24
     430:	08 95       	ret
     432:	85 30       	cpi	r24, 0x05	; 5
     434:	31 f4       	brne	.+12     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     436:	fb 01       	movw	r30, r22
     438:	e0 5f       	subi	r30, 0xF0	; 240
     43a:	fe 4f       	sbci	r31, 0xFE	; 254
     43c:	85 e3       	ldi	r24, 0x35	; 53
     43e:	80 83       	st	Z, r24
     440:	08 95       	ret
     442:	86 30       	cpi	r24, 0x06	; 6
     444:	31 f4       	brne	.+12     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
     446:	fb 01       	movw	r30, r22
     448:	e0 5f       	subi	r30, 0xF0	; 240
     44a:	fe 4f       	sbci	r31, 0xFE	; 254
     44c:	86 e3       	ldi	r24, 0x36	; 54
     44e:	80 83       	st	Z, r24
     450:	08 95       	ret
     452:	87 30       	cpi	r24, 0x07	; 7
     454:	31 f4       	brne	.+12     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     456:	fb 01       	movw	r30, r22
     458:	e0 5f       	subi	r30, 0xF0	; 240
     45a:	fe 4f       	sbci	r31, 0xFE	; 254
     45c:	87 e3       	ldi	r24, 0x37	; 55
     45e:	80 83       	st	Z, r24
     460:	08 95       	ret
     462:	88 30       	cpi	r24, 0x08	; 8
     464:	31 f4       	brne	.+12     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     466:	fb 01       	movw	r30, r22
     468:	e0 5f       	subi	r30, 0xF0	; 240
     46a:	fe 4f       	sbci	r31, 0xFE	; 254
     46c:	88 e3       	ldi	r24, 0x38	; 56
     46e:	80 83       	st	Z, r24
     470:	08 95       	ret
     472:	fb 01       	movw	r30, r22
     474:	e0 5f       	subi	r30, 0xF0	; 240
     476:	fe 4f       	sbci	r31, 0xFE	; 254
     478:	89 e3       	ldi	r24, 0x39	; 57
     47a:	80 83       	st	Z, r24
     47c:	08 95       	ret

0000047e <output_temp>:
     47e:	9d ec       	ldi	r25, 0xCD	; 205
     480:	89 9f       	mul	r24, r25
     482:	91 2d       	mov	r25, r1
     484:	11 24       	eor	r1, r1
     486:	96 95       	lsr	r25
     488:	96 95       	lsr	r25
     48a:	96 95       	lsr	r25
     48c:	90 93 bb 07 	sts	0x07BB, r25	; 0x8007bb <tens_place>
     490:	39 2f       	mov	r19, r25
     492:	33 0f       	add	r19, r19
     494:	23 2f       	mov	r18, r19
     496:	22 0f       	add	r18, r18
     498:	22 0f       	add	r18, r18
     49a:	23 0f       	add	r18, r19
     49c:	82 1b       	sub	r24, r18
     49e:	80 93 ba 07 	sts	0x07BA, r24	; 0x8007ba <ones_place>
     4a2:	65 e1       	ldi	r22, 0x15	; 21
     4a4:	70 e0       	ldi	r23, 0x00	; 0
     4a6:	89 2f       	mov	r24, r25
     4a8:	9c df       	rcall	.-200    	; 0x3e2 <alter_c_string>
     4aa:	66 e1       	ldi	r22, 0x16	; 22
     4ac:	70 e0       	ldi	r23, 0x00	; 0
     4ae:	80 91 ba 07 	lds	r24, 0x07BA	; 0x8007ba <ones_place>
     4b2:	97 df       	rcall	.-210    	; 0x3e2 <alter_c_string>
     4b4:	60 e1       	ldi	r22, 0x10	; 16
     4b6:	71 e0       	ldi	r23, 0x01	; 1
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	7a cf       	rjmp	.-268    	; 0x3b0 <LCD_DisplayString>
     4bc:	08 95       	ret

000004be <enter_c_string>:
     4be:	80 33       	cpi	r24, 0x30	; 48
     4c0:	a1 f4       	brne	.+40     	; 0x4ea <enter_c_string+0x2c>
     4c2:	61 15       	cp	r22, r1
     4c4:	71 05       	cpc	r23, r1
     4c6:	29 f4       	brne	.+10     	; 0x4d2 <enter_c_string+0x14>
     4c8:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <user_input>
     4cc:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <PassKey_LCD_data+0x10>
     4d0:	08 95       	ret
     4d2:	fb 01       	movw	r30, r22
     4d4:	e8 5f       	subi	r30, 0xF8	; 248
     4d6:	fe 4f       	sbci	r31, 0xFE	; 254
     4d8:	10 82       	st	Z, r1
     4da:	fb 01       	movw	r30, r22
     4dc:	e0 5d       	subi	r30, 0xD0	; 208
     4de:	fe 4f       	sbci	r31, 0xFE	; 254
     4e0:	80 e3       	ldi	r24, 0x30	; 48
     4e2:	80 8b       	std	Z+16, r24	; 0x10
     4e4:	8a e2       	ldi	r24, 0x2A	; 42
     4e6:	87 87       	std	Z+15, r24	; 0x0f
     4e8:	08 95       	ret
     4ea:	81 33       	cpi	r24, 0x31	; 49
     4ec:	b9 f4       	brne	.+46     	; 0x51c <enter_c_string+0x5e>
     4ee:	61 15       	cp	r22, r1
     4f0:	71 05       	cpc	r23, r1
     4f2:	39 f4       	brne	.+14     	; 0x502 <enter_c_string+0x44>
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <user_input>
     4fa:	81 e3       	ldi	r24, 0x31	; 49
     4fc:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <PassKey_LCD_data+0x10>
     500:	08 95       	ret
     502:	fb 01       	movw	r30, r22
     504:	e8 5f       	subi	r30, 0xF8	; 248
     506:	fe 4f       	sbci	r31, 0xFE	; 254
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	80 83       	st	Z, r24
     50c:	fb 01       	movw	r30, r22
     50e:	e0 5d       	subi	r30, 0xD0	; 208
     510:	fe 4f       	sbci	r31, 0xFE	; 254
     512:	81 e3       	ldi	r24, 0x31	; 49
     514:	80 8b       	std	Z+16, r24	; 0x10
     516:	8a e2       	ldi	r24, 0x2A	; 42
     518:	87 87       	std	Z+15, r24	; 0x0f
     51a:	08 95       	ret
     51c:	82 33       	cpi	r24, 0x32	; 50
     51e:	b9 f4       	brne	.+46     	; 0x54e <enter_c_string+0x90>
     520:	61 15       	cp	r22, r1
     522:	71 05       	cpc	r23, r1
     524:	39 f4       	brne	.+14     	; 0x534 <enter_c_string+0x76>
     526:	82 e0       	ldi	r24, 0x02	; 2
     528:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <user_input>
     52c:	82 e3       	ldi	r24, 0x32	; 50
     52e:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <PassKey_LCD_data+0x10>
     532:	08 95       	ret
     534:	fb 01       	movw	r30, r22
     536:	e8 5f       	subi	r30, 0xF8	; 248
     538:	fe 4f       	sbci	r31, 0xFE	; 254
     53a:	82 e0       	ldi	r24, 0x02	; 2
     53c:	80 83       	st	Z, r24
     53e:	fb 01       	movw	r30, r22
     540:	e0 5d       	subi	r30, 0xD0	; 208
     542:	fe 4f       	sbci	r31, 0xFE	; 254
     544:	82 e3       	ldi	r24, 0x32	; 50
     546:	80 8b       	std	Z+16, r24	; 0x10
     548:	8a e2       	ldi	r24, 0x2A	; 42
     54a:	87 87       	std	Z+15, r24	; 0x0f
     54c:	08 95       	ret
     54e:	83 33       	cpi	r24, 0x33	; 51
     550:	b9 f4       	brne	.+46     	; 0x580 <enter_c_string+0xc2>
     552:	61 15       	cp	r22, r1
     554:	71 05       	cpc	r23, r1
     556:	39 f4       	brne	.+14     	; 0x566 <enter_c_string+0xa8>
     558:	83 e0       	ldi	r24, 0x03	; 3
     55a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <user_input>
     55e:	83 e3       	ldi	r24, 0x33	; 51
     560:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <PassKey_LCD_data+0x10>
     564:	08 95       	ret
     566:	fb 01       	movw	r30, r22
     568:	e8 5f       	subi	r30, 0xF8	; 248
     56a:	fe 4f       	sbci	r31, 0xFE	; 254
     56c:	83 e0       	ldi	r24, 0x03	; 3
     56e:	80 83       	st	Z, r24
     570:	fb 01       	movw	r30, r22
     572:	e0 5d       	subi	r30, 0xD0	; 208
     574:	fe 4f       	sbci	r31, 0xFE	; 254
     576:	83 e3       	ldi	r24, 0x33	; 51
     578:	80 8b       	std	Z+16, r24	; 0x10
     57a:	8a e2       	ldi	r24, 0x2A	; 42
     57c:	87 87       	std	Z+15, r24	; 0x0f
     57e:	08 95       	ret
     580:	84 33       	cpi	r24, 0x34	; 52
     582:	b9 f4       	brne	.+46     	; 0x5b2 <enter_c_string+0xf4>
     584:	61 15       	cp	r22, r1
     586:	71 05       	cpc	r23, r1
     588:	39 f4       	brne	.+14     	; 0x598 <enter_c_string+0xda>
     58a:	84 e0       	ldi	r24, 0x04	; 4
     58c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <user_input>
     590:	84 e3       	ldi	r24, 0x34	; 52
     592:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <PassKey_LCD_data+0x10>
     596:	08 95       	ret
     598:	fb 01       	movw	r30, r22
     59a:	e8 5f       	subi	r30, 0xF8	; 248
     59c:	fe 4f       	sbci	r31, 0xFE	; 254
     59e:	84 e0       	ldi	r24, 0x04	; 4
     5a0:	80 83       	st	Z, r24
     5a2:	fb 01       	movw	r30, r22
     5a4:	e0 5d       	subi	r30, 0xD0	; 208
     5a6:	fe 4f       	sbci	r31, 0xFE	; 254
     5a8:	84 e3       	ldi	r24, 0x34	; 52
     5aa:	80 8b       	std	Z+16, r24	; 0x10
     5ac:	8a e2       	ldi	r24, 0x2A	; 42
     5ae:	87 87       	std	Z+15, r24	; 0x0f
     5b0:	08 95       	ret
     5b2:	85 33       	cpi	r24, 0x35	; 53
     5b4:	b9 f4       	brne	.+46     	; 0x5e4 <enter_c_string+0x126>
     5b6:	61 15       	cp	r22, r1
     5b8:	71 05       	cpc	r23, r1
     5ba:	39 f4       	brne	.+14     	; 0x5ca <enter_c_string+0x10c>
     5bc:	85 e0       	ldi	r24, 0x05	; 5
     5be:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <user_input>
     5c2:	85 e3       	ldi	r24, 0x35	; 53
     5c4:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <PassKey_LCD_data+0x10>
     5c8:	08 95       	ret
     5ca:	fb 01       	movw	r30, r22
     5cc:	e8 5f       	subi	r30, 0xF8	; 248
     5ce:	fe 4f       	sbci	r31, 0xFE	; 254
     5d0:	85 e0       	ldi	r24, 0x05	; 5
     5d2:	80 83       	st	Z, r24
     5d4:	fb 01       	movw	r30, r22
     5d6:	e0 5d       	subi	r30, 0xD0	; 208
     5d8:	fe 4f       	sbci	r31, 0xFE	; 254
     5da:	85 e3       	ldi	r24, 0x35	; 53
     5dc:	80 8b       	std	Z+16, r24	; 0x10
     5de:	8a e2       	ldi	r24, 0x2A	; 42
     5e0:	87 87       	std	Z+15, r24	; 0x0f
     5e2:	08 95       	ret
     5e4:	86 33       	cpi	r24, 0x36	; 54
     5e6:	b9 f4       	brne	.+46     	; 0x616 <enter_c_string+0x158>
     5e8:	61 15       	cp	r22, r1
     5ea:	71 05       	cpc	r23, r1
     5ec:	39 f4       	brne	.+14     	; 0x5fc <enter_c_string+0x13e>
     5ee:	86 e0       	ldi	r24, 0x06	; 6
     5f0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <user_input>
     5f4:	86 e3       	ldi	r24, 0x36	; 54
     5f6:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <PassKey_LCD_data+0x10>
     5fa:	08 95       	ret
     5fc:	fb 01       	movw	r30, r22
     5fe:	e8 5f       	subi	r30, 0xF8	; 248
     600:	fe 4f       	sbci	r31, 0xFE	; 254
     602:	86 e0       	ldi	r24, 0x06	; 6
     604:	80 83       	st	Z, r24
     606:	fb 01       	movw	r30, r22
     608:	e0 5d       	subi	r30, 0xD0	; 208
     60a:	fe 4f       	sbci	r31, 0xFE	; 254
     60c:	86 e3       	ldi	r24, 0x36	; 54
     60e:	80 8b       	std	Z+16, r24	; 0x10
     610:	8a e2       	ldi	r24, 0x2A	; 42
     612:	87 87       	std	Z+15, r24	; 0x0f
     614:	08 95       	ret
     616:	87 33       	cpi	r24, 0x37	; 55
     618:	b9 f4       	brne	.+46     	; 0x648 <enter_c_string+0x18a>
     61a:	61 15       	cp	r22, r1
     61c:	71 05       	cpc	r23, r1
     61e:	39 f4       	brne	.+14     	; 0x62e <enter_c_string+0x170>
     620:	87 e0       	ldi	r24, 0x07	; 7
     622:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <user_input>
     626:	87 e3       	ldi	r24, 0x37	; 55
     628:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <PassKey_LCD_data+0x10>
     62c:	08 95       	ret
     62e:	fb 01       	movw	r30, r22
     630:	e8 5f       	subi	r30, 0xF8	; 248
     632:	fe 4f       	sbci	r31, 0xFE	; 254
     634:	87 e0       	ldi	r24, 0x07	; 7
     636:	80 83       	st	Z, r24
     638:	fb 01       	movw	r30, r22
     63a:	e0 5d       	subi	r30, 0xD0	; 208
     63c:	fe 4f       	sbci	r31, 0xFE	; 254
     63e:	87 e3       	ldi	r24, 0x37	; 55
     640:	80 8b       	std	Z+16, r24	; 0x10
     642:	8a e2       	ldi	r24, 0x2A	; 42
     644:	87 87       	std	Z+15, r24	; 0x0f
     646:	08 95       	ret
     648:	88 33       	cpi	r24, 0x38	; 56
     64a:	b9 f4       	brne	.+46     	; 0x67a <enter_c_string+0x1bc>
     64c:	61 15       	cp	r22, r1
     64e:	71 05       	cpc	r23, r1
     650:	39 f4       	brne	.+14     	; 0x660 <enter_c_string+0x1a2>
     652:	88 e0       	ldi	r24, 0x08	; 8
     654:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <user_input>
     658:	88 e3       	ldi	r24, 0x38	; 56
     65a:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <PassKey_LCD_data+0x10>
     65e:	08 95       	ret
     660:	fb 01       	movw	r30, r22
     662:	e8 5f       	subi	r30, 0xF8	; 248
     664:	fe 4f       	sbci	r31, 0xFE	; 254
     666:	88 e0       	ldi	r24, 0x08	; 8
     668:	80 83       	st	Z, r24
     66a:	fb 01       	movw	r30, r22
     66c:	e0 5d       	subi	r30, 0xD0	; 208
     66e:	fe 4f       	sbci	r31, 0xFE	; 254
     670:	88 e3       	ldi	r24, 0x38	; 56
     672:	80 8b       	std	Z+16, r24	; 0x10
     674:	8a e2       	ldi	r24, 0x2A	; 42
     676:	87 87       	std	Z+15, r24	; 0x0f
     678:	08 95       	ret
     67a:	61 15       	cp	r22, r1
     67c:	71 05       	cpc	r23, r1
     67e:	39 f4       	brne	.+14     	; 0x68e <enter_c_string+0x1d0>
     680:	89 e0       	ldi	r24, 0x09	; 9
     682:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <user_input>
     686:	89 e3       	ldi	r24, 0x39	; 57
     688:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <PassKey_LCD_data+0x10>
     68c:	08 95       	ret
     68e:	fb 01       	movw	r30, r22
     690:	e8 5f       	subi	r30, 0xF8	; 248
     692:	fe 4f       	sbci	r31, 0xFE	; 254
     694:	89 e0       	ldi	r24, 0x09	; 9
     696:	80 83       	st	Z, r24
     698:	fb 01       	movw	r30, r22
     69a:	e0 5d       	subi	r30, 0xD0	; 208
     69c:	fe 4f       	sbci	r31, 0xFE	; 254
     69e:	89 e3       	ldi	r24, 0x39	; 57
     6a0:	80 8b       	std	Z+16, r24	; 0x10
     6a2:	8a e2       	ldi	r24, 0x2A	; 42
     6a4:	87 87       	std	Z+15, r24	; 0x0f
     6a6:	08 95       	ret

000006a8 <check_password>:
     6a8:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <current_pass>
     6ac:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <user_input>
     6b0:	98 13       	cpse	r25, r24
     6b2:	16 c0       	rjmp	.+44     	; 0x6e0 <check_password+0x38>
     6b4:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <current_pass+0x1>
     6b8:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <user_input+0x1>
     6bc:	98 13       	cpse	r25, r24
     6be:	13 c0       	rjmp	.+38     	; 0x6e6 <check_password+0x3e>
     6c0:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <current_pass+0x2>
     6c4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <user_input+0x2>
     6c8:	98 13       	cpse	r25, r24
     6ca:	10 c0       	rjmp	.+32     	; 0x6ec <check_password+0x44>
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <current_pass+0x3>
     6d4:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <user_input+0x3>
     6d8:	32 17       	cp	r19, r18
     6da:	51 f0       	breq	.+20     	; 0x6f0 <check_password+0x48>
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	08 95       	ret
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	08 95       	ret
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	08 95       	ret
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	08 95       	ret

000006f2 <output_for_user_pass_reset>:
     6f2:	cf 93       	push	r28
     6f4:	c6 2f       	mov	r28, r22
     6f6:	80 33       	cpi	r24, 0x30	; 48
     6f8:	59 f4       	brne	.+22     	; 0x710 <output_for_user_pass_reset+0x1e>
     6fa:	81 e1       	ldi	r24, 0x11	; 17
     6fc:	86 0f       	add	r24, r22
     6fe:	38 de       	rcall	.-912    	; 0x370 <LCD_Cursor>
     700:	80 e3       	ldi	r24, 0x30	; 48
     702:	4d de       	rcall	.-870    	; 0x39e <LCD_WriteData>
     704:	ec 2f       	mov	r30, r28
     706:	f0 e0       	ldi	r31, 0x00	; 0
     708:	e4 5f       	subi	r30, 0xF4	; 244
     70a:	fe 4f       	sbci	r31, 0xFE	; 254
     70c:	10 82       	st	Z, r1
     70e:	7b c0       	rjmp	.+246    	; 0x806 <output_for_user_pass_reset+0x114>
     710:	81 33       	cpi	r24, 0x31	; 49
     712:	61 f4       	brne	.+24     	; 0x72c <output_for_user_pass_reset+0x3a>
     714:	81 e1       	ldi	r24, 0x11	; 17
     716:	86 0f       	add	r24, r22
     718:	2b de       	rcall	.-938    	; 0x370 <LCD_Cursor>
     71a:	81 e3       	ldi	r24, 0x31	; 49
     71c:	40 de       	rcall	.-896    	; 0x39e <LCD_WriteData>
     71e:	ec 2f       	mov	r30, r28
     720:	f0 e0       	ldi	r31, 0x00	; 0
     722:	e4 5f       	subi	r30, 0xF4	; 244
     724:	fe 4f       	sbci	r31, 0xFE	; 254
     726:	81 e0       	ldi	r24, 0x01	; 1
     728:	80 83       	st	Z, r24
     72a:	6d c0       	rjmp	.+218    	; 0x806 <output_for_user_pass_reset+0x114>
     72c:	82 33       	cpi	r24, 0x32	; 50
     72e:	61 f4       	brne	.+24     	; 0x748 <output_for_user_pass_reset+0x56>
     730:	81 e1       	ldi	r24, 0x11	; 17
     732:	86 0f       	add	r24, r22
     734:	1d de       	rcall	.-966    	; 0x370 <LCD_Cursor>
     736:	82 e3       	ldi	r24, 0x32	; 50
     738:	32 de       	rcall	.-924    	; 0x39e <LCD_WriteData>
     73a:	ec 2f       	mov	r30, r28
     73c:	f0 e0       	ldi	r31, 0x00	; 0
     73e:	e4 5f       	subi	r30, 0xF4	; 244
     740:	fe 4f       	sbci	r31, 0xFE	; 254
     742:	82 e0       	ldi	r24, 0x02	; 2
     744:	80 83       	st	Z, r24
     746:	5f c0       	rjmp	.+190    	; 0x806 <output_for_user_pass_reset+0x114>
     748:	83 33       	cpi	r24, 0x33	; 51
     74a:	61 f4       	brne	.+24     	; 0x764 <output_for_user_pass_reset+0x72>
     74c:	81 e1       	ldi	r24, 0x11	; 17
     74e:	86 0f       	add	r24, r22
     750:	0f de       	rcall	.-994    	; 0x370 <LCD_Cursor>
     752:	83 e3       	ldi	r24, 0x33	; 51
     754:	24 de       	rcall	.-952    	; 0x39e <LCD_WriteData>
     756:	ec 2f       	mov	r30, r28
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	e4 5f       	subi	r30, 0xF4	; 244
     75c:	fe 4f       	sbci	r31, 0xFE	; 254
     75e:	83 e0       	ldi	r24, 0x03	; 3
     760:	80 83       	st	Z, r24
     762:	51 c0       	rjmp	.+162    	; 0x806 <output_for_user_pass_reset+0x114>
     764:	84 33       	cpi	r24, 0x34	; 52
     766:	61 f4       	brne	.+24     	; 0x780 <output_for_user_pass_reset+0x8e>
     768:	81 e1       	ldi	r24, 0x11	; 17
     76a:	86 0f       	add	r24, r22
     76c:	01 de       	rcall	.-1022   	; 0x370 <LCD_Cursor>
     76e:	84 e3       	ldi	r24, 0x34	; 52
     770:	16 de       	rcall	.-980    	; 0x39e <LCD_WriteData>
     772:	ec 2f       	mov	r30, r28
     774:	f0 e0       	ldi	r31, 0x00	; 0
     776:	e4 5f       	subi	r30, 0xF4	; 244
     778:	fe 4f       	sbci	r31, 0xFE	; 254
     77a:	84 e0       	ldi	r24, 0x04	; 4
     77c:	80 83       	st	Z, r24
     77e:	43 c0       	rjmp	.+134    	; 0x806 <output_for_user_pass_reset+0x114>
     780:	85 33       	cpi	r24, 0x35	; 53
     782:	61 f4       	brne	.+24     	; 0x79c <output_for_user_pass_reset+0xaa>
     784:	81 e1       	ldi	r24, 0x11	; 17
     786:	86 0f       	add	r24, r22
     788:	f3 dd       	rcall	.-1050   	; 0x370 <LCD_Cursor>
     78a:	85 e3       	ldi	r24, 0x35	; 53
     78c:	08 de       	rcall	.-1008   	; 0x39e <LCD_WriteData>
     78e:	ec 2f       	mov	r30, r28
     790:	f0 e0       	ldi	r31, 0x00	; 0
     792:	e4 5f       	subi	r30, 0xF4	; 244
     794:	fe 4f       	sbci	r31, 0xFE	; 254
     796:	85 e0       	ldi	r24, 0x05	; 5
     798:	80 83       	st	Z, r24
     79a:	35 c0       	rjmp	.+106    	; 0x806 <output_for_user_pass_reset+0x114>
     79c:	86 33       	cpi	r24, 0x36	; 54
     79e:	61 f4       	brne	.+24     	; 0x7b8 <output_for_user_pass_reset+0xc6>
     7a0:	81 e1       	ldi	r24, 0x11	; 17
     7a2:	86 0f       	add	r24, r22
     7a4:	e5 dd       	rcall	.-1078   	; 0x370 <LCD_Cursor>
     7a6:	86 e3       	ldi	r24, 0x36	; 54
     7a8:	fa dd       	rcall	.-1036   	; 0x39e <LCD_WriteData>
     7aa:	ec 2f       	mov	r30, r28
     7ac:	f0 e0       	ldi	r31, 0x00	; 0
     7ae:	e4 5f       	subi	r30, 0xF4	; 244
     7b0:	fe 4f       	sbci	r31, 0xFE	; 254
     7b2:	86 e0       	ldi	r24, 0x06	; 6
     7b4:	80 83       	st	Z, r24
     7b6:	27 c0       	rjmp	.+78     	; 0x806 <output_for_user_pass_reset+0x114>
     7b8:	87 33       	cpi	r24, 0x37	; 55
     7ba:	61 f4       	brne	.+24     	; 0x7d4 <output_for_user_pass_reset+0xe2>
     7bc:	81 e1       	ldi	r24, 0x11	; 17
     7be:	86 0f       	add	r24, r22
     7c0:	d7 dd       	rcall	.-1106   	; 0x370 <LCD_Cursor>
     7c2:	87 e3       	ldi	r24, 0x37	; 55
     7c4:	ec dd       	rcall	.-1064   	; 0x39e <LCD_WriteData>
     7c6:	ec 2f       	mov	r30, r28
     7c8:	f0 e0       	ldi	r31, 0x00	; 0
     7ca:	e4 5f       	subi	r30, 0xF4	; 244
     7cc:	fe 4f       	sbci	r31, 0xFE	; 254
     7ce:	87 e0       	ldi	r24, 0x07	; 7
     7d0:	80 83       	st	Z, r24
     7d2:	19 c0       	rjmp	.+50     	; 0x806 <output_for_user_pass_reset+0x114>
     7d4:	88 33       	cpi	r24, 0x38	; 56
     7d6:	61 f4       	brne	.+24     	; 0x7f0 <output_for_user_pass_reset+0xfe>
     7d8:	81 e1       	ldi	r24, 0x11	; 17
     7da:	86 0f       	add	r24, r22
     7dc:	c9 dd       	rcall	.-1134   	; 0x370 <LCD_Cursor>
     7de:	88 e3       	ldi	r24, 0x38	; 56
     7e0:	de dd       	rcall	.-1092   	; 0x39e <LCD_WriteData>
     7e2:	ec 2f       	mov	r30, r28
     7e4:	f0 e0       	ldi	r31, 0x00	; 0
     7e6:	e4 5f       	subi	r30, 0xF4	; 244
     7e8:	fe 4f       	sbci	r31, 0xFE	; 254
     7ea:	88 e0       	ldi	r24, 0x08	; 8
     7ec:	80 83       	st	Z, r24
     7ee:	0b c0       	rjmp	.+22     	; 0x806 <output_for_user_pass_reset+0x114>
     7f0:	81 e1       	ldi	r24, 0x11	; 17
     7f2:	86 0f       	add	r24, r22
     7f4:	bd dd       	rcall	.-1158   	; 0x370 <LCD_Cursor>
     7f6:	89 e3       	ldi	r24, 0x39	; 57
     7f8:	d2 dd       	rcall	.-1116   	; 0x39e <LCD_WriteData>
     7fa:	ec 2f       	mov	r30, r28
     7fc:	f0 e0       	ldi	r31, 0x00	; 0
     7fe:	e4 5f       	subi	r30, 0xF4	; 244
     800:	fe 4f       	sbci	r31, 0xFE	; 254
     802:	89 e0       	ldi	r24, 0x09	; 9
     804:	80 83       	st	Z, r24
     806:	cf 91       	pop	r28
     808:	08 95       	ret

0000080a <generate_random_pass>:
     80a:	0f 93       	push	r16
     80c:	1f 93       	push	r17
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	90 d7       	rcall	.+3872   	; 0x1734 <srand>
     814:	8c d7       	rcall	.+3864   	; 0x172e <rand>
     816:	c4 e0       	ldi	r28, 0x04	; 4
     818:	d1 e0       	ldi	r29, 0x01	; 1
     81a:	0a e0       	ldi	r16, 0x0A	; 10
     81c:	10 e0       	ldi	r17, 0x00	; 0
     81e:	b8 01       	movw	r22, r16
     820:	0f d7       	rcall	.+3614   	; 0x1640 <__divmodhi4>
     822:	88 83       	st	Y, r24
     824:	84 d7       	rcall	.+3848   	; 0x172e <rand>
     826:	b8 01       	movw	r22, r16
     828:	0b d7       	rcall	.+3606   	; 0x1640 <__divmodhi4>
     82a:	89 83       	std	Y+1, r24	; 0x01
     82c:	80 d7       	rcall	.+3840   	; 0x172e <rand>
     82e:	b8 01       	movw	r22, r16
     830:	07 d7       	rcall	.+3598   	; 0x1640 <__divmodhi4>
     832:	8a 83       	std	Y+2, r24	; 0x02
     834:	7c d7       	rcall	.+3832   	; 0x172e <rand>
     836:	b8 01       	movw	r22, r16
     838:	03 d7       	rcall	.+3590   	; 0x1640 <__divmodhi4>
     83a:	8b 83       	std	Y+3, r24	; 0x03
     83c:	df 91       	pop	r29
     83e:	cf 91       	pop	r28
     840:	1f 91       	pop	r17
     842:	0f 91       	pop	r16
     844:	08 95       	ret

00000846 <Menu_Tick>:
}

void Menu_Tick(){
     846:	cf 93       	push	r28
     848:	df 93       	push	r29
		
		default:
		break;
	}
	//Transitions
	switch(menu_state){
     84a:	e0 91 1f 08 	lds	r30, 0x081F	; 0x80081f <menu_state>
     84e:	8e 2f       	mov	r24, r30
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	8a 30       	cpi	r24, 0x0A	; 10
     854:	91 05       	cpc	r25, r1
     856:	08 f0       	brcs	.+2      	; 0x85a <Menu_Tick+0x14>
     858:	fe c1       	rjmp	.+1020   	; 0xc56 <Menu_Tick+0x410>
     85a:	fc 01       	movw	r30, r24
     85c:	ea 5b       	subi	r30, 0xBA	; 186
     85e:	ff 4f       	sbci	r31, 0xFF	; 255
     860:	02 c7       	rjmp	.+3588   	; 0x1666 <__tablejump2__>
		case init_menu:
		//LCD_DisplayString(1, Disarmed_LCD_data);
		output_temp(received_value); //menu output with temp when disarmed
     862:	80 91 c1 07 	lds	r24, 0x07C1	; 0x8007c1 <received_value>
     866:	0b de       	rcall	.-1002   	; 0x47e <output_temp>
		menu_state = main_menu_disarmed;
     868:	82 e0       	ldi	r24, 0x02	; 2
     86a:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <menu_state>
		break;

		case main_menu_disarmed:
		keypad_val = GetKeypadKey();
     86e:	f3 c1       	rjmp	.+998    	; 0xc56 <Menu_Tick+0x410>
     870:	f7 dc       	rcall	.-1554   	; 0x260 <GetKeypadKey>
     872:	80 93 bf 07 	sts	0x07BF, r24	; 0x8007bf <keypad_val>
		PORTB = 0x00;
     876:	15 b8       	out	0x05, r1	; 5
		if(keypad_val == '\0' ){ //null stay here
     878:	80 91 bf 07 	lds	r24, 0x07BF	; 0x8007bf <keypad_val>
     87c:	81 11       	cpse	r24, r1
     87e:	07 c0       	rjmp	.+14     	; 0x88e <Menu_Tick+0x48>
			menu_state = main_menu_disarmed;
     880:	82 e0       	ldi	r24, 0x02	; 2
     882:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <menu_state>
			output_temp(received_value); //menu output with temp when disarmed
     886:	80 91 c1 07 	lds	r24, 0x07C1	; 0x8007c1 <received_value>
     88a:	f9 dd       	rcall	.-1038   	; 0x47e <output_temp>
     88c:	e4 c1       	rjmp	.+968    	; 0xc56 <Menu_Tick+0x410>
		}

		else if(keypad_val == 'A'){
     88e:	81 34       	cpi	r24, 0x41	; 65
     890:	c9 f4       	brne	.+50     	; 0x8c4 <Menu_Tick+0x7e>
			menu_state = arm_or_disarm;
     892:	83 e0       	ldi	r24, 0x03	; 3
     894:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <menu_state>
			LCD_DisplayString(1, PassKey_LCD_data);
     898:	60 e3       	ldi	r22, 0x30	; 48
     89a:	71 e0       	ldi	r23, 0x01	; 1
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	88 dd       	rcall	.-1264   	; 0x3b0 <LCD_DisplayString>
			mode = 0;
     8a0:	10 92 c0 07 	sts	0x07C0, r1	; 0x8007c0 <mode>
			pass_location = 0;
     8a4:	10 92 bc 07 	sts	0x07BC, r1	; 0x8007bc <pass_location>
			user_input[0] = NULL;
     8a8:	e8 e0       	ldi	r30, 0x08	; 8
     8aa:	f1 e0       	ldi	r31, 0x01	; 1
     8ac:	10 82       	st	Z, r1
			user_input[1] = NULL;
     8ae:	11 82       	std	Z+1, r1	; 0x01
			user_input[2] = NULL;
     8b0:	12 82       	std	Z+2, r1	; 0x02
			user_input[3] = NULL;
     8b2:	13 82       	std	Z+3, r1	; 0x03
			PassKey_LCD_data[16] = ' ';
     8b4:	e0 e3       	ldi	r30, 0x30	; 48
     8b6:	f1 e0       	ldi	r31, 0x01	; 1
     8b8:	80 e2       	ldi	r24, 0x20	; 32
     8ba:	80 8b       	std	Z+16, r24	; 0x10
			PassKey_LCD_data[17] = ' ';
     8bc:	81 8b       	std	Z+17, r24	; 0x11
			PassKey_LCD_data[18] = ' ';
     8be:	82 8b       	std	Z+18, r24	; 0x12
			PassKey_LCD_data[19] = ' ';
     8c0:	83 8b       	std	Z+19, r24	; 0x13
     8c2:	c9 c1       	rjmp	.+914    	; 0xc56 <Menu_Tick+0x410>
			
		}
		else if(keypad_val == 'B'){
     8c4:	82 34       	cpi	r24, 0x42	; 66
     8c6:	61 f4       	brne	.+24     	; 0x8e0 <Menu_Tick+0x9a>
			menu_state = reset_pass;
     8c8:	85 e0       	ldi	r24, 0x05	; 5
     8ca:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <menu_state>
			LCD_DisplayString(1, "* User Password or # Random Password");
     8ce:	66 e7       	ldi	r22, 0x76	; 118
     8d0:	71 e0       	ldi	r23, 0x01	; 1
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	6d dd       	rcall	.-1318   	; 0x3b0 <LCD_DisplayString>
			random_count = 0; //initialize to zero this count is for if a user decides to use a random passkey
     8d6:	10 92 be 07 	sts	0x07BE, r1	; 0x8007be <random_count+0x1>
     8da:	10 92 bd 07 	sts	0x07BD, r1	; 0x8007bd <random_count>
		}
		else{					//any other button stay 
			menu_state = main_menu_disarmed;
     8de:	bb c1       	rjmp	.+886    	; 0xc56 <Menu_Tick+0x410>
     8e0:	82 e0       	ldi	r24, 0x02	; 2
     8e2:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <menu_state>
		}
		break;

		case main_menu_armed:
		keypad_val = GetKeypadKey();
     8e6:	b7 c1       	rjmp	.+878    	; 0xc56 <Menu_Tick+0x410>
     8e8:	bb dc       	rcall	.-1674   	; 0x260 <GetKeypadKey>
     8ea:	80 93 bf 07 	sts	0x07BF, r24	; 0x8007bf <keypad_val>
		PORTB = 0xFF;
     8ee:	8f ef       	ldi	r24, 0xFF	; 255
     8f0:	85 b9       	out	0x05, r24	; 5
		menu_state = main_menu_armed;
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <menu_state>
		if(keypad_val == '\0' || keypad_val == 'B' || keypad_val == 'C' || keypad_val == 'D' ){ //stay here
     8f8:	80 91 bf 07 	lds	r24, 0x07BF	; 0x8007bf <keypad_val>
     8fc:	88 23       	and	r24, r24
     8fe:	21 f0       	breq	.+8      	; 0x908 <Menu_Tick+0xc2>
     900:	9e eb       	ldi	r25, 0xBE	; 190
     902:	98 0f       	add	r25, r24
			menu_state = main_menu_armed;
			LCD_DisplayString(1, "system is armed!");
     904:	93 30       	cpi	r25, 0x03	; 3
     906:	28 f4       	brcc	.+10     	; 0x912 <Menu_Tick+0xcc>
     908:	6b e9       	ldi	r22, 0x9B	; 155
     90a:	71 e0       	ldi	r23, 0x01	; 1
     90c:	81 e0       	ldi	r24, 0x01	; 1
		}
		else if(keypad_val == 'A'){ //enter passkey
     90e:	50 dd       	rcall	.-1376   	; 0x3b0 <LCD_DisplayString>
			menu_state = arm_or_disarm;
     910:	a2 c1       	rjmp	.+836    	; 0xc56 <Menu_Tick+0x410>
     912:	81 34       	cpi	r24, 0x41	; 65
     914:	c9 f4       	brne	.+50     	; 0x948 <Menu_Tick+0x102>
			LCD_DisplayString(1, PassKey_LCD_data);
     916:	83 e0       	ldi	r24, 0x03	; 3
     918:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <menu_state>
     91c:	60 e3       	ldi	r22, 0x30	; 48
     91e:	71 e0       	ldi	r23, 0x01	; 1
			mode = 0;
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	46 dd       	rcall	.-1396   	; 0x3b0 <LCD_DisplayString>
			pass_location = 0;
     924:	10 92 c0 07 	sts	0x07C0, r1	; 0x8007c0 <mode>
			user_input[0] = NULL;
     928:	10 92 bc 07 	sts	0x07BC, r1	; 0x8007bc <pass_location>
     92c:	e8 e0       	ldi	r30, 0x08	; 8
			user_input[1] = NULL;
     92e:	f1 e0       	ldi	r31, 0x01	; 1
			user_input[2] = NULL;
     930:	10 82       	st	Z, r1
			user_input[3] = NULL;
     932:	11 82       	std	Z+1, r1	; 0x01
			PassKey_LCD_data[16] = ' ';
     934:	12 82       	std	Z+2, r1	; 0x02
     936:	13 82       	std	Z+3, r1	; 0x03
			PassKey_LCD_data[17] = ' ';
			PassKey_LCD_data[18] = ' ';
     938:	e0 e3       	ldi	r30, 0x30	; 48
			PassKey_LCD_data[19] = ' ';
     93a:	f1 e0       	ldi	r31, 0x01	; 1
     93c:	80 e2       	ldi	r24, 0x20	; 32
		}
		else{						//some other invalid key is pressed
			menu_state = main_menu_armed;
			LCD_DisplayString(1, "system is armed!");
     93e:	80 8b       	std	Z+16, r24	; 0x10
     940:	81 8b       	std	Z+17, r24	; 0x11
     942:	82 8b       	std	Z+18, r24	; 0x12
     944:	83 8b       	std	Z+19, r24	; 0x13
     946:	87 c1       	rjmp	.+782    	; 0xc56 <Menu_Tick+0x410>
     948:	6b e9       	ldi	r22, 0x9B	; 155
		break;



		case arm_or_disarm:
		keypad_val = GetKeypadKey();
     94a:	71 e0       	ldi	r23, 0x01	; 1
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	30 dd       	rcall	.-1440   	; 0x3b0 <LCD_DisplayString>
     950:	82 c1       	rjmp	.+772    	; 0xc56 <Menu_Tick+0x410>
		if(keypad_val == '\0' || keypad_val == 'A' || keypad_val == 'B' || keypad_val == '*'|| keypad_val == '#'){ //null stay here
     952:	86 dc       	rcall	.-1780   	; 0x260 <GetKeypadKey>
     954:	80 93 bf 07 	sts	0x07BF, r24	; 0x8007bf <keypad_val>
     958:	88 23       	and	r24, r24
     95a:	41 f0       	breq	.+16     	; 0x96c <Menu_Tick+0x126>
     95c:	9f eb       	ldi	r25, 0xBF	; 191
     95e:	98 0f       	add	r25, r24
     960:	92 30       	cpi	r25, 0x02	; 2
     962:	20 f0       	brcs	.+8      	; 0x96c <Menu_Tick+0x126>
			menu_state = arm_or_disarm;
     964:	8a 32       	cpi	r24, 0x2A	; 42
     966:	11 f0       	breq	.+4      	; 0x96c <Menu_Tick+0x126>
     968:	83 32       	cpi	r24, 0x23	; 35
			LCD_DisplayString(1, PassKey_LCD_data);
     96a:	41 f4       	brne	.+16     	; 0x97c <Menu_Tick+0x136>
     96c:	83 e0       	ldi	r24, 0x03	; 3
     96e:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <menu_state>
     972:	60 e3       	ldi	r22, 0x30	; 48
     974:	71 e0       	ldi	r23, 0x01	; 1
		}
		else if(keypad_val == 'C'){  //go back to main menu
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	1b dd       	rcall	.-1482   	; 0x3b0 <LCD_DisplayString>
			if(ARM_DISARM == 0){
     97a:	6d c1       	rjmp	.+730    	; 0xc56 <Menu_Tick+0x410>
     97c:	83 34       	cpi	r24, 0x43	; 67
     97e:	61 f4       	brne	.+24     	; 0x998 <Menu_Tick+0x152>
				menu_state = main_menu_disarmed;
     980:	80 91 c2 07 	lds	r24, 0x07C2	; 0x8007c2 <ARM_DISARM>
     984:	81 11       	cpse	r24, r1
     986:	04 c0       	rjmp	.+8      	; 0x990 <Menu_Tick+0x14a>
			}
			else{
				menu_state = main_menu_armed;
     988:	82 e0       	ldi	r24, 0x02	; 2
     98a:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <menu_state>
     98e:	63 c1       	rjmp	.+710    	; 0xc56 <Menu_Tick+0x410>
			}
			
		}
		else if(keypad_val == 'D'){ //enter button check password
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <menu_state>
			if(check_password() == 1 && mode == 0){ //password correct
     996:	5f c1       	rjmp	.+702    	; 0xc56 <Menu_Tick+0x410>
     998:	84 34       	cpi	r24, 0x44	; 68
     99a:	09 f0       	breq	.+2      	; 0x99e <Menu_Tick+0x158>
     99c:	7d c0       	rjmp	.+250    	; 0xa98 <Menu_Tick+0x252>
     99e:	84 de       	rcall	.-760    	; 0x6a8 <check_password>
     9a0:	81 30       	cpi	r24, 0x01	; 1
     9a2:	91 05       	cpc	r25, r1
     9a4:	09 f0       	breq	.+2      	; 0x9a8 <Menu_Tick+0x162>
     9a6:	54 c1       	rjmp	.+680    	; 0xc50 <Menu_Tick+0x40a>
     9a8:	80 91 c0 07 	lds	r24, 0x07C0	; 0x8007c0 <mode>
				if(ARM_DISARM == 0){
     9ac:	81 11       	cpse	r24, r1
     9ae:	20 c0       	rjmp	.+64     	; 0x9f0 <Menu_Tick+0x1aa>
     9b0:	80 91 c2 07 	lds	r24, 0x07C2	; 0x8007c2 <ARM_DISARM>
					ARM_DISARM = 1;
     9b4:	81 11       	cpse	r24, r1
     9b6:	06 c0       	rjmp	.+12     	; 0x9c4 <Menu_Tick+0x17e>
					menu_state = main_menu_armed;
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	80 93 c2 07 	sts	0x07C2, r24	; 0x8007c2 <ARM_DISARM>

				}
				else{				//system was armed now unarmed
					ARM_DISARM = 0;
     9be:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <menu_state>
					menu_state = main_menu_disarmed;
     9c2:	49 c1       	rjmp	.+658    	; 0xc56 <Menu_Tick+0x410>
     9c4:	10 92 c2 07 	sts	0x07C2, r1	; 0x8007c2 <ARM_DISARM>
     9c8:	82 e0       	ldi	r24, 0x02	; 2
				}

			}
			else if((check_password() == 0 && mode == 0)){
     9ca:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <menu_state>
     9ce:	43 c1       	rjmp	.+646    	; 0xc56 <Menu_Tick+0x410>
     9d0:	80 91 c0 07 	lds	r24, 0x07C0	; 0x8007c0 <mode>
				if(ARM_DISARM == 0){
     9d4:	81 11       	cpse	r24, r1
     9d6:	1f c0       	rjmp	.+62     	; 0xa16 <Menu_Tick+0x1d0>
					menu_state = main_menu_disarmed;
     9d8:	80 91 c2 07 	lds	r24, 0x07C2	; 0x8007c2 <ARM_DISARM>
     9dc:	81 11       	cpse	r24, r1
				}
				else{
					menu_state = main_menu_armed;
     9de:	04 c0       	rjmp	.+8      	; 0x9e8 <Menu_Tick+0x1a2>
     9e0:	82 e0       	ldi	r24, 0x02	; 2
     9e2:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <menu_state>
				}
			}
			else if((check_password() == 1 && mode == 1)){
     9e6:	37 c1       	rjmp	.+622    	; 0xc56 <Menu_Tick+0x410>
     9e8:	81 e0       	ldi	r24, 0x01	; 1
				LCD_DisplayString(1, "Enter 4 Numbers");
     9ea:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <menu_state>
     9ee:	33 c1       	rjmp	.+614    	; 0xc56 <Menu_Tick+0x410>
     9f0:	81 30       	cpi	r24, 0x01	; 1
				LCD_Cursor(33); //move cursor off screen
     9f2:	e9 f4       	brne	.+58     	; 0xa2e <Menu_Tick+0x1e8>
     9f4:	6c ea       	ldi	r22, 0xAC	; 172
     9f6:	71 e0       	ldi	r23, 0x01	; 1
				//LCD_Cursor(17);
				//LCD_WriteData(1 + '0');
				menu_state = user_pass;
     9f8:	db dc       	rcall	.-1610   	; 0x3b0 <LCD_DisplayString>
     9fa:	81 e2       	ldi	r24, 0x21	; 33
     9fc:	b9 dc       	rcall	.-1678   	; 0x370 <LCD_Cursor>
				pass_location = 0;
     9fe:	87 e0       	ldi	r24, 0x07	; 7
     a00:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <menu_state>
				user_input[0] = NULL;
     a04:	10 92 bc 07 	sts	0x07BC, r1	; 0x8007bc <pass_location>
				user_input[1] = NULL;
				user_input[2] = NULL;
     a08:	e8 e0       	ldi	r30, 0x08	; 8
				user_input[3] = NULL;
     a0a:	f1 e0       	ldi	r31, 0x01	; 1
     a0c:	10 82       	st	Z, r1

			}
			else if((check_password() == 0 && mode == 1)){
     a0e:	11 82       	std	Z+1, r1	; 0x01
     a10:	12 82       	std	Z+2, r1	; 0x02
     a12:	13 82       	std	Z+3, r1	; 0x03
     a14:	20 c1       	rjmp	.+576    	; 0xc56 <Menu_Tick+0x410>
				menu_state = reset_pass;
     a16:	80 91 c0 07 	lds	r24, 0x07C0	; 0x8007c0 <mode>
     a1a:	81 30       	cpi	r24, 0x01	; 1
				LCD_DisplayString(1, "* User Password or # Random Password");
     a1c:	91 f5       	brne	.+100    	; 0xa82 <Menu_Tick+0x23c>
     a1e:	85 e0       	ldi	r24, 0x05	; 5
     a20:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <menu_state>
			}
			else if((check_password() == 1 && mode == 2)){
     a24:	66 e7       	ldi	r22, 0x76	; 118
     a26:	71 e0       	ldi	r23, 0x01	; 1
     a28:	81 e0       	ldi	r24, 0x01	; 1
				menu_state = random_pass;
     a2a:	c2 dc       	rcall	.-1660   	; 0x3b0 <LCD_DisplayString>
     a2c:	14 c1       	rjmp	.+552    	; 0xc56 <Menu_Tick+0x410>
				//call function to generate pass key
				generate_random_pass(random_count);
     a2e:	80 91 c0 07 	lds	r24, 0x07C0	; 0x8007c0 <mode>
     a32:	82 30       	cpi	r24, 0x02	; 2
				LCD_DisplayString(1, "Random passkey");
     a34:	09 f0       	breq	.+2      	; 0xa38 <Menu_Tick+0x1f2>
     a36:	0f c1       	rjmp	.+542    	; 0xc56 <Menu_Tick+0x410>
				LCD_Cursor(17);
     a38:	89 e0       	ldi	r24, 0x09	; 9
				LCD_WriteData(generated_pass[0] + '0');
     a3a:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <menu_state>
     a3e:	80 91 bd 07 	lds	r24, 0x07BD	; 0x8007bd <random_count>
				LCD_Cursor(18);
     a42:	90 91 be 07 	lds	r25, 0x07BE	; 0x8007be <random_count+0x1>
     a46:	e1 de       	rcall	.-574    	; 0x80a <generate_random_pass>
				LCD_WriteData(generated_pass[1] + '0');
     a48:	6c eb       	ldi	r22, 0xBC	; 188
     a4a:	71 e0       	ldi	r23, 0x01	; 1
     a4c:	81 e0       	ldi	r24, 0x01	; 1
				LCD_Cursor(19);
     a4e:	b0 dc       	rcall	.-1696   	; 0x3b0 <LCD_DisplayString>
     a50:	81 e1       	ldi	r24, 0x11	; 17
				LCD_WriteData(generated_pass[2] + '0');
     a52:	8e dc       	rcall	.-1764   	; 0x370 <LCD_Cursor>
     a54:	c4 e0       	ldi	r28, 0x04	; 4
     a56:	d1 e0       	ldi	r29, 0x01	; 1
     a58:	88 81       	ld	r24, Y
				LCD_Cursor(20);
     a5a:	80 5d       	subi	r24, 0xD0	; 208
     a5c:	a0 dc       	rcall	.-1728   	; 0x39e <LCD_WriteData>
     a5e:	82 e1       	ldi	r24, 0x12	; 18
				LCD_WriteData(generated_pass[3] + '0');
     a60:	87 dc       	rcall	.-1778   	; 0x370 <LCD_Cursor>
     a62:	89 81       	ldd	r24, Y+1	; 0x01
     a64:	80 5d       	subi	r24, 0xD0	; 208
				LCD_Cursor(33); //position off screen 
     a66:	9b dc       	rcall	.-1738   	; 0x39e <LCD_WriteData>
     a68:	83 e1       	ldi	r24, 0x13	; 19
     a6a:	82 dc       	rcall	.-1788   	; 0x370 <LCD_Cursor>
			}
			else if((check_password() == 0 && mode == 2)){
     a6c:	8a 81       	ldd	r24, Y+2	; 0x02
     a6e:	80 5d       	subi	r24, 0xD0	; 208
				menu_state = reset_pass;
     a70:	96 dc       	rcall	.-1748   	; 0x39e <LCD_WriteData>
     a72:	84 e1       	ldi	r24, 0x14	; 20
     a74:	7d dc       	rcall	.-1798   	; 0x370 <LCD_Cursor>
				LCD_DisplayString(1, "* User Password or # Random Password");
     a76:	8b 81       	ldd	r24, Y+3	; 0x03
     a78:	80 5d       	subi	r24, 0xD0	; 208
     a7a:	91 dc       	rcall	.-1758   	; 0x39e <LCD_WriteData>
     a7c:	81 e2       	ldi	r24, 0x21	; 33
     a7e:	78 dc       	rcall	.-1808   	; 0x370 <LCD_Cursor>
     a80:	ea c0       	rjmp	.+468    	; 0xc56 <Menu_Tick+0x410>
			}

		}
		else{					//0-9 pressed 
			menu_state = pass_enter;
     a82:	82 30       	cpi	r24, 0x02	; 2
     a84:	09 f0       	breq	.+2      	; 0xa88 <Menu_Tick+0x242>
			if(pass_location < 4){
     a86:	e7 c0       	rjmp	.+462    	; 0xc56 <Menu_Tick+0x410>
     a88:	85 e0       	ldi	r24, 0x05	; 5
     a8a:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <menu_state>
     a8e:	66 e7       	ldi	r22, 0x76	; 118
				enter_c_string(keypad_val, pass_location);
     a90:	71 e0       	ldi	r23, 0x01	; 1
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	8d dc       	rcall	.-1766   	; 0x3b0 <LCD_DisplayString>
				++pass_location;
     a96:	df c0       	rjmp	.+446    	; 0xc56 <Menu_Tick+0x410>
     a98:	94 e0       	ldi	r25, 0x04	; 4
     a9a:	90 93 1f 08 	sts	0x081F, r25	; 0x80081f <menu_state>
     a9e:	60 91 bc 07 	lds	r22, 0x07BC	; 0x8007bc <pass_location>
		}

		break;

		case pass_enter:
		keypad_val = GetKeypadKey();
     aa2:	64 30       	cpi	r22, 0x04	; 4
     aa4:	08 f0       	brcs	.+2      	; 0xaa8 <Menu_Tick+0x262>
     aa6:	d7 c0       	rjmp	.+430    	; 0xc56 <Menu_Tick+0x410>
     aa8:	70 e0       	ldi	r23, 0x00	; 0
		if(keypad_val == '\0'){
     aaa:	09 dd       	rcall	.-1518   	; 0x4be <enter_c_string>
     aac:	80 91 bc 07 	lds	r24, 0x07BC	; 0x8007bc <pass_location>
			menu_state = arm_or_disarm;
     ab0:	8f 5f       	subi	r24, 0xFF	; 255
     ab2:	80 93 bc 07 	sts	0x07BC, r24	; 0x8007bc <pass_location>
		}
		else{
			menu_state = pass_enter;
     ab6:	cf c0       	rjmp	.+414    	; 0xc56 <Menu_Tick+0x410>
     ab8:	d3 db       	rcall	.-2138   	; 0x260 <GetKeypadKey>
     aba:	80 93 bf 07 	sts	0x07BF, r24	; 0x8007bf <keypad_val>
		}
		break;

		case reset_pass:
		keypad_val = GetKeypadKey();
     abe:	81 11       	cpse	r24, r1
     ac0:	04 c0       	rjmp	.+8      	; 0xaca <Menu_Tick+0x284>
     ac2:	83 e0       	ldi	r24, 0x03	; 3
     ac4:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <menu_state>
		++random_count; 
     ac8:	c6 c0       	rjmp	.+396    	; 0xc56 <Menu_Tick+0x410>
     aca:	84 e0       	ldi	r24, 0x04	; 4
     acc:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <menu_state>
     ad0:	c2 c0       	rjmp	.+388    	; 0xc56 <Menu_Tick+0x410>
     ad2:	c6 db       	rcall	.-2164   	; 0x260 <GetKeypadKey>
     ad4:	80 93 bf 07 	sts	0x07BF, r24	; 0x8007bf <keypad_val>
     ad8:	20 91 bd 07 	lds	r18, 0x07BD	; 0x8007bd <random_count>
		if(keypad_val == '\0' || keypad_val == 'A'|| keypad_val == 'B' || keypad_val == 'D'){
     adc:	30 91 be 07 	lds	r19, 0x07BE	; 0x8007be <random_count+0x1>
     ae0:	2f 5f       	subi	r18, 0xFF	; 255
     ae2:	3f 4f       	sbci	r19, 0xFF	; 255
     ae4:	30 93 be 07 	sts	0x07BE, r19	; 0x8007be <random_count+0x1>
     ae8:	20 93 bd 07 	sts	0x07BD, r18	; 0x8007bd <random_count>
			menu_state = reset_pass;
     aec:	88 23       	and	r24, r24
     aee:	31 f0       	breq	.+12     	; 0xafc <Menu_Tick+0x2b6>
     af0:	9f eb       	ldi	r25, 0xBF	; 191
		}
		else if(keypad_val == 'C'){
     af2:	98 0f       	add	r25, r24
     af4:	92 30       	cpi	r25, 0x02	; 2
			if(ARM_DISARM == 0){
     af6:	10 f0       	brcs	.+4      	; 0xafc <Menu_Tick+0x2b6>
     af8:	84 34       	cpi	r24, 0x44	; 68
     afa:	21 f4       	brne	.+8      	; 0xb04 <Menu_Tick+0x2be>
     afc:	85 e0       	ldi	r24, 0x05	; 5
				menu_state = main_menu_disarmed;
     afe:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <menu_state>
     b02:	a9 c0       	rjmp	.+338    	; 0xc56 <Menu_Tick+0x410>
     b04:	83 34       	cpi	r24, 0x43	; 67
			}
			else{
				menu_state = main_menu_armed;
     b06:	61 f4       	brne	.+24     	; 0xb20 <Menu_Tick+0x2da>
     b08:	80 91 c2 07 	lds	r24, 0x07C2	; 0x8007c2 <ARM_DISARM>
     b0c:	81 11       	cpse	r24, r1
			}
		}
		else if(keypad_val == '*'){
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <Menu_Tick+0x2d2>
     b10:	82 e0       	ldi	r24, 0x02	; 2
			menu_state = arm_or_disarm;
     b12:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <menu_state>
     b16:	9f c0       	rjmp	.+318    	; 0xc56 <Menu_Tick+0x410>
			pass_location = 0;
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <menu_state>
			user_input[0] = NULL;
     b1e:	9b c0       	rjmp	.+310    	; 0xc56 <Menu_Tick+0x410>
     b20:	8a 32       	cpi	r24, 0x2A	; 42
			user_input[1] = NULL;
     b22:	b1 f4       	brne	.+44     	; 0xb50 <Menu_Tick+0x30a>
			user_input[2] = NULL;
     b24:	83 e0       	ldi	r24, 0x03	; 3
			user_input[3] = NULL;
     b26:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <menu_state>
			PassKey_LCD_data[16] = ' ';
     b2a:	10 92 bc 07 	sts	0x07BC, r1	; 0x8007bc <pass_location>
     b2e:	e8 e0       	ldi	r30, 0x08	; 8
			PassKey_LCD_data[17] = ' ';
     b30:	f1 e0       	ldi	r31, 0x01	; 1
			PassKey_LCD_data[18] = ' ';
     b32:	10 82       	st	Z, r1
			PassKey_LCD_data[19] = ' ';
     b34:	11 82       	std	Z+1, r1	; 0x01
			mode = 1;
     b36:	12 82       	std	Z+2, r1	; 0x02
     b38:	13 82       	std	Z+3, r1	; 0x03
     b3a:	e0 e3       	ldi	r30, 0x30	; 48
		}
		else if(keypad_val == '#'){
     b3c:	f1 e0       	ldi	r31, 0x01	; 1
     b3e:	80 e2       	ldi	r24, 0x20	; 32
			menu_state = arm_or_disarm;
     b40:	80 8b       	std	Z+16, r24	; 0x10
     b42:	81 8b       	std	Z+17, r24	; 0x11
     b44:	82 8b       	std	Z+18, r24	; 0x12
			pass_location = 0;
     b46:	83 8b       	std	Z+19, r24	; 0x13
     b48:	81 e0       	ldi	r24, 0x01	; 1
			user_input[0] = NULL;
     b4a:	80 93 c0 07 	sts	0x07C0, r24	; 0x8007c0 <mode>
     b4e:	83 c0       	rjmp	.+262    	; 0xc56 <Menu_Tick+0x410>
			user_input[1] = NULL;
     b50:	83 32       	cpi	r24, 0x23	; 35
			user_input[2] = NULL;
     b52:	b1 f4       	brne	.+44     	; 0xb80 <Menu_Tick+0x33a>
			user_input[3] = NULL;
     b54:	83 e0       	ldi	r24, 0x03	; 3
			PassKey_LCD_data[16] = ' ';
     b56:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <menu_state>
     b5a:	10 92 bc 07 	sts	0x07BC, r1	; 0x8007bc <pass_location>
			PassKey_LCD_data[17] = ' ';
     b5e:	e8 e0       	ldi	r30, 0x08	; 8
			PassKey_LCD_data[18] = ' ';
     b60:	f1 e0       	ldi	r31, 0x01	; 1
			PassKey_LCD_data[19] = ' ';
     b62:	10 82       	st	Z, r1
			mode = 2;
     b64:	11 82       	std	Z+1, r1	; 0x01
     b66:	12 82       	std	Z+2, r1	; 0x02
     b68:	13 82       	std	Z+3, r1	; 0x03
     b6a:	e0 e3       	ldi	r30, 0x30	; 48
		}
		else{ //invalid input stay
			menu_state = reset_pass;
     b6c:	f1 e0       	ldi	r31, 0x01	; 1
     b6e:	80 e2       	ldi	r24, 0x20	; 32
     b70:	80 8b       	std	Z+16, r24	; 0x10
     b72:	81 8b       	std	Z+17, r24	; 0x11

		case choice:
		break;

		case user_pass:
		keypad_val = GetKeypadKey();
     b74:	82 8b       	std	Z+18, r24	; 0x12
     b76:	83 8b       	std	Z+19, r24	; 0x13
     b78:	82 e0       	ldi	r24, 0x02	; 2
     b7a:	80 93 c0 07 	sts	0x07C0, r24	; 0x8007c0 <mode>
		if(keypad_val == '\0' || keypad_val == 'A'|| keypad_val == 'B' || keypad_val == 'D' || keypad_val == '*' || keypad_val == '#'){
     b7e:	6b c0       	rjmp	.+214    	; 0xc56 <Menu_Tick+0x410>
     b80:	85 e0       	ldi	r24, 0x05	; 5
     b82:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <menu_state>
     b86:	67 c0       	rjmp	.+206    	; 0xc56 <Menu_Tick+0x410>
     b88:	6b db       	rcall	.-2346   	; 0x260 <GetKeypadKey>
     b8a:	80 93 bf 07 	sts	0x07BF, r24	; 0x8007bf <keypad_val>
			menu_state = user_pass;
     b8e:	88 23       	and	r24, r24
     b90:	51 f0       	breq	.+20     	; 0xba6 <Menu_Tick+0x360>
     b92:	9f eb       	ldi	r25, 0xBF	; 191
     b94:	98 0f       	add	r25, r24
		}
		else if(keypad_val == 'C'){
     b96:	92 30       	cpi	r25, 0x02	; 2
     b98:	30 f0       	brcs	.+12     	; 0xba6 <Menu_Tick+0x360>
			menu_state = main_menu_disarmed;
     b9a:	84 34       	cpi	r24, 0x44	; 68
     b9c:	21 f0       	breq	.+8      	; 0xba6 <Menu_Tick+0x360>
     b9e:	8a 32       	cpi	r24, 0x2A	; 42
     ba0:	11 f0       	breq	.+4      	; 0xba6 <Menu_Tick+0x360>
		} 
		else{
		
			if(pass_location == 4){
     ba2:	83 32       	cpi	r24, 0x23	; 35
     ba4:	21 f4       	brne	.+8      	; 0xbae <Menu_Tick+0x368>
     ba6:	87 e0       	ldi	r24, 0x07	; 7
				menu_state = main_menu_disarmed;
     ba8:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <menu_state>
     bac:	54 c0       	rjmp	.+168    	; 0xc56 <Menu_Tick+0x410>
				pass_location = 0;
     bae:	83 34       	cpi	r24, 0x43	; 67
     bb0:	21 f4       	brne	.+8      	; 0xbba <Menu_Tick+0x374>
     bb2:	82 e0       	ldi	r24, 0x02	; 2
			}

			else{
				menu_state = user_pass_wait; //valid key pressed
     bb4:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <menu_state>
     bb8:	4e c0       	rjmp	.+156    	; 0xc56 <Menu_Tick+0x410>
				output_for_user_pass_reset(keypad_val, pass_location);
     bba:	60 91 bc 07 	lds	r22, 0x07BC	; 0x8007bc <pass_location>
				++pass_location;
     bbe:	64 30       	cpi	r22, 0x04	; 4
     bc0:	31 f4       	brne	.+12     	; 0xbce <Menu_Tick+0x388>
     bc2:	82 e0       	ldi	r24, 0x02	; 2
     bc4:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <menu_state>
     bc8:	10 92 bc 07 	sts	0x07BC, r1	; 0x8007bc <pass_location>
		}

		break;

		case user_pass_wait:
		keypad_val = GetKeypadKey();
     bcc:	44 c0       	rjmp	.+136    	; 0xc56 <Menu_Tick+0x410>
     bce:	98 e0       	ldi	r25, 0x08	; 8
     bd0:	90 93 1f 08 	sts	0x081F, r25	; 0x80081f <menu_state>
		if(keypad_val == '\0'){
     bd4:	8e dd       	rcall	.-1252   	; 0x6f2 <output_for_user_pass_reset>
			menu_state = user_pass;
     bd6:	80 91 bc 07 	lds	r24, 0x07BC	; 0x8007bc <pass_location>
     bda:	8f 5f       	subi	r24, 0xFF	; 255
     bdc:	80 93 bc 07 	sts	0x07BC, r24	; 0x8007bc <pass_location>
		}
		else{
			menu_state = user_pass_wait;
     be0:	3a c0       	rjmp	.+116    	; 0xc56 <Menu_Tick+0x410>
     be2:	3e db       	rcall	.-2436   	; 0x260 <GetKeypadKey>
     be4:	80 93 bf 07 	sts	0x07BF, r24	; 0x8007bf <keypad_val>
		}
		break;

		case random_pass:
		keypad_val = GetKeypadKey();
     be8:	81 11       	cpse	r24, r1
     bea:	04 c0       	rjmp	.+8      	; 0xbf4 <Menu_Tick+0x3ae>
     bec:	87 e0       	ldi	r24, 0x07	; 7
		if(keypad_val == '\0'){
     bee:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <menu_state>
			menu_state = random_pass;
     bf2:	31 c0       	rjmp	.+98     	; 0xc56 <Menu_Tick+0x410>
     bf4:	88 e0       	ldi	r24, 0x08	; 8
     bf6:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <menu_state>
		}
		else if(keypad_val == '#'){ //user accepted new passkey
     bfa:	2d c0       	rjmp	.+90     	; 0xc56 <Menu_Tick+0x410>
     bfc:	31 db       	rcall	.-2462   	; 0x260 <GetKeypadKey>
			current_pass[0] = generated_pass[0];
     bfe:	80 93 bf 07 	sts	0x07BF, r24	; 0x8007bf <keypad_val>
     c02:	81 11       	cpse	r24, r1
     c04:	04 c0       	rjmp	.+8      	; 0xc0e <Menu_Tick+0x3c8>
     c06:	89 e0       	ldi	r24, 0x09	; 9
     c08:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <menu_state>
			current_pass[1] = generated_pass[1];
     c0c:	24 c0       	rjmp	.+72     	; 0xc56 <Menu_Tick+0x410>
     c0e:	83 32       	cpi	r24, 0x23	; 35
     c10:	a9 f4       	brne	.+42     	; 0xc3c <Menu_Tick+0x3f6>
			current_pass[2] = generated_pass[2];
     c12:	ec e0       	ldi	r30, 0x0C	; 12
     c14:	f1 e0       	ldi	r31, 0x01	; 1
     c16:	a4 e0       	ldi	r26, 0x04	; 4
     c18:	b1 e0       	ldi	r27, 0x01	; 1
			current_pass[3] = generated_pass[3];
     c1a:	8c 91       	ld	r24, X
     c1c:	80 83       	st	Z, r24
     c1e:	11 96       	adiw	r26, 0x01	; 1
			menu_state = main_menu_disarmed;
     c20:	8c 91       	ld	r24, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	81 83       	std	Z+1, r24	; 0x01
     c26:	12 96       	adiw	r26, 0x02	; 2
		}
		else if(keypad_val == 'C'){ //user did not accept new passkey
     c28:	8c 91       	ld	r24, X
     c2a:	12 97       	sbiw	r26, 0x02	; 2
			menu_state = main_menu_disarmed;
     c2c:	82 83       	std	Z+2, r24	; 0x02
     c2e:	13 96       	adiw	r26, 0x03	; 3
     c30:	8c 91       	ld	r24, X
     c32:	83 83       	std	Z+3, r24	; 0x03
		}
		else{						//else some other invalid key is pressed do nothing
			menu_state = random_pass;
     c34:	82 e0       	ldi	r24, 0x02	; 2
     c36:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <menu_state>
		
		default:
		break;
	}

}
     c3a:	0d c0       	rjmp	.+26     	; 0xc56 <Menu_Tick+0x410>
					ARM_DISARM = 0;
					menu_state = main_menu_disarmed;
				}

			}
			else if((check_password() == 0 && mode == 0)){
     c3c:	83 34       	cpi	r24, 0x43	; 67
     c3e:	21 f4       	brne	.+8      	; 0xc48 <Menu_Tick+0x402>
     c40:	82 e0       	ldi	r24, 0x02	; 2
		
		default:
		break;
	}

}
     c42:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <menu_state>
     c46:	07 c0       	rjmp	.+14     	; 0xc56 <Menu_Tick+0x410>
     c48:	89 e0       	ldi	r24, 0x09	; 9
     c4a:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <menu_state>
     c4e:	03 c0       	rjmp	.+6      	; 0xc56 <Menu_Tick+0x410>
     c50:	89 2b       	or	r24, r25
     c52:	09 f4       	brne	.+2      	; 0xc56 <Menu_Tick+0x410>
     c54:	bd ce       	rjmp	.-646    	; 0x9d0 <Menu_Tick+0x18a>
     c56:	df 91       	pop	r29
     c58:	cf 91       	pop	r28
     c5a:	08 95       	ret

00000c5c <MenuSecTask>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//menu FSM
enum MENUState {init_menu, main_menu_armed, main_menu_disarmed, arm_or_disarm, pass_enter, reset_pass, choice, user_pass, user_pass_wait, random_pass} menu_state;

void Menu_Init(){
	menu_state = init_menu;
     c5c:	10 92 1f 08 	sts	0x081F, r1	; 0x80081f <menu_state>
{
	Menu_Init();
	for(;;)
	{
		Menu_Tick();
		vTaskDelay(10);
     c60:	f2 dd       	rcall	.-1052   	; 0x846 <Menu_Tick>
     c62:	8a e0       	ldi	r24, 0x0A	; 10
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	2b d4       	rcall	.+2134   	; 0x14be <vTaskDelay>
     c68:	fb cf       	rjmp	.-10     	; 0xc60 <MenuSecTask+0x4>

00000c6a <MenuSecPulse>:
	}
}

void MenuSecPulse(unsigned portBASE_TYPE Priority)
{
     c6a:	af 92       	push	r10
     c6c:	bf 92       	push	r11
     c6e:	cf 92       	push	r12
     c70:	df 92       	push	r13
     c72:	ef 92       	push	r14
     c74:	ff 92       	push	r15
     c76:	0f 93       	push	r16
	xTaskCreate(MenuSecTask, (signed portCHAR *)"MenuSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
     c78:	a1 2c       	mov	r10, r1
     c7a:	b1 2c       	mov	r11, r1
     c7c:	c1 2c       	mov	r12, r1
     c7e:	d1 2c       	mov	r13, r1
     c80:	e1 2c       	mov	r14, r1
     c82:	f1 2c       	mov	r15, r1
     c84:	08 2f       	mov	r16, r24
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	45 e5       	ldi	r20, 0x55	; 85
     c8c:	50 e0       	ldi	r21, 0x00	; 0
     c8e:	6b ec       	ldi	r22, 0xCB	; 203
     c90:	71 e0       	ldi	r23, 0x01	; 1
     c92:	8e e2       	ldi	r24, 0x2E	; 46
     c94:	96 e0       	ldi	r25, 0x06	; 6
     c96:	a8 d1       	rcall	.+848    	; 0xfe8 <xTaskGenericCreate>
}
     c98:	0f 91       	pop	r16
     c9a:	ff 90       	pop	r15
     c9c:	ef 90       	pop	r14
     c9e:	df 90       	pop	r13
     ca0:	cf 90       	pop	r12
     ca2:	bf 90       	pop	r11
     ca4:	af 90       	pop	r10
     ca6:	08 95       	ret

00000ca8 <main>:


///////////////////////////////////////////////////////////////////////////////////////////////////////////////
int main(void) 
{ 
   DDRA = 0xF0; PORTA = 0x0F; // PC7..4 outputs init 0s, PC3..0 inputs init 1s FOR KEYPAD
     ca8:	80 ef       	ldi	r24, 0xF0	; 240
     caa:	81 b9       	out	0x01, r24	; 1
     cac:	8f e0       	ldi	r24, 0x0F	; 15
     cae:	82 b9       	out	0x02, r24	; 2
   DDRC = 0xFF; PORTC = 0x00; // set as output for lcd
     cb0:	8f ef       	ldi	r24, 0xFF	; 255
     cb2:	87 b9       	out	0x07, r24	; 7
     cb4:	18 b8       	out	0x08, r1	; 8
   DDRD = 0xFF; PORTD = 0x00; // LCD control lines
     cb6:	8a b9       	out	0x0a, r24	; 10
     cb8:	1b b8       	out	0x0b, r1	; 11
   DDRB = 0xFF; PORTB = 0x00;
     cba:	84 b9       	out	0x04, r24	; 4
  
   //Start Tasks  
   //TransSecPulse(1);
   //RecSecPulse(1);

   MenuSecPulse(1);
     cbc:	15 b8       	out	0x05, r1	; 5
    //RunSchedular 
   vTaskStartScheduler(); 
     cbe:	60 db       	rcall	.-2368   	; 0x380 <LCD_init>
     cc0:	81 e0       	ldi	r24, 0x01	; 1
 
   return 0; 
     cc2:	d3 df       	rcall	.-90     	; 0xc6a <MenuSecPulse>
     cc4:	85 d2       	rcall	.+1290   	; 0x11d0 <vTaskStartScheduler>
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	08 95       	ret

00000ccc <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     ccc:	31 e1       	ldi	r19, 0x11	; 17
     cce:	fc 01       	movw	r30, r24
     cd0:	30 83       	st	Z, r19
     cd2:	31 97       	sbiw	r30, 0x01	; 1
     cd4:	22 e2       	ldi	r18, 0x22	; 34
     cd6:	20 83       	st	Z, r18
     cd8:	31 97       	sbiw	r30, 0x01	; 1
     cda:	a3 e3       	ldi	r26, 0x33	; 51
     cdc:	a0 83       	st	Z, r26
     cde:	31 97       	sbiw	r30, 0x01	; 1
     ce0:	60 83       	st	Z, r22
     ce2:	31 97       	sbiw	r30, 0x01	; 1
     ce4:	70 83       	st	Z, r23
     ce6:	31 97       	sbiw	r30, 0x01	; 1
     ce8:	10 82       	st	Z, r1
     cea:	31 97       	sbiw	r30, 0x01	; 1
     cec:	60 e8       	ldi	r22, 0x80	; 128
     cee:	60 83       	st	Z, r22
     cf0:	31 97       	sbiw	r30, 0x01	; 1
     cf2:	10 82       	st	Z, r1
     cf4:	31 97       	sbiw	r30, 0x01	; 1
     cf6:	62 e0       	ldi	r22, 0x02	; 2
     cf8:	60 83       	st	Z, r22
     cfa:	31 97       	sbiw	r30, 0x01	; 1
     cfc:	63 e0       	ldi	r22, 0x03	; 3
     cfe:	60 83       	st	Z, r22
     d00:	31 97       	sbiw	r30, 0x01	; 1
     d02:	64 e0       	ldi	r22, 0x04	; 4
     d04:	60 83       	st	Z, r22
     d06:	31 97       	sbiw	r30, 0x01	; 1
     d08:	65 e0       	ldi	r22, 0x05	; 5
     d0a:	60 83       	st	Z, r22
     d0c:	31 97       	sbiw	r30, 0x01	; 1
     d0e:	66 e0       	ldi	r22, 0x06	; 6
     d10:	60 83       	st	Z, r22
     d12:	31 97       	sbiw	r30, 0x01	; 1
     d14:	67 e0       	ldi	r22, 0x07	; 7
     d16:	60 83       	st	Z, r22
     d18:	31 97       	sbiw	r30, 0x01	; 1
     d1a:	68 e0       	ldi	r22, 0x08	; 8
     d1c:	60 83       	st	Z, r22
     d1e:	31 97       	sbiw	r30, 0x01	; 1
     d20:	69 e0       	ldi	r22, 0x09	; 9
     d22:	60 83       	st	Z, r22
     d24:	31 97       	sbiw	r30, 0x01	; 1
     d26:	60 e1       	ldi	r22, 0x10	; 16
     d28:	60 83       	st	Z, r22
     d2a:	31 97       	sbiw	r30, 0x01	; 1
     d2c:	30 83       	st	Z, r19
     d2e:	31 97       	sbiw	r30, 0x01	; 1
     d30:	32 e1       	ldi	r19, 0x12	; 18
     d32:	30 83       	st	Z, r19
     d34:	31 97       	sbiw	r30, 0x01	; 1
     d36:	33 e1       	ldi	r19, 0x13	; 19
     d38:	30 83       	st	Z, r19
     d3a:	31 97       	sbiw	r30, 0x01	; 1
     d3c:	34 e1       	ldi	r19, 0x14	; 20
     d3e:	30 83       	st	Z, r19
     d40:	31 97       	sbiw	r30, 0x01	; 1
     d42:	35 e1       	ldi	r19, 0x15	; 21
     d44:	30 83       	st	Z, r19
     d46:	31 97       	sbiw	r30, 0x01	; 1
     d48:	36 e1       	ldi	r19, 0x16	; 22
     d4a:	30 83       	st	Z, r19
     d4c:	31 97       	sbiw	r30, 0x01	; 1
     d4e:	37 e1       	ldi	r19, 0x17	; 23
     d50:	30 83       	st	Z, r19
     d52:	31 97       	sbiw	r30, 0x01	; 1
     d54:	38 e1       	ldi	r19, 0x18	; 24
     d56:	30 83       	st	Z, r19
     d58:	31 97       	sbiw	r30, 0x01	; 1
     d5a:	39 e1       	ldi	r19, 0x19	; 25
     d5c:	30 83       	st	Z, r19
     d5e:	31 97       	sbiw	r30, 0x01	; 1
     d60:	30 e2       	ldi	r19, 0x20	; 32
     d62:	30 83       	st	Z, r19
     d64:	31 97       	sbiw	r30, 0x01	; 1
     d66:	31 e2       	ldi	r19, 0x21	; 33
     d68:	30 83       	st	Z, r19
     d6a:	31 97       	sbiw	r30, 0x01	; 1
     d6c:	20 83       	st	Z, r18
     d6e:	31 97       	sbiw	r30, 0x01	; 1
     d70:	23 e2       	ldi	r18, 0x23	; 35
     d72:	20 83       	st	Z, r18
     d74:	31 97       	sbiw	r30, 0x01	; 1
     d76:	40 83       	st	Z, r20
     d78:	31 97       	sbiw	r30, 0x01	; 1
     d7a:	50 83       	st	Z, r21
     d7c:	31 97       	sbiw	r30, 0x01	; 1
     d7e:	26 e2       	ldi	r18, 0x26	; 38
     d80:	20 83       	st	Z, r18
     d82:	31 97       	sbiw	r30, 0x01	; 1
     d84:	27 e2       	ldi	r18, 0x27	; 39
     d86:	20 83       	st	Z, r18
     d88:	31 97       	sbiw	r30, 0x01	; 1
     d8a:	28 e2       	ldi	r18, 0x28	; 40
     d8c:	20 83       	st	Z, r18
     d8e:	31 97       	sbiw	r30, 0x01	; 1
     d90:	29 e2       	ldi	r18, 0x29	; 41
     d92:	20 83       	st	Z, r18
     d94:	31 97       	sbiw	r30, 0x01	; 1
     d96:	20 e3       	ldi	r18, 0x30	; 48
     d98:	20 83       	st	Z, r18
     d9a:	31 97       	sbiw	r30, 0x01	; 1
     d9c:	21 e3       	ldi	r18, 0x31	; 49
     d9e:	20 83       	st	Z, r18
     da0:	86 97       	sbiw	r24, 0x26	; 38
     da2:	08 95       	ret

00000da4 <xPortStartScheduler>:
     da4:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     da8:	8c e7       	ldi	r24, 0x7C	; 124
     daa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     dae:	8b e0       	ldi	r24, 0x0B	; 11
     db0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     db4:	ef e6       	ldi	r30, 0x6F	; 111
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	82 60       	ori	r24, 0x02	; 2
     dbc:	80 83       	st	Z, r24
     dbe:	a0 91 1b 08 	lds	r26, 0x081B	; 0x80081b <pxCurrentTCB>
     dc2:	b0 91 1c 08 	lds	r27, 0x081C	; 0x80081c <pxCurrentTCB+0x1>
     dc6:	cd 91       	ld	r28, X+
     dc8:	cd bf       	out	0x3d, r28	; 61
     dca:	dd 91       	ld	r29, X+
     dcc:	de bf       	out	0x3e, r29	; 62
     dce:	ff 91       	pop	r31
     dd0:	ef 91       	pop	r30
     dd2:	df 91       	pop	r29
     dd4:	cf 91       	pop	r28
     dd6:	bf 91       	pop	r27
     dd8:	af 91       	pop	r26
     dda:	9f 91       	pop	r25
     ddc:	8f 91       	pop	r24
     dde:	7f 91       	pop	r23
     de0:	6f 91       	pop	r22
     de2:	5f 91       	pop	r21
     de4:	4f 91       	pop	r20
     de6:	3f 91       	pop	r19
     de8:	2f 91       	pop	r18
     dea:	1f 91       	pop	r17
     dec:	0f 91       	pop	r16
     dee:	ff 90       	pop	r15
     df0:	ef 90       	pop	r14
     df2:	df 90       	pop	r13
     df4:	cf 90       	pop	r12
     df6:	bf 90       	pop	r11
     df8:	af 90       	pop	r10
     dfa:	9f 90       	pop	r9
     dfc:	8f 90       	pop	r8
     dfe:	7f 90       	pop	r7
     e00:	6f 90       	pop	r6
     e02:	5f 90       	pop	r5
     e04:	4f 90       	pop	r4
     e06:	3f 90       	pop	r3
     e08:	2f 90       	pop	r2
     e0a:	1f 90       	pop	r1
     e0c:	0f 90       	pop	r0
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	0f 90       	pop	r0
     e12:	08 95       	ret
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	08 95       	ret

00000e18 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     e18:	0f 92       	push	r0
     e1a:	0f b6       	in	r0, 0x3f	; 63
     e1c:	f8 94       	cli
     e1e:	0f 92       	push	r0
     e20:	1f 92       	push	r1
     e22:	11 24       	eor	r1, r1
     e24:	2f 92       	push	r2
     e26:	3f 92       	push	r3
     e28:	4f 92       	push	r4
     e2a:	5f 92       	push	r5
     e2c:	6f 92       	push	r6
     e2e:	7f 92       	push	r7
     e30:	8f 92       	push	r8
     e32:	9f 92       	push	r9
     e34:	af 92       	push	r10
     e36:	bf 92       	push	r11
     e38:	cf 92       	push	r12
     e3a:	df 92       	push	r13
     e3c:	ef 92       	push	r14
     e3e:	ff 92       	push	r15
     e40:	0f 93       	push	r16
     e42:	1f 93       	push	r17
     e44:	2f 93       	push	r18
     e46:	3f 93       	push	r19
     e48:	4f 93       	push	r20
     e4a:	5f 93       	push	r21
     e4c:	6f 93       	push	r22
     e4e:	7f 93       	push	r23
     e50:	8f 93       	push	r24
     e52:	9f 93       	push	r25
     e54:	af 93       	push	r26
     e56:	bf 93       	push	r27
     e58:	cf 93       	push	r28
     e5a:	df 93       	push	r29
     e5c:	ef 93       	push	r30
     e5e:	ff 93       	push	r31
     e60:	a0 91 1b 08 	lds	r26, 0x081B	; 0x80081b <pxCurrentTCB>
     e64:	b0 91 1c 08 	lds	r27, 0x081C	; 0x80081c <pxCurrentTCB+0x1>
     e68:	0d b6       	in	r0, 0x3d	; 61
     e6a:	0d 92       	st	X+, r0
     e6c:	0e b6       	in	r0, 0x3e	; 62
	vTaskSwitchContext();
     e6e:	0d 92       	st	X+, r0
	portRESTORE_CONTEXT();
     e70:	7b d3       	rcall	.+1782   	; 0x1568 <vTaskSwitchContext>
     e72:	a0 91 1b 08 	lds	r26, 0x081B	; 0x80081b <pxCurrentTCB>
     e76:	b0 91 1c 08 	lds	r27, 0x081C	; 0x80081c <pxCurrentTCB+0x1>
     e7a:	cd 91       	ld	r28, X+
     e7c:	cd bf       	out	0x3d, r28	; 61
     e7e:	dd 91       	ld	r29, X+
     e80:	de bf       	out	0x3e, r29	; 62
     e82:	ff 91       	pop	r31
     e84:	ef 91       	pop	r30
     e86:	df 91       	pop	r29
     e88:	cf 91       	pop	r28
     e8a:	bf 91       	pop	r27
     e8c:	af 91       	pop	r26
     e8e:	9f 91       	pop	r25
     e90:	8f 91       	pop	r24
     e92:	7f 91       	pop	r23
     e94:	6f 91       	pop	r22
     e96:	5f 91       	pop	r21
     e98:	4f 91       	pop	r20
     e9a:	3f 91       	pop	r19
     e9c:	2f 91       	pop	r18
     e9e:	1f 91       	pop	r17
     ea0:	0f 91       	pop	r16
     ea2:	ff 90       	pop	r15
     ea4:	ef 90       	pop	r14
     ea6:	df 90       	pop	r13
     ea8:	cf 90       	pop	r12
     eaa:	bf 90       	pop	r11
     eac:	af 90       	pop	r10
     eae:	9f 90       	pop	r9
     eb0:	8f 90       	pop	r8
     eb2:	7f 90       	pop	r7
     eb4:	6f 90       	pop	r6
     eb6:	5f 90       	pop	r5
     eb8:	4f 90       	pop	r4
     eba:	3f 90       	pop	r3
     ebc:	2f 90       	pop	r2
     ebe:	1f 90       	pop	r1
     ec0:	0f 90       	pop	r0
     ec2:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
     ec4:	0f 90       	pop	r0
     ec6:	08 95       	ret

00000ec8 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     ec8:	0f 92       	push	r0
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	0f 92       	push	r0
     ed0:	1f 92       	push	r1
     ed2:	11 24       	eor	r1, r1
     ed4:	2f 92       	push	r2
     ed6:	3f 92       	push	r3
     ed8:	4f 92       	push	r4
     eda:	5f 92       	push	r5
     edc:	6f 92       	push	r6
     ede:	7f 92       	push	r7
     ee0:	8f 92       	push	r8
     ee2:	9f 92       	push	r9
     ee4:	af 92       	push	r10
     ee6:	bf 92       	push	r11
     ee8:	cf 92       	push	r12
     eea:	df 92       	push	r13
     eec:	ef 92       	push	r14
     eee:	ff 92       	push	r15
     ef0:	0f 93       	push	r16
     ef2:	1f 93       	push	r17
     ef4:	2f 93       	push	r18
     ef6:	3f 93       	push	r19
     ef8:	4f 93       	push	r20
     efa:	5f 93       	push	r21
     efc:	6f 93       	push	r22
     efe:	7f 93       	push	r23
     f00:	8f 93       	push	r24
     f02:	9f 93       	push	r25
     f04:	af 93       	push	r26
     f06:	bf 93       	push	r27
     f08:	cf 93       	push	r28
     f0a:	df 93       	push	r29
     f0c:	ef 93       	push	r30
     f0e:	ff 93       	push	r31
     f10:	a0 91 1b 08 	lds	r26, 0x081B	; 0x80081b <pxCurrentTCB>
     f14:	b0 91 1c 08 	lds	r27, 0x081C	; 0x80081c <pxCurrentTCB+0x1>
     f18:	0d b6       	in	r0, 0x3d	; 61
     f1a:	0d 92       	st	X+, r0
     f1c:	0e b6       	in	r0, 0x3e	; 62
	vTaskIncrementTick();
	vTaskSwitchContext();
     f1e:	0d 92       	st	X+, r0
     f20:	86 d1       	rcall	.+780    	; 0x122e <vTaskIncrementTick>
	portRESTORE_CONTEXT();
     f22:	22 d3       	rcall	.+1604   	; 0x1568 <vTaskSwitchContext>
     f24:	a0 91 1b 08 	lds	r26, 0x081B	; 0x80081b <pxCurrentTCB>
     f28:	b0 91 1c 08 	lds	r27, 0x081C	; 0x80081c <pxCurrentTCB+0x1>
     f2c:	cd 91       	ld	r28, X+
     f2e:	cd bf       	out	0x3d, r28	; 61
     f30:	dd 91       	ld	r29, X+
     f32:	de bf       	out	0x3e, r29	; 62
     f34:	ff 91       	pop	r31
     f36:	ef 91       	pop	r30
     f38:	df 91       	pop	r29
     f3a:	cf 91       	pop	r28
     f3c:	bf 91       	pop	r27
     f3e:	af 91       	pop	r26
     f40:	9f 91       	pop	r25
     f42:	8f 91       	pop	r24
     f44:	7f 91       	pop	r23
     f46:	6f 91       	pop	r22
     f48:	5f 91       	pop	r21
     f4a:	4f 91       	pop	r20
     f4c:	3f 91       	pop	r19
     f4e:	2f 91       	pop	r18
     f50:	1f 91       	pop	r17
     f52:	0f 91       	pop	r16
     f54:	ff 90       	pop	r15
     f56:	ef 90       	pop	r14
     f58:	df 90       	pop	r13
     f5a:	cf 90       	pop	r12
     f5c:	bf 90       	pop	r11
     f5e:	af 90       	pop	r10
     f60:	9f 90       	pop	r9
     f62:	8f 90       	pop	r8
     f64:	7f 90       	pop	r7
     f66:	6f 90       	pop	r6
     f68:	5f 90       	pop	r5
     f6a:	4f 90       	pop	r4
     f6c:	3f 90       	pop	r3
     f6e:	2f 90       	pop	r2
     f70:	1f 90       	pop	r1
     f72:	0f 90       	pop	r0
     f74:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
     f76:	0f 90       	pop	r0
     f78:	08 95       	ret

00000f7a <__vector_13>:
}
     f7a:	a6 df       	rcall	.-180    	; 0xec8 <vPortYieldFromTick>
     f7c:	18 95       	reti

00000f7e <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
     f7e:	cf 93       	push	r28
     f80:	df 93       	push	r29
     f82:	ec 01       	movw	r28, r24
     f84:	e0 91 1b 08 	lds	r30, 0x081B	; 0x80081b <pxCurrentTCB>
     f88:	f0 91 1c 08 	lds	r31, 0x081C	; 0x80081c <pxCurrentTCB+0x1>
     f8c:	93 83       	std	Z+3, r25	; 0x03
     f8e:	82 83       	std	Z+2, r24	; 0x02
     f90:	80 91 cb 07 	lds	r24, 0x07CB	; 0x8007cb <xTickCount>
     f94:	90 91 cc 07 	lds	r25, 0x07CC	; 0x8007cc <xTickCount+0x1>
     f98:	c8 17       	cp	r28, r24
     f9a:	d9 07       	cpc	r29, r25
     f9c:	60 f4       	brcc	.+24     	; 0xfb6 <prvAddCurrentTaskToDelayedList+0x38>
     f9e:	60 91 1b 08 	lds	r22, 0x081B	; 0x80081b <pxCurrentTCB>
     fa2:	70 91 1c 08 	lds	r23, 0x081C	; 0x80081c <pxCurrentTCB+0x1>
     fa6:	80 91 e1 07 	lds	r24, 0x07E1	; 0x8007e1 <pxOverflowDelayedTaskList>
     faa:	90 91 e2 07 	lds	r25, 0x07E2	; 0x8007e2 <pxOverflowDelayedTaskList+0x1>
     fae:	6e 5f       	subi	r22, 0xFE	; 254
     fb0:	7f 4f       	sbci	r23, 0xFF	; 255
     fb2:	f5 d8       	rcall	.-3606   	; 0x19e <vListInsert>
     fb4:	16 c0       	rjmp	.+44     	; 0xfe2 <prvAddCurrentTaskToDelayedList+0x64>
     fb6:	60 91 1b 08 	lds	r22, 0x081B	; 0x80081b <pxCurrentTCB>
     fba:	70 91 1c 08 	lds	r23, 0x081C	; 0x80081c <pxCurrentTCB+0x1>
     fbe:	80 91 e3 07 	lds	r24, 0x07E3	; 0x8007e3 <pxDelayedTaskList>
     fc2:	90 91 e4 07 	lds	r25, 0x07E4	; 0x8007e4 <pxDelayedTaskList+0x1>
     fc6:	6e 5f       	subi	r22, 0xFE	; 254
     fc8:	7f 4f       	sbci	r23, 0xFF	; 255
     fca:	e9 d8       	rcall	.-3630   	; 0x19e <vListInsert>
     fcc:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <xNextTaskUnblockTime>
     fd0:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <xNextTaskUnblockTime+0x1>
     fd4:	c8 17       	cp	r28, r24
     fd6:	d9 07       	cpc	r29, r25
     fd8:	20 f4       	brcc	.+8      	; 0xfe2 <prvAddCurrentTaskToDelayedList+0x64>
     fda:	d0 93 51 01 	sts	0x0151, r29	; 0x800151 <xNextTaskUnblockTime+0x1>
     fde:	c0 93 50 01 	sts	0x0150, r28	; 0x800150 <xNextTaskUnblockTime>
     fe2:	df 91       	pop	r29
     fe4:	cf 91       	pop	r28
     fe6:	08 95       	ret

00000fe8 <xTaskGenericCreate>:
     fe8:	4f 92       	push	r4
     fea:	5f 92       	push	r5
     fec:	6f 92       	push	r6
     fee:	7f 92       	push	r7
     ff0:	8f 92       	push	r8
     ff2:	9f 92       	push	r9
     ff4:	af 92       	push	r10
     ff6:	bf 92       	push	r11
     ff8:	cf 92       	push	r12
     ffa:	df 92       	push	r13
     ffc:	ef 92       	push	r14
     ffe:	ff 92       	push	r15
    1000:	0f 93       	push	r16
    1002:	1f 93       	push	r17
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	5c 01       	movw	r10, r24
    100a:	4b 01       	movw	r8, r22
    100c:	3a 01       	movw	r6, r20
    100e:	29 01       	movw	r4, r18
    1010:	81 e2       	ldi	r24, 0x21	; 33
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	64 d8       	rcall	.-3896   	; 0xde <pvPortMalloc>
    1016:	ec 01       	movw	r28, r24
    1018:	89 2b       	or	r24, r25
    101a:	09 f4       	brne	.+2      	; 0x101e <xTaskGenericCreate+0x36>
    101c:	c7 c0       	rjmp	.+398    	; 0x11ac <xTaskGenericCreate+0x1c4>
    101e:	c1 14       	cp	r12, r1
    1020:	d1 04       	cpc	r13, r1
    1022:	09 f0       	breq	.+2      	; 0x1026 <xTaskGenericCreate+0x3e>
    1024:	bf c0       	rjmp	.+382    	; 0x11a4 <xTaskGenericCreate+0x1bc>
    1026:	c3 01       	movw	r24, r6
    1028:	5a d8       	rcall	.-3916   	; 0xde <pvPortMalloc>
    102a:	98 8f       	std	Y+24, r25	; 0x18
    102c:	8f 8b       	std	Y+23, r24	; 0x17
    102e:	00 97       	sbiw	r24, 0x00	; 0
    1030:	19 f4       	brne	.+6      	; 0x1038 <xTaskGenericCreate+0x50>
    1032:	ce 01       	movw	r24, r28
    1034:	7a d8       	rcall	.-3852   	; 0x12a <vPortFree>
    1036:	ba c0       	rjmp	.+372    	; 0x11ac <xTaskGenericCreate+0x1c4>
    1038:	a3 01       	movw	r20, r6
    103a:	65 ea       	ldi	r22, 0xA5	; 165
    103c:	70 e0       	ldi	r23, 0x00	; 0
    103e:	85 d3       	rcall	.+1802   	; 0x174a <memset>
    1040:	93 01       	movw	r18, r6
    1042:	21 50       	subi	r18, 0x01	; 1
    1044:	31 09       	sbc	r19, r1
    1046:	8f 89       	ldd	r24, Y+23	; 0x17
    1048:	98 8d       	ldd	r25, Y+24	; 0x18
    104a:	3c 01       	movw	r6, r24
    104c:	62 0e       	add	r6, r18
    104e:	73 1e       	adc	r7, r19
    1050:	48 e0       	ldi	r20, 0x08	; 8
    1052:	50 e0       	ldi	r21, 0x00	; 0
    1054:	b4 01       	movw	r22, r8
    1056:	ce 01       	movw	r24, r28
    1058:	49 96       	adiw	r24, 0x19	; 25
    105a:	7e d3       	rcall	.+1788   	; 0x1758 <strncpy>
    105c:	18 a2       	std	Y+32, r1	; 0x20
    105e:	10 2f       	mov	r17, r16
    1060:	04 30       	cpi	r16, 0x04	; 4
    1062:	08 f0       	brcs	.+2      	; 0x1066 <xTaskGenericCreate+0x7e>
    1064:	13 e0       	ldi	r17, 0x03	; 3
    1066:	1e 8b       	std	Y+22, r17	; 0x16
    1068:	6e 01       	movw	r12, r28
    106a:	82 e0       	ldi	r24, 0x02	; 2
    106c:	c8 0e       	add	r12, r24
    106e:	d1 1c       	adc	r13, r1
    1070:	c6 01       	movw	r24, r12
    1072:	6a d8       	rcall	.-3884   	; 0x148 <vListInitialiseItem>
    1074:	ce 01       	movw	r24, r28
    1076:	0c 96       	adiw	r24, 0x0c	; 12
    1078:	67 d8       	rcall	.-3890   	; 0x148 <vListInitialiseItem>
    107a:	d9 87       	std	Y+9, r29	; 0x09
    107c:	c8 87       	std	Y+8, r28	; 0x08
    107e:	84 e0       	ldi	r24, 0x04	; 4
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	81 1b       	sub	r24, r17
    1084:	91 09       	sbc	r25, r1
    1086:	9d 87       	std	Y+13, r25	; 0x0d
    1088:	8c 87       	std	Y+12, r24	; 0x0c
    108a:	db 8b       	std	Y+19, r29	; 0x13
    108c:	ca 8b       	std	Y+18, r28	; 0x12
    108e:	a2 01       	movw	r20, r4
    1090:	b5 01       	movw	r22, r10
    1092:	c3 01       	movw	r24, r6
    1094:	1b de       	rcall	.-970    	; 0xccc <pxPortInitialiseStack>
    1096:	99 83       	std	Y+1, r25	; 0x01
    1098:	88 83       	st	Y, r24
    109a:	e1 14       	cp	r14, r1
    109c:	f1 04       	cpc	r15, r1
    109e:	19 f0       	breq	.+6      	; 0x10a6 <xTaskGenericCreate+0xbe>
    10a0:	f7 01       	movw	r30, r14
    10a2:	d1 83       	std	Z+1, r29	; 0x01
    10a4:	c0 83       	st	Z, r28
    10a6:	0f b6       	in	r0, 0x3f	; 63
    10a8:	f8 94       	cli
    10aa:	0f 92       	push	r0
    10ac:	80 91 cd 07 	lds	r24, 0x07CD	; 0x8007cd <uxCurrentNumberOfTasks>
    10b0:	8f 5f       	subi	r24, 0xFF	; 255
    10b2:	80 93 cd 07 	sts	0x07CD, r24	; 0x8007cd <uxCurrentNumberOfTasks>
    10b6:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <pxCurrentTCB>
    10ba:	90 91 1c 08 	lds	r25, 0x081C	; 0x80081c <pxCurrentTCB+0x1>
    10be:	89 2b       	or	r24, r25
    10c0:	69 f5       	brne	.+90     	; 0x111c <xTaskGenericCreate+0x134>
    10c2:	d0 93 1c 08 	sts	0x081C, r29	; 0x80081c <pxCurrentTCB+0x1>
    10c6:	c0 93 1b 08 	sts	0x081B, r28	; 0x80081b <pxCurrentTCB>
    10ca:	80 91 cd 07 	lds	r24, 0x07CD	; 0x8007cd <uxCurrentNumberOfTasks>
    10ce:	81 30       	cpi	r24, 0x01	; 1
    10d0:	a1 f5       	brne	.+104    	; 0x113a <xTaskGenericCreate+0x152>
    10d2:	87 ef       	ldi	r24, 0xF7	; 247
    10d4:	97 e0       	ldi	r25, 0x07	; 7
    10d6:	2a d8       	rcall	.-4012   	; 0x12c <vListInitialise>
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	98 e0       	ldi	r25, 0x08	; 8
    10dc:	27 d8       	rcall	.-4018   	; 0x12c <vListInitialise>
    10de:	89 e0       	ldi	r24, 0x09	; 9
    10e0:	98 e0       	ldi	r25, 0x08	; 8
    10e2:	24 d8       	rcall	.-4024   	; 0x12c <vListInitialise>
    10e4:	82 e1       	ldi	r24, 0x12	; 18
    10e6:	98 e0       	ldi	r25, 0x08	; 8
    10e8:	21 d8       	rcall	.-4030   	; 0x12c <vListInitialise>
    10ea:	8e ee       	ldi	r24, 0xEE	; 238
    10ec:	97 e0       	ldi	r25, 0x07	; 7
    10ee:	1e d8       	rcall	.-4036   	; 0x12c <vListInitialise>
    10f0:	85 ee       	ldi	r24, 0xE5	; 229
    10f2:	97 e0       	ldi	r25, 0x07	; 7
    10f4:	1b d8       	rcall	.-4042   	; 0x12c <vListInitialise>
    10f6:	88 ed       	ldi	r24, 0xD8	; 216
    10f8:	97 e0       	ldi	r25, 0x07	; 7
    10fa:	18 d8       	rcall	.-4048   	; 0x12c <vListInitialise>
    10fc:	8f ec       	ldi	r24, 0xCF	; 207
    10fe:	97 e0       	ldi	r25, 0x07	; 7
    1100:	15 d8       	rcall	.-4054   	; 0x12c <vListInitialise>
    1102:	8e ee       	ldi	r24, 0xEE	; 238
    1104:	97 e0       	ldi	r25, 0x07	; 7
    1106:	90 93 e4 07 	sts	0x07E4, r25	; 0x8007e4 <pxDelayedTaskList+0x1>
    110a:	80 93 e3 07 	sts	0x07E3, r24	; 0x8007e3 <pxDelayedTaskList>
    110e:	85 ee       	ldi	r24, 0xE5	; 229
    1110:	97 e0       	ldi	r25, 0x07	; 7
    1112:	90 93 e2 07 	sts	0x07E2, r25	; 0x8007e2 <pxOverflowDelayedTaskList+0x1>
    1116:	80 93 e1 07 	sts	0x07E1, r24	; 0x8007e1 <pxOverflowDelayedTaskList>
    111a:	0f c0       	rjmp	.+30     	; 0x113a <xTaskGenericCreate+0x152>
    111c:	80 91 c8 07 	lds	r24, 0x07C8	; 0x8007c8 <xSchedulerRunning>
    1120:	81 11       	cpse	r24, r1
    1122:	0b c0       	rjmp	.+22     	; 0x113a <xTaskGenericCreate+0x152>
    1124:	e0 91 1b 08 	lds	r30, 0x081B	; 0x80081b <pxCurrentTCB>
    1128:	f0 91 1c 08 	lds	r31, 0x081C	; 0x80081c <pxCurrentTCB+0x1>
    112c:	86 89       	ldd	r24, Z+22	; 0x16
    112e:	08 17       	cp	r16, r24
    1130:	20 f0       	brcs	.+8      	; 0x113a <xTaskGenericCreate+0x152>
    1132:	d0 93 1c 08 	sts	0x081C, r29	; 0x80081c <pxCurrentTCB+0x1>
    1136:	c0 93 1b 08 	sts	0x081B, r28	; 0x80081b <pxCurrentTCB>
    113a:	8e 89       	ldd	r24, Y+22	; 0x16
    113c:	90 91 ca 07 	lds	r25, 0x07CA	; 0x8007ca <uxTopUsedPriority>
    1140:	98 17       	cp	r25, r24
    1142:	10 f4       	brcc	.+4      	; 0x1148 <xTaskGenericCreate+0x160>
    1144:	80 93 ca 07 	sts	0x07CA, r24	; 0x8007ca <uxTopUsedPriority>
    1148:	90 91 c3 07 	lds	r25, 0x07C3	; 0x8007c3 <uxTaskNumber>
    114c:	9f 5f       	subi	r25, 0xFF	; 255
    114e:	90 93 c3 07 	sts	0x07C3, r25	; 0x8007c3 <uxTaskNumber>
    1152:	90 91 c9 07 	lds	r25, 0x07C9	; 0x8007c9 <uxTopReadyPriority>
    1156:	98 17       	cp	r25, r24
    1158:	10 f4       	brcc	.+4      	; 0x115e <xTaskGenericCreate+0x176>
    115a:	80 93 c9 07 	sts	0x07C9, r24	; 0x8007c9 <uxTopReadyPriority>
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	9c 01       	movw	r18, r24
    1162:	22 0f       	add	r18, r18
    1164:	33 1f       	adc	r19, r19
    1166:	22 0f       	add	r18, r18
    1168:	33 1f       	adc	r19, r19
    116a:	22 0f       	add	r18, r18
    116c:	33 1f       	adc	r19, r19
    116e:	82 0f       	add	r24, r18
    1170:	93 1f       	adc	r25, r19
    1172:	b6 01       	movw	r22, r12
    1174:	89 50       	subi	r24, 0x09	; 9
    1176:	98 4f       	sbci	r25, 0xF8	; 248
    1178:	0e 94 a8 00 	call	0x150	; 0x150 <vListInsertEnd>
    117c:	0f 90       	pop	r0
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	80 91 c8 07 	lds	r24, 0x07C8	; 0x8007c8 <xSchedulerRunning>
    1184:	88 23       	and	r24, r24
    1186:	51 f0       	breq	.+20     	; 0x119c <xTaskGenericCreate+0x1b4>
    1188:	e0 91 1b 08 	lds	r30, 0x081B	; 0x80081b <pxCurrentTCB>
    118c:	f0 91 1c 08 	lds	r31, 0x081C	; 0x80081c <pxCurrentTCB+0x1>
    1190:	86 89       	ldd	r24, Z+22	; 0x16
    1192:	80 17       	cp	r24, r16
    1194:	28 f4       	brcc	.+10     	; 0x11a0 <xTaskGenericCreate+0x1b8>
    1196:	40 de       	rcall	.-896    	; 0xe18 <vPortYield>
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	09 c0       	rjmp	.+18     	; 0x11ae <xTaskGenericCreate+0x1c6>
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	07 c0       	rjmp	.+14     	; 0x11ae <xTaskGenericCreate+0x1c6>
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	05 c0       	rjmp	.+10     	; 0x11ae <xTaskGenericCreate+0x1c6>
    11a4:	d8 8e       	std	Y+24, r13	; 0x18
    11a6:	cf 8a       	std	Y+23, r12	; 0x17
    11a8:	c6 01       	movw	r24, r12
    11aa:	46 cf       	rjmp	.-372    	; 0x1038 <xTaskGenericCreate+0x50>
    11ac:	8f ef       	ldi	r24, 0xFF	; 255
    11ae:	df 91       	pop	r29
    11b0:	cf 91       	pop	r28
    11b2:	1f 91       	pop	r17
    11b4:	0f 91       	pop	r16
    11b6:	ff 90       	pop	r15
    11b8:	ef 90       	pop	r14
    11ba:	df 90       	pop	r13
    11bc:	cf 90       	pop	r12
    11be:	bf 90       	pop	r11
    11c0:	af 90       	pop	r10
    11c2:	9f 90       	pop	r9
    11c4:	8f 90       	pop	r8
    11c6:	7f 90       	pop	r7
    11c8:	6f 90       	pop	r6
    11ca:	5f 90       	pop	r5
    11cc:	4f 90       	pop	r4
    11ce:	08 95       	ret

000011d0 <vTaskStartScheduler>:
    11d0:	af 92       	push	r10
    11d2:	bf 92       	push	r11
    11d4:	cf 92       	push	r12
    11d6:	df 92       	push	r13
    11d8:	ef 92       	push	r14
    11da:	ff 92       	push	r15
    11dc:	0f 93       	push	r16
    11de:	a1 2c       	mov	r10, r1
    11e0:	b1 2c       	mov	r11, r1
    11e2:	c1 2c       	mov	r12, r1
    11e4:	d1 2c       	mov	r13, r1
    11e6:	e1 2c       	mov	r14, r1
    11e8:	f1 2c       	mov	r15, r1
    11ea:	00 e0       	ldi	r16, 0x00	; 0
    11ec:	20 e0       	ldi	r18, 0x00	; 0
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	45 e5       	ldi	r20, 0x55	; 85
    11f2:	50 e0       	ldi	r21, 0x00	; 0
    11f4:	67 ed       	ldi	r22, 0xD7	; 215
    11f6:	71 e0       	ldi	r23, 0x01	; 1
    11f8:	8b e7       	ldi	r24, 0x7B	; 123
    11fa:	9a e0       	ldi	r25, 0x0A	; 10
    11fc:	f5 de       	rcall	.-534    	; 0xfe8 <xTaskGenericCreate>
    11fe:	81 30       	cpi	r24, 0x01	; 1
    1200:	41 f4       	brne	.+16     	; 0x1212 <vTaskStartScheduler+0x42>
    1202:	f8 94       	cli
    1204:	80 93 c8 07 	sts	0x07C8, r24	; 0x8007c8 <xSchedulerRunning>
    1208:	10 92 cc 07 	sts	0x07CC, r1	; 0x8007cc <xTickCount+0x1>
    120c:	10 92 cb 07 	sts	0x07CB, r1	; 0x8007cb <xTickCount>
    1210:	c9 dd       	rcall	.-1134   	; 0xda4 <xPortStartScheduler>
    1212:	0f 91       	pop	r16
    1214:	ff 90       	pop	r15
    1216:	ef 90       	pop	r14
    1218:	df 90       	pop	r13
    121a:	cf 90       	pop	r12
    121c:	bf 90       	pop	r11
    121e:	af 90       	pop	r10
    1220:	08 95       	ret

00001222 <vTaskSuspendAll>:
    1222:	80 91 c7 07 	lds	r24, 0x07C7	; 0x8007c7 <uxSchedulerSuspended>
    1226:	8f 5f       	subi	r24, 0xFF	; 255
    1228:	80 93 c7 07 	sts	0x07C7, r24	; 0x8007c7 <uxSchedulerSuspended>
    122c:	08 95       	ret

0000122e <vTaskIncrementTick>:
    122e:	0f 93       	push	r16
    1230:	1f 93       	push	r17
    1232:	cf 93       	push	r28
    1234:	df 93       	push	r29
    1236:	80 91 c7 07 	lds	r24, 0x07C7	; 0x8007c7 <uxSchedulerSuspended>
    123a:	81 11       	cpse	r24, r1
    123c:	b2 c0       	rjmp	.+356    	; 0x13a2 <vTaskIncrementTick+0x174>
    123e:	80 91 cb 07 	lds	r24, 0x07CB	; 0x8007cb <xTickCount>
    1242:	90 91 cc 07 	lds	r25, 0x07CC	; 0x8007cc <xTickCount+0x1>
    1246:	01 96       	adiw	r24, 0x01	; 1
    1248:	90 93 cc 07 	sts	0x07CC, r25	; 0x8007cc <xTickCount+0x1>
    124c:	80 93 cb 07 	sts	0x07CB, r24	; 0x8007cb <xTickCount>
    1250:	80 91 cb 07 	lds	r24, 0x07CB	; 0x8007cb <xTickCount>
    1254:	90 91 cc 07 	lds	r25, 0x07CC	; 0x8007cc <xTickCount+0x1>
    1258:	89 2b       	or	r24, r25
    125a:	99 f5       	brne	.+102    	; 0x12c2 <vTaskIncrementTick+0x94>
    125c:	80 91 e3 07 	lds	r24, 0x07E3	; 0x8007e3 <pxDelayedTaskList>
    1260:	90 91 e4 07 	lds	r25, 0x07E4	; 0x8007e4 <pxDelayedTaskList+0x1>
    1264:	20 91 e1 07 	lds	r18, 0x07E1	; 0x8007e1 <pxOverflowDelayedTaskList>
    1268:	30 91 e2 07 	lds	r19, 0x07E2	; 0x8007e2 <pxOverflowDelayedTaskList+0x1>
    126c:	30 93 e4 07 	sts	0x07E4, r19	; 0x8007e4 <pxDelayedTaskList+0x1>
    1270:	20 93 e3 07 	sts	0x07E3, r18	; 0x8007e3 <pxDelayedTaskList>
    1274:	90 93 e2 07 	sts	0x07E2, r25	; 0x8007e2 <pxOverflowDelayedTaskList+0x1>
    1278:	80 93 e1 07 	sts	0x07E1, r24	; 0x8007e1 <pxOverflowDelayedTaskList>
    127c:	80 91 c4 07 	lds	r24, 0x07C4	; 0x8007c4 <xNumOfOverflows>
    1280:	8f 5f       	subi	r24, 0xFF	; 255
    1282:	80 93 c4 07 	sts	0x07C4, r24	; 0x8007c4 <xNumOfOverflows>
    1286:	e0 91 e3 07 	lds	r30, 0x07E3	; 0x8007e3 <pxDelayedTaskList>
    128a:	f0 91 e4 07 	lds	r31, 0x07E4	; 0x8007e4 <pxDelayedTaskList+0x1>
    128e:	80 81       	ld	r24, Z
    1290:	81 11       	cpse	r24, r1
    1292:	07 c0       	rjmp	.+14     	; 0x12a2 <vTaskIncrementTick+0x74>
    1294:	8f ef       	ldi	r24, 0xFF	; 255
    1296:	9f ef       	ldi	r25, 0xFF	; 255
    1298:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <xNextTaskUnblockTime+0x1>
    129c:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <xNextTaskUnblockTime>
    12a0:	10 c0       	rjmp	.+32     	; 0x12c2 <vTaskIncrementTick+0x94>
    12a2:	e0 91 e3 07 	lds	r30, 0x07E3	; 0x8007e3 <pxDelayedTaskList>
    12a6:	f0 91 e4 07 	lds	r31, 0x07E4	; 0x8007e4 <pxDelayedTaskList+0x1>
    12aa:	05 80       	ldd	r0, Z+5	; 0x05
    12ac:	f6 81       	ldd	r31, Z+6	; 0x06
    12ae:	e0 2d       	mov	r30, r0
    12b0:	06 80       	ldd	r0, Z+6	; 0x06
    12b2:	f7 81       	ldd	r31, Z+7	; 0x07
    12b4:	e0 2d       	mov	r30, r0
    12b6:	82 81       	ldd	r24, Z+2	; 0x02
    12b8:	93 81       	ldd	r25, Z+3	; 0x03
    12ba:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <xNextTaskUnblockTime+0x1>
    12be:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <xNextTaskUnblockTime>
    12c2:	20 91 cb 07 	lds	r18, 0x07CB	; 0x8007cb <xTickCount>
    12c6:	30 91 cc 07 	lds	r19, 0x07CC	; 0x8007cc <xTickCount+0x1>
    12ca:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <xNextTaskUnblockTime>
    12ce:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <xNextTaskUnblockTime+0x1>
    12d2:	28 17       	cp	r18, r24
    12d4:	39 07       	cpc	r19, r25
    12d6:	08 f4       	brcc	.+2      	; 0x12da <vTaskIncrementTick+0xac>
    12d8:	69 c0       	rjmp	.+210    	; 0x13ac <vTaskIncrementTick+0x17e>
    12da:	e0 91 e3 07 	lds	r30, 0x07E3	; 0x8007e3 <pxDelayedTaskList>
    12de:	f0 91 e4 07 	lds	r31, 0x07E4	; 0x8007e4 <pxDelayedTaskList+0x1>
    12e2:	80 81       	ld	r24, Z
    12e4:	88 23       	and	r24, r24
    12e6:	99 f0       	breq	.+38     	; 0x130e <vTaskIncrementTick+0xe0>
    12e8:	e0 91 e3 07 	lds	r30, 0x07E3	; 0x8007e3 <pxDelayedTaskList>
    12ec:	f0 91 e4 07 	lds	r31, 0x07E4	; 0x8007e4 <pxDelayedTaskList+0x1>
    12f0:	05 80       	ldd	r0, Z+5	; 0x05
    12f2:	f6 81       	ldd	r31, Z+6	; 0x06
    12f4:	e0 2d       	mov	r30, r0
    12f6:	c6 81       	ldd	r28, Z+6	; 0x06
    12f8:	d7 81       	ldd	r29, Z+7	; 0x07
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	9b 81       	ldd	r25, Y+3	; 0x03
    12fe:	20 91 cb 07 	lds	r18, 0x07CB	; 0x8007cb <xTickCount>
    1302:	30 91 cc 07 	lds	r19, 0x07CC	; 0x8007cc <xTickCount+0x1>
    1306:	28 17       	cp	r18, r24
    1308:	39 07       	cpc	r19, r25
    130a:	f8 f4       	brcc	.+62     	; 0x134a <vTaskIncrementTick+0x11c>
    130c:	19 c0       	rjmp	.+50     	; 0x1340 <vTaskIncrementTick+0x112>
    130e:	8f ef       	ldi	r24, 0xFF	; 255
    1310:	9f ef       	ldi	r25, 0xFF	; 255
    1312:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <xNextTaskUnblockTime+0x1>
    1316:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <xNextTaskUnblockTime>
    131a:	48 c0       	rjmp	.+144    	; 0x13ac <vTaskIncrementTick+0x17e>
    131c:	e0 91 e3 07 	lds	r30, 0x07E3	; 0x8007e3 <pxDelayedTaskList>
    1320:	f0 91 e4 07 	lds	r31, 0x07E4	; 0x8007e4 <pxDelayedTaskList+0x1>
    1324:	05 80       	ldd	r0, Z+5	; 0x05
    1326:	f6 81       	ldd	r31, Z+6	; 0x06
    1328:	e0 2d       	mov	r30, r0
    132a:	c6 81       	ldd	r28, Z+6	; 0x06
    132c:	d7 81       	ldd	r29, Z+7	; 0x07
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	9b 81       	ldd	r25, Y+3	; 0x03
    1332:	20 91 cb 07 	lds	r18, 0x07CB	; 0x8007cb <xTickCount>
    1336:	30 91 cc 07 	lds	r19, 0x07CC	; 0x8007cc <xTickCount+0x1>
    133a:	28 17       	cp	r18, r24
    133c:	39 07       	cpc	r19, r25
    133e:	28 f4       	brcc	.+10     	; 0x134a <vTaskIncrementTick+0x11c>
    1340:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <xNextTaskUnblockTime+0x1>
    1344:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <xNextTaskUnblockTime>
    1348:	31 c0       	rjmp	.+98     	; 0x13ac <vTaskIncrementTick+0x17e>
    134a:	8e 01       	movw	r16, r28
    134c:	0e 5f       	subi	r16, 0xFE	; 254
    134e:	1f 4f       	sbci	r17, 0xFF	; 255
    1350:	c8 01       	movw	r24, r16
    1352:	0e 94 0a 01 	call	0x214	; 0x214 <vListRemove>
    1356:	8c 89       	ldd	r24, Y+20	; 0x14
    1358:	9d 89       	ldd	r25, Y+21	; 0x15
    135a:	89 2b       	or	r24, r25
    135c:	21 f0       	breq	.+8      	; 0x1366 <vTaskIncrementTick+0x138>
    135e:	ce 01       	movw	r24, r28
    1360:	0c 96       	adiw	r24, 0x0c	; 12
    1362:	0e 94 0a 01 	call	0x214	; 0x214 <vListRemove>
    1366:	8e 89       	ldd	r24, Y+22	; 0x16
    1368:	90 91 c9 07 	lds	r25, 0x07C9	; 0x8007c9 <uxTopReadyPriority>
    136c:	98 17       	cp	r25, r24
    136e:	10 f4       	brcc	.+4      	; 0x1374 <vTaskIncrementTick+0x146>
    1370:	80 93 c9 07 	sts	0x07C9, r24	; 0x8007c9 <uxTopReadyPriority>
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	9c 01       	movw	r18, r24
    1378:	22 0f       	add	r18, r18
    137a:	33 1f       	adc	r19, r19
    137c:	22 0f       	add	r18, r18
    137e:	33 1f       	adc	r19, r19
    1380:	22 0f       	add	r18, r18
    1382:	33 1f       	adc	r19, r19
    1384:	82 0f       	add	r24, r18
    1386:	93 1f       	adc	r25, r19
    1388:	b8 01       	movw	r22, r16
    138a:	89 50       	subi	r24, 0x09	; 9
    138c:	98 4f       	sbci	r25, 0xF8	; 248
    138e:	0e 94 a8 00 	call	0x150	; 0x150 <vListInsertEnd>
    1392:	e0 91 e3 07 	lds	r30, 0x07E3	; 0x8007e3 <pxDelayedTaskList>
    1396:	f0 91 e4 07 	lds	r31, 0x07E4	; 0x8007e4 <pxDelayedTaskList+0x1>
    139a:	80 81       	ld	r24, Z
    139c:	81 11       	cpse	r24, r1
    139e:	be cf       	rjmp	.-132    	; 0x131c <vTaskIncrementTick+0xee>
    13a0:	b6 cf       	rjmp	.-148    	; 0x130e <vTaskIncrementTick+0xe0>
    13a2:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <uxMissedTicks>
    13a6:	8f 5f       	subi	r24, 0xFF	; 255
    13a8:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <uxMissedTicks>
    13ac:	df 91       	pop	r29
    13ae:	cf 91       	pop	r28
    13b0:	1f 91       	pop	r17
    13b2:	0f 91       	pop	r16
    13b4:	08 95       	ret

000013b6 <xTaskResumeAll>:
    13b6:	cf 92       	push	r12
    13b8:	df 92       	push	r13
    13ba:	ef 92       	push	r14
    13bc:	ff 92       	push	r15
    13be:	0f 93       	push	r16
    13c0:	1f 93       	push	r17
    13c2:	cf 93       	push	r28
    13c4:	df 93       	push	r29
    13c6:	0f b6       	in	r0, 0x3f	; 63
    13c8:	f8 94       	cli
    13ca:	0f 92       	push	r0
    13cc:	80 91 c7 07 	lds	r24, 0x07C7	; 0x8007c7 <uxSchedulerSuspended>
    13d0:	81 50       	subi	r24, 0x01	; 1
    13d2:	80 93 c7 07 	sts	0x07C7, r24	; 0x8007c7 <uxSchedulerSuspended>
    13d6:	80 91 c7 07 	lds	r24, 0x07C7	; 0x8007c7 <uxSchedulerSuspended>
    13da:	81 11       	cpse	r24, r1
    13dc:	62 c0       	rjmp	.+196    	; 0x14a2 <xTaskResumeAll+0xec>
    13de:	80 91 cd 07 	lds	r24, 0x07CD	; 0x8007cd <uxCurrentNumberOfTasks>
    13e2:	81 11       	cpse	r24, r1
    13e4:	32 c0       	rjmp	.+100    	; 0x144a <xTaskResumeAll+0x94>
    13e6:	60 c0       	rjmp	.+192    	; 0x14a8 <xTaskResumeAll+0xf2>
    13e8:	d7 01       	movw	r26, r14
    13ea:	15 96       	adiw	r26, 0x05	; 5
    13ec:	ed 91       	ld	r30, X+
    13ee:	fc 91       	ld	r31, X
    13f0:	16 97       	sbiw	r26, 0x06	; 6
    13f2:	c6 81       	ldd	r28, Z+6	; 0x06
    13f4:	d7 81       	ldd	r29, Z+7	; 0x07
    13f6:	ce 01       	movw	r24, r28
    13f8:	0c 96       	adiw	r24, 0x0c	; 12
    13fa:	0e 94 0a 01 	call	0x214	; 0x214 <vListRemove>
    13fe:	8e 01       	movw	r16, r28
    1400:	0e 5f       	subi	r16, 0xFE	; 254
    1402:	1f 4f       	sbci	r17, 0xFF	; 255
    1404:	c8 01       	movw	r24, r16
    1406:	0e 94 0a 01 	call	0x214	; 0x214 <vListRemove>
    140a:	8e 89       	ldd	r24, Y+22	; 0x16
    140c:	90 91 c9 07 	lds	r25, 0x07C9	; 0x8007c9 <uxTopReadyPriority>
    1410:	98 17       	cp	r25, r24
    1412:	10 f4       	brcc	.+4      	; 0x1418 <xTaskResumeAll+0x62>
    1414:	80 93 c9 07 	sts	0x07C9, r24	; 0x8007c9 <uxTopReadyPriority>
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	9c 01       	movw	r18, r24
    141c:	22 0f       	add	r18, r18
    141e:	33 1f       	adc	r19, r19
    1420:	22 0f       	add	r18, r18
    1422:	33 1f       	adc	r19, r19
    1424:	22 0f       	add	r18, r18
    1426:	33 1f       	adc	r19, r19
    1428:	82 0f       	add	r24, r18
    142a:	93 1f       	adc	r25, r19
    142c:	b8 01       	movw	r22, r16
    142e:	89 50       	subi	r24, 0x09	; 9
    1430:	98 4f       	sbci	r25, 0xF8	; 248
    1432:	0e 94 a8 00 	call	0x150	; 0x150 <vListInsertEnd>
    1436:	e0 91 1b 08 	lds	r30, 0x081B	; 0x80081b <pxCurrentTCB>
    143a:	f0 91 1c 08 	lds	r31, 0x081C	; 0x80081c <pxCurrentTCB+0x1>
    143e:	9e 89       	ldd	r25, Y+22	; 0x16
    1440:	86 89       	ldd	r24, Z+22	; 0x16
    1442:	98 17       	cp	r25, r24
    1444:	58 f0       	brcs	.+22     	; 0x145c <xTaskResumeAll+0xa6>
    1446:	dc 2c       	mov	r13, r12
    1448:	09 c0       	rjmp	.+18     	; 0x145c <xTaskResumeAll+0xa6>
    144a:	d1 2c       	mov	r13, r1
    144c:	0f 2e       	mov	r0, r31
    144e:	f8 ed       	ldi	r31, 0xD8	; 216
    1450:	ef 2e       	mov	r14, r31
    1452:	f7 e0       	ldi	r31, 0x07	; 7
    1454:	ff 2e       	mov	r15, r31
    1456:	f0 2d       	mov	r31, r0
    1458:	cc 24       	eor	r12, r12
    145a:	c3 94       	inc	r12
    145c:	f7 01       	movw	r30, r14
    145e:	80 81       	ld	r24, Z
    1460:	81 11       	cpse	r24, r1
    1462:	c2 cf       	rjmp	.-124    	; 0x13e8 <xTaskResumeAll+0x32>
    1464:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <uxMissedTicks>
    1468:	88 23       	and	r24, r24
    146a:	79 f0       	breq	.+30     	; 0x148a <xTaskResumeAll+0xd4>
    146c:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <uxMissedTicks>
    1470:	88 23       	and	r24, r24
    1472:	91 f0       	breq	.+36     	; 0x1498 <xTaskResumeAll+0xe2>
    1474:	dc de       	rcall	.-584    	; 0x122e <vTaskIncrementTick>
    1476:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <uxMissedTicks>
    147a:	81 50       	subi	r24, 0x01	; 1
    147c:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <uxMissedTicks>
    1480:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <uxMissedTicks>
    1484:	81 11       	cpse	r24, r1
    1486:	f6 cf       	rjmp	.-20     	; 0x1474 <xTaskResumeAll+0xbe>
    1488:	07 c0       	rjmp	.+14     	; 0x1498 <xTaskResumeAll+0xe2>
    148a:	f1 e0       	ldi	r31, 0x01	; 1
    148c:	df 16       	cp	r13, r31
    148e:	21 f0       	breq	.+8      	; 0x1498 <xTaskResumeAll+0xe2>
    1490:	80 91 c5 07 	lds	r24, 0x07C5	; 0x8007c5 <xMissedYield>
    1494:	81 30       	cpi	r24, 0x01	; 1
    1496:	39 f4       	brne	.+14     	; 0x14a6 <xTaskResumeAll+0xf0>
    1498:	10 92 c5 07 	sts	0x07C5, r1	; 0x8007c5 <xMissedYield>
    149c:	bd dc       	rcall	.-1670   	; 0xe18 <vPortYield>
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	03 c0       	rjmp	.+6      	; 0x14a8 <xTaskResumeAll+0xf2>
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	01 c0       	rjmp	.+2      	; 0x14a8 <xTaskResumeAll+0xf2>
    14a6:	80 e0       	ldi	r24, 0x00	; 0
    14a8:	0f 90       	pop	r0
    14aa:	0f be       	out	0x3f, r0	; 63
    14ac:	df 91       	pop	r29
    14ae:	cf 91       	pop	r28
    14b0:	1f 91       	pop	r17
    14b2:	0f 91       	pop	r16
    14b4:	ff 90       	pop	r15
    14b6:	ef 90       	pop	r14
    14b8:	df 90       	pop	r13
    14ba:	cf 90       	pop	r12
    14bc:	08 95       	ret

000014be <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    14c4:	89 2b       	or	r24, r25
		{
			vTaskSuspendAll();
    14c6:	99 f0       	breq	.+38     	; 0x14ee <vTaskDelay+0x30>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    14c8:	ac de       	rcall	.-680    	; 0x1222 <vTaskSuspendAll>
    14ca:	80 91 cb 07 	lds	r24, 0x07CB	; 0x8007cb <xTickCount>
    14ce:	90 91 cc 07 	lds	r25, 0x07CC	; 0x8007cc <xTickCount+0x1>
    14d2:	c8 0f       	add	r28, r24

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    14d4:	d9 1f       	adc	r29, r25
    14d6:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <pxCurrentTCB>
    14da:	90 91 1c 08 	lds	r25, 0x081C	; 0x80081c <pxCurrentTCB+0x1>
    14de:	02 96       	adiw	r24, 0x02	; 2
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    14e0:	0e 94 0a 01 	call	0x214	; 0x214 <vListRemove>
			xAlreadyYielded = xTaskResumeAll();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    14e4:	ce 01       	movw	r24, r28
    14e6:	4b dd       	rcall	.-1386   	; 0xf7e <prvAddCurrentTaskToDelayedList>
		{
			portYIELD_WITHIN_API();
    14e8:	66 df       	rcall	.-308    	; 0x13b6 <xTaskResumeAll>
    14ea:	81 11       	cpse	r24, r1
		}
	}
    14ec:	01 c0       	rjmp	.+2      	; 0x14f0 <vTaskDelay+0x32>
    14ee:	94 dc       	rcall	.-1752   	; 0xe18 <vPortYield>
    14f0:	df 91       	pop	r29
    14f2:	cf 91       	pop	r28
    14f4:	08 95       	ret

000014f6 <prvIdleTask>:
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    14f6:	0f 2e       	mov	r0, r31
    14f8:	ff ec       	ldi	r31, 0xCF	; 207
    14fa:	ef 2e       	mov	r14, r31
    14fc:	f7 e0       	ldi	r31, 0x07	; 7
    14fe:	ff 2e       	mov	r15, r31
    1500:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    1502:	c7 ef       	ldi	r28, 0xF7	; 247
    1504:	d7 e0       	ldi	r29, 0x07	; 7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    1506:	80 91 ce 07 	lds	r24, 0x07CE	; 0x8007ce <uxTasksDeleted>
    150a:	88 23       	and	r24, r24
		{
			vTaskSuspendAll();
    150c:	41 f1       	breq	.+80     	; 0x155e <prvIdleTask+0x68>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    150e:	89 de       	rcall	.-750    	; 0x1222 <vTaskSuspendAll>
			xTaskResumeAll();
    1510:	d7 01       	movw	r26, r14
    1512:	1c 91       	ld	r17, X

			if( xListIsEmpty == pdFALSE )
    1514:	50 df       	rcall	.-352    	; 0x13b6 <xTaskResumeAll>
    1516:	11 23       	and	r17, r17
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    1518:	11 f1       	breq	.+68     	; 0x155e <prvIdleTask+0x68>
    151a:	0f b6       	in	r0, 0x3f	; 63
    151c:	f8 94       	cli
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    151e:	0f 92       	push	r0
    1520:	d7 01       	movw	r26, r14
    1522:	15 96       	adiw	r26, 0x05	; 5
    1524:	ed 91       	ld	r30, X+
    1526:	fc 91       	ld	r31, X
    1528:	16 97       	sbiw	r26, 0x06	; 6
    152a:	06 81       	ldd	r16, Z+6	; 0x06
					vListRemove( &( pxTCB->xGenericListItem ) );
    152c:	17 81       	ldd	r17, Z+7	; 0x07
    152e:	c8 01       	movw	r24, r16
    1530:	02 96       	adiw	r24, 0x02	; 2
    1532:	0e 94 0a 01 	call	0x214	; 0x214 <vListRemove>
					--uxCurrentNumberOfTasks;
    1536:	80 91 cd 07 	lds	r24, 0x07CD	; 0x8007cd <uxCurrentNumberOfTasks>
    153a:	81 50       	subi	r24, 0x01	; 1
    153c:	80 93 cd 07 	sts	0x07CD, r24	; 0x8007cd <uxCurrentNumberOfTasks>
					--uxTasksDeleted;
    1540:	80 91 ce 07 	lds	r24, 0x07CE	; 0x8007ce <uxTasksDeleted>
    1544:	81 50       	subi	r24, 0x01	; 1
    1546:	80 93 ce 07 	sts	0x07CE, r24	; 0x8007ce <uxTasksDeleted>
				}
				taskEXIT_CRITICAL();
    154a:	0f 90       	pop	r0
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    154c:	0f be       	out	0x3f, r0	; 63
    154e:	f8 01       	movw	r30, r16
    1550:	87 89       	ldd	r24, Z+23	; 0x17
    1552:	90 8d       	ldd	r25, Z+24	; 0x18
    1554:	0e 94 95 00 	call	0x12a	; 0x12a <vPortFree>
		vPortFree( pxTCB );
    1558:	c8 01       	movw	r24, r16
    155a:	0e 94 95 00 	call	0x12a	; 0x12a <vPortFree>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    155e:	88 81       	ld	r24, Y
			{
				taskYIELD();
    1560:	82 30       	cpi	r24, 0x02	; 2
    1562:	88 f2       	brcs	.-94     	; 0x1506 <prvIdleTask+0x10>
    1564:	59 dc       	rcall	.-1870   	; 0xe18 <vPortYield>
    1566:	cf cf       	rjmp	.-98     	; 0x1506 <prvIdleTask+0x10>

00001568 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    1568:	80 91 c7 07 	lds	r24, 0x07C7	; 0x8007c7 <uxSchedulerSuspended>
    156c:	81 11       	cpse	r24, r1
    156e:	13 c0       	rjmp	.+38     	; 0x1596 <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    1570:	80 91 c9 07 	lds	r24, 0x07C9	; 0x8007c9 <uxTopReadyPriority>
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	fc 01       	movw	r30, r24
    1578:	ee 0f       	add	r30, r30
    157a:	ff 1f       	adc	r31, r31
    157c:	ee 0f       	add	r30, r30
    157e:	ff 1f       	adc	r31, r31
    1580:	ee 0f       	add	r30, r30
    1582:	ff 1f       	adc	r31, r31
    1584:	8e 0f       	add	r24, r30
    1586:	9f 1f       	adc	r25, r31
    1588:	fc 01       	movw	r30, r24
    158a:	e9 50       	subi	r30, 0x09	; 9
    158c:	f8 4f       	sbci	r31, 0xF8	; 248
    158e:	80 81       	ld	r24, Z
    1590:	88 23       	and	r24, r24
    1592:	29 f0       	breq	.+10     	; 0x159e <vTaskSwitchContext+0x36>
    1594:	1b c0       	rjmp	.+54     	; 0x15cc <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <xMissedYield>
    159c:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    159e:	80 91 c9 07 	lds	r24, 0x07C9	; 0x8007c9 <uxTopReadyPriority>
    15a2:	81 50       	subi	r24, 0x01	; 1
    15a4:	80 93 c9 07 	sts	0x07C9, r24	; 0x8007c9 <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    15a8:	80 91 c9 07 	lds	r24, 0x07C9	; 0x8007c9 <uxTopReadyPriority>
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	fc 01       	movw	r30, r24
    15b0:	ee 0f       	add	r30, r30
    15b2:	ff 1f       	adc	r31, r31
    15b4:	ee 0f       	add	r30, r30
    15b6:	ff 1f       	adc	r31, r31
    15b8:	ee 0f       	add	r30, r30
    15ba:	ff 1f       	adc	r31, r31
    15bc:	8e 0f       	add	r24, r30
    15be:	9f 1f       	adc	r25, r31
    15c0:	fc 01       	movw	r30, r24
    15c2:	e9 50       	subi	r30, 0x09	; 9
    15c4:	f8 4f       	sbci	r31, 0xF8	; 248
    15c6:	80 81       	ld	r24, Z
    15c8:	88 23       	and	r24, r24
    15ca:	49 f3       	breq	.-46     	; 0x159e <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    15cc:	80 91 c9 07 	lds	r24, 0x07C9	; 0x8007c9 <uxTopReadyPriority>
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	9c 01       	movw	r18, r24
    15d4:	22 0f       	add	r18, r18
    15d6:	33 1f       	adc	r19, r19
    15d8:	22 0f       	add	r18, r18
    15da:	33 1f       	adc	r19, r19
    15dc:	22 0f       	add	r18, r18
    15de:	33 1f       	adc	r19, r19
    15e0:	28 0f       	add	r18, r24
    15e2:	39 1f       	adc	r19, r25
    15e4:	d9 01       	movw	r26, r18
    15e6:	a9 50       	subi	r26, 0x09	; 9
    15e8:	b8 4f       	sbci	r27, 0xF8	; 248
    15ea:	11 96       	adiw	r26, 0x01	; 1
    15ec:	ed 91       	ld	r30, X+
    15ee:	fc 91       	ld	r31, X
    15f0:	12 97       	sbiw	r26, 0x02	; 2
    15f2:	02 80       	ldd	r0, Z+2	; 0x02
    15f4:	f3 81       	ldd	r31, Z+3	; 0x03
    15f6:	e0 2d       	mov	r30, r0
    15f8:	12 96       	adiw	r26, 0x02	; 2
    15fa:	fc 93       	st	X, r31
    15fc:	ee 93       	st	-X, r30
    15fe:	11 97       	sbiw	r26, 0x01	; 1
    1600:	26 50       	subi	r18, 0x06	; 6
    1602:	38 4f       	sbci	r19, 0xF8	; 248
    1604:	e2 17       	cp	r30, r18
    1606:	f3 07       	cpc	r31, r19
    1608:	29 f4       	brne	.+10     	; 0x1614 <vTaskSwitchContext+0xac>
    160a:	22 81       	ldd	r18, Z+2	; 0x02
    160c:	33 81       	ldd	r19, Z+3	; 0x03
    160e:	fd 01       	movw	r30, r26
    1610:	32 83       	std	Z+2, r19	; 0x02
    1612:	21 83       	std	Z+1, r18	; 0x01
    1614:	fc 01       	movw	r30, r24
    1616:	ee 0f       	add	r30, r30
    1618:	ff 1f       	adc	r31, r31
    161a:	ee 0f       	add	r30, r30
    161c:	ff 1f       	adc	r31, r31
    161e:	ee 0f       	add	r30, r30
    1620:	ff 1f       	adc	r31, r31
    1622:	8e 0f       	add	r24, r30
    1624:	9f 1f       	adc	r25, r31
    1626:	fc 01       	movw	r30, r24
    1628:	e9 50       	subi	r30, 0x09	; 9
    162a:	f8 4f       	sbci	r31, 0xF8	; 248
    162c:	01 80       	ldd	r0, Z+1	; 0x01
    162e:	f2 81       	ldd	r31, Z+2	; 0x02
    1630:	e0 2d       	mov	r30, r0
    1632:	86 81       	ldd	r24, Z+6	; 0x06
    1634:	97 81       	ldd	r25, Z+7	; 0x07
    1636:	90 93 1c 08 	sts	0x081C, r25	; 0x80081c <pxCurrentTCB+0x1>
    163a:	80 93 1b 08 	sts	0x081B, r24	; 0x80081b <pxCurrentTCB>
    163e:	08 95       	ret

00001640 <__divmodhi4>:
    1640:	97 fb       	bst	r25, 7
    1642:	07 2e       	mov	r0, r23
    1644:	16 f4       	brtc	.+4      	; 0x164a <__divmodhi4+0xa>
    1646:	00 94       	com	r0
    1648:	06 d0       	rcall	.+12     	; 0x1656 <__divmodhi4_neg1>
    164a:	77 fd       	sbrc	r23, 7
    164c:	08 d0       	rcall	.+16     	; 0x165e <__divmodhi4_neg2>
    164e:	14 d0       	rcall	.+40     	; 0x1678 <__udivmodhi4>
    1650:	07 fc       	sbrc	r0, 7
    1652:	05 d0       	rcall	.+10     	; 0x165e <__divmodhi4_neg2>
    1654:	3e f4       	brtc	.+14     	; 0x1664 <__divmodhi4_exit>

00001656 <__divmodhi4_neg1>:
    1656:	90 95       	com	r25
    1658:	81 95       	neg	r24
    165a:	9f 4f       	sbci	r25, 0xFF	; 255
    165c:	08 95       	ret

0000165e <__divmodhi4_neg2>:
    165e:	70 95       	com	r23
    1660:	61 95       	neg	r22
    1662:	7f 4f       	sbci	r23, 0xFF	; 255

00001664 <__divmodhi4_exit>:
    1664:	08 95       	ret

00001666 <__tablejump2__>:
    1666:	ee 0f       	add	r30, r30
    1668:	ff 1f       	adc	r31, r31
    166a:	00 24       	eor	r0, r0
    166c:	00 1c       	adc	r0, r0
    166e:	0b be       	out	0x3b, r0	; 59
    1670:	07 90       	elpm	r0, Z+
    1672:	f6 91       	elpm	r31, Z
    1674:	e0 2d       	mov	r30, r0
    1676:	09 94       	ijmp

00001678 <__udivmodhi4>:
    1678:	aa 1b       	sub	r26, r26
    167a:	bb 1b       	sub	r27, r27
    167c:	51 e1       	ldi	r21, 0x11	; 17
    167e:	07 c0       	rjmp	.+14     	; 0x168e <__udivmodhi4_ep>

00001680 <__udivmodhi4_loop>:
    1680:	aa 1f       	adc	r26, r26
    1682:	bb 1f       	adc	r27, r27
    1684:	a6 17       	cp	r26, r22
    1686:	b7 07       	cpc	r27, r23
    1688:	10 f0       	brcs	.+4      	; 0x168e <__udivmodhi4_ep>
    168a:	a6 1b       	sub	r26, r22
    168c:	b7 0b       	sbc	r27, r23

0000168e <__udivmodhi4_ep>:
    168e:	88 1f       	adc	r24, r24
    1690:	99 1f       	adc	r25, r25
    1692:	5a 95       	dec	r21
    1694:	a9 f7       	brne	.-22     	; 0x1680 <__udivmodhi4_loop>
    1696:	80 95       	com	r24
    1698:	90 95       	com	r25
    169a:	bc 01       	movw	r22, r24
    169c:	cd 01       	movw	r24, r26
    169e:	08 95       	ret

000016a0 <do_rand>:
    16a0:	8f 92       	push	r8
    16a2:	9f 92       	push	r9
    16a4:	af 92       	push	r10
    16a6:	bf 92       	push	r11
    16a8:	cf 92       	push	r12
    16aa:	df 92       	push	r13
    16ac:	ef 92       	push	r14
    16ae:	ff 92       	push	r15
    16b0:	cf 93       	push	r28
    16b2:	df 93       	push	r29
    16b4:	ec 01       	movw	r28, r24
    16b6:	68 81       	ld	r22, Y
    16b8:	79 81       	ldd	r23, Y+1	; 0x01
    16ba:	8a 81       	ldd	r24, Y+2	; 0x02
    16bc:	9b 81       	ldd	r25, Y+3	; 0x03
    16be:	61 15       	cp	r22, r1
    16c0:	71 05       	cpc	r23, r1
    16c2:	81 05       	cpc	r24, r1
    16c4:	91 05       	cpc	r25, r1
    16c6:	21 f4       	brne	.+8      	; 0x16d0 <do_rand+0x30>
    16c8:	64 e2       	ldi	r22, 0x24	; 36
    16ca:	79 ed       	ldi	r23, 0xD9	; 217
    16cc:	8b e5       	ldi	r24, 0x5B	; 91
    16ce:	97 e0       	ldi	r25, 0x07	; 7
    16d0:	2d e1       	ldi	r18, 0x1D	; 29
    16d2:	33 ef       	ldi	r19, 0xF3	; 243
    16d4:	41 e0       	ldi	r20, 0x01	; 1
    16d6:	50 e0       	ldi	r21, 0x00	; 0
    16d8:	4e d0       	rcall	.+156    	; 0x1776 <__divmodsi4>
    16da:	49 01       	movw	r8, r18
    16dc:	5a 01       	movw	r10, r20
    16de:	9b 01       	movw	r18, r22
    16e0:	ac 01       	movw	r20, r24
    16e2:	a7 ea       	ldi	r26, 0xA7	; 167
    16e4:	b1 e4       	ldi	r27, 0x41	; 65
    16e6:	63 d0       	rcall	.+198    	; 0x17ae <__muluhisi3>
    16e8:	6b 01       	movw	r12, r22
    16ea:	7c 01       	movw	r14, r24
    16ec:	ac ee       	ldi	r26, 0xEC	; 236
    16ee:	b4 ef       	ldi	r27, 0xF4	; 244
    16f0:	a5 01       	movw	r20, r10
    16f2:	94 01       	movw	r18, r8
    16f4:	68 d0       	rcall	.+208    	; 0x17c6 <__mulohisi3>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	8c 0d       	add	r24, r12
    16fc:	9d 1d       	adc	r25, r13
    16fe:	ae 1d       	adc	r26, r14
    1700:	bf 1d       	adc	r27, r15
    1702:	b7 ff       	sbrs	r27, 7
    1704:	03 c0       	rjmp	.+6      	; 0x170c <do_rand+0x6c>
    1706:	01 97       	sbiw	r24, 0x01	; 1
    1708:	a1 09       	sbc	r26, r1
    170a:	b0 48       	sbci	r27, 0x80	; 128
    170c:	88 83       	st	Y, r24
    170e:	99 83       	std	Y+1, r25	; 0x01
    1710:	aa 83       	std	Y+2, r26	; 0x02
    1712:	bb 83       	std	Y+3, r27	; 0x03
    1714:	9f 77       	andi	r25, 0x7F	; 127
    1716:	df 91       	pop	r29
    1718:	cf 91       	pop	r28
    171a:	ff 90       	pop	r15
    171c:	ef 90       	pop	r14
    171e:	df 90       	pop	r13
    1720:	cf 90       	pop	r12
    1722:	bf 90       	pop	r11
    1724:	af 90       	pop	r10
    1726:	9f 90       	pop	r9
    1728:	8f 90       	pop	r8
    172a:	08 95       	ret

0000172c <rand_r>:
    172c:	b9 cf       	rjmp	.-142    	; 0x16a0 <do_rand>

0000172e <rand>:
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	91 e0       	ldi	r25, 0x01	; 1
    1732:	b6 cf       	rjmp	.-148    	; 0x16a0 <do_rand>

00001734 <srand>:
    1734:	a0 e0       	ldi	r26, 0x00	; 0
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    173c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1740:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    1744:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    1748:	08 95       	ret

0000174a <memset>:
    174a:	dc 01       	movw	r26, r24
    174c:	01 c0       	rjmp	.+2      	; 0x1750 <memset+0x6>
    174e:	6d 93       	st	X+, r22
    1750:	41 50       	subi	r20, 0x01	; 1
    1752:	50 40       	sbci	r21, 0x00	; 0
    1754:	e0 f7       	brcc	.-8      	; 0x174e <memset+0x4>
    1756:	08 95       	ret

00001758 <strncpy>:
    1758:	fb 01       	movw	r30, r22
    175a:	dc 01       	movw	r26, r24
    175c:	41 50       	subi	r20, 0x01	; 1
    175e:	50 40       	sbci	r21, 0x00	; 0
    1760:	48 f0       	brcs	.+18     	; 0x1774 <strncpy+0x1c>
    1762:	01 90       	ld	r0, Z+
    1764:	0d 92       	st	X+, r0
    1766:	00 20       	and	r0, r0
    1768:	c9 f7       	brne	.-14     	; 0x175c <strncpy+0x4>
    176a:	01 c0       	rjmp	.+2      	; 0x176e <strncpy+0x16>
    176c:	1d 92       	st	X+, r1
    176e:	41 50       	subi	r20, 0x01	; 1
    1770:	50 40       	sbci	r21, 0x00	; 0
    1772:	e0 f7       	brcc	.-8      	; 0x176c <strncpy+0x14>
    1774:	08 95       	ret

00001776 <__divmodsi4>:
    1776:	05 2e       	mov	r0, r21
    1778:	97 fb       	bst	r25, 7
    177a:	16 f4       	brtc	.+4      	; 0x1780 <__divmodsi4+0xa>
    177c:	00 94       	com	r0
    177e:	0f d0       	rcall	.+30     	; 0x179e <__negsi2>
    1780:	57 fd       	sbrc	r21, 7
    1782:	05 d0       	rcall	.+10     	; 0x178e <__divmodsi4_neg2>
    1784:	24 d0       	rcall	.+72     	; 0x17ce <__udivmodsi4>
    1786:	07 fc       	sbrc	r0, 7
    1788:	02 d0       	rcall	.+4      	; 0x178e <__divmodsi4_neg2>
    178a:	46 f4       	brtc	.+16     	; 0x179c <__divmodsi4_exit>
    178c:	08 c0       	rjmp	.+16     	; 0x179e <__negsi2>

0000178e <__divmodsi4_neg2>:
    178e:	50 95       	com	r21
    1790:	40 95       	com	r20
    1792:	30 95       	com	r19
    1794:	21 95       	neg	r18
    1796:	3f 4f       	sbci	r19, 0xFF	; 255
    1798:	4f 4f       	sbci	r20, 0xFF	; 255
    179a:	5f 4f       	sbci	r21, 0xFF	; 255

0000179c <__divmodsi4_exit>:
    179c:	08 95       	ret

0000179e <__negsi2>:
    179e:	90 95       	com	r25
    17a0:	80 95       	com	r24
    17a2:	70 95       	com	r23
    17a4:	61 95       	neg	r22
    17a6:	7f 4f       	sbci	r23, 0xFF	; 255
    17a8:	8f 4f       	sbci	r24, 0xFF	; 255
    17aa:	9f 4f       	sbci	r25, 0xFF	; 255
    17ac:	08 95       	ret

000017ae <__muluhisi3>:
    17ae:	31 d0       	rcall	.+98     	; 0x1812 <__umulhisi3>
    17b0:	a5 9f       	mul	r26, r21
    17b2:	90 0d       	add	r25, r0
    17b4:	b4 9f       	mul	r27, r20
    17b6:	90 0d       	add	r25, r0
    17b8:	a4 9f       	mul	r26, r20
    17ba:	80 0d       	add	r24, r0
    17bc:	91 1d       	adc	r25, r1
    17be:	11 24       	eor	r1, r1
    17c0:	08 95       	ret

000017c2 <__mulshisi3>:
    17c2:	b7 ff       	sbrs	r27, 7
    17c4:	f4 cf       	rjmp	.-24     	; 0x17ae <__muluhisi3>

000017c6 <__mulohisi3>:
    17c6:	f3 df       	rcall	.-26     	; 0x17ae <__muluhisi3>
    17c8:	82 1b       	sub	r24, r18
    17ca:	93 0b       	sbc	r25, r19
    17cc:	08 95       	ret

000017ce <__udivmodsi4>:
    17ce:	a1 e2       	ldi	r26, 0x21	; 33
    17d0:	1a 2e       	mov	r1, r26
    17d2:	aa 1b       	sub	r26, r26
    17d4:	bb 1b       	sub	r27, r27
    17d6:	fd 01       	movw	r30, r26
    17d8:	0d c0       	rjmp	.+26     	; 0x17f4 <__udivmodsi4_ep>

000017da <__udivmodsi4_loop>:
    17da:	aa 1f       	adc	r26, r26
    17dc:	bb 1f       	adc	r27, r27
    17de:	ee 1f       	adc	r30, r30
    17e0:	ff 1f       	adc	r31, r31
    17e2:	a2 17       	cp	r26, r18
    17e4:	b3 07       	cpc	r27, r19
    17e6:	e4 07       	cpc	r30, r20
    17e8:	f5 07       	cpc	r31, r21
    17ea:	20 f0       	brcs	.+8      	; 0x17f4 <__udivmodsi4_ep>
    17ec:	a2 1b       	sub	r26, r18
    17ee:	b3 0b       	sbc	r27, r19
    17f0:	e4 0b       	sbc	r30, r20
    17f2:	f5 0b       	sbc	r31, r21

000017f4 <__udivmodsi4_ep>:
    17f4:	66 1f       	adc	r22, r22
    17f6:	77 1f       	adc	r23, r23
    17f8:	88 1f       	adc	r24, r24
    17fa:	99 1f       	adc	r25, r25
    17fc:	1a 94       	dec	r1
    17fe:	69 f7       	brne	.-38     	; 0x17da <__udivmodsi4_loop>
    1800:	60 95       	com	r22
    1802:	70 95       	com	r23
    1804:	80 95       	com	r24
    1806:	90 95       	com	r25
    1808:	9b 01       	movw	r18, r22
    180a:	ac 01       	movw	r20, r24
    180c:	bd 01       	movw	r22, r26
    180e:	cf 01       	movw	r24, r30
    1810:	08 95       	ret

00001812 <__umulhisi3>:
    1812:	a2 9f       	mul	r26, r18
    1814:	b0 01       	movw	r22, r0
    1816:	b3 9f       	mul	r27, r19
    1818:	c0 01       	movw	r24, r0
    181a:	a3 9f       	mul	r26, r19
    181c:	70 0d       	add	r23, r0
    181e:	81 1d       	adc	r24, r1
    1820:	11 24       	eor	r1, r1
    1822:	91 1d       	adc	r25, r1
    1824:	b2 9f       	mul	r27, r18
    1826:	70 0d       	add	r23, r0
    1828:	81 1d       	adc	r24, r1
    182a:	11 24       	eor	r1, r1
    182c:	91 1d       	adc	r25, r1
    182e:	08 95       	ret

00001830 <_exit>:
    1830:	f8 94       	cli

00001832 <__stop_program>:
    1832:	ff cf       	rjmp	.-2      	; 0x1832 <__stop_program>
