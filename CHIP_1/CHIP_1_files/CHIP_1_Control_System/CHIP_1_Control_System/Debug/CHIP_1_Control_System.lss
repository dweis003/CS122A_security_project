
CHIP_1_Control_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000021e  00800100  0000218a  0000221e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000218a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000065a  0080031e  0080031e  0000243c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000243c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000246c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a8  00000000  00000000  000024b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003f1e  00000000  00000000  00002858  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000109a  00000000  00000000  00006776  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002c27  00000000  00000000  00007810  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000904  00000000  00000000  0000a438  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001381  00000000  00000000  0000ad3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000021a9  00000000  00000000  0000c0bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000360  00000000  00000000  0000e266  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	50 c0       	rjmp	.+160    	; 0xa2 <__ctors_end>
       2:	00 00       	nop
       4:	6d c0       	rjmp	.+218    	; 0xe0 <__bad_interrupt>
       6:	00 00       	nop
       8:	6b c0       	rjmp	.+214    	; 0xe0 <__bad_interrupt>
       a:	00 00       	nop
       c:	69 c0       	rjmp	.+210    	; 0xe0 <__bad_interrupt>
       e:	00 00       	nop
      10:	67 c0       	rjmp	.+206    	; 0xe0 <__bad_interrupt>
      12:	00 00       	nop
      14:	65 c0       	rjmp	.+202    	; 0xe0 <__bad_interrupt>
      16:	00 00       	nop
      18:	63 c0       	rjmp	.+198    	; 0xe0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	61 c0       	rjmp	.+194    	; 0xe0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5f c0       	rjmp	.+190    	; 0xe0 <__bad_interrupt>
      22:	00 00       	nop
      24:	5d c0       	rjmp	.+186    	; 0xe0 <__bad_interrupt>
      26:	00 00       	nop
      28:	5b c0       	rjmp	.+182    	; 0xe0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	59 c0       	rjmp	.+178    	; 0xe0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	57 c0       	rjmp	.+174    	; 0xe0 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 3f 0c 	jmp	0x187e	; 0x187e <__vector_13>
      38:	53 c0       	rjmp	.+166    	; 0xe0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	51 c0       	rjmp	.+162    	; 0xe0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4f c0       	rjmp	.+158    	; 0xe0 <__bad_interrupt>
      42:	00 00       	nop
      44:	4d c0       	rjmp	.+154    	; 0xe0 <__bad_interrupt>
      46:	00 00       	nop
      48:	4b c0       	rjmp	.+150    	; 0xe0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	49 c0       	rjmp	.+146    	; 0xe0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	47 c0       	rjmp	.+142    	; 0xe0 <__bad_interrupt>
      52:	00 00       	nop
      54:	45 c0       	rjmp	.+138    	; 0xe0 <__bad_interrupt>
      56:	00 00       	nop
      58:	43 c0       	rjmp	.+134    	; 0xe0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	41 c0       	rjmp	.+130    	; 0xe0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3f c0       	rjmp	.+126    	; 0xe0 <__bad_interrupt>
      62:	00 00       	nop
      64:	3d c0       	rjmp	.+122    	; 0xe0 <__bad_interrupt>
      66:	00 00       	nop
      68:	3b c0       	rjmp	.+118    	; 0xe0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	39 c0       	rjmp	.+114    	; 0xe0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	37 c0       	rjmp	.+110    	; 0xe0 <__bad_interrupt>
      72:	00 00       	nop
      74:	35 c0       	rjmp	.+106    	; 0xe0 <__bad_interrupt>
      76:	00 00       	nop
      78:	33 c0       	rjmp	.+102    	; 0xe0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	31 c0       	rjmp	.+98     	; 0xe0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2f c0       	rjmp	.+94     	; 0xe0 <__bad_interrupt>
      82:	00 00       	nop
      84:	2d c0       	rjmp	.+90     	; 0xe0 <__bad_interrupt>
      86:	00 00       	nop
      88:	2b c0       	rjmp	.+86     	; 0xe0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	95 05       	cpc	r25, r5
      8e:	ef 05       	cpc	r30, r15
      90:	9c 05       	cpc	r25, r12
      92:	54 06       	cpc	r5, r20
      94:	38 07       	cpc	r19, r24
      96:	45 07       	cpc	r20, r21
      98:	c4 08       	sbc	r12, r4
      9a:	a3 07       	cpc	r26, r19
      9c:	10 08       	sbc	r1, r0
      9e:	1d 08       	sbc	r1, r13
      a0:	59 08       	sbc	r5, r9

000000a2 <__ctors_end>:
      a2:	11 24       	eor	r1, r1
      a4:	1f be       	out	0x3f, r1	; 63
      a6:	cf ef       	ldi	r28, 0xFF	; 255
      a8:	d0 e4       	ldi	r29, 0x40	; 64
      aa:	de bf       	out	0x3e, r29	; 62
      ac:	cd bf       	out	0x3d, r28	; 61

000000ae <__do_copy_data>:
      ae:	13 e0       	ldi	r17, 0x03	; 3
      b0:	a0 e0       	ldi	r26, 0x00	; 0
      b2:	b1 e0       	ldi	r27, 0x01	; 1
      b4:	ea e8       	ldi	r30, 0x8A	; 138
      b6:	f1 e2       	ldi	r31, 0x21	; 33
      b8:	00 e0       	ldi	r16, 0x00	; 0
      ba:	0b bf       	out	0x3b, r16	; 59
      bc:	02 c0       	rjmp	.+4      	; 0xc2 <__do_copy_data+0x14>
      be:	07 90       	elpm	r0, Z+
      c0:	0d 92       	st	X+, r0
      c2:	ae 31       	cpi	r26, 0x1E	; 30
      c4:	b1 07       	cpc	r27, r17
      c6:	d9 f7       	brne	.-10     	; 0xbe <__do_copy_data+0x10>

000000c8 <__do_clear_bss>:
      c8:	29 e0       	ldi	r18, 0x09	; 9
      ca:	ae e1       	ldi	r26, 0x1E	; 30
      cc:	b3 e0       	ldi	r27, 0x03	; 3
      ce:	01 c0       	rjmp	.+2      	; 0xd2 <.do_clear_bss_start>

000000d0 <.do_clear_bss_loop>:
      d0:	1d 92       	st	X+, r1

000000d2 <.do_clear_bss_start>:
      d2:	a8 37       	cpi	r26, 0x78	; 120
      d4:	b2 07       	cpc	r27, r18
      d6:	e1 f7       	brne	.-8      	; 0xd0 <.do_clear_bss_loop>
      d8:	0e 94 ad 0a 	call	0x155a	; 0x155a <main>
      dc:	0c 94 c3 10 	jmp	0x2186	; 0x2186 <_exit>

000000e0 <__bad_interrupt>:
      e0:	8f cf       	rjmp	.-226    	; 0x0 <__vectors>

000000e2 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
      e2:	cf 93       	push	r28
      e4:	df 93       	push	r29
      e6:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
      e8:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
      ec:	20 91 1e 03 	lds	r18, 0x031E	; 0x80031e <__data_end>
      f0:	30 91 1f 03 	lds	r19, 0x031F	; 0x80031f <__data_end+0x1>
      f4:	c9 01       	movw	r24, r18
      f6:	8c 0f       	add	r24, r28
      f8:	9d 1f       	adc	r25, r29
      fa:	8c 3d       	cpi	r24, 0xDC	; 220
      fc:	45 e0       	ldi	r20, 0x05	; 5
      fe:	94 07       	cpc	r25, r20
     100:	58 f4       	brcc	.+22     	; 0x118 <pvPortMalloc+0x36>
     102:	28 17       	cp	r18, r24
     104:	39 07       	cpc	r19, r25
     106:	58 f4       	brcc	.+22     	; 0x11e <pvPortMalloc+0x3c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     108:	e9 01       	movw	r28, r18
     10a:	c0 5e       	subi	r28, 0xE0	; 224
     10c:	dc 4f       	sbci	r29, 0xFC	; 252
			xNextFreeByte += xWantedSize;			
     10e:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <__data_end+0x1>
     112:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <__data_end>
     116:	05 c0       	rjmp	.+10     	; 0x122 <pvPortMalloc+0x40>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
     118:	c0 e0       	ldi	r28, 0x00	; 0
     11a:	d0 e0       	ldi	r29, 0x00	; 0
     11c:	02 c0       	rjmp	.+4      	; 0x122 <pvPortMalloc+0x40>
     11e:	c0 e0       	ldi	r28, 0x00	; 0
     120:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     122:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     126:	ce 01       	movw	r24, r28
     128:	df 91       	pop	r29
     12a:	cf 91       	pop	r28
     12c:	08 95       	ret

0000012e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     12e:	08 95       	ret

00000130 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     130:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     132:	03 96       	adiw	r24, 0x03	; 3
     134:	92 83       	std	Z+2, r25	; 0x02
     136:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     138:	2f ef       	ldi	r18, 0xFF	; 255
     13a:	3f ef       	ldi	r19, 0xFF	; 255
     13c:	34 83       	std	Z+4, r19	; 0x04
     13e:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     140:	96 83       	std	Z+6, r25	; 0x06
     142:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     144:	90 87       	std	Z+8, r25	; 0x08
     146:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     148:	10 82       	st	Z, r1
     14a:	08 95       	ret

0000014c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     14c:	fc 01       	movw	r30, r24
     14e:	11 86       	std	Z+9, r1	; 0x09
     150:	10 86       	std	Z+8, r1	; 0x08
     152:	08 95       	ret

00000154 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     154:	cf 93       	push	r28
     156:	df 93       	push	r29
     158:	fc 01       	movw	r30, r24
     15a:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     15c:	21 81       	ldd	r18, Z+1	; 0x01
     15e:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
     160:	e9 01       	movw	r28, r18
     162:	8a 81       	ldd	r24, Y+2	; 0x02
     164:	9b 81       	ldd	r25, Y+3	; 0x03
     166:	13 96       	adiw	r26, 0x03	; 3
     168:	9c 93       	st	X, r25
     16a:	8e 93       	st	-X, r24
     16c:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
     16e:	81 81       	ldd	r24, Z+1	; 0x01
     170:	92 81       	ldd	r25, Z+2	; 0x02
     172:	15 96       	adiw	r26, 0x05	; 5
     174:	9c 93       	st	X, r25
     176:	8e 93       	st	-X, r24
     178:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     17a:	8a 81       	ldd	r24, Y+2	; 0x02
     17c:	9b 81       	ldd	r25, Y+3	; 0x03
     17e:	ec 01       	movw	r28, r24
     180:	7d 83       	std	Y+5, r23	; 0x05
     182:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     184:	e9 01       	movw	r28, r18
     186:	7b 83       	std	Y+3, r23	; 0x03
     188:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     18a:	72 83       	std	Z+2, r23	; 0x02
     18c:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     18e:	19 96       	adiw	r26, 0x09	; 9
     190:	fc 93       	st	X, r31
     192:	ee 93       	st	-X, r30
     194:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
     196:	80 81       	ld	r24, Z
     198:	8f 5f       	subi	r24, 0xFF	; 255
     19a:	80 83       	st	Z, r24
}
     19c:	df 91       	pop	r29
     19e:	cf 91       	pop	r28
     1a0:	08 95       	ret

000001a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     1a2:	cf 93       	push	r28
     1a4:	df 93       	push	r29
     1a6:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     1a8:	48 81       	ld	r20, Y
     1aa:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     1ac:	4f 3f       	cpi	r20, 0xFF	; 255
     1ae:	2f ef       	ldi	r18, 0xFF	; 255
     1b0:	52 07       	cpc	r21, r18
     1b2:	31 f4       	brne	.+12     	; 0x1c0 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     1b4:	dc 01       	movw	r26, r24
     1b6:	17 96       	adiw	r26, 0x07	; 7
     1b8:	ed 91       	ld	r30, X+
     1ba:	fc 91       	ld	r31, X
     1bc:	18 97       	sbiw	r26, 0x08	; 8
     1be:	17 c0       	rjmp	.+46     	; 0x1ee <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     1c0:	fc 01       	movw	r30, r24
     1c2:	33 96       	adiw	r30, 0x03	; 3
     1c4:	dc 01       	movw	r26, r24
     1c6:	15 96       	adiw	r26, 0x05	; 5
     1c8:	2d 91       	ld	r18, X+
     1ca:	3c 91       	ld	r19, X
     1cc:	16 97       	sbiw	r26, 0x06	; 6
     1ce:	d9 01       	movw	r26, r18
     1d0:	2d 91       	ld	r18, X+
     1d2:	3c 91       	ld	r19, X
     1d4:	42 17       	cp	r20, r18
     1d6:	53 07       	cpc	r21, r19
     1d8:	50 f0       	brcs	.+20     	; 0x1ee <vListInsert+0x4c>
     1da:	02 80       	ldd	r0, Z+2	; 0x02
     1dc:	f3 81       	ldd	r31, Z+3	; 0x03
     1de:	e0 2d       	mov	r30, r0
     1e0:	a2 81       	ldd	r26, Z+2	; 0x02
     1e2:	b3 81       	ldd	r27, Z+3	; 0x03
     1e4:	2d 91       	ld	r18, X+
     1e6:	3c 91       	ld	r19, X
     1e8:	42 17       	cp	r20, r18
     1ea:	53 07       	cpc	r21, r19
     1ec:	b0 f7       	brcc	.-20     	; 0x1da <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     1ee:	a2 81       	ldd	r26, Z+2	; 0x02
     1f0:	b3 81       	ldd	r27, Z+3	; 0x03
     1f2:	bb 83       	std	Y+3, r27	; 0x03
     1f4:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     1f6:	15 96       	adiw	r26, 0x05	; 5
     1f8:	dc 93       	st	X, r29
     1fa:	ce 93       	st	-X, r28
     1fc:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
     1fe:	fd 83       	std	Y+5, r31	; 0x05
     200:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     202:	d3 83       	std	Z+3, r29	; 0x03
     204:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     206:	99 87       	std	Y+9, r25	; 0x09
     208:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     20a:	fc 01       	movw	r30, r24
     20c:	20 81       	ld	r18, Z
     20e:	2f 5f       	subi	r18, 0xFF	; 255
     210:	20 83       	st	Z, r18
}
     212:	df 91       	pop	r29
     214:	cf 91       	pop	r28
     216:	08 95       	ret

00000218 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     218:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     21a:	a2 81       	ldd	r26, Z+2	; 0x02
     21c:	b3 81       	ldd	r27, Z+3	; 0x03
     21e:	84 81       	ldd	r24, Z+4	; 0x04
     220:	95 81       	ldd	r25, Z+5	; 0x05
     222:	15 96       	adiw	r26, 0x05	; 5
     224:	9c 93       	st	X, r25
     226:	8e 93       	st	-X, r24
     228:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     22a:	a4 81       	ldd	r26, Z+4	; 0x04
     22c:	b5 81       	ldd	r27, Z+5	; 0x05
     22e:	82 81       	ldd	r24, Z+2	; 0x02
     230:	93 81       	ldd	r25, Z+3	; 0x03
     232:	13 96       	adiw	r26, 0x03	; 3
     234:	9c 93       	st	X, r25
     236:	8e 93       	st	-X, r24
     238:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     23a:	a0 85       	ldd	r26, Z+8	; 0x08
     23c:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     23e:	11 96       	adiw	r26, 0x01	; 1
     240:	8d 91       	ld	r24, X+
     242:	9c 91       	ld	r25, X
     244:	12 97       	sbiw	r26, 0x02	; 2
     246:	e8 17       	cp	r30, r24
     248:	f9 07       	cpc	r31, r25
     24a:	31 f4       	brne	.+12     	; 0x258 <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     24c:	84 81       	ldd	r24, Z+4	; 0x04
     24e:	95 81       	ldd	r25, Z+5	; 0x05
     250:	12 96       	adiw	r26, 0x02	; 2
     252:	9c 93       	st	X, r25
     254:	8e 93       	st	-X, r24
     256:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
     258:	11 86       	std	Z+9, r1	; 0x09
     25a:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     25c:	8c 91       	ld	r24, X
     25e:	81 50       	subi	r24, 0x01	; 1
     260:	8c 93       	st	X, r24
     262:	08 95       	ret

00000264 <initUSART>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//buzz when sensor tripped
enum BUZZERState {buzz_wait, no_buzz, buzz_high, buzz_low} buzzer_state;

void buzz_Init(){
	buzzer_state = buzz_wait;
     264:	81 30       	cpi	r24, 0x01	; 1
     266:	81 f0       	breq	.+32     	; 0x288 <initUSART+0x24>
     268:	e1 ec       	ldi	r30, 0xC1	; 193
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	88 61       	ori	r24, 0x18	; 24
     270:	80 83       	st	Z, r24
     272:	e2 ec       	ldi	r30, 0xC2	; 194
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	80 81       	ld	r24, Z
     278:	86 60       	ori	r24, 0x06	; 6
     27a:	80 83       	st	Z, r24
     27c:	83 e3       	ldi	r24, 0x33	; 51
     27e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     282:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     286:	08 95       	ret
     288:	e9 ec       	ldi	r30, 0xC9	; 201
     28a:	f0 e0       	ldi	r31, 0x00	; 0
     28c:	80 81       	ld	r24, Z
     28e:	88 61       	ori	r24, 0x18	; 24
     290:	80 83       	st	Z, r24
     292:	ea ec       	ldi	r30, 0xCA	; 202
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	80 81       	ld	r24, Z
     298:	86 60       	ori	r24, 0x06	; 6
     29a:	80 83       	st	Z, r24
     29c:	83 e3       	ldi	r24, 0x33	; 51
     29e:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     2a2:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     2a6:	08 95       	ret

000002a8 <USART_Flush>:
     2a8:	81 30       	cpi	r24, 0x01	; 1
     2aa:	29 f4       	brne	.+10     	; 0x2b6 <USART_Flush+0xe>
     2ac:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     2b0:	88 23       	and	r24, r24
     2b2:	74 f0       	brlt	.+28     	; 0x2d0 <USART_Flush+0x28>
     2b4:	08 95       	ret
     2b6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     2ba:	88 23       	and	r24, r24
     2bc:	8c f4       	brge	.+34     	; 0x2e0 <USART_Flush+0x38>
     2be:	a6 ec       	ldi	r26, 0xC6	; 198
     2c0:	b0 e0       	ldi	r27, 0x00	; 0
     2c2:	e0 ec       	ldi	r30, 0xC0	; 192
     2c4:	f0 e0       	ldi	r31, 0x00	; 0
     2c6:	8c 91       	ld	r24, X
     2c8:	80 81       	ld	r24, Z
     2ca:	88 23       	and	r24, r24
     2cc:	e4 f3       	brlt	.-8      	; 0x2c6 <USART_Flush+0x1e>
     2ce:	08 95       	ret
     2d0:	ae ec       	ldi	r26, 0xCE	; 206
     2d2:	b0 e0       	ldi	r27, 0x00	; 0
     2d4:	e8 ec       	ldi	r30, 0xC8	; 200
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	8c 91       	ld	r24, X
     2da:	80 81       	ld	r24, Z
     2dc:	88 23       	and	r24, r24
     2de:	e4 f3       	brlt	.-8      	; 0x2d8 <USART_Flush+0x30>
     2e0:	08 95       	ret

000002e2 <USART_Send>:
     2e2:	61 30       	cpi	r22, 0x01	; 1
     2e4:	41 f0       	breq	.+16     	; 0x2f6 <USART_Send+0x14>
     2e6:	e0 ec       	ldi	r30, 0xC0	; 192
     2e8:	f0 e0       	ldi	r31, 0x00	; 0
     2ea:	90 81       	ld	r25, Z
     2ec:	95 ff       	sbrs	r25, 5
     2ee:	fd cf       	rjmp	.-6      	; 0x2ea <USART_Send+0x8>
     2f0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     2f4:	08 95       	ret
     2f6:	e8 ec       	ldi	r30, 0xC8	; 200
     2f8:	f0 e0       	ldi	r31, 0x00	; 0
     2fa:	90 81       	ld	r25, Z
     2fc:	95 ff       	sbrs	r25, 5
     2fe:	fd cf       	rjmp	.-6      	; 0x2fa <USART_Send+0x18>
     300:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     304:	08 95       	ret

00000306 <USART_Receive>:
     306:	81 30       	cpi	r24, 0x01	; 1
     308:	41 f0       	breq	.+16     	; 0x31a <USART_Receive+0x14>
     30a:	e0 ec       	ldi	r30, 0xC0	; 192
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	80 81       	ld	r24, Z
     310:	88 23       	and	r24, r24
     312:	ec f7       	brge	.-6      	; 0x30e <USART_Receive+0x8>
     314:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     318:	08 95       	ret
     31a:	e8 ec       	ldi	r30, 0xC8	; 200
     31c:	f0 e0       	ldi	r31, 0x00	; 0
     31e:	80 81       	ld	r24, Z
     320:	88 23       	and	r24, r24
     322:	ec f7       	brge	.-6      	; 0x31e <USART_Receive+0x18>
     324:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     328:	08 95       	ret

0000032a <GetKeypadKey>:
     32a:	8f ee       	ldi	r24, 0xEF	; 239
     32c:	82 b9       	out	0x02, r24	; 2
     32e:	00 00       	nop
     330:	00 9b       	sbis	0x00, 0	; 0
     332:	44 c0       	rjmp	.+136    	; 0x3bc <GetKeypadKey+0x92>
     334:	80 b1       	in	r24, 0x00	; 0
     336:	80 95       	com	r24
     338:	81 fd       	sbrc	r24, 1
     33a:	42 c0       	rjmp	.+132    	; 0x3c0 <GetKeypadKey+0x96>
     33c:	80 b1       	in	r24, 0x00	; 0
     33e:	80 95       	com	r24
     340:	82 fd       	sbrc	r24, 2
     342:	40 c0       	rjmp	.+128    	; 0x3c4 <GetKeypadKey+0x9a>
     344:	80 b1       	in	r24, 0x00	; 0
     346:	80 95       	com	r24
     348:	83 fd       	sbrc	r24, 3
     34a:	3e c0       	rjmp	.+124    	; 0x3c8 <GetKeypadKey+0x9e>
     34c:	8f ed       	ldi	r24, 0xDF	; 223
     34e:	82 b9       	out	0x02, r24	; 2
     350:	00 00       	nop
     352:	00 9b       	sbis	0x00, 0	; 0
     354:	3b c0       	rjmp	.+118    	; 0x3cc <GetKeypadKey+0xa2>
     356:	80 b1       	in	r24, 0x00	; 0
     358:	80 95       	com	r24
     35a:	81 fd       	sbrc	r24, 1
     35c:	39 c0       	rjmp	.+114    	; 0x3d0 <GetKeypadKey+0xa6>
     35e:	80 b1       	in	r24, 0x00	; 0
     360:	80 95       	com	r24
     362:	82 fd       	sbrc	r24, 2
     364:	37 c0       	rjmp	.+110    	; 0x3d4 <GetKeypadKey+0xaa>
     366:	80 b1       	in	r24, 0x00	; 0
     368:	80 95       	com	r24
     36a:	83 fd       	sbrc	r24, 3
     36c:	35 c0       	rjmp	.+106    	; 0x3d8 <GetKeypadKey+0xae>
     36e:	8f eb       	ldi	r24, 0xBF	; 191
     370:	82 b9       	out	0x02, r24	; 2
     372:	00 00       	nop
     374:	00 9b       	sbis	0x00, 0	; 0
     376:	32 c0       	rjmp	.+100    	; 0x3dc <GetKeypadKey+0xb2>
     378:	80 b1       	in	r24, 0x00	; 0
     37a:	80 95       	com	r24
     37c:	81 fd       	sbrc	r24, 1
     37e:	30 c0       	rjmp	.+96     	; 0x3e0 <GetKeypadKey+0xb6>
     380:	80 b1       	in	r24, 0x00	; 0
     382:	80 95       	com	r24
     384:	82 fd       	sbrc	r24, 2
     386:	2e c0       	rjmp	.+92     	; 0x3e4 <GetKeypadKey+0xba>
     388:	80 b1       	in	r24, 0x00	; 0
     38a:	80 95       	com	r24
     38c:	83 fd       	sbrc	r24, 3
     38e:	2c c0       	rjmp	.+88     	; 0x3e8 <GetKeypadKey+0xbe>
     390:	8f e7       	ldi	r24, 0x7F	; 127
     392:	82 b9       	out	0x02, r24	; 2
     394:	00 00       	nop
     396:	90 b1       	in	r25, 0x00	; 0
     398:	90 95       	com	r25
     39a:	89 2f       	mov	r24, r25
     39c:	81 70       	andi	r24, 0x01	; 1
     39e:	90 fd       	sbrc	r25, 0
     3a0:	25 c0       	rjmp	.+74     	; 0x3ec <GetKeypadKey+0xc2>
     3a2:	90 b1       	in	r25, 0x00	; 0
     3a4:	90 95       	com	r25
     3a6:	91 fd       	sbrc	r25, 1
     3a8:	23 c0       	rjmp	.+70     	; 0x3f0 <GetKeypadKey+0xc6>
     3aa:	90 b1       	in	r25, 0x00	; 0
     3ac:	90 95       	com	r25
     3ae:	92 fd       	sbrc	r25, 2
     3b0:	21 c0       	rjmp	.+66     	; 0x3f4 <GetKeypadKey+0xca>
     3b2:	90 b1       	in	r25, 0x00	; 0
     3b4:	90 95       	com	r25
     3b6:	93 fd       	sbrc	r25, 3
     3b8:	1f c0       	rjmp	.+62     	; 0x3f8 <GetKeypadKey+0xce>
     3ba:	08 95       	ret
     3bc:	81 e3       	ldi	r24, 0x31	; 49
     3be:	08 95       	ret
     3c0:	84 e3       	ldi	r24, 0x34	; 52
     3c2:	08 95       	ret
     3c4:	87 e3       	ldi	r24, 0x37	; 55
     3c6:	08 95       	ret
     3c8:	8a e2       	ldi	r24, 0x2A	; 42
     3ca:	08 95       	ret
     3cc:	82 e3       	ldi	r24, 0x32	; 50
     3ce:	08 95       	ret
     3d0:	85 e3       	ldi	r24, 0x35	; 53
     3d2:	08 95       	ret
     3d4:	88 e3       	ldi	r24, 0x38	; 56
     3d6:	08 95       	ret
     3d8:	80 e3       	ldi	r24, 0x30	; 48
     3da:	08 95       	ret
     3dc:	83 e3       	ldi	r24, 0x33	; 51
     3de:	08 95       	ret
     3e0:	86 e3       	ldi	r24, 0x36	; 54
     3e2:	08 95       	ret
     3e4:	89 e3       	ldi	r24, 0x39	; 57
     3e6:	08 95       	ret
     3e8:	83 e2       	ldi	r24, 0x23	; 35
     3ea:	08 95       	ret
     3ec:	81 e4       	ldi	r24, 0x41	; 65
     3ee:	08 95       	ret
     3f0:	82 e4       	ldi	r24, 0x42	; 66
     3f2:	08 95       	ret
     3f4:	83 e4       	ldi	r24, 0x43	; 67
     3f6:	08 95       	ret
     3f8:	84 e4       	ldi	r24, 0x44	; 68
     3fa:	08 95       	ret

000003fc <delay_ms>:
     3fc:	18 16       	cp	r1, r24
     3fe:	19 06       	cpc	r1, r25
     400:	5c f0       	brlt	.+22     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     402:	08 95       	ret
     404:	00 00       	nop
     406:	21 50       	subi	r18, 0x01	; 1
     408:	31 09       	sbc	r19, r1
     40a:	e1 f7       	brne	.-8      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     40c:	4f 5f       	subi	r20, 0xFF	; 255
     40e:	5f 4f       	sbci	r21, 0xFF	; 255
     410:	84 17       	cp	r24, r20
     412:	95 07       	cpc	r25, r21
     414:	19 f4       	brne	.+6      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     416:	08 95       	ret
     418:	40 e0       	ldi	r20, 0x00	; 0
     41a:	50 e0       	ldi	r21, 0x00	; 0
     41c:	27 e0       	ldi	r18, 0x07	; 7
     41e:	33 e0       	ldi	r19, 0x03	; 3
     420:	f1 cf       	rjmp	.-30     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>

00000422 <LCD_WriteCommand>:
     422:	5e 98       	cbi	0x0b, 6	; 11
     424:	88 b9       	out	0x08, r24	; 8
     426:	5f 9a       	sbi	0x0b, 7	; 11
     428:	00 00       	nop
     42a:	5f 98       	cbi	0x0b, 7	; 11
     42c:	82 e0       	ldi	r24, 0x02	; 2
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	e5 cf       	rjmp	.-54     	; 0x3fc <delay_ms>
     432:	08 95       	ret

00000434 <LCD_ClearScreen>:
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	f5 cf       	rjmp	.-22     	; 0x422 <LCD_WriteCommand>
     438:	08 95       	ret

0000043a <LCD_Cursor>:
     43a:	81 31       	cpi	r24, 0x11	; 17
     43c:	18 f4       	brcc	.+6      	; 0x444 <LCD_Cursor+0xa>
     43e:	81 58       	subi	r24, 0x81	; 129
     440:	f0 cf       	rjmp	.-32     	; 0x422 <LCD_WriteCommand>
     442:	08 95       	ret
     444:	81 55       	subi	r24, 0x51	; 81
     446:	ed cf       	rjmp	.-38     	; 0x422 <LCD_WriteCommand>
     448:	08 95       	ret

0000044a <LCD_init>:
     44a:	84 e6       	ldi	r24, 0x64	; 100
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	d6 df       	rcall	.-84     	; 0x3fc <delay_ms>
     450:	88 e3       	ldi	r24, 0x38	; 56
     452:	e7 df       	rcall	.-50     	; 0x422 <LCD_WriteCommand>
     454:	86 e0       	ldi	r24, 0x06	; 6
     456:	e5 df       	rcall	.-54     	; 0x422 <LCD_WriteCommand>
     458:	8f e0       	ldi	r24, 0x0F	; 15
     45a:	e3 df       	rcall	.-58     	; 0x422 <LCD_WriteCommand>
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	e1 df       	rcall	.-62     	; 0x422 <LCD_WriteCommand>
     460:	8a e0       	ldi	r24, 0x0A	; 10
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	cb cf       	rjmp	.-106    	; 0x3fc <delay_ms>
     466:	08 95       	ret

00000468 <LCD_WriteData>:
     468:	5e 9a       	sbi	0x0b, 6	; 11
     46a:	88 b9       	out	0x08, r24	; 8
     46c:	5f 9a       	sbi	0x0b, 7	; 11
     46e:	00 00       	nop
     470:	5f 98       	cbi	0x0b, 7	; 11
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	c2 cf       	rjmp	.-124    	; 0x3fc <delay_ms>
     478:	08 95       	ret

0000047a <LCD_DisplayString>:
     47a:	0f 93       	push	r16
     47c:	1f 93       	push	r17
     47e:	cf 93       	push	r28
     480:	df 93       	push	r29
     482:	18 2f       	mov	r17, r24
     484:	eb 01       	movw	r28, r22
     486:	d6 df       	rcall	.-84     	; 0x434 <LCD_ClearScreen>
     488:	88 81       	ld	r24, Y
     48a:	88 23       	and	r24, r24
     48c:	51 f0       	breq	.+20     	; 0x4a2 <LCD_DisplayString+0x28>
     48e:	01 e0       	ldi	r16, 0x01	; 1
     490:	01 0f       	add	r16, r17
     492:	81 2f       	mov	r24, r17
     494:	d2 df       	rcall	.-92     	; 0x43a <LCD_Cursor>
     496:	89 91       	ld	r24, Y+
     498:	e7 df       	rcall	.-50     	; 0x468 <LCD_WriteData>
     49a:	10 2f       	mov	r17, r16
     49c:	88 81       	ld	r24, Y
     49e:	81 11       	cpse	r24, r1
     4a0:	f6 cf       	rjmp	.-20     	; 0x48e <LCD_DisplayString+0x14>
     4a2:	df 91       	pop	r29
     4a4:	cf 91       	pop	r28
     4a6:	1f 91       	pop	r17
     4a8:	0f 91       	pop	r16
     4aa:	08 95       	ret

000004ac <transmit_data>:
     4ac:	fc 01       	movw	r30, r24
     4ae:	20 e0       	ldi	r18, 0x00	; 0
     4b0:	30 e0       	ldi	r19, 0x00	; 0
     4b2:	58 e0       	ldi	r21, 0x08	; 8
     4b4:	55 b9       	out	0x05, r21	; 5
     4b6:	45 b1       	in	r20, 0x05	; 5
     4b8:	bf 01       	movw	r22, r30
     4ba:	02 2e       	mov	r0, r18
     4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <transmit_data+0x16>
     4be:	76 95       	lsr	r23
     4c0:	67 95       	ror	r22
     4c2:	0a 94       	dec	r0
     4c4:	e2 f7       	brpl	.-8      	; 0x4be <transmit_data+0x12>
     4c6:	96 2f       	mov	r25, r22
     4c8:	91 70       	andi	r25, 0x01	; 1
     4ca:	94 2b       	or	r25, r20
     4cc:	95 b9       	out	0x05, r25	; 5
     4ce:	29 9a       	sbi	0x05, 1	; 5
     4d0:	2f 5f       	subi	r18, 0xFF	; 255
     4d2:	3f 4f       	sbci	r19, 0xFF	; 255
     4d4:	20 31       	cpi	r18, 0x10	; 16
     4d6:	31 05       	cpc	r19, r1
     4d8:	69 f7       	brne	.-38     	; 0x4b4 <transmit_data+0x8>
     4da:	2a 9a       	sbi	0x05, 2	; 5
     4dc:	15 b8       	out	0x05, r1	; 5
     4de:	08 95       	ret

000004e0 <matrix_print>:
     4e0:	fb 01       	movw	r30, r22
     4e2:	da 01       	movw	r26, r20
     4e4:	10 82       	st	Z, r1
     4e6:	1c 92       	st	X, r1
     4e8:	41 e0       	ldi	r20, 0x01	; 1
     4ea:	50 e0       	ldi	r21, 0x00	; 0
     4ec:	02 2e       	mov	r0, r18
     4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <matrix_print+0x14>
     4f0:	44 0f       	add	r20, r20
     4f2:	55 1f       	adc	r21, r21
     4f4:	0a 94       	dec	r0
     4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <matrix_print+0x10>
     4f8:	30 81       	ld	r19, Z
     4fa:	43 2b       	or	r20, r19
     4fc:	40 83       	st	Z, r20
     4fe:	fc 01       	movw	r30, r24
     500:	30 e1       	ldi	r19, 0x10	; 16
     502:	23 9f       	mul	r18, r19
     504:	e0 0d       	add	r30, r0
     506:	f1 1d       	adc	r31, r1
     508:	11 24       	eor	r1, r1
     50a:	20 e0       	ldi	r18, 0x00	; 0
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	41 e0       	ldi	r20, 0x01	; 1
     510:	50 e0       	ldi	r21, 0x00	; 0
     512:	81 91       	ld	r24, Z+
     514:	91 91       	ld	r25, Z+
     516:	89 2b       	or	r24, r25
     518:	51 f4       	brne	.+20     	; 0x52e <matrix_print+0x4e>
     51a:	8c 91       	ld	r24, X
     51c:	ba 01       	movw	r22, r20
     51e:	02 2e       	mov	r0, r18
     520:	02 c0       	rjmp	.+4      	; 0x526 <matrix_print+0x46>
     522:	66 0f       	add	r22, r22
     524:	77 1f       	adc	r23, r23
     526:	0a 94       	dec	r0
     528:	e2 f7       	brpl	.-8      	; 0x522 <matrix_print+0x42>
     52a:	68 2b       	or	r22, r24
     52c:	6c 93       	st	X, r22
     52e:	2f 5f       	subi	r18, 0xFF	; 255
     530:	3f 4f       	sbci	r19, 0xFF	; 255
     532:	28 30       	cpi	r18, 0x08	; 8
     534:	31 05       	cpc	r19, r1
     536:	69 f7       	brne	.-38     	; 0x512 <matrix_print+0x32>
     538:	08 95       	ret

0000053a <print_matrix>:
     53a:	0f 93       	push	r16
     53c:	1f 93       	push	r17
     53e:	cf 93       	push	r28
     540:	8c 01       	movw	r16, r24
     542:	c0 e0       	ldi	r28, 0x00	; 0
     544:	2c 2f       	mov	r18, r28
     546:	44 e1       	ldi	r20, 0x14	; 20
     548:	59 e0       	ldi	r21, 0x09	; 9
     54a:	65 e1       	ldi	r22, 0x15	; 21
     54c:	79 e0       	ldi	r23, 0x09	; 9
     54e:	c8 01       	movw	r24, r16
     550:	c7 df       	rcall	.-114    	; 0x4e0 <matrix_print>
     552:	80 91 14 09 	lds	r24, 0x0914	; 0x800914 <tmpD>
     556:	20 91 15 09 	lds	r18, 0x0915	; 0x800915 <tmpB>
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	92 2b       	or	r25, r18
     55e:	a6 df       	rcall	.-180    	; 0x4ac <transmit_data>
     560:	cf 5f       	subi	r28, 0xFF	; 255
     562:	c8 30       	cpi	r28, 0x08	; 8
     564:	79 f7       	brne	.-34     	; 0x544 <print_matrix+0xa>
     566:	cf 91       	pop	r28
     568:	1f 91       	pop	r17
     56a:	0f 91       	pop	r16
     56c:	08 95       	ret

0000056e <alter_c_string>:
     56e:	81 11       	cpse	r24, r1
     570:	06 c0       	rjmp	.+12     	; 0x57e <alter_c_string+0x10>
     572:	fb 01       	movw	r30, r22
     574:	ec 5e       	subi	r30, 0xEC	; 236
     576:	fd 4f       	sbci	r31, 0xFD	; 253
     578:	80 e3       	ldi	r24, 0x30	; 48
     57a:	80 83       	st	Z, r24
     57c:	08 95       	ret
     57e:	81 30       	cpi	r24, 0x01	; 1
     580:	31 f4       	brne	.+12     	; 0x58e <alter_c_string+0x20>
     582:	fb 01       	movw	r30, r22
     584:	ec 5e       	subi	r30, 0xEC	; 236
     586:	fd 4f       	sbci	r31, 0xFD	; 253
     588:	81 e3       	ldi	r24, 0x31	; 49
     58a:	80 83       	st	Z, r24
     58c:	08 95       	ret
     58e:	82 30       	cpi	r24, 0x02	; 2
     590:	31 f4       	brne	.+12     	; 0x59e <alter_c_string+0x30>
     592:	fb 01       	movw	r30, r22
     594:	ec 5e       	subi	r30, 0xEC	; 236
     596:	fd 4f       	sbci	r31, 0xFD	; 253
     598:	82 e3       	ldi	r24, 0x32	; 50
     59a:	80 83       	st	Z, r24
     59c:	08 95       	ret
     59e:	83 30       	cpi	r24, 0x03	; 3
     5a0:	31 f4       	brne	.+12     	; 0x5ae <alter_c_string+0x40>
     5a2:	fb 01       	movw	r30, r22
     5a4:	ec 5e       	subi	r30, 0xEC	; 236
     5a6:	fd 4f       	sbci	r31, 0xFD	; 253
     5a8:	83 e3       	ldi	r24, 0x33	; 51
     5aa:	80 83       	st	Z, r24
     5ac:	08 95       	ret
     5ae:	84 30       	cpi	r24, 0x04	; 4
     5b0:	31 f4       	brne	.+12     	; 0x5be <alter_c_string+0x50>
     5b2:	fb 01       	movw	r30, r22
     5b4:	ec 5e       	subi	r30, 0xEC	; 236
     5b6:	fd 4f       	sbci	r31, 0xFD	; 253
     5b8:	84 e3       	ldi	r24, 0x34	; 52
     5ba:	80 83       	st	Z, r24
     5bc:	08 95       	ret
     5be:	85 30       	cpi	r24, 0x05	; 5
     5c0:	31 f4       	brne	.+12     	; 0x5ce <alter_c_string+0x60>
     5c2:	fb 01       	movw	r30, r22
     5c4:	ec 5e       	subi	r30, 0xEC	; 236
     5c6:	fd 4f       	sbci	r31, 0xFD	; 253
     5c8:	85 e3       	ldi	r24, 0x35	; 53
     5ca:	80 83       	st	Z, r24
     5cc:	08 95       	ret
     5ce:	86 30       	cpi	r24, 0x06	; 6
     5d0:	31 f4       	brne	.+12     	; 0x5de <alter_c_string+0x70>
     5d2:	fb 01       	movw	r30, r22
     5d4:	ec 5e       	subi	r30, 0xEC	; 236
     5d6:	fd 4f       	sbci	r31, 0xFD	; 253
     5d8:	86 e3       	ldi	r24, 0x36	; 54
     5da:	80 83       	st	Z, r24
     5dc:	08 95       	ret
     5de:	87 30       	cpi	r24, 0x07	; 7
     5e0:	31 f4       	brne	.+12     	; 0x5ee <alter_c_string+0x80>
     5e2:	fb 01       	movw	r30, r22
     5e4:	ec 5e       	subi	r30, 0xEC	; 236
     5e6:	fd 4f       	sbci	r31, 0xFD	; 253
     5e8:	87 e3       	ldi	r24, 0x37	; 55
     5ea:	80 83       	st	Z, r24
     5ec:	08 95       	ret
     5ee:	88 30       	cpi	r24, 0x08	; 8
     5f0:	31 f4       	brne	.+12     	; 0x5fe <alter_c_string+0x90>
     5f2:	fb 01       	movw	r30, r22
     5f4:	ec 5e       	subi	r30, 0xEC	; 236
     5f6:	fd 4f       	sbci	r31, 0xFD	; 253
     5f8:	88 e3       	ldi	r24, 0x38	; 56
     5fa:	80 83       	st	Z, r24
     5fc:	08 95       	ret
     5fe:	fb 01       	movw	r30, r22
     600:	ec 5e       	subi	r30, 0xEC	; 236
     602:	fd 4f       	sbci	r31, 0xFD	; 253
     604:	89 e3       	ldi	r24, 0x39	; 57
     606:	80 83       	st	Z, r24
     608:	08 95       	ret

0000060a <output_temp>:
     60a:	9d ec       	ldi	r25, 0xCD	; 205
     60c:	89 9f       	mul	r24, r25
     60e:	91 2d       	mov	r25, r1
     610:	11 24       	eor	r1, r1
     612:	96 95       	lsr	r25
     614:	96 95       	lsr	r25
     616:	96 95       	lsr	r25
     618:	90 93 fd 08 	sts	0x08FD, r25	; 0x8008fd <tens_place>
     61c:	39 2f       	mov	r19, r25
     61e:	33 0f       	add	r19, r19
     620:	23 2f       	mov	r18, r19
     622:	22 0f       	add	r18, r18
     624:	22 0f       	add	r18, r18
     626:	23 0f       	add	r18, r19
     628:	82 1b       	sub	r24, r18
     62a:	80 93 fc 08 	sts	0x08FC, r24	; 0x8008fc <ones_place>
     62e:	65 e1       	ldi	r22, 0x15	; 21
     630:	70 e0       	ldi	r23, 0x00	; 0
     632:	89 2f       	mov	r24, r25
     634:	9c df       	rcall	.-200    	; 0x56e <alter_c_string>
     636:	66 e1       	ldi	r22, 0x16	; 22
     638:	70 e0       	ldi	r23, 0x00	; 0
     63a:	80 91 fc 08 	lds	r24, 0x08FC	; 0x8008fc <ones_place>
     63e:	97 df       	rcall	.-210    	; 0x56e <alter_c_string>
     640:	64 e1       	ldi	r22, 0x14	; 20
     642:	72 e0       	ldi	r23, 0x02	; 2
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	19 cf       	rjmp	.-462    	; 0x47a <LCD_DisplayString>
     648:	08 95       	ret

0000064a <enter_c_string>:
     64a:	80 33       	cpi	r24, 0x30	; 48
     64c:	a1 f4       	brne	.+40     	; 0x676 <enter_c_string+0x2c>
     64e:	61 15       	cp	r22, r1
     650:	71 05       	cpc	r23, r1
     652:	29 f4       	brne	.+10     	; 0x65e <enter_c_string+0x14>
     654:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <user_input>
     658:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <PassKey_LCD_data+0x10>
     65c:	08 95       	ret
     65e:	fb 01       	movw	r30, r22
     660:	e4 5f       	subi	r30, 0xF4	; 244
     662:	fd 4f       	sbci	r31, 0xFD	; 253
     664:	10 82       	st	Z, r1
     666:	fb 01       	movw	r30, r22
     668:	ec 5c       	subi	r30, 0xCC	; 204
     66a:	fd 4f       	sbci	r31, 0xFD	; 253
     66c:	80 e3       	ldi	r24, 0x30	; 48
     66e:	80 8b       	std	Z+16, r24	; 0x10
     670:	8a e2       	ldi	r24, 0x2A	; 42
     672:	87 87       	std	Z+15, r24	; 0x0f
     674:	08 95       	ret
     676:	81 33       	cpi	r24, 0x31	; 49
     678:	b9 f4       	brne	.+46     	; 0x6a8 <enter_c_string+0x5e>
     67a:	61 15       	cp	r22, r1
     67c:	71 05       	cpc	r23, r1
     67e:	39 f4       	brne	.+14     	; 0x68e <enter_c_string+0x44>
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <user_input>
     686:	81 e3       	ldi	r24, 0x31	; 49
     688:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <PassKey_LCD_data+0x10>
     68c:	08 95       	ret
     68e:	fb 01       	movw	r30, r22
     690:	e4 5f       	subi	r30, 0xF4	; 244
     692:	fd 4f       	sbci	r31, 0xFD	; 253
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	80 83       	st	Z, r24
     698:	fb 01       	movw	r30, r22
     69a:	ec 5c       	subi	r30, 0xCC	; 204
     69c:	fd 4f       	sbci	r31, 0xFD	; 253
     69e:	81 e3       	ldi	r24, 0x31	; 49
     6a0:	80 8b       	std	Z+16, r24	; 0x10
     6a2:	8a e2       	ldi	r24, 0x2A	; 42
     6a4:	87 87       	std	Z+15, r24	; 0x0f
     6a6:	08 95       	ret
     6a8:	82 33       	cpi	r24, 0x32	; 50
     6aa:	b9 f4       	brne	.+46     	; 0x6da <enter_c_string+0x90>
     6ac:	61 15       	cp	r22, r1
     6ae:	71 05       	cpc	r23, r1
     6b0:	39 f4       	brne	.+14     	; 0x6c0 <enter_c_string+0x76>
     6b2:	82 e0       	ldi	r24, 0x02	; 2
     6b4:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <user_input>
     6b8:	82 e3       	ldi	r24, 0x32	; 50
     6ba:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <PassKey_LCD_data+0x10>
     6be:	08 95       	ret
     6c0:	fb 01       	movw	r30, r22
     6c2:	e4 5f       	subi	r30, 0xF4	; 244
     6c4:	fd 4f       	sbci	r31, 0xFD	; 253
     6c6:	82 e0       	ldi	r24, 0x02	; 2
     6c8:	80 83       	st	Z, r24
     6ca:	fb 01       	movw	r30, r22
     6cc:	ec 5c       	subi	r30, 0xCC	; 204
     6ce:	fd 4f       	sbci	r31, 0xFD	; 253
     6d0:	82 e3       	ldi	r24, 0x32	; 50
     6d2:	80 8b       	std	Z+16, r24	; 0x10
     6d4:	8a e2       	ldi	r24, 0x2A	; 42
     6d6:	87 87       	std	Z+15, r24	; 0x0f
     6d8:	08 95       	ret
     6da:	83 33       	cpi	r24, 0x33	; 51
     6dc:	b9 f4       	brne	.+46     	; 0x70c <enter_c_string+0xc2>
     6de:	61 15       	cp	r22, r1
     6e0:	71 05       	cpc	r23, r1
     6e2:	39 f4       	brne	.+14     	; 0x6f2 <enter_c_string+0xa8>
     6e4:	83 e0       	ldi	r24, 0x03	; 3
     6e6:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <user_input>
     6ea:	83 e3       	ldi	r24, 0x33	; 51
     6ec:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <PassKey_LCD_data+0x10>
     6f0:	08 95       	ret
     6f2:	fb 01       	movw	r30, r22
     6f4:	e4 5f       	subi	r30, 0xF4	; 244
     6f6:	fd 4f       	sbci	r31, 0xFD	; 253
     6f8:	83 e0       	ldi	r24, 0x03	; 3
     6fa:	80 83       	st	Z, r24
     6fc:	fb 01       	movw	r30, r22
     6fe:	ec 5c       	subi	r30, 0xCC	; 204
     700:	fd 4f       	sbci	r31, 0xFD	; 253
     702:	83 e3       	ldi	r24, 0x33	; 51
     704:	80 8b       	std	Z+16, r24	; 0x10
     706:	8a e2       	ldi	r24, 0x2A	; 42
     708:	87 87       	std	Z+15, r24	; 0x0f
     70a:	08 95       	ret
     70c:	84 33       	cpi	r24, 0x34	; 52
     70e:	b9 f4       	brne	.+46     	; 0x73e <enter_c_string+0xf4>
     710:	61 15       	cp	r22, r1
     712:	71 05       	cpc	r23, r1
     714:	39 f4       	brne	.+14     	; 0x724 <enter_c_string+0xda>
     716:	84 e0       	ldi	r24, 0x04	; 4
     718:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <user_input>
     71c:	84 e3       	ldi	r24, 0x34	; 52
     71e:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <PassKey_LCD_data+0x10>
     722:	08 95       	ret
     724:	fb 01       	movw	r30, r22
     726:	e4 5f       	subi	r30, 0xF4	; 244
     728:	fd 4f       	sbci	r31, 0xFD	; 253
     72a:	84 e0       	ldi	r24, 0x04	; 4
     72c:	80 83       	st	Z, r24
     72e:	fb 01       	movw	r30, r22
     730:	ec 5c       	subi	r30, 0xCC	; 204
     732:	fd 4f       	sbci	r31, 0xFD	; 253
     734:	84 e3       	ldi	r24, 0x34	; 52
     736:	80 8b       	std	Z+16, r24	; 0x10
     738:	8a e2       	ldi	r24, 0x2A	; 42
     73a:	87 87       	std	Z+15, r24	; 0x0f
     73c:	08 95       	ret
     73e:	85 33       	cpi	r24, 0x35	; 53
     740:	b9 f4       	brne	.+46     	; 0x770 <enter_c_string+0x126>
     742:	61 15       	cp	r22, r1
     744:	71 05       	cpc	r23, r1
     746:	39 f4       	brne	.+14     	; 0x756 <enter_c_string+0x10c>
     748:	85 e0       	ldi	r24, 0x05	; 5
     74a:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <user_input>
     74e:	85 e3       	ldi	r24, 0x35	; 53
     750:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <PassKey_LCD_data+0x10>
     754:	08 95       	ret
     756:	fb 01       	movw	r30, r22
     758:	e4 5f       	subi	r30, 0xF4	; 244
     75a:	fd 4f       	sbci	r31, 0xFD	; 253
     75c:	85 e0       	ldi	r24, 0x05	; 5
     75e:	80 83       	st	Z, r24
     760:	fb 01       	movw	r30, r22
     762:	ec 5c       	subi	r30, 0xCC	; 204
     764:	fd 4f       	sbci	r31, 0xFD	; 253
     766:	85 e3       	ldi	r24, 0x35	; 53
     768:	80 8b       	std	Z+16, r24	; 0x10
     76a:	8a e2       	ldi	r24, 0x2A	; 42
     76c:	87 87       	std	Z+15, r24	; 0x0f
     76e:	08 95       	ret
     770:	86 33       	cpi	r24, 0x36	; 54
     772:	b9 f4       	brne	.+46     	; 0x7a2 <enter_c_string+0x158>
     774:	61 15       	cp	r22, r1
     776:	71 05       	cpc	r23, r1
     778:	39 f4       	brne	.+14     	; 0x788 <enter_c_string+0x13e>
     77a:	86 e0       	ldi	r24, 0x06	; 6
     77c:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <user_input>
     780:	86 e3       	ldi	r24, 0x36	; 54
     782:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <PassKey_LCD_data+0x10>
     786:	08 95       	ret
     788:	fb 01       	movw	r30, r22
     78a:	e4 5f       	subi	r30, 0xF4	; 244
     78c:	fd 4f       	sbci	r31, 0xFD	; 253
     78e:	86 e0       	ldi	r24, 0x06	; 6
     790:	80 83       	st	Z, r24
     792:	fb 01       	movw	r30, r22
     794:	ec 5c       	subi	r30, 0xCC	; 204
     796:	fd 4f       	sbci	r31, 0xFD	; 253
     798:	86 e3       	ldi	r24, 0x36	; 54
     79a:	80 8b       	std	Z+16, r24	; 0x10
     79c:	8a e2       	ldi	r24, 0x2A	; 42
     79e:	87 87       	std	Z+15, r24	; 0x0f
     7a0:	08 95       	ret
     7a2:	87 33       	cpi	r24, 0x37	; 55
     7a4:	b9 f4       	brne	.+46     	; 0x7d4 <enter_c_string+0x18a>
     7a6:	61 15       	cp	r22, r1
     7a8:	71 05       	cpc	r23, r1
     7aa:	39 f4       	brne	.+14     	; 0x7ba <enter_c_string+0x170>
     7ac:	87 e0       	ldi	r24, 0x07	; 7
     7ae:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <user_input>
     7b2:	87 e3       	ldi	r24, 0x37	; 55
     7b4:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <PassKey_LCD_data+0x10>
     7b8:	08 95       	ret
     7ba:	fb 01       	movw	r30, r22
     7bc:	e4 5f       	subi	r30, 0xF4	; 244
     7be:	fd 4f       	sbci	r31, 0xFD	; 253
     7c0:	87 e0       	ldi	r24, 0x07	; 7
     7c2:	80 83       	st	Z, r24
     7c4:	fb 01       	movw	r30, r22
     7c6:	ec 5c       	subi	r30, 0xCC	; 204
     7c8:	fd 4f       	sbci	r31, 0xFD	; 253
     7ca:	87 e3       	ldi	r24, 0x37	; 55
     7cc:	80 8b       	std	Z+16, r24	; 0x10
     7ce:	8a e2       	ldi	r24, 0x2A	; 42
     7d0:	87 87       	std	Z+15, r24	; 0x0f
     7d2:	08 95       	ret
     7d4:	88 33       	cpi	r24, 0x38	; 56
     7d6:	b9 f4       	brne	.+46     	; 0x806 <enter_c_string+0x1bc>
     7d8:	61 15       	cp	r22, r1
     7da:	71 05       	cpc	r23, r1
     7dc:	39 f4       	brne	.+14     	; 0x7ec <enter_c_string+0x1a2>
     7de:	88 e0       	ldi	r24, 0x08	; 8
     7e0:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <user_input>
     7e4:	88 e3       	ldi	r24, 0x38	; 56
     7e6:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <PassKey_LCD_data+0x10>
     7ea:	08 95       	ret
     7ec:	fb 01       	movw	r30, r22
     7ee:	e4 5f       	subi	r30, 0xF4	; 244
     7f0:	fd 4f       	sbci	r31, 0xFD	; 253
     7f2:	88 e0       	ldi	r24, 0x08	; 8
     7f4:	80 83       	st	Z, r24
     7f6:	fb 01       	movw	r30, r22
     7f8:	ec 5c       	subi	r30, 0xCC	; 204
     7fa:	fd 4f       	sbci	r31, 0xFD	; 253
     7fc:	88 e3       	ldi	r24, 0x38	; 56
     7fe:	80 8b       	std	Z+16, r24	; 0x10
     800:	8a e2       	ldi	r24, 0x2A	; 42
     802:	87 87       	std	Z+15, r24	; 0x0f
     804:	08 95       	ret
     806:	61 15       	cp	r22, r1
     808:	71 05       	cpc	r23, r1
     80a:	39 f4       	brne	.+14     	; 0x81a <enter_c_string+0x1d0>
     80c:	89 e0       	ldi	r24, 0x09	; 9
     80e:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <user_input>
     812:	89 e3       	ldi	r24, 0x39	; 57
     814:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <PassKey_LCD_data+0x10>
     818:	08 95       	ret
     81a:	fb 01       	movw	r30, r22
     81c:	e4 5f       	subi	r30, 0xF4	; 244
     81e:	fd 4f       	sbci	r31, 0xFD	; 253
     820:	89 e0       	ldi	r24, 0x09	; 9
     822:	80 83       	st	Z, r24
     824:	fb 01       	movw	r30, r22
     826:	ec 5c       	subi	r30, 0xCC	; 204
     828:	fd 4f       	sbci	r31, 0xFD	; 253
     82a:	89 e3       	ldi	r24, 0x39	; 57
     82c:	80 8b       	std	Z+16, r24	; 0x10
     82e:	8a e2       	ldi	r24, 0x2A	; 42
     830:	87 87       	std	Z+15, r24	; 0x0f
     832:	08 95       	ret

00000834 <check_password>:
     834:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <current_pass>
     838:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <user_input>
     83c:	98 13       	cpse	r25, r24
     83e:	16 c0       	rjmp	.+44     	; 0x86c <check_password+0x38>
     840:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <current_pass+0x1>
     844:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <user_input+0x1>
     848:	98 13       	cpse	r25, r24
     84a:	13 c0       	rjmp	.+38     	; 0x872 <check_password+0x3e>
     84c:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <current_pass+0x2>
     850:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <user_input+0x2>
     854:	98 13       	cpse	r25, r24
     856:	10 c0       	rjmp	.+32     	; 0x878 <check_password+0x44>
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <current_pass+0x3>
     860:	20 91 0f 02 	lds	r18, 0x020F	; 0x80020f <user_input+0x3>
     864:	32 17       	cp	r19, r18
     866:	51 f0       	breq	.+20     	; 0x87c <check_password+0x48>
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	08 95       	ret
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	08 95       	ret
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	08 95       	ret
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	08 95       	ret

0000087e <output_for_user_pass_reset>:
     87e:	cf 93       	push	r28
     880:	c6 2f       	mov	r28, r22
     882:	80 33       	cpi	r24, 0x30	; 48
     884:	59 f4       	brne	.+22     	; 0x89c <output_for_user_pass_reset+0x1e>
     886:	81 e1       	ldi	r24, 0x11	; 17
     888:	86 0f       	add	r24, r22
     88a:	d7 dd       	rcall	.-1106   	; 0x43a <LCD_Cursor>
     88c:	80 e3       	ldi	r24, 0x30	; 48
     88e:	ec dd       	rcall	.-1064   	; 0x468 <LCD_WriteData>
     890:	ec 2f       	mov	r30, r28
     892:	f0 e0       	ldi	r31, 0x00	; 0
     894:	e0 50       	subi	r30, 0x00	; 0
     896:	f7 4f       	sbci	r31, 0xF7	; 247
     898:	10 82       	st	Z, r1
     89a:	7b c0       	rjmp	.+246    	; 0x992 <output_for_user_pass_reset+0x114>
     89c:	81 33       	cpi	r24, 0x31	; 49
     89e:	61 f4       	brne	.+24     	; 0x8b8 <output_for_user_pass_reset+0x3a>
     8a0:	81 e1       	ldi	r24, 0x11	; 17
     8a2:	86 0f       	add	r24, r22
     8a4:	ca dd       	rcall	.-1132   	; 0x43a <LCD_Cursor>
     8a6:	81 e3       	ldi	r24, 0x31	; 49
     8a8:	df dd       	rcall	.-1090   	; 0x468 <LCD_WriteData>
     8aa:	ec 2f       	mov	r30, r28
     8ac:	f0 e0       	ldi	r31, 0x00	; 0
     8ae:	e0 50       	subi	r30, 0x00	; 0
     8b0:	f7 4f       	sbci	r31, 0xF7	; 247
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	80 83       	st	Z, r24
     8b6:	6d c0       	rjmp	.+218    	; 0x992 <output_for_user_pass_reset+0x114>
     8b8:	82 33       	cpi	r24, 0x32	; 50
     8ba:	61 f4       	brne	.+24     	; 0x8d4 <output_for_user_pass_reset+0x56>
     8bc:	81 e1       	ldi	r24, 0x11	; 17
     8be:	86 0f       	add	r24, r22
     8c0:	bc dd       	rcall	.-1160   	; 0x43a <LCD_Cursor>
     8c2:	82 e3       	ldi	r24, 0x32	; 50
     8c4:	d1 dd       	rcall	.-1118   	; 0x468 <LCD_WriteData>
     8c6:	ec 2f       	mov	r30, r28
     8c8:	f0 e0       	ldi	r31, 0x00	; 0
     8ca:	e0 50       	subi	r30, 0x00	; 0
     8cc:	f7 4f       	sbci	r31, 0xF7	; 247
     8ce:	82 e0       	ldi	r24, 0x02	; 2
     8d0:	80 83       	st	Z, r24
     8d2:	5f c0       	rjmp	.+190    	; 0x992 <output_for_user_pass_reset+0x114>
     8d4:	83 33       	cpi	r24, 0x33	; 51
     8d6:	61 f4       	brne	.+24     	; 0x8f0 <output_for_user_pass_reset+0x72>
     8d8:	81 e1       	ldi	r24, 0x11	; 17
     8da:	86 0f       	add	r24, r22
     8dc:	ae dd       	rcall	.-1188   	; 0x43a <LCD_Cursor>
     8de:	83 e3       	ldi	r24, 0x33	; 51
     8e0:	c3 dd       	rcall	.-1146   	; 0x468 <LCD_WriteData>
     8e2:	ec 2f       	mov	r30, r28
     8e4:	f0 e0       	ldi	r31, 0x00	; 0
     8e6:	e0 50       	subi	r30, 0x00	; 0
     8e8:	f7 4f       	sbci	r31, 0xF7	; 247
     8ea:	83 e0       	ldi	r24, 0x03	; 3
     8ec:	80 83       	st	Z, r24
     8ee:	51 c0       	rjmp	.+162    	; 0x992 <output_for_user_pass_reset+0x114>
     8f0:	84 33       	cpi	r24, 0x34	; 52
     8f2:	61 f4       	brne	.+24     	; 0x90c <output_for_user_pass_reset+0x8e>
     8f4:	81 e1       	ldi	r24, 0x11	; 17
     8f6:	86 0f       	add	r24, r22
     8f8:	a0 dd       	rcall	.-1216   	; 0x43a <LCD_Cursor>
     8fa:	84 e3       	ldi	r24, 0x34	; 52
     8fc:	b5 dd       	rcall	.-1174   	; 0x468 <LCD_WriteData>
     8fe:	ec 2f       	mov	r30, r28
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	e0 50       	subi	r30, 0x00	; 0
     904:	f7 4f       	sbci	r31, 0xF7	; 247
     906:	84 e0       	ldi	r24, 0x04	; 4
     908:	80 83       	st	Z, r24
     90a:	43 c0       	rjmp	.+134    	; 0x992 <output_for_user_pass_reset+0x114>
     90c:	85 33       	cpi	r24, 0x35	; 53
     90e:	61 f4       	brne	.+24     	; 0x928 <output_for_user_pass_reset+0xaa>
     910:	81 e1       	ldi	r24, 0x11	; 17
     912:	86 0f       	add	r24, r22
     914:	92 dd       	rcall	.-1244   	; 0x43a <LCD_Cursor>
     916:	85 e3       	ldi	r24, 0x35	; 53
     918:	a7 dd       	rcall	.-1202   	; 0x468 <LCD_WriteData>
     91a:	ec 2f       	mov	r30, r28
     91c:	f0 e0       	ldi	r31, 0x00	; 0
     91e:	e0 50       	subi	r30, 0x00	; 0
     920:	f7 4f       	sbci	r31, 0xF7	; 247
     922:	85 e0       	ldi	r24, 0x05	; 5
     924:	80 83       	st	Z, r24
     926:	35 c0       	rjmp	.+106    	; 0x992 <output_for_user_pass_reset+0x114>
     928:	86 33       	cpi	r24, 0x36	; 54
     92a:	61 f4       	brne	.+24     	; 0x944 <output_for_user_pass_reset+0xc6>
     92c:	81 e1       	ldi	r24, 0x11	; 17
     92e:	86 0f       	add	r24, r22
     930:	84 dd       	rcall	.-1272   	; 0x43a <LCD_Cursor>
     932:	86 e3       	ldi	r24, 0x36	; 54
     934:	99 dd       	rcall	.-1230   	; 0x468 <LCD_WriteData>
     936:	ec 2f       	mov	r30, r28
     938:	f0 e0       	ldi	r31, 0x00	; 0
     93a:	e0 50       	subi	r30, 0x00	; 0
     93c:	f7 4f       	sbci	r31, 0xF7	; 247
     93e:	86 e0       	ldi	r24, 0x06	; 6
     940:	80 83       	st	Z, r24
     942:	27 c0       	rjmp	.+78     	; 0x992 <output_for_user_pass_reset+0x114>
     944:	87 33       	cpi	r24, 0x37	; 55
     946:	61 f4       	brne	.+24     	; 0x960 <output_for_user_pass_reset+0xe2>
     948:	81 e1       	ldi	r24, 0x11	; 17
     94a:	86 0f       	add	r24, r22
     94c:	76 dd       	rcall	.-1300   	; 0x43a <LCD_Cursor>
     94e:	87 e3       	ldi	r24, 0x37	; 55
     950:	8b dd       	rcall	.-1258   	; 0x468 <LCD_WriteData>
     952:	ec 2f       	mov	r30, r28
     954:	f0 e0       	ldi	r31, 0x00	; 0
     956:	e0 50       	subi	r30, 0x00	; 0
     958:	f7 4f       	sbci	r31, 0xF7	; 247
     95a:	87 e0       	ldi	r24, 0x07	; 7
     95c:	80 83       	st	Z, r24
     95e:	19 c0       	rjmp	.+50     	; 0x992 <output_for_user_pass_reset+0x114>
     960:	88 33       	cpi	r24, 0x38	; 56
     962:	61 f4       	brne	.+24     	; 0x97c <output_for_user_pass_reset+0xfe>
     964:	81 e1       	ldi	r24, 0x11	; 17
     966:	86 0f       	add	r24, r22
     968:	68 dd       	rcall	.-1328   	; 0x43a <LCD_Cursor>
     96a:	88 e3       	ldi	r24, 0x38	; 56
     96c:	7d dd       	rcall	.-1286   	; 0x468 <LCD_WriteData>
     96e:	ec 2f       	mov	r30, r28
     970:	f0 e0       	ldi	r31, 0x00	; 0
     972:	e0 50       	subi	r30, 0x00	; 0
     974:	f7 4f       	sbci	r31, 0xF7	; 247
     976:	88 e0       	ldi	r24, 0x08	; 8
     978:	80 83       	st	Z, r24
     97a:	0b c0       	rjmp	.+22     	; 0x992 <output_for_user_pass_reset+0x114>
     97c:	81 e1       	ldi	r24, 0x11	; 17
     97e:	86 0f       	add	r24, r22
     980:	5c dd       	rcall	.-1352   	; 0x43a <LCD_Cursor>
     982:	89 e3       	ldi	r24, 0x39	; 57
     984:	71 dd       	rcall	.-1310   	; 0x468 <LCD_WriteData>
     986:	ec 2f       	mov	r30, r28
     988:	f0 e0       	ldi	r31, 0x00	; 0
     98a:	e0 50       	subi	r30, 0x00	; 0
     98c:	f7 4f       	sbci	r31, 0xF7	; 247
     98e:	89 e0       	ldi	r24, 0x09	; 9
     990:	80 83       	st	Z, r24
     992:	cf 91       	pop	r28
     994:	08 95       	ret

00000996 <generate_random_pass>:
     996:	0f 93       	push	r16
     998:	1f 93       	push	r17
     99a:	cf 93       	push	r28
     99c:	df 93       	push	r29
     99e:	0e 94 2b 10 	call	0x2056	; 0x2056 <srand>
     9a2:	0e 94 28 10 	call	0x2050	; 0x2050 <rand>
     9a6:	c8 e0       	ldi	r28, 0x08	; 8
     9a8:	d2 e0       	ldi	r29, 0x02	; 2
     9aa:	0a e0       	ldi	r16, 0x0A	; 10
     9ac:	10 e0       	ldi	r17, 0x00	; 0
     9ae:	b8 01       	movw	r22, r16
     9b0:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__divmodhi4>
     9b4:	88 83       	st	Y, r24
     9b6:	0e 94 28 10 	call	0x2050	; 0x2050 <rand>
     9ba:	b8 01       	movw	r22, r16
     9bc:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__divmodhi4>
     9c0:	89 83       	std	Y+1, r24	; 0x01
     9c2:	0e 94 28 10 	call	0x2050	; 0x2050 <rand>
     9c6:	b8 01       	movw	r22, r16
     9c8:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__divmodhi4>
     9cc:	8a 83       	std	Y+2, r24	; 0x02
     9ce:	0e 94 28 10 	call	0x2050	; 0x2050 <rand>
     9d2:	b8 01       	movw	r22, r16
     9d4:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__divmodhi4>
     9d8:	8b 83       	std	Y+3, r24	; 0x03
     9da:	df 91       	pop	r29
     9dc:	cf 91       	pop	r28
     9de:	1f 91       	pop	r17
     9e0:	0f 91       	pop	r16
     9e2:	08 95       	ret

000009e4 <Trans_Tick>:
     9e4:	80 91 73 09 	lds	r24, 0x0973	; 0x800973 <trans_state>
     9e8:	81 30       	cpi	r24, 0x01	; 1
     9ea:	21 f4       	brne	.+8      	; 0x9f4 <Trans_Tick+0x10>
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	80 91 11 09 	lds	r24, 0x0911	; 0x800911 <data_to_send>
     9f2:	77 dc       	rcall	.-1810   	; 0x2e2 <USART_Send>
     9f4:	80 91 73 09 	lds	r24, 0x0973	; 0x800973 <trans_state>
     9f8:	88 23       	and	r24, r24
     9fa:	19 f0       	breq	.+6      	; 0xa02 <Trans_Tick+0x1e>
     9fc:	81 30       	cpi	r24, 0x01	; 1
     9fe:	99 f0       	breq	.+38     	; 0xa26 <Trans_Tick+0x42>
     a00:	19 c0       	rjmp	.+50     	; 0xa34 <Trans_Tick+0x50>
     a02:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     a06:	85 ff       	sbrs	r24, 5
     a08:	17 c0       	rjmp	.+46     	; 0xa38 <Trans_Tick+0x54>
     a0a:	80 91 13 09 	lds	r24, 0x0913	; 0x800913 <ARM_DISARM>
     a0e:	81 30       	cpi	r24, 0x01	; 1
     a10:	21 f4       	brne	.+8      	; 0xa1a <Trans_Tick+0x36>
     a12:	8f ef       	ldi	r24, 0xFF	; 255
     a14:	80 93 11 09 	sts	0x0911, r24	; 0x800911 <data_to_send>
     a18:	02 c0       	rjmp	.+4      	; 0xa1e <Trans_Tick+0x3a>
     a1a:	10 92 11 09 	sts	0x0911, r1	; 0x800911 <data_to_send>
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	80 93 73 09 	sts	0x0973, r24	; 0x800973 <trans_state>
     a24:	08 95       	ret
     a26:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     a2a:	86 ff       	sbrs	r24, 6
     a2c:	05 c0       	rjmp	.+10     	; 0xa38 <Trans_Tick+0x54>
     a2e:	10 92 73 09 	sts	0x0973, r1	; 0x800973 <trans_state>
     a32:	08 95       	ret
     a34:	10 92 73 09 	sts	0x0973, r1	; 0x800973 <trans_state>
     a38:	08 95       	ret

00000a3a <TransSecTask>:
     a3a:	10 92 73 09 	sts	0x0973, r1	; 0x800973 <trans_state>
     a3e:	d2 df       	rcall	.-92     	; 0x9e4 <Trans_Tick>
     a40:	8a e0       	ldi	r24, 0x0A	; 10
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <vTaskDelay>
     a48:	fa cf       	rjmp	.-12     	; 0xa3e <TransSecTask+0x4>

00000a4a <TransSecPulse>:
     a4a:	af 92       	push	r10
     a4c:	bf 92       	push	r11
     a4e:	cf 92       	push	r12
     a50:	df 92       	push	r13
     a52:	ef 92       	push	r14
     a54:	ff 92       	push	r15
     a56:	0f 93       	push	r16
     a58:	a1 2c       	mov	r10, r1
     a5a:	b1 2c       	mov	r11, r1
     a5c:	c1 2c       	mov	r12, r1
     a5e:	d1 2c       	mov	r13, r1
     a60:	e1 2c       	mov	r14, r1
     a62:	f1 2c       	mov	r15, r1
     a64:	08 2f       	mov	r16, r24
     a66:	20 e0       	ldi	r18, 0x00	; 0
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	45 e5       	ldi	r20, 0x55	; 85
     a6c:	50 e0       	ldi	r21, 0x00	; 0
     a6e:	66 e5       	ldi	r22, 0x56	; 86
     a70:	72 e0       	ldi	r23, 0x02	; 2
     a72:	8d e1       	ldi	r24, 0x1D	; 29
     a74:	95 e0       	ldi	r25, 0x05	; 5
     a76:	3c d7       	rcall	.+3704   	; 0x18f0 <xTaskGenericCreate>
     a78:	0f 91       	pop	r16
     a7a:	ff 90       	pop	r15
     a7c:	ef 90       	pop	r14
     a7e:	df 90       	pop	r13
     a80:	cf 90       	pop	r12
     a82:	bf 90       	pop	r11
     a84:	af 90       	pop	r10
     a86:	08 95       	ret

00000a88 <Rec_Tick>:
     a88:	80 91 70 09 	lds	r24, 0x0970	; 0x800970 <rec_state>
     a8c:	81 30       	cpi	r24, 0x01	; 1
     a8e:	31 f4       	brne	.+12     	; 0xa9c <Rec_Tick+0x14>
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	39 dc       	rcall	.-1934   	; 0x306 <USART_Receive>
     a94:	80 93 12 09 	sts	0x0912, r24	; 0x800912 <received_value>
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	06 dc       	rcall	.-2036   	; 0x2a8 <USART_Flush>
     a9c:	80 91 70 09 	lds	r24, 0x0970	; 0x800970 <rec_state>
     aa0:	88 23       	and	r24, r24
     aa2:	19 f0       	breq	.+6      	; 0xaaa <Rec_Tick+0x22>
     aa4:	10 92 70 09 	sts	0x0970, r1	; 0x800970 <rec_state>
     aa8:	08 95       	ret
     aaa:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     aae:	88 23       	and	r24, r24
     ab0:	1c f4       	brge	.+6      	; 0xab8 <Rec_Tick+0x30>
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <rec_state>
     ab8:	08 95       	ret

00000aba <RecSecTask>:
     aba:	10 92 70 09 	sts	0x0970, r1	; 0x800970 <rec_state>
     abe:	e4 df       	rcall	.-56     	; 0xa88 <Rec_Tick>
     ac0:	8a e0       	ldi	r24, 0x0A	; 10
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <vTaskDelay>
     ac8:	fa cf       	rjmp	.-12     	; 0xabe <RecSecTask+0x4>

00000aca <RecSecPulse>:
     aca:	af 92       	push	r10
     acc:	bf 92       	push	r11
     ace:	cf 92       	push	r12
     ad0:	df 92       	push	r13
     ad2:	ef 92       	push	r14
     ad4:	ff 92       	push	r15
     ad6:	0f 93       	push	r16
     ad8:	a1 2c       	mov	r10, r1
     ada:	b1 2c       	mov	r11, r1
     adc:	c1 2c       	mov	r12, r1
     ade:	d1 2c       	mov	r13, r1
     ae0:	e1 2c       	mov	r14, r1
     ae2:	f1 2c       	mov	r15, r1
     ae4:	08 2f       	mov	r16, r24
     ae6:	20 e0       	ldi	r18, 0x00	; 0
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	45 e5       	ldi	r20, 0x55	; 85
     aec:	50 e0       	ldi	r21, 0x00	; 0
     aee:	61 e0       	ldi	r22, 0x01	; 1
     af0:	73 e0       	ldi	r23, 0x03	; 3
     af2:	8d e5       	ldi	r24, 0x5D	; 93
     af4:	95 e0       	ldi	r25, 0x05	; 5
     af6:	fc d6       	rcall	.+3576   	; 0x18f0 <xTaskGenericCreate>
     af8:	0f 91       	pop	r16
     afa:	ff 90       	pop	r15
     afc:	ef 90       	pop	r14
     afe:	df 90       	pop	r13
     b00:	cf 90       	pop	r12
     b02:	bf 90       	pop	r11
     b04:	af 90       	pop	r10
     b06:	08 95       	ret

00000b08 <Menu_Tick>:
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	cf 93       	push	r28
     b0e:	df 93       	push	r29
     b10:	e0 91 74 09 	lds	r30, 0x0974	; 0x800974 <menu_state>
     b14:	8e 2f       	mov	r24, r30
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	8b 30       	cpi	r24, 0x0B	; 11
     b1a:	91 05       	cpc	r25, r1
     b1c:	08 f0       	brcs	.+2      	; 0xb20 <Menu_Tick+0x18>
     b1e:	34 c3       	rjmp	.+1640   	; 0x1188 <Menu_Tick+0x680>
     b20:	fc 01       	movw	r30, r24
     b22:	ea 5b       	subi	r30, 0xBA	; 186
     b24:	ff 4f       	sbci	r31, 0xFF	; 255
     b26:	0c 94 c4 0f 	jmp	0x1f88	; 0x1f88 <__tablejump2__>
     b2a:	80 91 12 09 	lds	r24, 0x0912	; 0x800912 <received_value>
     b2e:	6d dd       	rcall	.-1318   	; 0x60a <output_temp>
     b30:	82 e0       	ldi	r24, 0x02	; 2
     b32:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     b36:	28 c3       	rjmp	.+1616   	; 0x1188 <Menu_Tick+0x680>
     b38:	f8 db       	rcall	.-2064   	; 0x32a <GetKeypadKey>
     b3a:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <keypad_val>
     b3e:	81 11       	cpse	r24, r1
     b40:	21 c0       	rjmp	.+66     	; 0xb84 <Menu_Tick+0x7c>
     b42:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <bluetooth_arm_disarm>
     b46:	82 30       	cpi	r24, 0x02	; 2
     b48:	31 f4       	brne	.+12     	; 0xb56 <Menu_Tick+0x4e>
     b4a:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     b4e:	80 91 12 09 	lds	r24, 0x0912	; 0x800912 <received_value>
     b52:	5b dd       	rcall	.-1354   	; 0x60a <output_temp>
     b54:	19 c3       	rjmp	.+1586   	; 0x1188 <Menu_Tick+0x680>
     b56:	81 11       	cpse	r24, r1
     b58:	09 c0       	rjmp	.+18     	; 0xb6c <Menu_Tick+0x64>
     b5a:	82 e0       	ldi	r24, 0x02	; 2
     b5c:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     b60:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <bluetooth_arm_disarm>
     b64:	80 91 12 09 	lds	r24, 0x0912	; 0x800912 <received_value>
     b68:	50 dd       	rcall	.-1376   	; 0x60a <output_temp>
     b6a:	0e c3       	rjmp	.+1564   	; 0x1188 <Menu_Tick+0x680>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     b72:	92 e0       	ldi	r25, 0x02	; 2
     b74:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <bluetooth_arm_disarm>
     b78:	80 93 13 09 	sts	0x0913, r24	; 0x800913 <ARM_DISARM>
     b7c:	6f e6       	ldi	r22, 0x6F	; 111
     b7e:	72 e0       	ldi	r23, 0x02	; 2
     b80:	7c dc       	rcall	.-1800   	; 0x47a <LCD_DisplayString>
     b82:	02 c3       	rjmp	.+1540   	; 0x1188 <Menu_Tick+0x680>
     b84:	81 34       	cpi	r24, 0x41	; 65
     b86:	c9 f4       	brne	.+50     	; 0xbba <Menu_Tick+0xb2>
     b88:	83 e0       	ldi	r24, 0x03	; 3
     b8a:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     b8e:	64 e3       	ldi	r22, 0x34	; 52
     b90:	72 e0       	ldi	r23, 0x02	; 2
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	72 dc       	rcall	.-1820   	; 0x47a <LCD_DisplayString>
     b96:	10 92 10 09 	sts	0x0910, r1	; 0x800910 <mode>
     b9a:	10 92 04 09 	sts	0x0904, r1	; 0x800904 <pass_location>
     b9e:	ec e0       	ldi	r30, 0x0C	; 12
     ba0:	f2 e0       	ldi	r31, 0x02	; 2
     ba2:	10 82       	st	Z, r1
     ba4:	11 82       	std	Z+1, r1	; 0x01
     ba6:	12 82       	std	Z+2, r1	; 0x02
     ba8:	13 82       	std	Z+3, r1	; 0x03
     baa:	e4 e3       	ldi	r30, 0x34	; 52
     bac:	f2 e0       	ldi	r31, 0x02	; 2
     bae:	80 e2       	ldi	r24, 0x20	; 32
     bb0:	80 8b       	std	Z+16, r24	; 0x10
     bb2:	81 8b       	std	Z+17, r24	; 0x11
     bb4:	82 8b       	std	Z+18, r24	; 0x12
     bb6:	83 8b       	std	Z+19, r24	; 0x13
     bb8:	e7 c2       	rjmp	.+1486   	; 0x1188 <Menu_Tick+0x680>
     bba:	82 34       	cpi	r24, 0x42	; 66
     bbc:	61 f4       	brne	.+24     	; 0xbd6 <Menu_Tick+0xce>
     bbe:	85 e0       	ldi	r24, 0x05	; 5
     bc0:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     bc4:	60 e8       	ldi	r22, 0x80	; 128
     bc6:	72 e0       	ldi	r23, 0x02	; 2
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	57 dc       	rcall	.-1874   	; 0x47a <LCD_DisplayString>
     bcc:	10 92 06 09 	sts	0x0906, r1	; 0x800906 <random_count+0x1>
     bd0:	10 92 05 09 	sts	0x0905, r1	; 0x800905 <random_count>
     bd4:	d9 c2       	rjmp	.+1458   	; 0x1188 <Menu_Tick+0x680>
     bd6:	82 e0       	ldi	r24, 0x02	; 2
     bd8:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     bdc:	d5 c2       	rjmp	.+1450   	; 0x1188 <Menu_Tick+0x680>
     bde:	a5 db       	rcall	.-2230   	; 0x32a <GetKeypadKey>
     be0:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <keypad_val>
     be4:	91 e0       	ldi	r25, 0x01	; 1
     be6:	90 93 74 09 	sts	0x0974, r25	; 0x800974 <menu_state>
     bea:	90 91 0b 09 	lds	r25, 0x090B	; 0x80090b <sensors_tripped>
     bee:	91 30       	cpi	r25, 0x01	; 1
     bf0:	81 f0       	breq	.+32     	; 0xc12 <Menu_Tick+0x10a>
     bf2:	90 91 0c 09 	lds	r25, 0x090C	; 0x80090c <sensors_tripped+0x1>
     bf6:	91 30       	cpi	r25, 0x01	; 1
     bf8:	61 f0       	breq	.+24     	; 0xc12 <Menu_Tick+0x10a>
     bfa:	90 91 0d 09 	lds	r25, 0x090D	; 0x80090d <sensors_tripped+0x2>
     bfe:	91 30       	cpi	r25, 0x01	; 1
     c00:	41 f0       	breq	.+16     	; 0xc12 <Menu_Tick+0x10a>
     c02:	90 91 0e 09 	lds	r25, 0x090E	; 0x80090e <sensors_tripped+0x3>
     c06:	91 30       	cpi	r25, 0x01	; 1
     c08:	21 f0       	breq	.+8      	; 0xc12 <Menu_Tick+0x10a>
     c0a:	90 91 0f 09 	lds	r25, 0x090F	; 0x80090f <sensors_tripped+0x4>
     c0e:	91 30       	cpi	r25, 0x01	; 1
     c10:	41 f4       	brne	.+16     	; 0xc22 <Menu_Tick+0x11a>
     c12:	8a e0       	ldi	r24, 0x0A	; 10
     c14:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     c18:	65 ea       	ldi	r22, 0xA5	; 165
     c1a:	72 e0       	ldi	r23, 0x02	; 2
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	2d dc       	rcall	.-1958   	; 0x47a <LCD_DisplayString>
     c20:	b3 c2       	rjmp	.+1382   	; 0x1188 <Menu_Tick+0x680>
     c22:	88 23       	and	r24, r24
     c24:	21 f0       	breq	.+8      	; 0xc2e <Menu_Tick+0x126>
     c26:	9e eb       	ldi	r25, 0xBE	; 190
     c28:	98 0f       	add	r25, r24
     c2a:	93 30       	cpi	r25, 0x03	; 3
     c2c:	d8 f4       	brcc	.+54     	; 0xc64 <Menu_Tick+0x15c>
     c2e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <bluetooth_arm_disarm>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	29 f4       	brne	.+10     	; 0xc40 <Menu_Tick+0x138>
     c36:	6f e6       	ldi	r22, 0x6F	; 111
     c38:	72 e0       	ldi	r23, 0x02	; 2
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	1e dc       	rcall	.-1988   	; 0x47a <LCD_DisplayString>
     c3e:	a4 c2       	rjmp	.+1352   	; 0x1188 <Menu_Tick+0x680>
     c40:	81 30       	cpi	r24, 0x01	; 1
     c42:	41 f4       	brne	.+16     	; 0xc54 <Menu_Tick+0x14c>
     c44:	82 e0       	ldi	r24, 0x02	; 2
     c46:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <bluetooth_arm_disarm>
     c4a:	6f e6       	ldi	r22, 0x6F	; 111
     c4c:	72 e0       	ldi	r23, 0x02	; 2
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	14 dc       	rcall	.-2008   	; 0x47a <LCD_DisplayString>
     c52:	9a c2       	rjmp	.+1332   	; 0x1188 <Menu_Tick+0x680>
     c54:	82 e0       	ldi	r24, 0x02	; 2
     c56:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     c5a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <bluetooth_arm_disarm>
     c5e:	10 92 13 09 	sts	0x0913, r1	; 0x800913 <ARM_DISARM>
     c62:	92 c2       	rjmp	.+1316   	; 0x1188 <Menu_Tick+0x680>
     c64:	81 34       	cpi	r24, 0x41	; 65
     c66:	c9 f4       	brne	.+50     	; 0xc9a <Menu_Tick+0x192>
     c68:	83 e0       	ldi	r24, 0x03	; 3
     c6a:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     c6e:	64 e3       	ldi	r22, 0x34	; 52
     c70:	72 e0       	ldi	r23, 0x02	; 2
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	02 dc       	rcall	.-2044   	; 0x47a <LCD_DisplayString>
     c76:	10 92 10 09 	sts	0x0910, r1	; 0x800910 <mode>
     c7a:	10 92 04 09 	sts	0x0904, r1	; 0x800904 <pass_location>
     c7e:	ec e0       	ldi	r30, 0x0C	; 12
     c80:	f2 e0       	ldi	r31, 0x02	; 2
     c82:	10 82       	st	Z, r1
     c84:	11 82       	std	Z+1, r1	; 0x01
     c86:	12 82       	std	Z+2, r1	; 0x02
     c88:	13 82       	std	Z+3, r1	; 0x03
     c8a:	e4 e3       	ldi	r30, 0x34	; 52
     c8c:	f2 e0       	ldi	r31, 0x02	; 2
     c8e:	80 e2       	ldi	r24, 0x20	; 32
     c90:	80 8b       	std	Z+16, r24	; 0x10
     c92:	81 8b       	std	Z+17, r24	; 0x11
     c94:	82 8b       	std	Z+18, r24	; 0x12
     c96:	83 8b       	std	Z+19, r24	; 0x13
     c98:	77 c2       	rjmp	.+1262   	; 0x1188 <Menu_Tick+0x680>
     c9a:	6f e6       	ldi	r22, 0x6F	; 111
     c9c:	72 e0       	ldi	r23, 0x02	; 2
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	ec db       	rcall	.-2088   	; 0x47a <LCD_DisplayString>
     ca2:	10 92 0a 09 	sts	0x090A, r1	; 0x80090a <trip_location>
     ca6:	70 c2       	rjmp	.+1248   	; 0x1188 <Menu_Tick+0x680>
     ca8:	40 db       	rcall	.-2432   	; 0x32a <GetKeypadKey>
     caa:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <keypad_val>
     cae:	92 e0       	ldi	r25, 0x02	; 2
     cb0:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <bluetooth_arm_disarm>
     cb4:	88 23       	and	r24, r24
     cb6:	41 f0       	breq	.+16     	; 0xcc8 <Menu_Tick+0x1c0>
     cb8:	9f eb       	ldi	r25, 0xBF	; 191
     cba:	98 0f       	add	r25, r24
     cbc:	92 30       	cpi	r25, 0x02	; 2
     cbe:	20 f0       	brcs	.+8      	; 0xcc8 <Menu_Tick+0x1c0>
     cc0:	8a 32       	cpi	r24, 0x2A	; 42
     cc2:	11 f0       	breq	.+4      	; 0xcc8 <Menu_Tick+0x1c0>
     cc4:	83 32       	cpi	r24, 0x23	; 35
     cc6:	41 f4       	brne	.+16     	; 0xcd8 <Menu_Tick+0x1d0>
     cc8:	83 e0       	ldi	r24, 0x03	; 3
     cca:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     cce:	64 e3       	ldi	r22, 0x34	; 52
     cd0:	72 e0       	ldi	r23, 0x02	; 2
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	d2 db       	rcall	.-2140   	; 0x47a <LCD_DisplayString>
     cd6:	58 c2       	rjmp	.+1200   	; 0x1188 <Menu_Tick+0x680>
     cd8:	83 34       	cpi	r24, 0x43	; 67
     cda:	61 f4       	brne	.+24     	; 0xcf4 <Menu_Tick+0x1ec>
     cdc:	80 91 13 09 	lds	r24, 0x0913	; 0x800913 <ARM_DISARM>
     ce0:	81 11       	cpse	r24, r1
     ce2:	04 c0       	rjmp	.+8      	; 0xcec <Menu_Tick+0x1e4>
     ce4:	82 e0       	ldi	r24, 0x02	; 2
     ce6:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     cea:	4e c2       	rjmp	.+1180   	; 0x1188 <Menu_Tick+0x680>
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     cf2:	4a c2       	rjmp	.+1172   	; 0x1188 <Menu_Tick+0x680>
     cf4:	84 34       	cpi	r24, 0x44	; 68
     cf6:	09 f0       	breq	.+2      	; 0xcfa <Menu_Tick+0x1f2>
     cf8:	ab c0       	rjmp	.+342    	; 0xe50 <Menu_Tick+0x348>
     cfa:	90 91 04 09 	lds	r25, 0x0904	; 0x800904 <pass_location>
     cfe:	94 30       	cpi	r25, 0x04	; 4
     d00:	08 f4       	brcc	.+2      	; 0xd04 <Menu_Tick+0x1fc>
     d02:	9f c0       	rjmp	.+318    	; 0xe42 <Menu_Tick+0x33a>
     d04:	97 dd       	rcall	.-1234   	; 0x834 <check_password>
     d06:	81 30       	cpi	r24, 0x01	; 1
     d08:	91 05       	cpc	r25, r1
     d0a:	a1 f4       	brne	.+40     	; 0xd34 <Menu_Tick+0x22c>
     d0c:	80 91 10 09 	lds	r24, 0x0910	; 0x800910 <mode>
     d10:	81 11       	cpse	r24, r1
     d12:	23 c0       	rjmp	.+70     	; 0xd5a <Menu_Tick+0x252>
     d14:	80 91 13 09 	lds	r24, 0x0913	; 0x800913 <ARM_DISARM>
     d18:	81 11       	cpse	r24, r1
     d1a:	06 c0       	rjmp	.+12     	; 0xd28 <Menu_Tick+0x220>
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	80 93 13 09 	sts	0x0913, r24	; 0x800913 <ARM_DISARM>
     d22:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     d26:	30 c2       	rjmp	.+1120   	; 0x1188 <Menu_Tick+0x680>
     d28:	10 92 13 09 	sts	0x0913, r1	; 0x800913 <ARM_DISARM>
     d2c:	82 e0       	ldi	r24, 0x02	; 2
     d2e:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     d32:	2a c2       	rjmp	.+1108   	; 0x1188 <Menu_Tick+0x680>
     d34:	89 2b       	or	r24, r25
     d36:	09 f0       	breq	.+2      	; 0xd3a <Menu_Tick+0x232>
     d38:	27 c2       	rjmp	.+1102   	; 0x1188 <Menu_Tick+0x680>
     d3a:	80 91 10 09 	lds	r24, 0x0910	; 0x800910 <mode>
     d3e:	81 11       	cpse	r24, r1
     d40:	21 c0       	rjmp	.+66     	; 0xd84 <Menu_Tick+0x27c>
     d42:	80 91 13 09 	lds	r24, 0x0913	; 0x800913 <ARM_DISARM>
     d46:	81 11       	cpse	r24, r1
     d48:	04 c0       	rjmp	.+8      	; 0xd52 <Menu_Tick+0x24a>
     d4a:	82 e0       	ldi	r24, 0x02	; 2
     d4c:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     d50:	1b c2       	rjmp	.+1078   	; 0x1188 <Menu_Tick+0x680>
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     d58:	17 c2       	rjmp	.+1070   	; 0x1188 <Menu_Tick+0x680>
     d5a:	80 91 10 09 	lds	r24, 0x0910	; 0x800910 <mode>
     d5e:	81 30       	cpi	r24, 0x01	; 1
     d60:	e9 f4       	brne	.+58     	; 0xd9c <Menu_Tick+0x294>
     d62:	67 eb       	ldi	r22, 0xB7	; 183
     d64:	72 e0       	ldi	r23, 0x02	; 2
     d66:	89 db       	rcall	.-2286   	; 0x47a <LCD_DisplayString>
     d68:	81 e2       	ldi	r24, 0x21	; 33
     d6a:	67 db       	rcall	.-2354   	; 0x43a <LCD_Cursor>
     d6c:	87 e0       	ldi	r24, 0x07	; 7
     d6e:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     d72:	10 92 04 09 	sts	0x0904, r1	; 0x800904 <pass_location>
     d76:	ec e0       	ldi	r30, 0x0C	; 12
     d78:	f2 e0       	ldi	r31, 0x02	; 2
     d7a:	10 82       	st	Z, r1
     d7c:	11 82       	std	Z+1, r1	; 0x01
     d7e:	12 82       	std	Z+2, r1	; 0x02
     d80:	13 82       	std	Z+3, r1	; 0x03
     d82:	02 c2       	rjmp	.+1028   	; 0x1188 <Menu_Tick+0x680>
     d84:	80 91 10 09 	lds	r24, 0x0910	; 0x800910 <mode>
     d88:	81 30       	cpi	r24, 0x01	; 1
     d8a:	79 f5       	brne	.+94     	; 0xdea <Menu_Tick+0x2e2>
     d8c:	85 e0       	ldi	r24, 0x05	; 5
     d8e:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     d92:	60 e8       	ldi	r22, 0x80	; 128
     d94:	72 e0       	ldi	r23, 0x02	; 2
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	70 db       	rcall	.-2336   	; 0x47a <LCD_DisplayString>
     d9a:	f6 c1       	rjmp	.+1004   	; 0x1188 <Menu_Tick+0x680>
     d9c:	82 30       	cpi	r24, 0x02	; 2
     d9e:	89 f5       	brne	.+98     	; 0xe02 <Menu_Tick+0x2fa>
     da0:	89 e0       	ldi	r24, 0x09	; 9
     da2:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     da6:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <random_count>
     daa:	90 91 06 09 	lds	r25, 0x0906	; 0x800906 <random_count+0x1>
     dae:	f3 dd       	rcall	.-1050   	; 0x996 <generate_random_pass>
     db0:	67 ec       	ldi	r22, 0xC7	; 199
     db2:	72 e0       	ldi	r23, 0x02	; 2
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	61 db       	rcall	.-2366   	; 0x47a <LCD_DisplayString>
     db8:	81 e1       	ldi	r24, 0x11	; 17
     dba:	3f db       	rcall	.-2434   	; 0x43a <LCD_Cursor>
     dbc:	c8 e0       	ldi	r28, 0x08	; 8
     dbe:	d2 e0       	ldi	r29, 0x02	; 2
     dc0:	88 81       	ld	r24, Y
     dc2:	80 5d       	subi	r24, 0xD0	; 208
     dc4:	51 db       	rcall	.-2398   	; 0x468 <LCD_WriteData>
     dc6:	82 e1       	ldi	r24, 0x12	; 18
     dc8:	38 db       	rcall	.-2448   	; 0x43a <LCD_Cursor>
     dca:	89 81       	ldd	r24, Y+1	; 0x01
     dcc:	80 5d       	subi	r24, 0xD0	; 208
     dce:	4c db       	rcall	.-2408   	; 0x468 <LCD_WriteData>
     dd0:	83 e1       	ldi	r24, 0x13	; 19
     dd2:	33 db       	rcall	.-2458   	; 0x43a <LCD_Cursor>
     dd4:	8a 81       	ldd	r24, Y+2	; 0x02
     dd6:	80 5d       	subi	r24, 0xD0	; 208
     dd8:	47 db       	rcall	.-2418   	; 0x468 <LCD_WriteData>
     dda:	84 e1       	ldi	r24, 0x14	; 20
     ddc:	2e db       	rcall	.-2468   	; 0x43a <LCD_Cursor>
     dde:	8b 81       	ldd	r24, Y+3	; 0x03
     de0:	80 5d       	subi	r24, 0xD0	; 208
     de2:	42 db       	rcall	.-2428   	; 0x468 <LCD_WriteData>
     de4:	81 e2       	ldi	r24, 0x21	; 33
     de6:	29 db       	rcall	.-2478   	; 0x43a <LCD_Cursor>
     de8:	cf c1       	rjmp	.+926    	; 0x1188 <Menu_Tick+0x680>
     dea:	80 91 10 09 	lds	r24, 0x0910	; 0x800910 <mode>
     dee:	82 30       	cpi	r24, 0x02	; 2
     df0:	99 f4       	brne	.+38     	; 0xe18 <Menu_Tick+0x310>
     df2:	85 e0       	ldi	r24, 0x05	; 5
     df4:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     df8:	60 e8       	ldi	r22, 0x80	; 128
     dfa:	72 e0       	ldi	r23, 0x02	; 2
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	3d db       	rcall	.-2438   	; 0x47a <LCD_DisplayString>
     e00:	c3 c1       	rjmp	.+902    	; 0x1188 <Menu_Tick+0x680>
     e02:	80 91 10 09 	lds	r24, 0x0910	; 0x800910 <mode>
     e06:	83 30       	cpi	r24, 0x03	; 3
     e08:	09 f0       	breq	.+2      	; 0xe0c <Menu_Tick+0x304>
     e0a:	be c1       	rjmp	.+892    	; 0x1188 <Menu_Tick+0x680>
     e0c:	82 e0       	ldi	r24, 0x02	; 2
     e0e:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     e12:	10 92 13 09 	sts	0x0913, r1	; 0x800913 <ARM_DISARM>
     e16:	b8 c1       	rjmp	.+880    	; 0x1188 <Menu_Tick+0x680>
     e18:	83 30       	cpi	r24, 0x03	; 3
     e1a:	09 f0       	breq	.+2      	; 0xe1e <Menu_Tick+0x316>
     e1c:	b5 c1       	rjmp	.+874    	; 0x1188 <Menu_Tick+0x680>
     e1e:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     e22:	10 92 04 09 	sts	0x0904, r1	; 0x800904 <pass_location>
     e26:	ec e0       	ldi	r30, 0x0C	; 12
     e28:	f2 e0       	ldi	r31, 0x02	; 2
     e2a:	10 82       	st	Z, r1
     e2c:	11 82       	std	Z+1, r1	; 0x01
     e2e:	12 82       	std	Z+2, r1	; 0x02
     e30:	13 82       	std	Z+3, r1	; 0x03
     e32:	e4 e3       	ldi	r30, 0x34	; 52
     e34:	f2 e0       	ldi	r31, 0x02	; 2
     e36:	80 e2       	ldi	r24, 0x20	; 32
     e38:	80 8b       	std	Z+16, r24	; 0x10
     e3a:	81 8b       	std	Z+17, r24	; 0x11
     e3c:	82 8b       	std	Z+18, r24	; 0x12
     e3e:	83 8b       	std	Z+19, r24	; 0x13
     e40:	a3 c1       	rjmp	.+838    	; 0x1188 <Menu_Tick+0x680>
     e42:	93 30       	cpi	r25, 0x03	; 3
     e44:	08 f0       	brcs	.+2      	; 0xe48 <Menu_Tick+0x340>
     e46:	9a c1       	rjmp	.+820    	; 0x117c <Menu_Tick+0x674>
     e48:	83 e0       	ldi	r24, 0x03	; 3
     e4a:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     e4e:	9c c1       	rjmp	.+824    	; 0x1188 <Menu_Tick+0x680>
     e50:	94 e0       	ldi	r25, 0x04	; 4
     e52:	90 93 74 09 	sts	0x0974, r25	; 0x800974 <menu_state>
     e56:	60 91 04 09 	lds	r22, 0x0904	; 0x800904 <pass_location>
     e5a:	64 30       	cpi	r22, 0x04	; 4
     e5c:	08 f0       	brcs	.+2      	; 0xe60 <Menu_Tick+0x358>
     e5e:	94 c1       	rjmp	.+808    	; 0x1188 <Menu_Tick+0x680>
     e60:	70 e0       	ldi	r23, 0x00	; 0
     e62:	f3 db       	rcall	.-2074   	; 0x64a <enter_c_string>
     e64:	80 91 04 09 	lds	r24, 0x0904	; 0x800904 <pass_location>
     e68:	8f 5f       	subi	r24, 0xFF	; 255
     e6a:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <pass_location>
     e6e:	8c c1       	rjmp	.+792    	; 0x1188 <Menu_Tick+0x680>
     e70:	5c da       	rcall	.-2888   	; 0x32a <GetKeypadKey>
     e72:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <keypad_val>
     e76:	81 11       	cpse	r24, r1
     e78:	04 c0       	rjmp	.+8      	; 0xe82 <Menu_Tick+0x37a>
     e7a:	83 e0       	ldi	r24, 0x03	; 3
     e7c:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     e80:	83 c1       	rjmp	.+774    	; 0x1188 <Menu_Tick+0x680>
     e82:	84 e0       	ldi	r24, 0x04	; 4
     e84:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     e88:	7f c1       	rjmp	.+766    	; 0x1188 <Menu_Tick+0x680>
     e8a:	4f da       	rcall	.-2914   	; 0x32a <GetKeypadKey>
     e8c:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <keypad_val>
     e90:	20 91 05 09 	lds	r18, 0x0905	; 0x800905 <random_count>
     e94:	30 91 06 09 	lds	r19, 0x0906	; 0x800906 <random_count+0x1>
     e98:	2f 5f       	subi	r18, 0xFF	; 255
     e9a:	3f 4f       	sbci	r19, 0xFF	; 255
     e9c:	30 93 06 09 	sts	0x0906, r19	; 0x800906 <random_count+0x1>
     ea0:	20 93 05 09 	sts	0x0905, r18	; 0x800905 <random_count>
     ea4:	92 e0       	ldi	r25, 0x02	; 2
     ea6:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <bluetooth_arm_disarm>
     eaa:	88 23       	and	r24, r24
     eac:	31 f0       	breq	.+12     	; 0xeba <Menu_Tick+0x3b2>
     eae:	9f eb       	ldi	r25, 0xBF	; 191
     eb0:	98 0f       	add	r25, r24
     eb2:	92 30       	cpi	r25, 0x02	; 2
     eb4:	10 f0       	brcs	.+4      	; 0xeba <Menu_Tick+0x3b2>
     eb6:	84 34       	cpi	r24, 0x44	; 68
     eb8:	21 f4       	brne	.+8      	; 0xec2 <Menu_Tick+0x3ba>
     eba:	85 e0       	ldi	r24, 0x05	; 5
     ebc:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     ec0:	63 c1       	rjmp	.+710    	; 0x1188 <Menu_Tick+0x680>
     ec2:	83 34       	cpi	r24, 0x43	; 67
     ec4:	61 f4       	brne	.+24     	; 0xede <Menu_Tick+0x3d6>
     ec6:	80 91 13 09 	lds	r24, 0x0913	; 0x800913 <ARM_DISARM>
     eca:	81 11       	cpse	r24, r1
     ecc:	04 c0       	rjmp	.+8      	; 0xed6 <Menu_Tick+0x3ce>
     ece:	82 e0       	ldi	r24, 0x02	; 2
     ed0:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     ed4:	59 c1       	rjmp	.+690    	; 0x1188 <Menu_Tick+0x680>
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     edc:	55 c1       	rjmp	.+682    	; 0x1188 <Menu_Tick+0x680>
     ede:	8a 32       	cpi	r24, 0x2A	; 42
     ee0:	b1 f4       	brne	.+44     	; 0xf0e <Menu_Tick+0x406>
     ee2:	83 e0       	ldi	r24, 0x03	; 3
     ee4:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     ee8:	10 92 04 09 	sts	0x0904, r1	; 0x800904 <pass_location>
     eec:	ec e0       	ldi	r30, 0x0C	; 12
     eee:	f2 e0       	ldi	r31, 0x02	; 2
     ef0:	10 82       	st	Z, r1
     ef2:	11 82       	std	Z+1, r1	; 0x01
     ef4:	12 82       	std	Z+2, r1	; 0x02
     ef6:	13 82       	std	Z+3, r1	; 0x03
     ef8:	e4 e3       	ldi	r30, 0x34	; 52
     efa:	f2 e0       	ldi	r31, 0x02	; 2
     efc:	80 e2       	ldi	r24, 0x20	; 32
     efe:	80 8b       	std	Z+16, r24	; 0x10
     f00:	81 8b       	std	Z+17, r24	; 0x11
     f02:	82 8b       	std	Z+18, r24	; 0x12
     f04:	83 8b       	std	Z+19, r24	; 0x13
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	80 93 10 09 	sts	0x0910, r24	; 0x800910 <mode>
     f0c:	3d c1       	rjmp	.+634    	; 0x1188 <Menu_Tick+0x680>
     f0e:	83 32       	cpi	r24, 0x23	; 35
     f10:	b1 f4       	brne	.+44     	; 0xf3e <Menu_Tick+0x436>
     f12:	83 e0       	ldi	r24, 0x03	; 3
     f14:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     f18:	10 92 04 09 	sts	0x0904, r1	; 0x800904 <pass_location>
     f1c:	ec e0       	ldi	r30, 0x0C	; 12
     f1e:	f2 e0       	ldi	r31, 0x02	; 2
     f20:	10 82       	st	Z, r1
     f22:	11 82       	std	Z+1, r1	; 0x01
     f24:	12 82       	std	Z+2, r1	; 0x02
     f26:	13 82       	std	Z+3, r1	; 0x03
     f28:	e4 e3       	ldi	r30, 0x34	; 52
     f2a:	f2 e0       	ldi	r31, 0x02	; 2
     f2c:	80 e2       	ldi	r24, 0x20	; 32
     f2e:	80 8b       	std	Z+16, r24	; 0x10
     f30:	81 8b       	std	Z+17, r24	; 0x11
     f32:	82 8b       	std	Z+18, r24	; 0x12
     f34:	83 8b       	std	Z+19, r24	; 0x13
     f36:	82 e0       	ldi	r24, 0x02	; 2
     f38:	80 93 10 09 	sts	0x0910, r24	; 0x800910 <mode>
     f3c:	25 c1       	rjmp	.+586    	; 0x1188 <Menu_Tick+0x680>
     f3e:	85 e0       	ldi	r24, 0x05	; 5
     f40:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     f44:	21 c1       	rjmp	.+578    	; 0x1188 <Menu_Tick+0x680>
     f46:	f1 d9       	rcall	.-3102   	; 0x32a <GetKeypadKey>
     f48:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <keypad_val>
     f4c:	92 e0       	ldi	r25, 0x02	; 2
     f4e:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <bluetooth_arm_disarm>
     f52:	88 23       	and	r24, r24
     f54:	41 f0       	breq	.+16     	; 0xf66 <Menu_Tick+0x45e>
     f56:	9f eb       	ldi	r25, 0xBF	; 191
     f58:	98 0f       	add	r25, r24
     f5a:	92 30       	cpi	r25, 0x02	; 2
     f5c:	20 f0       	brcs	.+8      	; 0xf66 <Menu_Tick+0x45e>
     f5e:	8a 32       	cpi	r24, 0x2A	; 42
     f60:	11 f0       	breq	.+4      	; 0xf66 <Menu_Tick+0x45e>
     f62:	83 32       	cpi	r24, 0x23	; 35
     f64:	51 f4       	brne	.+20     	; 0xf7a <Menu_Tick+0x472>
     f66:	80 91 04 09 	lds	r24, 0x0904	; 0x800904 <pass_location>
     f6a:	84 30       	cpi	r24, 0x04	; 4
     f6c:	10 f0       	brcs	.+4      	; 0xf72 <Menu_Tick+0x46a>
     f6e:	81 e2       	ldi	r24, 0x21	; 33
     f70:	64 da       	rcall	.-2872   	; 0x43a <LCD_Cursor>
     f72:	87 e0       	ldi	r24, 0x07	; 7
     f74:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     f78:	07 c1       	rjmp	.+526    	; 0x1188 <Menu_Tick+0x680>
     f7a:	84 34       	cpi	r24, 0x44	; 68
     f7c:	91 f5       	brne	.+100    	; 0xfe2 <Menu_Tick+0x4da>
     f7e:	80 91 04 09 	lds	r24, 0x0904	; 0x800904 <pass_location>
     f82:	84 30       	cpi	r24, 0x04	; 4
     f84:	51 f5       	brne	.+84     	; 0xfda <Menu_Tick+0x4d2>
     f86:	82 e0       	ldi	r24, 0x02	; 2
     f88:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     f8c:	10 92 04 09 	sts	0x0904, r1	; 0x800904 <pass_location>
     f90:	c0 e0       	ldi	r28, 0x00	; 0
     f92:	d9 e0       	ldi	r29, 0x09	; 9
     f94:	68 81       	ld	r22, Y
     f96:	00 e1       	ldi	r16, 0x10	; 16
     f98:	12 e0       	ldi	r17, 0x02	; 2
     f9a:	f8 01       	movw	r30, r16
     f9c:	60 83       	st	Z, r22
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	0e 94 54 10 	call	0x20a8	; 0x20a8 <eeprom_update_byte>
     fa6:	69 81       	ldd	r22, Y+1	; 0x01
     fa8:	f8 01       	movw	r30, r16
     faa:	61 83       	std	Z+1, r22	; 0x01
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	0e 94 54 10 	call	0x20a8	; 0x20a8 <eeprom_update_byte>
     fb4:	6a 81       	ldd	r22, Y+2	; 0x02
     fb6:	f8 01       	movw	r30, r16
     fb8:	62 83       	std	Z+2, r22	; 0x02
     fba:	82 e0       	ldi	r24, 0x02	; 2
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	0e 94 54 10 	call	0x20a8	; 0x20a8 <eeprom_update_byte>
     fc2:	6b 81       	ldd	r22, Y+3	; 0x03
     fc4:	f8 01       	movw	r30, r16
     fc6:	63 83       	std	Z+3, r22	; 0x03
     fc8:	83 e0       	ldi	r24, 0x03	; 3
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	0e 94 54 10 	call	0x20a8	; 0x20a8 <eeprom_update_byte>
     fd0:	18 82       	st	Y, r1
     fd2:	19 82       	std	Y+1, r1	; 0x01
     fd4:	1a 82       	std	Y+2, r1	; 0x02
     fd6:	1b 82       	std	Y+3, r1	; 0x03
     fd8:	d7 c0       	rjmp	.+430    	; 0x1188 <Menu_Tick+0x680>
     fda:	87 e0       	ldi	r24, 0x07	; 7
     fdc:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     fe0:	d3 c0       	rjmp	.+422    	; 0x1188 <Menu_Tick+0x680>
     fe2:	83 34       	cpi	r24, 0x43	; 67
     fe4:	61 f4       	brne	.+24     	; 0xffe <Menu_Tick+0x4f6>
     fe6:	82 e0       	ldi	r24, 0x02	; 2
     fe8:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     fec:	e0 e0       	ldi	r30, 0x00	; 0
     fee:	f9 e0       	ldi	r31, 0x09	; 9
     ff0:	10 82       	st	Z, r1
     ff2:	11 82       	std	Z+1, r1	; 0x01
     ff4:	12 82       	std	Z+2, r1	; 0x02
     ff6:	13 82       	std	Z+3, r1	; 0x03
     ff8:	10 92 04 09 	sts	0x0904, r1	; 0x800904 <pass_location>
     ffc:	c5 c0       	rjmp	.+394    	; 0x1188 <Menu_Tick+0x680>
     ffe:	60 91 04 09 	lds	r22, 0x0904	; 0x800904 <pass_location>
    1002:	64 30       	cpi	r22, 0x04	; 4
    1004:	50 f4       	brcc	.+20     	; 0x101a <Menu_Tick+0x512>
    1006:	98 e0       	ldi	r25, 0x08	; 8
    1008:	90 93 74 09 	sts	0x0974, r25	; 0x800974 <menu_state>
    100c:	38 dc       	rcall	.-1936   	; 0x87e <output_for_user_pass_reset>
    100e:	80 91 04 09 	lds	r24, 0x0904	; 0x800904 <pass_location>
    1012:	8f 5f       	subi	r24, 0xFF	; 255
    1014:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <pass_location>
    1018:	b7 c0       	rjmp	.+366    	; 0x1188 <Menu_Tick+0x680>
    101a:	81 e2       	ldi	r24, 0x21	; 33
    101c:	0e da       	rcall	.-3044   	; 0x43a <LCD_Cursor>
    101e:	b4 c0       	rjmp	.+360    	; 0x1188 <Menu_Tick+0x680>
    1020:	84 d9       	rcall	.-3320   	; 0x32a <GetKeypadKey>
    1022:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <keypad_val>
    1026:	81 11       	cpse	r24, r1
    1028:	04 c0       	rjmp	.+8      	; 0x1032 <Menu_Tick+0x52a>
    102a:	87 e0       	ldi	r24, 0x07	; 7
    102c:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
    1030:	ab c0       	rjmp	.+342    	; 0x1188 <Menu_Tick+0x680>
    1032:	88 e0       	ldi	r24, 0x08	; 8
    1034:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
    1038:	a7 c0       	rjmp	.+334    	; 0x1188 <Menu_Tick+0x680>
    103a:	77 d9       	rcall	.-3346   	; 0x32a <GetKeypadKey>
    103c:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <keypad_val>
    1040:	81 11       	cpse	r24, r1
    1042:	04 c0       	rjmp	.+8      	; 0x104c <Menu_Tick+0x544>
    1044:	89 e0       	ldi	r24, 0x09	; 9
    1046:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
    104a:	9e c0       	rjmp	.+316    	; 0x1188 <Menu_Tick+0x680>
    104c:	83 32       	cpi	r24, 0x23	; 35
    104e:	29 f5       	brne	.+74     	; 0x109a <Menu_Tick+0x592>
    1050:	e8 e0       	ldi	r30, 0x08	; 8
    1052:	f2 e0       	ldi	r31, 0x02	; 2
    1054:	60 81       	ld	r22, Z
    1056:	c0 e1       	ldi	r28, 0x10	; 16
    1058:	d2 e0       	ldi	r29, 0x02	; 2
    105a:	68 83       	st	Y, r22
    105c:	81 81       	ldd	r24, Z+1	; 0x01
    105e:	89 83       	std	Y+1, r24	; 0x01
    1060:	82 81       	ldd	r24, Z+2	; 0x02
    1062:	8a 83       	std	Y+2, r24	; 0x02
    1064:	83 81       	ldd	r24, Z+3	; 0x03
    1066:	8b 83       	std	Y+3, r24	; 0x03
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	0e 94 54 10 	call	0x20a8	; 0x20a8 <eeprom_update_byte>
    1070:	69 81       	ldd	r22, Y+1	; 0x01
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	0e 94 54 10 	call	0x20a8	; 0x20a8 <eeprom_update_byte>
    107a:	6a 81       	ldd	r22, Y+2	; 0x02
    107c:	82 e0       	ldi	r24, 0x02	; 2
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	0e 94 54 10 	call	0x20a8	; 0x20a8 <eeprom_update_byte>
    1084:	6b 81       	ldd	r22, Y+3	; 0x03
    1086:	83 e0       	ldi	r24, 0x03	; 3
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	0e 94 54 10 	call	0x20a8	; 0x20a8 <eeprom_update_byte>
    108e:	82 e0       	ldi	r24, 0x02	; 2
    1090:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
    1094:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <bluetooth_arm_disarm>
    1098:	77 c0       	rjmp	.+238    	; 0x1188 <Menu_Tick+0x680>
    109a:	83 34       	cpi	r24, 0x43	; 67
    109c:	31 f4       	brne	.+12     	; 0x10aa <Menu_Tick+0x5a2>
    109e:	82 e0       	ldi	r24, 0x02	; 2
    10a0:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
    10a4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <bluetooth_arm_disarm>
    10a8:	6f c0       	rjmp	.+222    	; 0x1188 <Menu_Tick+0x680>
    10aa:	89 e0       	ldi	r24, 0x09	; 9
    10ac:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
    10b0:	6b c0       	rjmp	.+214    	; 0x1188 <Menu_Tick+0x680>
    10b2:	80 91 0b 09 	lds	r24, 0x090B	; 0x80090b <sensors_tripped>
    10b6:	81 30       	cpi	r24, 0x01	; 1
    10b8:	31 f4       	brne	.+12     	; 0x10c6 <Menu_Tick+0x5be>
    10ba:	82 e1       	ldi	r24, 0x12	; 18
    10bc:	be d9       	rcall	.-3204   	; 0x43a <LCD_Cursor>
    10be:	81 e3       	ldi	r24, 0x31	; 49
    10c0:	d3 d9       	rcall	.-3162   	; 0x468 <LCD_WriteData>
    10c2:	81 e2       	ldi	r24, 0x21	; 33
    10c4:	ba d9       	rcall	.-3212   	; 0x43a <LCD_Cursor>
    10c6:	80 91 0c 09 	lds	r24, 0x090C	; 0x80090c <sensors_tripped+0x1>
    10ca:	81 30       	cpi	r24, 0x01	; 1
    10cc:	31 f4       	brne	.+12     	; 0x10da <Menu_Tick+0x5d2>
    10ce:	84 e1       	ldi	r24, 0x14	; 20
    10d0:	b4 d9       	rcall	.-3224   	; 0x43a <LCD_Cursor>
    10d2:	82 e3       	ldi	r24, 0x32	; 50
    10d4:	c9 d9       	rcall	.-3182   	; 0x468 <LCD_WriteData>
    10d6:	81 e2       	ldi	r24, 0x21	; 33
    10d8:	b0 d9       	rcall	.-3232   	; 0x43a <LCD_Cursor>
    10da:	80 91 0d 09 	lds	r24, 0x090D	; 0x80090d <sensors_tripped+0x2>
    10de:	81 30       	cpi	r24, 0x01	; 1
    10e0:	31 f4       	brne	.+12     	; 0x10ee <Menu_Tick+0x5e6>
    10e2:	86 e1       	ldi	r24, 0x16	; 22
    10e4:	aa d9       	rcall	.-3244   	; 0x43a <LCD_Cursor>
    10e6:	83 e3       	ldi	r24, 0x33	; 51
    10e8:	bf d9       	rcall	.-3202   	; 0x468 <LCD_WriteData>
    10ea:	81 e2       	ldi	r24, 0x21	; 33
    10ec:	a6 d9       	rcall	.-3252   	; 0x43a <LCD_Cursor>
    10ee:	80 91 0e 09 	lds	r24, 0x090E	; 0x80090e <sensors_tripped+0x3>
    10f2:	81 30       	cpi	r24, 0x01	; 1
    10f4:	31 f4       	brne	.+12     	; 0x1102 <Menu_Tick+0x5fa>
    10f6:	88 e1       	ldi	r24, 0x18	; 24
    10f8:	a0 d9       	rcall	.-3264   	; 0x43a <LCD_Cursor>
    10fa:	84 e3       	ldi	r24, 0x34	; 52
    10fc:	b5 d9       	rcall	.-3222   	; 0x468 <LCD_WriteData>
    10fe:	81 e2       	ldi	r24, 0x21	; 33
    1100:	9c d9       	rcall	.-3272   	; 0x43a <LCD_Cursor>
    1102:	80 91 0f 09 	lds	r24, 0x090F	; 0x80090f <sensors_tripped+0x4>
    1106:	81 30       	cpi	r24, 0x01	; 1
    1108:	31 f4       	brne	.+12     	; 0x1116 <Menu_Tick+0x60e>
    110a:	8a e1       	ldi	r24, 0x1A	; 26
    110c:	96 d9       	rcall	.-3284   	; 0x43a <LCD_Cursor>
    110e:	85 e3       	ldi	r24, 0x35	; 53
    1110:	ab d9       	rcall	.-3242   	; 0x468 <LCD_WriteData>
    1112:	81 e2       	ldi	r24, 0x21	; 33
    1114:	92 d9       	rcall	.-3292   	; 0x43a <LCD_Cursor>
    1116:	09 d9       	rcall	.-3566   	; 0x32a <GetKeypadKey>
    1118:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <keypad_val>
    111c:	81 34       	cpi	r24, 0x41	; 65
    111e:	a9 f4       	brne	.+42     	; 0x114a <Menu_Tick+0x642>
    1120:	93 e0       	ldi	r25, 0x03	; 3
    1122:	90 93 74 09 	sts	0x0974, r25	; 0x800974 <menu_state>
    1126:	10 92 04 09 	sts	0x0904, r1	; 0x800904 <pass_location>
    112a:	ec e0       	ldi	r30, 0x0C	; 12
    112c:	f2 e0       	ldi	r31, 0x02	; 2
    112e:	10 82       	st	Z, r1
    1130:	11 82       	std	Z+1, r1	; 0x01
    1132:	12 82       	std	Z+2, r1	; 0x02
    1134:	13 82       	std	Z+3, r1	; 0x03
    1136:	e4 e3       	ldi	r30, 0x34	; 52
    1138:	f2 e0       	ldi	r31, 0x02	; 2
    113a:	80 e2       	ldi	r24, 0x20	; 32
    113c:	80 8b       	std	Z+16, r24	; 0x10
    113e:	81 8b       	std	Z+17, r24	; 0x11
    1140:	82 8b       	std	Z+18, r24	; 0x12
    1142:	83 8b       	std	Z+19, r24	; 0x13
    1144:	90 93 10 09 	sts	0x0910, r25	; 0x800910 <mode>
    1148:	1f c0       	rjmp	.+62     	; 0x1188 <Menu_Tick+0x680>
    114a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <bluetooth_arm_disarm>
    114e:	82 30       	cpi	r24, 0x02	; 2
    1150:	21 f4       	brne	.+8      	; 0x115a <Menu_Tick+0x652>
    1152:	8a e0       	ldi	r24, 0x0A	; 10
    1154:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
    1158:	17 c0       	rjmp	.+46     	; 0x1188 <Menu_Tick+0x680>
    115a:	81 30       	cpi	r24, 0x01	; 1
    115c:	39 f4       	brne	.+14     	; 0x116c <Menu_Tick+0x664>
    115e:	82 e0       	ldi	r24, 0x02	; 2
    1160:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <bluetooth_arm_disarm>
    1164:	8a e0       	ldi	r24, 0x0A	; 10
    1166:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
    116a:	0e c0       	rjmp	.+28     	; 0x1188 <Menu_Tick+0x680>
    116c:	82 e0       	ldi	r24, 0x02	; 2
    116e:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
    1172:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <bluetooth_arm_disarm>
    1176:	10 92 13 09 	sts	0x0913, r1	; 0x800913 <ARM_DISARM>
    117a:	06 c0       	rjmp	.+12     	; 0x1188 <Menu_Tick+0x680>
    117c:	94 e0       	ldi	r25, 0x04	; 4
    117e:	90 93 74 09 	sts	0x0974, r25	; 0x800974 <menu_state>
    1182:	60 91 04 09 	lds	r22, 0x0904	; 0x800904 <pass_location>
    1186:	6c ce       	rjmp	.-808    	; 0xe60 <Menu_Tick+0x358>
    1188:	df 91       	pop	r29
    118a:	cf 91       	pop	r28
    118c:	1f 91       	pop	r17
    118e:	0f 91       	pop	r16
    1190:	08 95       	ret

00001192 <MenuSecTask>:
    1192:	10 92 74 09 	sts	0x0974, r1	; 0x800974 <menu_state>
    1196:	b8 dc       	rcall	.-1680   	; 0xb08 <Menu_Tick>
    1198:	8a e0       	ldi	r24, 0x0A	; 10
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	21 d6       	rcall	.+3138   	; 0x1de0 <vTaskDelay>
    119e:	fb cf       	rjmp	.-10     	; 0x1196 <MenuSecTask+0x4>

000011a0 <MenuSecPulse>:
    11a0:	af 92       	push	r10
    11a2:	bf 92       	push	r11
    11a4:	cf 92       	push	r12
    11a6:	df 92       	push	r13
    11a8:	ef 92       	push	r14
    11aa:	ff 92       	push	r15
    11ac:	0f 93       	push	r16
    11ae:	a1 2c       	mov	r10, r1
    11b0:	b1 2c       	mov	r11, r1
    11b2:	c1 2c       	mov	r12, r1
    11b4:	d1 2c       	mov	r13, r1
    11b6:	e1 2c       	mov	r14, r1
    11b8:	f1 2c       	mov	r15, r1
    11ba:	08 2f       	mov	r16, r24
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	45 e5       	ldi	r20, 0x55	; 85
    11c2:	50 e0       	ldi	r21, 0x00	; 0
    11c4:	66 ed       	ldi	r22, 0xD6	; 214
    11c6:	72 e0       	ldi	r23, 0x02	; 2
    11c8:	89 ec       	ldi	r24, 0xC9	; 201
    11ca:	98 e0       	ldi	r25, 0x08	; 8
    11cc:	91 d3       	rcall	.+1826   	; 0x18f0 <xTaskGenericCreate>
    11ce:	0f 91       	pop	r16
    11d0:	ff 90       	pop	r15
    11d2:	ef 90       	pop	r14
    11d4:	df 90       	pop	r13
    11d6:	cf 90       	pop	r12
    11d8:	bf 90       	pop	r11
    11da:	af 90       	pop	r10
    11dc:	08 95       	ret

000011de <Sense_Tick>:
    11de:	80 91 76 09 	lds	r24, 0x0976	; 0x800976 <sense_state>
    11e2:	88 23       	and	r24, r24
    11e4:	19 f0       	breq	.+6      	; 0x11ec <Sense_Tick+0xe>
    11e6:	82 30       	cpi	r24, 0x02	; 2
    11e8:	21 f0       	breq	.+8      	; 0x11f2 <Sense_Tick+0x14>
    11ea:	29 c0       	rjmp	.+82     	; 0x123e <Sense_Tick+0x60>
    11ec:	10 92 08 09 	sts	0x0908, r1	; 0x800908 <sensor_trip>
    11f0:	2d c0       	rjmp	.+90     	; 0x124c <Sense_Tick+0x6e>
    11f2:	80 91 12 09 	lds	r24, 0x0912	; 0x800912 <received_value>
    11f6:	80 ff       	sbrs	r24, 0
    11f8:	05 c0       	rjmp	.+10     	; 0x1204 <Sense_Tick+0x26>
    11fa:	91 e0       	ldi	r25, 0x01	; 1
    11fc:	90 93 0b 09 	sts	0x090B, r25	; 0x80090b <sensors_tripped>
    1200:	90 93 08 09 	sts	0x0908, r25	; 0x800908 <sensor_trip>
    1204:	81 ff       	sbrs	r24, 1
    1206:	05 c0       	rjmp	.+10     	; 0x1212 <Sense_Tick+0x34>
    1208:	21 e0       	ldi	r18, 0x01	; 1
    120a:	20 93 0c 09 	sts	0x090C, r18	; 0x80090c <sensors_tripped+0x1>
    120e:	20 93 08 09 	sts	0x0908, r18	; 0x800908 <sensor_trip>
    1212:	82 ff       	sbrs	r24, 2
    1214:	05 c0       	rjmp	.+10     	; 0x1220 <Sense_Tick+0x42>
    1216:	21 e0       	ldi	r18, 0x01	; 1
    1218:	20 93 0d 09 	sts	0x090D, r18	; 0x80090d <sensors_tripped+0x2>
    121c:	20 93 08 09 	sts	0x0908, r18	; 0x800908 <sensor_trip>
    1220:	83 ff       	sbrs	r24, 3
    1222:	05 c0       	rjmp	.+10     	; 0x122e <Sense_Tick+0x50>
    1224:	21 e0       	ldi	r18, 0x01	; 1
    1226:	20 93 0e 09 	sts	0x090E, r18	; 0x80090e <sensors_tripped+0x3>
    122a:	20 93 08 09 	sts	0x0908, r18	; 0x800908 <sensor_trip>
    122e:	84 ff       	sbrs	r24, 4
    1230:	41 c0       	rjmp	.+130    	; 0x12b4 <Sense_Tick+0xd6>
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	80 93 0f 09 	sts	0x090F, r24	; 0x80090f <sensors_tripped+0x4>
    1238:	80 93 08 09 	sts	0x0908, r24	; 0x800908 <sensor_trip>
    123c:	3b c0       	rjmp	.+118    	; 0x12b4 <Sense_Tick+0xd6>
    123e:	81 30       	cpi	r24, 0x01	; 1
    1240:	c1 f0       	breq	.+48     	; 0x1272 <Sense_Tick+0x94>
    1242:	20 f0       	brcs	.+8      	; 0x124c <Sense_Tick+0x6e>
    1244:	82 30       	cpi	r24, 0x02	; 2
    1246:	09 f0       	breq	.+2      	; 0x124a <Sense_Tick+0x6c>
    1248:	40 c0       	rjmp	.+128    	; 0x12ca <Sense_Tick+0xec>
    124a:	34 c0       	rjmp	.+104    	; 0x12b4 <Sense_Tick+0xd6>
    124c:	80 91 13 09 	lds	r24, 0x0913	; 0x800913 <ARM_DISARM>
    1250:	81 30       	cpi	r24, 0x01	; 1
    1252:	19 f4       	brne	.+6      	; 0x125a <Sense_Tick+0x7c>
    1254:	80 93 76 09 	sts	0x0976, r24	; 0x800976 <sense_state>
    1258:	08 95       	ret
    125a:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <sense_state>
    125e:	eb e0       	ldi	r30, 0x0B	; 11
    1260:	f9 e0       	ldi	r31, 0x09	; 9
    1262:	10 82       	st	Z, r1
    1264:	11 82       	std	Z+1, r1	; 0x01
    1266:	12 82       	std	Z+2, r1	; 0x02
    1268:	13 82       	std	Z+3, r1	; 0x03
    126a:	14 82       	std	Z+4, r1	; 0x04
    126c:	10 92 09 09 	sts	0x0909, r1	; 0x800909 <sensor_delay_count>
    1270:	08 95       	ret
    1272:	80 91 09 09 	lds	r24, 0x0909	; 0x800909 <sensor_delay_count>
    1276:	8f 5f       	subi	r24, 0xFF	; 255
    1278:	80 93 09 09 	sts	0x0909, r24	; 0x800909 <sensor_delay_count>
    127c:	90 91 13 09 	lds	r25, 0x0913	; 0x800913 <ARM_DISARM>
    1280:	91 11       	cpse	r25, r1
    1282:	05 c0       	rjmp	.+10     	; 0x128e <Sense_Tick+0xb0>
    1284:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <sense_state>
    1288:	10 92 09 09 	sts	0x0909, r1	; 0x800909 <sensor_delay_count>
    128c:	08 95       	ret
    128e:	8a 30       	cpi	r24, 0x0A	; 10
    1290:	20 f4       	brcc	.+8      	; 0x129a <Sense_Tick+0xbc>
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	80 93 76 09 	sts	0x0976, r24	; 0x800976 <sense_state>
    1298:	08 95       	ret
    129a:	82 e0       	ldi	r24, 0x02	; 2
    129c:	80 93 76 09 	sts	0x0976, r24	; 0x800976 <sense_state>
    12a0:	eb e0       	ldi	r30, 0x0B	; 11
    12a2:	f9 e0       	ldi	r31, 0x09	; 9
    12a4:	10 82       	st	Z, r1
    12a6:	11 82       	std	Z+1, r1	; 0x01
    12a8:	12 82       	std	Z+2, r1	; 0x02
    12aa:	13 82       	std	Z+3, r1	; 0x03
    12ac:	14 82       	std	Z+4, r1	; 0x04
    12ae:	10 92 09 09 	sts	0x0909, r1	; 0x800909 <sensor_delay_count>
    12b2:	08 95       	ret
    12b4:	80 91 13 09 	lds	r24, 0x0913	; 0x800913 <ARM_DISARM>
    12b8:	81 30       	cpi	r24, 0x01	; 1
    12ba:	21 f4       	brne	.+8      	; 0x12c4 <Sense_Tick+0xe6>
    12bc:	82 e0       	ldi	r24, 0x02	; 2
    12be:	80 93 76 09 	sts	0x0976, r24	; 0x800976 <sense_state>
    12c2:	08 95       	ret
    12c4:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <sense_state>
    12c8:	08 95       	ret
    12ca:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <sense_state>
    12ce:	08 95       	ret

000012d0 <SenseSecTask>:
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	80 93 76 09 	sts	0x0976, r24	; 0x800976 <sense_state>
    12d6:	83 df       	rcall	.-250    	; 0x11de <Sense_Tick>
    12d8:	88 ec       	ldi	r24, 0xC8	; 200
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	81 d5       	rcall	.+2818   	; 0x1de0 <vTaskDelay>
    12de:	fb cf       	rjmp	.-10     	; 0x12d6 <SenseSecTask+0x6>

000012e0 <SenseSecPulse>:
    12e0:	af 92       	push	r10
    12e2:	bf 92       	push	r11
    12e4:	cf 92       	push	r12
    12e6:	df 92       	push	r13
    12e8:	ef 92       	push	r14
    12ea:	ff 92       	push	r15
    12ec:	0f 93       	push	r16
    12ee:	a1 2c       	mov	r10, r1
    12f0:	b1 2c       	mov	r11, r1
    12f2:	c1 2c       	mov	r12, r1
    12f4:	d1 2c       	mov	r13, r1
    12f6:	e1 2c       	mov	r14, r1
    12f8:	f1 2c       	mov	r15, r1
    12fa:	08 2f       	mov	r16, r24
    12fc:	20 e0       	ldi	r18, 0x00	; 0
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	45 e5       	ldi	r20, 0x55	; 85
    1302:	50 e0       	ldi	r21, 0x00	; 0
    1304:	62 ee       	ldi	r22, 0xE2	; 226
    1306:	72 e0       	ldi	r23, 0x02	; 2
    1308:	88 e6       	ldi	r24, 0x68	; 104
    130a:	99 e0       	ldi	r25, 0x09	; 9
    130c:	f1 d2       	rcall	.+1506   	; 0x18f0 <xTaskGenericCreate>
    130e:	0f 91       	pop	r16
    1310:	ff 90       	pop	r15
    1312:	ef 90       	pop	r14
    1314:	df 90       	pop	r13
    1316:	cf 90       	pop	r12
    1318:	bf 90       	pop	r11
    131a:	af 90       	pop	r10
    131c:	08 95       	ret

0000131e <Matrix_Tick>:
    131e:	80 91 72 09 	lds	r24, 0x0972	; 0x800972 <matrix_state>
    1322:	81 11       	cpse	r24, r1
    1324:	0b c0       	rjmp	.+22     	; 0x133c <Matrix_Tick+0x1e>
    1326:	80 91 13 09 	lds	r24, 0x0913	; 0x800913 <ARM_DISARM>
    132a:	81 30       	cpi	r24, 0x01	; 1
    132c:	21 f4       	brne	.+8      	; 0x1336 <Matrix_Tick+0x18>
    132e:	88 e8       	ldi	r24, 0x88	; 136
    1330:	91 e0       	ldi	r25, 0x01	; 1
    1332:	03 d9       	rcall	.-3578   	; 0x53a <print_matrix>
    1334:	03 c0       	rjmp	.+6      	; 0x133c <Matrix_Tick+0x1e>
    1336:	88 e0       	ldi	r24, 0x08	; 8
    1338:	91 e0       	ldi	r25, 0x01	; 1
    133a:	ff d8       	rcall	.-3586   	; 0x53a <print_matrix>
    133c:	10 92 72 09 	sts	0x0972, r1	; 0x800972 <matrix_state>
    1340:	08 95       	ret

00001342 <MatrixSecTask>:
    1342:	10 92 72 09 	sts	0x0972, r1	; 0x800972 <matrix_state>
    1346:	eb df       	rcall	.-42     	; 0x131e <Matrix_Tick>
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	49 d5       	rcall	.+2706   	; 0x1de0 <vTaskDelay>
    134e:	fb cf       	rjmp	.-10     	; 0x1346 <MatrixSecTask+0x4>

00001350 <MatrixSecPulse>:
    1350:	af 92       	push	r10
    1352:	bf 92       	push	r11
    1354:	cf 92       	push	r12
    1356:	df 92       	push	r13
    1358:	ef 92       	push	r14
    135a:	ff 92       	push	r15
    135c:	0f 93       	push	r16
    135e:	a1 2c       	mov	r10, r1
    1360:	b1 2c       	mov	r11, r1
    1362:	c1 2c       	mov	r12, r1
    1364:	d1 2c       	mov	r13, r1
    1366:	e1 2c       	mov	r14, r1
    1368:	f1 2c       	mov	r15, r1
    136a:	08 2f       	mov	r16, r24
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	45 e5       	ldi	r20, 0x55	; 85
    1372:	50 e0       	ldi	r21, 0x00	; 0
    1374:	6f ee       	ldi	r22, 0xEF	; 239
    1376:	72 e0       	ldi	r23, 0x02	; 2
    1378:	81 ea       	ldi	r24, 0xA1	; 161
    137a:	99 e0       	ldi	r25, 0x09	; 9
    137c:	b9 d2       	rcall	.+1394   	; 0x18f0 <xTaskGenericCreate>
    137e:	0f 91       	pop	r16
    1380:	ff 90       	pop	r15
    1382:	ef 90       	pop	r14
    1384:	df 90       	pop	r13
    1386:	cf 90       	pop	r12
    1388:	bf 90       	pop	r11
    138a:	af 90       	pop	r10
    138c:	08 95       	ret

0000138e <Blue_Rec_Tick>:
    138e:	80 91 71 09 	lds	r24, 0x0971	; 0x800971 <blue_rec_state>
    1392:	81 30       	cpi	r24, 0x01	; 1
    1394:	a9 f4       	brne	.+42     	; 0x13c0 <Blue_Rec_Tick+0x32>
    1396:	0e 94 83 01 	call	0x306	; 0x306 <USART_Receive>
    139a:	80 93 fe 08 	sts	0x08FE, r24	; 0x8008fe <bluetooth_temp>
    139e:	8f 30       	cpi	r24, 0x0F	; 15
    13a0:	21 f4       	brne	.+8      	; 0x13aa <Blue_Rec_Tick+0x1c>
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <bluetooth_arm_disarm>
    13a8:	08 c0       	rjmp	.+16     	; 0x13ba <Blue_Rec_Tick+0x2c>
    13aa:	80 3f       	cpi	r24, 0xF0	; 240
    13ac:	19 f4       	brne	.+6      	; 0x13b4 <Blue_Rec_Tick+0x26>
    13ae:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <bluetooth_arm_disarm>
    13b2:	03 c0       	rjmp	.+6      	; 0x13ba <Blue_Rec_Tick+0x2c>
    13b4:	82 e0       	ldi	r24, 0x02	; 2
    13b6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <bluetooth_arm_disarm>
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	0e 94 54 01 	call	0x2a8	; 0x2a8 <USART_Flush>
    13c0:	80 91 71 09 	lds	r24, 0x0971	; 0x800971 <blue_rec_state>
    13c4:	88 23       	and	r24, r24
    13c6:	19 f0       	breq	.+6      	; 0x13ce <Blue_Rec_Tick+0x40>
    13c8:	10 92 71 09 	sts	0x0971, r1	; 0x800971 <blue_rec_state>
    13cc:	08 95       	ret
    13ce:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    13d2:	88 23       	and	r24, r24
    13d4:	1c f4       	brge	.+6      	; 0x13dc <Blue_Rec_Tick+0x4e>
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	80 93 71 09 	sts	0x0971, r24	; 0x800971 <blue_rec_state>
    13dc:	08 95       	ret

000013de <BlueRecSecTask>:
    13de:	10 92 71 09 	sts	0x0971, r1	; 0x800971 <blue_rec_state>
    13e2:	d5 df       	rcall	.-86     	; 0x138e <Blue_Rec_Tick>
    13e4:	8a e0       	ldi	r24, 0x0A	; 10
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	fb d4       	rcall	.+2550   	; 0x1de0 <vTaskDelay>
    13ea:	fb cf       	rjmp	.-10     	; 0x13e2 <BlueRecSecTask+0x4>

000013ec <BlueRecSecPulse>:
    13ec:	af 92       	push	r10
    13ee:	bf 92       	push	r11
    13f0:	cf 92       	push	r12
    13f2:	df 92       	push	r13
    13f4:	ef 92       	push	r14
    13f6:	ff 92       	push	r15
    13f8:	0f 93       	push	r16
    13fa:	a1 2c       	mov	r10, r1
    13fc:	b1 2c       	mov	r11, r1
    13fe:	c1 2c       	mov	r12, r1
    1400:	d1 2c       	mov	r13, r1
    1402:	e1 2c       	mov	r14, r1
    1404:	f1 2c       	mov	r15, r1
    1406:	08 2f       	mov	r16, r24
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	45 e5       	ldi	r20, 0x55	; 85
    140e:	50 e0       	ldi	r21, 0x00	; 0
    1410:	6d ef       	ldi	r22, 0xFD	; 253
    1412:	72 e0       	ldi	r23, 0x02	; 2
    1414:	8f ee       	ldi	r24, 0xEF	; 239
    1416:	99 e0       	ldi	r25, 0x09	; 9
    1418:	6b d2       	rcall	.+1238   	; 0x18f0 <xTaskGenericCreate>
    141a:	0f 91       	pop	r16
    141c:	ff 90       	pop	r15
    141e:	ef 90       	pop	r14
    1420:	df 90       	pop	r13
    1422:	cf 90       	pop	r12
    1424:	bf 90       	pop	r11
    1426:	af 90       	pop	r10
    1428:	08 95       	ret

0000142a <Buzz_Tick>:
}

void Buzz_Tick(){
	//Actions
	switch(buzzer_state){
    142a:	80 91 77 09 	lds	r24, 0x0977	; 0x800977 <buzzer_state>
    142e:	82 30       	cpi	r24, 0x02	; 2
    1430:	51 f0       	breq	.+20     	; 0x1446 <Buzz_Tick+0x1c>
    1432:	83 30       	cpi	r24, 0x03	; 3
    1434:	79 f0       	breq	.+30     	; 0x1454 <Buzz_Tick+0x2a>
    1436:	81 30       	cpi	r24, 0x01	; 1
    1438:	99 f4       	brne	.+38     	; 0x1460 <Buzz_Tick+0x36>
		case buzz_wait:
		break;

		case no_buzz:
			++buzzer_counter;
    143a:	80 91 ff 08 	lds	r24, 0x08FF	; 0x8008ff <buzzer_counter>
    143e:	8f 5f       	subi	r24, 0xFF	; 255
    1440:	80 93 ff 08 	sts	0x08FF, r24	; 0x8008ff <buzzer_counter>
    1444:	2f c0       	rjmp	.+94     	; 0x14a4 <Buzz_Tick+0x7a>
		break;

		case buzz_high:
			++buzzer_counter;
    1446:	80 91 ff 08 	lds	r24, 0x08FF	; 0x8008ff <buzzer_counter>
    144a:	8f 5f       	subi	r24, 0xFF	; 255
    144c:	80 93 ff 08 	sts	0x08FF, r24	; 0x8008ff <buzzer_counter>
			PORTB = PORTB|0x10;  //set PIN B4 to 1
    1450:	2c 9a       	sbi	0x05, 4	; 5
		break;
    1452:	06 c0       	rjmp	.+12     	; 0x1460 <Buzz_Tick+0x36>

		case buzz_low:
			++buzzer_counter;    //set PIN B4 to 0
    1454:	80 91 ff 08 	lds	r24, 0x08FF	; 0x8008ff <buzzer_counter>
    1458:	8f 5f       	subi	r24, 0xFF	; 255
    145a:	80 93 ff 08 	sts	0x08FF, r24	; 0x8008ff <buzzer_counter>
			PORTB = PORTB & 0xEF; 
    145e:	2c 98       	cbi	0x05, 4	; 5

		default:
		break;
	}
	//Transitions
	switch(buzzer_state){
    1460:	80 91 77 09 	lds	r24, 0x0977	; 0x800977 <buzzer_state>
    1464:	81 30       	cpi	r24, 0x01	; 1
    1466:	f1 f0       	breq	.+60     	; 0x14a4 <Buzz_Tick+0x7a>
    1468:	28 f0       	brcs	.+10     	; 0x1474 <Buzz_Tick+0x4a>
    146a:	82 30       	cpi	r24, 0x02	; 2
    146c:	71 f1       	breq	.+92     	; 0x14ca <Buzz_Tick+0xa0>
    146e:	83 30       	cpi	r24, 0x03	; 3
    1470:	c1 f1       	breq	.+112    	; 0x14e2 <Buzz_Tick+0xb8>
    1472:	4a c0       	rjmp	.+148    	; 0x1508 <Buzz_Tick+0xde>
		case buzz_wait:
		if(ARM_DISARM == 0){
    1474:	80 91 13 09 	lds	r24, 0x0913	; 0x800913 <ARM_DISARM>
    1478:	88 23       	and	r24, r24
    147a:	09 f4       	brne	.+2      	; 0x147e <Buzz_Tick+0x54>
    147c:	47 c0       	rjmp	.+142    	; 0x150c <Buzz_Tick+0xe2>
			buzzer_state = buzz_wait;
		}
		else if(sensor_trip == 1 && ARM_DISARM == 1){
    147e:	90 91 08 09 	lds	r25, 0x0908	; 0x800908 <sensor_trip>
    1482:	91 30       	cpi	r25, 0x01	; 1
    1484:	41 f4       	brne	.+16     	; 0x1496 <Buzz_Tick+0x6c>
    1486:	81 30       	cpi	r24, 0x01	; 1
    1488:	09 f0       	breq	.+2      	; 0x148c <Buzz_Tick+0x62>
    148a:	40 c0       	rjmp	.+128    	; 0x150c <Buzz_Tick+0xe2>
			buzzer_state = no_buzz;
    148c:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <buzzer_state>
			buzzer_counter = 0; //initialize counter
    1490:	10 92 ff 08 	sts	0x08FF, r1	; 0x8008ff <buzzer_counter>
    1494:	08 95       	ret
		}
		else if(sensor_trip == 0 && ARM_DISARM == 1){
    1496:	91 11       	cpse	r25, r1
    1498:	39 c0       	rjmp	.+114    	; 0x150c <Buzz_Tick+0xe2>
    149a:	81 30       	cpi	r24, 0x01	; 1
    149c:	b9 f5       	brne	.+110    	; 0x150c <Buzz_Tick+0xe2>
			buzzer_state = buzz_wait;
			buzzer_counter = 0; //initialize counter
    149e:	10 92 ff 08 	sts	0x08FF, r1	; 0x8008ff <buzzer_counter>
    14a2:	08 95       	ret
		}
		break;

		case no_buzz:            //if disarmed no buzz go back
		if(ARM_DISARM == 0){
    14a4:	80 91 13 09 	lds	r24, 0x0913	; 0x800913 <ARM_DISARM>
    14a8:	81 11       	cpse	r24, r1
    14aa:	03 c0       	rjmp	.+6      	; 0x14b2 <Buzz_Tick+0x88>
			buzzer_state = buzz_wait;
    14ac:	10 92 77 09 	sts	0x0977, r1	; 0x800977 <buzzer_state>
    14b0:	08 95       	ret
		}						//if counter less than off period stay
		else if(buzzer_counter < buzz_off_period){
    14b2:	90 91 ff 08 	lds	r25, 0x08FF	; 0x8008ff <buzzer_counter>
    14b6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <buzz_off_period>
    14ba:	98 17       	cp	r25, r24
    14bc:	38 f1       	brcs	.+78     	; 0x150c <Buzz_Tick+0xe2>
			buzzer_state = no_buzz;
		}
		else{					//else go to buzzer high
			buzzer_state = buzz_high;
    14be:	82 e0       	ldi	r24, 0x02	; 2
    14c0:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <buzzer_state>
			buzzer_counter = 0; //initialize counter
    14c4:	10 92 ff 08 	sts	0x08FF, r1	; 0x8008ff <buzzer_counter>
    14c8:	08 95       	ret
		}
		break;

		case buzz_high:
		if(buzzer_counter < buzzer_hign_period){
    14ca:	90 91 ff 08 	lds	r25, 0x08FF	; 0x8008ff <buzzer_counter>
    14ce:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <buzzer_hign_period>
    14d2:	98 17       	cp	r25, r24
    14d4:	d8 f0       	brcs	.+54     	; 0x150c <Buzz_Tick+0xe2>
			buzzer_state = buzz_high;
		}
		else{					//else go to buzzer high
			buzzer_state = buzz_low;
    14d6:	83 e0       	ldi	r24, 0x03	; 3
    14d8:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <buzzer_state>
			buzzer_counter = 0; //initialize counter
    14dc:	10 92 ff 08 	sts	0x08FF, r1	; 0x8008ff <buzzer_counter>
    14e0:	08 95       	ret
		}
		break;

		case buzz_low:
		if(ARM_DISARM == 0){    //if system is disarmed turn off alarm
    14e2:	80 91 13 09 	lds	r24, 0x0913	; 0x800913 <ARM_DISARM>
    14e6:	81 11       	cpse	r24, r1
    14e8:	03 c0       	rjmp	.+6      	; 0x14f0 <Buzz_Tick+0xc6>
			buzzer_state = buzz_wait;
    14ea:	10 92 77 09 	sts	0x0977, r1	; 0x800977 <buzzer_state>
    14ee:	08 95       	ret
		}
		else if(buzzer_counter < buzzer_low_period){
    14f0:	90 91 ff 08 	lds	r25, 0x08FF	; 0x8008ff <buzzer_counter>
    14f4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <buzzer_low_period>
    14f8:	98 17       	cp	r25, r24
    14fa:	40 f0       	brcs	.+16     	; 0x150c <Buzz_Tick+0xe2>
			buzzer_state = buzz_low;
		}
		else{					//else go to buzzer high
			buzzer_state = buzz_high;
    14fc:	82 e0       	ldi	r24, 0x02	; 2
    14fe:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <buzzer_state>
			buzzer_counter = 0; //initialize counter
    1502:	10 92 ff 08 	sts	0x08FF, r1	; 0x8008ff <buzzer_counter>
    1506:	08 95       	ret
		}
		break;

		default:
		buzzer_state = buzz_wait;
    1508:	10 92 77 09 	sts	0x0977, r1	; 0x800977 <buzzer_state>
    150c:	08 95       	ret

0000150e <BuzzSecTask>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//buzz when sensor tripped
enum BUZZERState {buzz_wait, no_buzz, buzz_high, buzz_low} buzzer_state;

void buzz_Init(){
	buzzer_state = buzz_wait;
    150e:	10 92 77 09 	sts	0x0977, r1	; 0x800977 <buzzer_state>
{
	buzz_Init();
	for(;;)
	{
		Buzz_Tick();
		vTaskDelay(1);
    1512:	8b df       	rcall	.-234    	; 0x142a <Buzz_Tick>
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	63 d4       	rcall	.+2246   	; 0x1de0 <vTaskDelay>
    151a:	fb cf       	rjmp	.-10     	; 0x1512 <BuzzSecTask+0x4>

0000151c <BuzzSecPulse>:
	}
}

void BuzzSecPulse(unsigned portBASE_TYPE Priority)
{
    151c:	af 92       	push	r10
    151e:	bf 92       	push	r11
    1520:	cf 92       	push	r12
    1522:	df 92       	push	r13
    1524:	ef 92       	push	r14
    1526:	ff 92       	push	r15
    1528:	0f 93       	push	r16
	xTaskCreate(BuzzSecTask, (signed portCHAR *)"BuzzSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
    152a:	a1 2c       	mov	r10, r1
    152c:	b1 2c       	mov	r11, r1
    152e:	c1 2c       	mov	r12, r1
    1530:	d1 2c       	mov	r13, r1
    1532:	e1 2c       	mov	r14, r1
    1534:	f1 2c       	mov	r15, r1
    1536:	08 2f       	mov	r16, r24
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	45 e5       	ldi	r20, 0x55	; 85
    153e:	50 e0       	ldi	r21, 0x00	; 0
    1540:	6c e0       	ldi	r22, 0x0C	; 12
    1542:	73 e0       	ldi	r23, 0x03	; 3
    1544:	87 e8       	ldi	r24, 0x87	; 135
    1546:	9a e0       	ldi	r25, 0x0A	; 10
    1548:	d3 d1       	rcall	.+934    	; 0x18f0 <xTaskGenericCreate>
}
    154a:	0f 91       	pop	r16
    154c:	ff 90       	pop	r15
    154e:	ef 90       	pop	r14
    1550:	df 90       	pop	r13
    1552:	cf 90       	pop	r12
    1554:	bf 90       	pop	r11
    1556:	af 90       	pop	r10
    1558:	08 95       	ret

0000155a <main>:



///////////////////////////////////////////////////////////////////////////////////////////////////////////////
int main(void) 
{ 
    155a:	cf 93       	push	r28
    155c:	df 93       	push	r29
   DDRA = 0xF0; PORTA = 0x0F; // PC7..4 outputs init 0s, PC3..0 inputs init 1s FOR KEYPAD
    155e:	80 ef       	ldi	r24, 0xF0	; 240
    1560:	81 b9       	out	0x01, r24	; 1
    1562:	8f e0       	ldi	r24, 0x0F	; 15
    1564:	82 b9       	out	0x02, r24	; 2
   DDRC = 0xFF; PORTC = 0x00; // set as output for lcd
    1566:	8f ef       	ldi	r24, 0xFF	; 255
    1568:	87 b9       	out	0x07, r24	; 7
    156a:	18 b8       	out	0x08, r1	; 8
   DDRD = 0xFF; PORTD = 0x00; // LCD control lines
    156c:	8a b9       	out	0x0a, r24	; 10
    156e:	1b b8       	out	0x0b, r1	; 11
   DDRB = 0xFF; PORTB = 0x00;
    1570:	84 b9       	out	0x04, r24	; 4
    1572:	15 b8       	out	0x05, r1	; 5
  //eeprom_write_byte(0,1);  //address 0
  //eeprom_write_byte(1,2);  //address 1
  //eeprom_write_byte(2,3);  //address 2
  //eeprom_write_byte(3,4);  //address 3

  current_pass[0] = eeprom_read_byte(0);
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	8f d5       	rcall	.+2846   	; 0x2098 <eeprom_read_byte>
    157a:	c0 e1       	ldi	r28, 0x10	; 16
    157c:	d2 e0       	ldi	r29, 0x02	; 2
    157e:	88 83       	st	Y, r24
  current_pass[1] = eeprom_read_byte(1);
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	89 d5       	rcall	.+2834   	; 0x2098 <eeprom_read_byte>
  current_pass[2] = eeprom_read_byte(2);
    1586:	89 83       	std	Y+1, r24	; 0x01
    1588:	82 e0       	ldi	r24, 0x02	; 2
    158a:	90 e0       	ldi	r25, 0x00	; 0
  current_pass[3] = eeprom_read_byte(3);
    158c:	85 d5       	rcall	.+2826   	; 0x2098 <eeprom_read_byte>
    158e:	8a 83       	std	Y+2, r24	; 0x02
    1590:	83 e0       	ldi	r24, 0x03	; 3
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	81 d5       	rcall	.+2818   	; 0x2098 <eeprom_read_byte>

  unsigned char temp = eeprom_read_byte(0);

   //LCD init
   LCD_init();
    1596:	8b 83       	std	Y+3, r24	; 0x03
    1598:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_init>
   //init USART
   initUSART(0); //used to communicate to CHIP 0
    159c:	80 e0       	ldi	r24, 0x00	; 0
   initUSART(1); //used to communicate via bluetooth  
    159e:	0e 94 32 01 	call	0x264	; 0x264 <initUSART>
  
  
   //Start Tasks  
   //BuzzSecPulse(1);
   TransSecPulse(1);
   RecSecPulse(1);
    15a2:	81 e0       	ldi	r24, 0x01	; 1
   MatrixSecPulse(1);
    15a4:	0e 94 32 01 	call	0x264	; 0x264 <initUSART>
   MenuSecPulse(1);
   SenseSecPulse(1);
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	4f da       	rcall	.-2914   	; 0xa4a <TransSecPulse>
    15ac:	81 e0       	ldi	r24, 0x01	; 1
   BuzzSecPulse(1);
    15ae:	8d da       	rcall	.-2790   	; 0xaca <RecSecPulse>
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	ce de       	rcall	.-612    	; 0x1350 <MatrixSecPulse>
   BlueRecSecPulse(1);
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	f4 dd       	rcall	.-1048   	; 0x11a0 <MenuSecPulse>
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    //RunSchedular 
   vTaskStartScheduler(); 
    15ba:	92 de       	rcall	.-732    	; 0x12e0 <SenseSecPulse>
    15bc:	81 e0       	ldi	r24, 0x01	; 1
 
   return 0; 
    15be:	ae df       	rcall	.-164    	; 0x151c <BuzzSecPulse>
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	14 df       	rcall	.-472    	; 0x13ec <BlueRecSecPulse>
    15c4:	96 d2       	rcall	.+1324   	; 0x1af2 <vTaskStartScheduler>
    15c6:	80 e0       	ldi	r24, 0x00	; 0
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	df 91       	pop	r29
    15cc:	cf 91       	pop	r28
    15ce:	08 95       	ret

000015d0 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    15d0:	31 e1       	ldi	r19, 0x11	; 17
    15d2:	fc 01       	movw	r30, r24
    15d4:	30 83       	st	Z, r19
    15d6:	31 97       	sbiw	r30, 0x01	; 1
    15d8:	22 e2       	ldi	r18, 0x22	; 34
    15da:	20 83       	st	Z, r18
    15dc:	31 97       	sbiw	r30, 0x01	; 1
    15de:	a3 e3       	ldi	r26, 0x33	; 51
    15e0:	a0 83       	st	Z, r26
    15e2:	31 97       	sbiw	r30, 0x01	; 1
    15e4:	60 83       	st	Z, r22
    15e6:	31 97       	sbiw	r30, 0x01	; 1
    15e8:	70 83       	st	Z, r23
    15ea:	31 97       	sbiw	r30, 0x01	; 1
    15ec:	10 82       	st	Z, r1
    15ee:	31 97       	sbiw	r30, 0x01	; 1
    15f0:	60 e8       	ldi	r22, 0x80	; 128
    15f2:	60 83       	st	Z, r22
    15f4:	31 97       	sbiw	r30, 0x01	; 1
    15f6:	10 82       	st	Z, r1
    15f8:	31 97       	sbiw	r30, 0x01	; 1
    15fa:	62 e0       	ldi	r22, 0x02	; 2
    15fc:	60 83       	st	Z, r22
    15fe:	31 97       	sbiw	r30, 0x01	; 1
    1600:	63 e0       	ldi	r22, 0x03	; 3
    1602:	60 83       	st	Z, r22
    1604:	31 97       	sbiw	r30, 0x01	; 1
    1606:	64 e0       	ldi	r22, 0x04	; 4
    1608:	60 83       	st	Z, r22
    160a:	31 97       	sbiw	r30, 0x01	; 1
    160c:	65 e0       	ldi	r22, 0x05	; 5
    160e:	60 83       	st	Z, r22
    1610:	31 97       	sbiw	r30, 0x01	; 1
    1612:	66 e0       	ldi	r22, 0x06	; 6
    1614:	60 83       	st	Z, r22
    1616:	31 97       	sbiw	r30, 0x01	; 1
    1618:	67 e0       	ldi	r22, 0x07	; 7
    161a:	60 83       	st	Z, r22
    161c:	31 97       	sbiw	r30, 0x01	; 1
    161e:	68 e0       	ldi	r22, 0x08	; 8
    1620:	60 83       	st	Z, r22
    1622:	31 97       	sbiw	r30, 0x01	; 1
    1624:	69 e0       	ldi	r22, 0x09	; 9
    1626:	60 83       	st	Z, r22
    1628:	31 97       	sbiw	r30, 0x01	; 1
    162a:	60 e1       	ldi	r22, 0x10	; 16
    162c:	60 83       	st	Z, r22
    162e:	31 97       	sbiw	r30, 0x01	; 1
    1630:	30 83       	st	Z, r19
    1632:	31 97       	sbiw	r30, 0x01	; 1
    1634:	32 e1       	ldi	r19, 0x12	; 18
    1636:	30 83       	st	Z, r19
    1638:	31 97       	sbiw	r30, 0x01	; 1
    163a:	33 e1       	ldi	r19, 0x13	; 19
    163c:	30 83       	st	Z, r19
    163e:	31 97       	sbiw	r30, 0x01	; 1
    1640:	34 e1       	ldi	r19, 0x14	; 20
    1642:	30 83       	st	Z, r19
    1644:	31 97       	sbiw	r30, 0x01	; 1
    1646:	35 e1       	ldi	r19, 0x15	; 21
    1648:	30 83       	st	Z, r19
    164a:	31 97       	sbiw	r30, 0x01	; 1
    164c:	36 e1       	ldi	r19, 0x16	; 22
    164e:	30 83       	st	Z, r19
    1650:	31 97       	sbiw	r30, 0x01	; 1
    1652:	37 e1       	ldi	r19, 0x17	; 23
    1654:	30 83       	st	Z, r19
    1656:	31 97       	sbiw	r30, 0x01	; 1
    1658:	38 e1       	ldi	r19, 0x18	; 24
    165a:	30 83       	st	Z, r19
    165c:	31 97       	sbiw	r30, 0x01	; 1
    165e:	39 e1       	ldi	r19, 0x19	; 25
    1660:	30 83       	st	Z, r19
    1662:	31 97       	sbiw	r30, 0x01	; 1
    1664:	30 e2       	ldi	r19, 0x20	; 32
    1666:	30 83       	st	Z, r19
    1668:	31 97       	sbiw	r30, 0x01	; 1
    166a:	31 e2       	ldi	r19, 0x21	; 33
    166c:	30 83       	st	Z, r19
    166e:	31 97       	sbiw	r30, 0x01	; 1
    1670:	20 83       	st	Z, r18
    1672:	31 97       	sbiw	r30, 0x01	; 1
    1674:	23 e2       	ldi	r18, 0x23	; 35
    1676:	20 83       	st	Z, r18
    1678:	31 97       	sbiw	r30, 0x01	; 1
    167a:	40 83       	st	Z, r20
    167c:	31 97       	sbiw	r30, 0x01	; 1
    167e:	50 83       	st	Z, r21
    1680:	31 97       	sbiw	r30, 0x01	; 1
    1682:	26 e2       	ldi	r18, 0x26	; 38
    1684:	20 83       	st	Z, r18
    1686:	31 97       	sbiw	r30, 0x01	; 1
    1688:	27 e2       	ldi	r18, 0x27	; 39
    168a:	20 83       	st	Z, r18
    168c:	31 97       	sbiw	r30, 0x01	; 1
    168e:	28 e2       	ldi	r18, 0x28	; 40
    1690:	20 83       	st	Z, r18
    1692:	31 97       	sbiw	r30, 0x01	; 1
    1694:	29 e2       	ldi	r18, 0x29	; 41
    1696:	20 83       	st	Z, r18
    1698:	31 97       	sbiw	r30, 0x01	; 1
    169a:	20 e3       	ldi	r18, 0x30	; 48
    169c:	20 83       	st	Z, r18
    169e:	31 97       	sbiw	r30, 0x01	; 1
    16a0:	21 e3       	ldi	r18, 0x31	; 49
    16a2:	20 83       	st	Z, r18
    16a4:	86 97       	sbiw	r24, 0x26	; 38
    16a6:	08 95       	ret

000016a8 <xPortStartScheduler>:
    16a8:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    16ac:	8c e7       	ldi	r24, 0x7C	; 124
    16ae:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    16b2:	8b e0       	ldi	r24, 0x0B	; 11
    16b4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    16b8:	ef e6       	ldi	r30, 0x6F	; 111
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	82 60       	ori	r24, 0x02	; 2
    16c0:	80 83       	st	Z, r24
    16c2:	a0 91 6e 09 	lds	r26, 0x096E	; 0x80096e <pxCurrentTCB>
    16c6:	b0 91 6f 09 	lds	r27, 0x096F	; 0x80096f <pxCurrentTCB+0x1>
    16ca:	cd 91       	ld	r28, X+
    16cc:	cd bf       	out	0x3d, r28	; 61
    16ce:	dd 91       	ld	r29, X+
    16d0:	de bf       	out	0x3e, r29	; 62
    16d2:	ff 91       	pop	r31
    16d4:	ef 91       	pop	r30
    16d6:	df 91       	pop	r29
    16d8:	cf 91       	pop	r28
    16da:	bf 91       	pop	r27
    16dc:	af 91       	pop	r26
    16de:	9f 91       	pop	r25
    16e0:	8f 91       	pop	r24
    16e2:	7f 91       	pop	r23
    16e4:	6f 91       	pop	r22
    16e6:	5f 91       	pop	r21
    16e8:	4f 91       	pop	r20
    16ea:	3f 91       	pop	r19
    16ec:	2f 91       	pop	r18
    16ee:	1f 91       	pop	r17
    16f0:	0f 91       	pop	r16
    16f2:	ff 90       	pop	r15
    16f4:	ef 90       	pop	r14
    16f6:	df 90       	pop	r13
    16f8:	cf 90       	pop	r12
    16fa:	bf 90       	pop	r11
    16fc:	af 90       	pop	r10
    16fe:	9f 90       	pop	r9
    1700:	8f 90       	pop	r8
    1702:	7f 90       	pop	r7
    1704:	6f 90       	pop	r6
    1706:	5f 90       	pop	r5
    1708:	4f 90       	pop	r4
    170a:	3f 90       	pop	r3
    170c:	2f 90       	pop	r2
    170e:	1f 90       	pop	r1
    1710:	0f 90       	pop	r0
    1712:	0f be       	out	0x3f, r0	; 63
    1714:	0f 90       	pop	r0
    1716:	08 95       	ret
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	08 95       	ret

0000171c <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    171c:	0f 92       	push	r0
    171e:	0f b6       	in	r0, 0x3f	; 63
    1720:	f8 94       	cli
    1722:	0f 92       	push	r0
    1724:	1f 92       	push	r1
    1726:	11 24       	eor	r1, r1
    1728:	2f 92       	push	r2
    172a:	3f 92       	push	r3
    172c:	4f 92       	push	r4
    172e:	5f 92       	push	r5
    1730:	6f 92       	push	r6
    1732:	7f 92       	push	r7
    1734:	8f 92       	push	r8
    1736:	9f 92       	push	r9
    1738:	af 92       	push	r10
    173a:	bf 92       	push	r11
    173c:	cf 92       	push	r12
    173e:	df 92       	push	r13
    1740:	ef 92       	push	r14
    1742:	ff 92       	push	r15
    1744:	0f 93       	push	r16
    1746:	1f 93       	push	r17
    1748:	2f 93       	push	r18
    174a:	3f 93       	push	r19
    174c:	4f 93       	push	r20
    174e:	5f 93       	push	r21
    1750:	6f 93       	push	r22
    1752:	7f 93       	push	r23
    1754:	8f 93       	push	r24
    1756:	9f 93       	push	r25
    1758:	af 93       	push	r26
    175a:	bf 93       	push	r27
    175c:	cf 93       	push	r28
    175e:	df 93       	push	r29
    1760:	ef 93       	push	r30
    1762:	ff 93       	push	r31
    1764:	a0 91 6e 09 	lds	r26, 0x096E	; 0x80096e <pxCurrentTCB>
    1768:	b0 91 6f 09 	lds	r27, 0x096F	; 0x80096f <pxCurrentTCB+0x1>
    176c:	0d b6       	in	r0, 0x3d	; 61
    176e:	0d 92       	st	X+, r0
    1770:	0e b6       	in	r0, 0x3e	; 62
	vTaskSwitchContext();
    1772:	0d 92       	st	X+, r0
	portRESTORE_CONTEXT();
    1774:	8a d3       	rcall	.+1812   	; 0x1e8a <vTaskSwitchContext>
    1776:	a0 91 6e 09 	lds	r26, 0x096E	; 0x80096e <pxCurrentTCB>
    177a:	b0 91 6f 09 	lds	r27, 0x096F	; 0x80096f <pxCurrentTCB+0x1>
    177e:	cd 91       	ld	r28, X+
    1780:	cd bf       	out	0x3d, r28	; 61
    1782:	dd 91       	ld	r29, X+
    1784:	de bf       	out	0x3e, r29	; 62
    1786:	ff 91       	pop	r31
    1788:	ef 91       	pop	r30
    178a:	df 91       	pop	r29
    178c:	cf 91       	pop	r28
    178e:	bf 91       	pop	r27
    1790:	af 91       	pop	r26
    1792:	9f 91       	pop	r25
    1794:	8f 91       	pop	r24
    1796:	7f 91       	pop	r23
    1798:	6f 91       	pop	r22
    179a:	5f 91       	pop	r21
    179c:	4f 91       	pop	r20
    179e:	3f 91       	pop	r19
    17a0:	2f 91       	pop	r18
    17a2:	1f 91       	pop	r17
    17a4:	0f 91       	pop	r16
    17a6:	ff 90       	pop	r15
    17a8:	ef 90       	pop	r14
    17aa:	df 90       	pop	r13
    17ac:	cf 90       	pop	r12
    17ae:	bf 90       	pop	r11
    17b0:	af 90       	pop	r10
    17b2:	9f 90       	pop	r9
    17b4:	8f 90       	pop	r8
    17b6:	7f 90       	pop	r7
    17b8:	6f 90       	pop	r6
    17ba:	5f 90       	pop	r5
    17bc:	4f 90       	pop	r4
    17be:	3f 90       	pop	r3
    17c0:	2f 90       	pop	r2
    17c2:	1f 90       	pop	r1
    17c4:	0f 90       	pop	r0
    17c6:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
    17c8:	0f 90       	pop	r0
    17ca:	08 95       	ret

000017cc <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    17cc:	0f 92       	push	r0
    17ce:	0f b6       	in	r0, 0x3f	; 63
    17d0:	f8 94       	cli
    17d2:	0f 92       	push	r0
    17d4:	1f 92       	push	r1
    17d6:	11 24       	eor	r1, r1
    17d8:	2f 92       	push	r2
    17da:	3f 92       	push	r3
    17dc:	4f 92       	push	r4
    17de:	5f 92       	push	r5
    17e0:	6f 92       	push	r6
    17e2:	7f 92       	push	r7
    17e4:	8f 92       	push	r8
    17e6:	9f 92       	push	r9
    17e8:	af 92       	push	r10
    17ea:	bf 92       	push	r11
    17ec:	cf 92       	push	r12
    17ee:	df 92       	push	r13
    17f0:	ef 92       	push	r14
    17f2:	ff 92       	push	r15
    17f4:	0f 93       	push	r16
    17f6:	1f 93       	push	r17
    17f8:	2f 93       	push	r18
    17fa:	3f 93       	push	r19
    17fc:	4f 93       	push	r20
    17fe:	5f 93       	push	r21
    1800:	6f 93       	push	r22
    1802:	7f 93       	push	r23
    1804:	8f 93       	push	r24
    1806:	9f 93       	push	r25
    1808:	af 93       	push	r26
    180a:	bf 93       	push	r27
    180c:	cf 93       	push	r28
    180e:	df 93       	push	r29
    1810:	ef 93       	push	r30
    1812:	ff 93       	push	r31
    1814:	a0 91 6e 09 	lds	r26, 0x096E	; 0x80096e <pxCurrentTCB>
    1818:	b0 91 6f 09 	lds	r27, 0x096F	; 0x80096f <pxCurrentTCB+0x1>
    181c:	0d b6       	in	r0, 0x3d	; 61
    181e:	0d 92       	st	X+, r0
    1820:	0e b6       	in	r0, 0x3e	; 62
	vTaskIncrementTick();
	vTaskSwitchContext();
    1822:	0d 92       	st	X+, r0
    1824:	95 d1       	rcall	.+810    	; 0x1b50 <vTaskIncrementTick>
	portRESTORE_CONTEXT();
    1826:	31 d3       	rcall	.+1634   	; 0x1e8a <vTaskSwitchContext>
    1828:	a0 91 6e 09 	lds	r26, 0x096E	; 0x80096e <pxCurrentTCB>
    182c:	b0 91 6f 09 	lds	r27, 0x096F	; 0x80096f <pxCurrentTCB+0x1>
    1830:	cd 91       	ld	r28, X+
    1832:	cd bf       	out	0x3d, r28	; 61
    1834:	dd 91       	ld	r29, X+
    1836:	de bf       	out	0x3e, r29	; 62
    1838:	ff 91       	pop	r31
    183a:	ef 91       	pop	r30
    183c:	df 91       	pop	r29
    183e:	cf 91       	pop	r28
    1840:	bf 91       	pop	r27
    1842:	af 91       	pop	r26
    1844:	9f 91       	pop	r25
    1846:	8f 91       	pop	r24
    1848:	7f 91       	pop	r23
    184a:	6f 91       	pop	r22
    184c:	5f 91       	pop	r21
    184e:	4f 91       	pop	r20
    1850:	3f 91       	pop	r19
    1852:	2f 91       	pop	r18
    1854:	1f 91       	pop	r17
    1856:	0f 91       	pop	r16
    1858:	ff 90       	pop	r15
    185a:	ef 90       	pop	r14
    185c:	df 90       	pop	r13
    185e:	cf 90       	pop	r12
    1860:	bf 90       	pop	r11
    1862:	af 90       	pop	r10
    1864:	9f 90       	pop	r9
    1866:	8f 90       	pop	r8
    1868:	7f 90       	pop	r7
    186a:	6f 90       	pop	r6
    186c:	5f 90       	pop	r5
    186e:	4f 90       	pop	r4
    1870:	3f 90       	pop	r3
    1872:	2f 90       	pop	r2
    1874:	1f 90       	pop	r1
    1876:	0f 90       	pop	r0
    1878:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
    187a:	0f 90       	pop	r0
    187c:	08 95       	ret

0000187e <__vector_13>:
}
    187e:	a6 df       	rcall	.-180    	; 0x17cc <vPortYieldFromTick>
    1880:	18 95       	reti

00001882 <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
    1882:	cf 93       	push	r28
    1884:	df 93       	push	r29
    1886:	ec 01       	movw	r28, r24
    1888:	e0 91 6e 09 	lds	r30, 0x096E	; 0x80096e <pxCurrentTCB>
    188c:	f0 91 6f 09 	lds	r31, 0x096F	; 0x80096f <pxCurrentTCB+0x1>
    1890:	93 83       	std	Z+3, r25	; 0x03
    1892:	82 83       	std	Z+2, r24	; 0x02
    1894:	80 91 1e 09 	lds	r24, 0x091E	; 0x80091e <xTickCount>
    1898:	90 91 1f 09 	lds	r25, 0x091F	; 0x80091f <xTickCount+0x1>
    189c:	c8 17       	cp	r28, r24
    189e:	d9 07       	cpc	r29, r25
    18a0:	68 f4       	brcc	.+26     	; 0x18bc <prvAddCurrentTaskToDelayedList+0x3a>
    18a2:	60 91 6e 09 	lds	r22, 0x096E	; 0x80096e <pxCurrentTCB>
    18a6:	70 91 6f 09 	lds	r23, 0x096F	; 0x80096f <pxCurrentTCB+0x1>
    18aa:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <pxOverflowDelayedTaskList>
    18ae:	90 91 35 09 	lds	r25, 0x0935	; 0x800935 <pxOverflowDelayedTaskList+0x1>
    18b2:	6e 5f       	subi	r22, 0xFE	; 254
    18b4:	7f 4f       	sbci	r23, 0xFF	; 255
    18b6:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <vListInsert>
    18ba:	17 c0       	rjmp	.+46     	; 0x18ea <prvAddCurrentTaskToDelayedList+0x68>
    18bc:	60 91 6e 09 	lds	r22, 0x096E	; 0x80096e <pxCurrentTCB>
    18c0:	70 91 6f 09 	lds	r23, 0x096F	; 0x80096f <pxCurrentTCB+0x1>
    18c4:	80 91 36 09 	lds	r24, 0x0936	; 0x800936 <pxDelayedTaskList>
    18c8:	90 91 37 09 	lds	r25, 0x0937	; 0x800937 <pxDelayedTaskList+0x1>
    18cc:	6e 5f       	subi	r22, 0xFE	; 254
    18ce:	7f 4f       	sbci	r23, 0xFF	; 255
    18d0:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <vListInsert>
    18d4:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <xNextTaskUnblockTime>
    18d8:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <xNextTaskUnblockTime+0x1>
    18dc:	c8 17       	cp	r28, r24
    18de:	d9 07       	cpc	r29, r25
    18e0:	20 f4       	brcc	.+8      	; 0x18ea <prvAddCurrentTaskToDelayedList+0x68>
    18e2:	d0 93 55 02 	sts	0x0255, r29	; 0x800255 <xNextTaskUnblockTime+0x1>
    18e6:	c0 93 54 02 	sts	0x0254, r28	; 0x800254 <xNextTaskUnblockTime>
    18ea:	df 91       	pop	r29
    18ec:	cf 91       	pop	r28
    18ee:	08 95       	ret

000018f0 <xTaskGenericCreate>:
    18f0:	4f 92       	push	r4
    18f2:	5f 92       	push	r5
    18f4:	6f 92       	push	r6
    18f6:	7f 92       	push	r7
    18f8:	8f 92       	push	r8
    18fa:	9f 92       	push	r9
    18fc:	af 92       	push	r10
    18fe:	bf 92       	push	r11
    1900:	cf 92       	push	r12
    1902:	df 92       	push	r13
    1904:	ef 92       	push	r14
    1906:	ff 92       	push	r15
    1908:	0f 93       	push	r16
    190a:	1f 93       	push	r17
    190c:	cf 93       	push	r28
    190e:	df 93       	push	r29
    1910:	5c 01       	movw	r10, r24
    1912:	4b 01       	movw	r8, r22
    1914:	3a 01       	movw	r6, r20
    1916:	29 01       	movw	r4, r18
    1918:	81 e2       	ldi	r24, 0x21	; 33
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	0e 94 71 00 	call	0xe2	; 0xe2 <pvPortMalloc>
    1920:	ec 01       	movw	r28, r24
    1922:	89 2b       	or	r24, r25
    1924:	09 f4       	brne	.+2      	; 0x1928 <xTaskGenericCreate+0x38>
    1926:	d3 c0       	rjmp	.+422    	; 0x1ace <xTaskGenericCreate+0x1de>
    1928:	c1 14       	cp	r12, r1
    192a:	d1 04       	cpc	r13, r1
    192c:	09 f0       	breq	.+2      	; 0x1930 <xTaskGenericCreate+0x40>
    192e:	cb c0       	rjmp	.+406    	; 0x1ac6 <xTaskGenericCreate+0x1d6>
    1930:	c3 01       	movw	r24, r6
    1932:	0e 94 71 00 	call	0xe2	; 0xe2 <pvPortMalloc>
    1936:	98 8f       	std	Y+24, r25	; 0x18
    1938:	8f 8b       	std	Y+23, r24	; 0x17
    193a:	00 97       	sbiw	r24, 0x00	; 0
    193c:	21 f4       	brne	.+8      	; 0x1946 <xTaskGenericCreate+0x56>
    193e:	ce 01       	movw	r24, r28
    1940:	0e 94 97 00 	call	0x12e	; 0x12e <vPortFree>
    1944:	c4 c0       	rjmp	.+392    	; 0x1ace <xTaskGenericCreate+0x1de>
    1946:	a3 01       	movw	r20, r6
    1948:	65 ea       	ldi	r22, 0xA5	; 165
    194a:	70 e0       	ldi	r23, 0x00	; 0
    194c:	8f d3       	rcall	.+1822   	; 0x206c <memset>
    194e:	93 01       	movw	r18, r6
    1950:	21 50       	subi	r18, 0x01	; 1
    1952:	31 09       	sbc	r19, r1
    1954:	8f 89       	ldd	r24, Y+23	; 0x17
    1956:	98 8d       	ldd	r25, Y+24	; 0x18
    1958:	3c 01       	movw	r6, r24
    195a:	62 0e       	add	r6, r18
    195c:	73 1e       	adc	r7, r19
    195e:	48 e0       	ldi	r20, 0x08	; 8
    1960:	50 e0       	ldi	r21, 0x00	; 0
    1962:	b4 01       	movw	r22, r8
    1964:	ce 01       	movw	r24, r28
    1966:	49 96       	adiw	r24, 0x19	; 25
    1968:	88 d3       	rcall	.+1808   	; 0x207a <strncpy>
    196a:	18 a2       	std	Y+32, r1	; 0x20
    196c:	10 2f       	mov	r17, r16
    196e:	04 30       	cpi	r16, 0x04	; 4
    1970:	08 f0       	brcs	.+2      	; 0x1974 <xTaskGenericCreate+0x84>
    1972:	13 e0       	ldi	r17, 0x03	; 3
    1974:	1e 8b       	std	Y+22, r17	; 0x16
    1976:	6e 01       	movw	r12, r28
    1978:	82 e0       	ldi	r24, 0x02	; 2
    197a:	c8 0e       	add	r12, r24
    197c:	d1 1c       	adc	r13, r1
    197e:	c6 01       	movw	r24, r12
    1980:	0e 94 a6 00 	call	0x14c	; 0x14c <vListInitialiseItem>
    1984:	ce 01       	movw	r24, r28
    1986:	0c 96       	adiw	r24, 0x0c	; 12
    1988:	0e 94 a6 00 	call	0x14c	; 0x14c <vListInitialiseItem>
    198c:	d9 87       	std	Y+9, r29	; 0x09
    198e:	c8 87       	std	Y+8, r28	; 0x08
    1990:	84 e0       	ldi	r24, 0x04	; 4
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	81 1b       	sub	r24, r17
    1996:	91 09       	sbc	r25, r1
    1998:	9d 87       	std	Y+13, r25	; 0x0d
    199a:	8c 87       	std	Y+12, r24	; 0x0c
    199c:	db 8b       	std	Y+19, r29	; 0x13
    199e:	ca 8b       	std	Y+18, r28	; 0x12
    19a0:	a2 01       	movw	r20, r4
    19a2:	b5 01       	movw	r22, r10
    19a4:	c3 01       	movw	r24, r6
    19a6:	14 de       	rcall	.-984    	; 0x15d0 <pxPortInitialiseStack>
    19a8:	99 83       	std	Y+1, r25	; 0x01
    19aa:	88 83       	st	Y, r24
    19ac:	e1 14       	cp	r14, r1
    19ae:	f1 04       	cpc	r15, r1
    19b0:	19 f0       	breq	.+6      	; 0x19b8 <xTaskGenericCreate+0xc8>
    19b2:	f7 01       	movw	r30, r14
    19b4:	d1 83       	std	Z+1, r29	; 0x01
    19b6:	c0 83       	st	Z, r28
    19b8:	0f b6       	in	r0, 0x3f	; 63
    19ba:	f8 94       	cli
    19bc:	0f 92       	push	r0
    19be:	80 91 20 09 	lds	r24, 0x0920	; 0x800920 <uxCurrentNumberOfTasks>
    19c2:	8f 5f       	subi	r24, 0xFF	; 255
    19c4:	80 93 20 09 	sts	0x0920, r24	; 0x800920 <uxCurrentNumberOfTasks>
    19c8:	80 91 6e 09 	lds	r24, 0x096E	; 0x80096e <pxCurrentTCB>
    19cc:	90 91 6f 09 	lds	r25, 0x096F	; 0x80096f <pxCurrentTCB+0x1>
    19d0:	89 2b       	or	r24, r25
    19d2:	a9 f5       	brne	.+106    	; 0x1a3e <xTaskGenericCreate+0x14e>
    19d4:	d0 93 6f 09 	sts	0x096F, r29	; 0x80096f <pxCurrentTCB+0x1>
    19d8:	c0 93 6e 09 	sts	0x096E, r28	; 0x80096e <pxCurrentTCB>
    19dc:	80 91 20 09 	lds	r24, 0x0920	; 0x800920 <uxCurrentNumberOfTasks>
    19e0:	81 30       	cpi	r24, 0x01	; 1
    19e2:	e1 f5       	brne	.+120    	; 0x1a5c <xTaskGenericCreate+0x16c>
    19e4:	8a e4       	ldi	r24, 0x4A	; 74
    19e6:	99 e0       	ldi	r25, 0x09	; 9
    19e8:	0e 94 98 00 	call	0x130	; 0x130 <vListInitialise>
    19ec:	83 e5       	ldi	r24, 0x53	; 83
    19ee:	99 e0       	ldi	r25, 0x09	; 9
    19f0:	0e 94 98 00 	call	0x130	; 0x130 <vListInitialise>
    19f4:	8c e5       	ldi	r24, 0x5C	; 92
    19f6:	99 e0       	ldi	r25, 0x09	; 9
    19f8:	0e 94 98 00 	call	0x130	; 0x130 <vListInitialise>
    19fc:	85 e6       	ldi	r24, 0x65	; 101
    19fe:	99 e0       	ldi	r25, 0x09	; 9
    1a00:	0e 94 98 00 	call	0x130	; 0x130 <vListInitialise>
    1a04:	81 e4       	ldi	r24, 0x41	; 65
    1a06:	99 e0       	ldi	r25, 0x09	; 9
    1a08:	0e 94 98 00 	call	0x130	; 0x130 <vListInitialise>
    1a0c:	88 e3       	ldi	r24, 0x38	; 56
    1a0e:	99 e0       	ldi	r25, 0x09	; 9
    1a10:	0e 94 98 00 	call	0x130	; 0x130 <vListInitialise>
    1a14:	8b e2       	ldi	r24, 0x2B	; 43
    1a16:	99 e0       	ldi	r25, 0x09	; 9
    1a18:	0e 94 98 00 	call	0x130	; 0x130 <vListInitialise>
    1a1c:	82 e2       	ldi	r24, 0x22	; 34
    1a1e:	99 e0       	ldi	r25, 0x09	; 9
    1a20:	0e 94 98 00 	call	0x130	; 0x130 <vListInitialise>
    1a24:	81 e4       	ldi	r24, 0x41	; 65
    1a26:	99 e0       	ldi	r25, 0x09	; 9
    1a28:	90 93 37 09 	sts	0x0937, r25	; 0x800937 <pxDelayedTaskList+0x1>
    1a2c:	80 93 36 09 	sts	0x0936, r24	; 0x800936 <pxDelayedTaskList>
    1a30:	88 e3       	ldi	r24, 0x38	; 56
    1a32:	99 e0       	ldi	r25, 0x09	; 9
    1a34:	90 93 35 09 	sts	0x0935, r25	; 0x800935 <pxOverflowDelayedTaskList+0x1>
    1a38:	80 93 34 09 	sts	0x0934, r24	; 0x800934 <pxOverflowDelayedTaskList>
    1a3c:	0f c0       	rjmp	.+30     	; 0x1a5c <xTaskGenericCreate+0x16c>
    1a3e:	80 91 1b 09 	lds	r24, 0x091B	; 0x80091b <xSchedulerRunning>
    1a42:	81 11       	cpse	r24, r1
    1a44:	0b c0       	rjmp	.+22     	; 0x1a5c <xTaskGenericCreate+0x16c>
    1a46:	e0 91 6e 09 	lds	r30, 0x096E	; 0x80096e <pxCurrentTCB>
    1a4a:	f0 91 6f 09 	lds	r31, 0x096F	; 0x80096f <pxCurrentTCB+0x1>
    1a4e:	86 89       	ldd	r24, Z+22	; 0x16
    1a50:	08 17       	cp	r16, r24
    1a52:	20 f0       	brcs	.+8      	; 0x1a5c <xTaskGenericCreate+0x16c>
    1a54:	d0 93 6f 09 	sts	0x096F, r29	; 0x80096f <pxCurrentTCB+0x1>
    1a58:	c0 93 6e 09 	sts	0x096E, r28	; 0x80096e <pxCurrentTCB>
    1a5c:	8e 89       	ldd	r24, Y+22	; 0x16
    1a5e:	90 91 1d 09 	lds	r25, 0x091D	; 0x80091d <uxTopUsedPriority>
    1a62:	98 17       	cp	r25, r24
    1a64:	10 f4       	brcc	.+4      	; 0x1a6a <xTaskGenericCreate+0x17a>
    1a66:	80 93 1d 09 	sts	0x091D, r24	; 0x80091d <uxTopUsedPriority>
    1a6a:	90 91 16 09 	lds	r25, 0x0916	; 0x800916 <uxTaskNumber>
    1a6e:	9f 5f       	subi	r25, 0xFF	; 255
    1a70:	90 93 16 09 	sts	0x0916, r25	; 0x800916 <uxTaskNumber>
    1a74:	90 91 1c 09 	lds	r25, 0x091C	; 0x80091c <uxTopReadyPriority>
    1a78:	98 17       	cp	r25, r24
    1a7a:	10 f4       	brcc	.+4      	; 0x1a80 <xTaskGenericCreate+0x190>
    1a7c:	80 93 1c 09 	sts	0x091C, r24	; 0x80091c <uxTopReadyPriority>
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	9c 01       	movw	r18, r24
    1a84:	22 0f       	add	r18, r18
    1a86:	33 1f       	adc	r19, r19
    1a88:	22 0f       	add	r18, r18
    1a8a:	33 1f       	adc	r19, r19
    1a8c:	22 0f       	add	r18, r18
    1a8e:	33 1f       	adc	r19, r19
    1a90:	82 0f       	add	r24, r18
    1a92:	93 1f       	adc	r25, r19
    1a94:	b6 01       	movw	r22, r12
    1a96:	86 5b       	subi	r24, 0xB6	; 182
    1a98:	96 4f       	sbci	r25, 0xF6	; 246
    1a9a:	0e 94 aa 00 	call	0x154	; 0x154 <vListInsertEnd>
    1a9e:	0f 90       	pop	r0
    1aa0:	0f be       	out	0x3f, r0	; 63
    1aa2:	80 91 1b 09 	lds	r24, 0x091B	; 0x80091b <xSchedulerRunning>
    1aa6:	88 23       	and	r24, r24
    1aa8:	51 f0       	breq	.+20     	; 0x1abe <xTaskGenericCreate+0x1ce>
    1aaa:	e0 91 6e 09 	lds	r30, 0x096E	; 0x80096e <pxCurrentTCB>
    1aae:	f0 91 6f 09 	lds	r31, 0x096F	; 0x80096f <pxCurrentTCB+0x1>
    1ab2:	86 89       	ldd	r24, Z+22	; 0x16
    1ab4:	80 17       	cp	r24, r16
    1ab6:	28 f4       	brcc	.+10     	; 0x1ac2 <xTaskGenericCreate+0x1d2>
    1ab8:	31 de       	rcall	.-926    	; 0x171c <vPortYield>
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	09 c0       	rjmp	.+18     	; 0x1ad0 <xTaskGenericCreate+0x1e0>
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	07 c0       	rjmp	.+14     	; 0x1ad0 <xTaskGenericCreate+0x1e0>
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	05 c0       	rjmp	.+10     	; 0x1ad0 <xTaskGenericCreate+0x1e0>
    1ac6:	d8 8e       	std	Y+24, r13	; 0x18
    1ac8:	cf 8a       	std	Y+23, r12	; 0x17
    1aca:	c6 01       	movw	r24, r12
    1acc:	3c cf       	rjmp	.-392    	; 0x1946 <xTaskGenericCreate+0x56>
    1ace:	8f ef       	ldi	r24, 0xFF	; 255
    1ad0:	df 91       	pop	r29
    1ad2:	cf 91       	pop	r28
    1ad4:	1f 91       	pop	r17
    1ad6:	0f 91       	pop	r16
    1ad8:	ff 90       	pop	r15
    1ada:	ef 90       	pop	r14
    1adc:	df 90       	pop	r13
    1ade:	cf 90       	pop	r12
    1ae0:	bf 90       	pop	r11
    1ae2:	af 90       	pop	r10
    1ae4:	9f 90       	pop	r9
    1ae6:	8f 90       	pop	r8
    1ae8:	7f 90       	pop	r7
    1aea:	6f 90       	pop	r6
    1aec:	5f 90       	pop	r5
    1aee:	4f 90       	pop	r4
    1af0:	08 95       	ret

00001af2 <vTaskStartScheduler>:
    1af2:	af 92       	push	r10
    1af4:	bf 92       	push	r11
    1af6:	cf 92       	push	r12
    1af8:	df 92       	push	r13
    1afa:	ef 92       	push	r14
    1afc:	ff 92       	push	r15
    1afe:	0f 93       	push	r16
    1b00:	a1 2c       	mov	r10, r1
    1b02:	b1 2c       	mov	r11, r1
    1b04:	c1 2c       	mov	r12, r1
    1b06:	d1 2c       	mov	r13, r1
    1b08:	e1 2c       	mov	r14, r1
    1b0a:	f1 2c       	mov	r15, r1
    1b0c:	00 e0       	ldi	r16, 0x00	; 0
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	45 e5       	ldi	r20, 0x55	; 85
    1b14:	50 e0       	ldi	r21, 0x00	; 0
    1b16:	68 e1       	ldi	r22, 0x18	; 24
    1b18:	73 e0       	ldi	r23, 0x03	; 3
    1b1a:	8c e0       	ldi	r24, 0x0C	; 12
    1b1c:	9f e0       	ldi	r25, 0x0F	; 15
    1b1e:	e8 de       	rcall	.-560    	; 0x18f0 <xTaskGenericCreate>
    1b20:	81 30       	cpi	r24, 0x01	; 1
    1b22:	41 f4       	brne	.+16     	; 0x1b34 <vTaskStartScheduler+0x42>
    1b24:	f8 94       	cli
    1b26:	80 93 1b 09 	sts	0x091B, r24	; 0x80091b <xSchedulerRunning>
    1b2a:	10 92 1f 09 	sts	0x091F, r1	; 0x80091f <xTickCount+0x1>
    1b2e:	10 92 1e 09 	sts	0x091E, r1	; 0x80091e <xTickCount>
    1b32:	ba dd       	rcall	.-1164   	; 0x16a8 <xPortStartScheduler>
    1b34:	0f 91       	pop	r16
    1b36:	ff 90       	pop	r15
    1b38:	ef 90       	pop	r14
    1b3a:	df 90       	pop	r13
    1b3c:	cf 90       	pop	r12
    1b3e:	bf 90       	pop	r11
    1b40:	af 90       	pop	r10
    1b42:	08 95       	ret

00001b44 <vTaskSuspendAll>:
    1b44:	80 91 1a 09 	lds	r24, 0x091A	; 0x80091a <uxSchedulerSuspended>
    1b48:	8f 5f       	subi	r24, 0xFF	; 255
    1b4a:	80 93 1a 09 	sts	0x091A, r24	; 0x80091a <uxSchedulerSuspended>
    1b4e:	08 95       	ret

00001b50 <vTaskIncrementTick>:
    1b50:	0f 93       	push	r16
    1b52:	1f 93       	push	r17
    1b54:	cf 93       	push	r28
    1b56:	df 93       	push	r29
    1b58:	80 91 1a 09 	lds	r24, 0x091A	; 0x80091a <uxSchedulerSuspended>
    1b5c:	81 11       	cpse	r24, r1
    1b5e:	b2 c0       	rjmp	.+356    	; 0x1cc4 <vTaskIncrementTick+0x174>
    1b60:	80 91 1e 09 	lds	r24, 0x091E	; 0x80091e <xTickCount>
    1b64:	90 91 1f 09 	lds	r25, 0x091F	; 0x80091f <xTickCount+0x1>
    1b68:	01 96       	adiw	r24, 0x01	; 1
    1b6a:	90 93 1f 09 	sts	0x091F, r25	; 0x80091f <xTickCount+0x1>
    1b6e:	80 93 1e 09 	sts	0x091E, r24	; 0x80091e <xTickCount>
    1b72:	80 91 1e 09 	lds	r24, 0x091E	; 0x80091e <xTickCount>
    1b76:	90 91 1f 09 	lds	r25, 0x091F	; 0x80091f <xTickCount+0x1>
    1b7a:	89 2b       	or	r24, r25
    1b7c:	99 f5       	brne	.+102    	; 0x1be4 <vTaskIncrementTick+0x94>
    1b7e:	80 91 36 09 	lds	r24, 0x0936	; 0x800936 <pxDelayedTaskList>
    1b82:	90 91 37 09 	lds	r25, 0x0937	; 0x800937 <pxDelayedTaskList+0x1>
    1b86:	20 91 34 09 	lds	r18, 0x0934	; 0x800934 <pxOverflowDelayedTaskList>
    1b8a:	30 91 35 09 	lds	r19, 0x0935	; 0x800935 <pxOverflowDelayedTaskList+0x1>
    1b8e:	30 93 37 09 	sts	0x0937, r19	; 0x800937 <pxDelayedTaskList+0x1>
    1b92:	20 93 36 09 	sts	0x0936, r18	; 0x800936 <pxDelayedTaskList>
    1b96:	90 93 35 09 	sts	0x0935, r25	; 0x800935 <pxOverflowDelayedTaskList+0x1>
    1b9a:	80 93 34 09 	sts	0x0934, r24	; 0x800934 <pxOverflowDelayedTaskList>
    1b9e:	80 91 17 09 	lds	r24, 0x0917	; 0x800917 <xNumOfOverflows>
    1ba2:	8f 5f       	subi	r24, 0xFF	; 255
    1ba4:	80 93 17 09 	sts	0x0917, r24	; 0x800917 <xNumOfOverflows>
    1ba8:	e0 91 36 09 	lds	r30, 0x0936	; 0x800936 <pxDelayedTaskList>
    1bac:	f0 91 37 09 	lds	r31, 0x0937	; 0x800937 <pxDelayedTaskList+0x1>
    1bb0:	80 81       	ld	r24, Z
    1bb2:	81 11       	cpse	r24, r1
    1bb4:	07 c0       	rjmp	.+14     	; 0x1bc4 <vTaskIncrementTick+0x74>
    1bb6:	8f ef       	ldi	r24, 0xFF	; 255
    1bb8:	9f ef       	ldi	r25, 0xFF	; 255
    1bba:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <xNextTaskUnblockTime+0x1>
    1bbe:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <xNextTaskUnblockTime>
    1bc2:	10 c0       	rjmp	.+32     	; 0x1be4 <vTaskIncrementTick+0x94>
    1bc4:	e0 91 36 09 	lds	r30, 0x0936	; 0x800936 <pxDelayedTaskList>
    1bc8:	f0 91 37 09 	lds	r31, 0x0937	; 0x800937 <pxDelayedTaskList+0x1>
    1bcc:	05 80       	ldd	r0, Z+5	; 0x05
    1bce:	f6 81       	ldd	r31, Z+6	; 0x06
    1bd0:	e0 2d       	mov	r30, r0
    1bd2:	06 80       	ldd	r0, Z+6	; 0x06
    1bd4:	f7 81       	ldd	r31, Z+7	; 0x07
    1bd6:	e0 2d       	mov	r30, r0
    1bd8:	82 81       	ldd	r24, Z+2	; 0x02
    1bda:	93 81       	ldd	r25, Z+3	; 0x03
    1bdc:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <xNextTaskUnblockTime+0x1>
    1be0:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <xNextTaskUnblockTime>
    1be4:	20 91 1e 09 	lds	r18, 0x091E	; 0x80091e <xTickCount>
    1be8:	30 91 1f 09 	lds	r19, 0x091F	; 0x80091f <xTickCount+0x1>
    1bec:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <xNextTaskUnblockTime>
    1bf0:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <xNextTaskUnblockTime+0x1>
    1bf4:	28 17       	cp	r18, r24
    1bf6:	39 07       	cpc	r19, r25
    1bf8:	08 f4       	brcc	.+2      	; 0x1bfc <vTaskIncrementTick+0xac>
    1bfa:	69 c0       	rjmp	.+210    	; 0x1cce <vTaskIncrementTick+0x17e>
    1bfc:	e0 91 36 09 	lds	r30, 0x0936	; 0x800936 <pxDelayedTaskList>
    1c00:	f0 91 37 09 	lds	r31, 0x0937	; 0x800937 <pxDelayedTaskList+0x1>
    1c04:	80 81       	ld	r24, Z
    1c06:	88 23       	and	r24, r24
    1c08:	99 f0       	breq	.+38     	; 0x1c30 <vTaskIncrementTick+0xe0>
    1c0a:	e0 91 36 09 	lds	r30, 0x0936	; 0x800936 <pxDelayedTaskList>
    1c0e:	f0 91 37 09 	lds	r31, 0x0937	; 0x800937 <pxDelayedTaskList+0x1>
    1c12:	05 80       	ldd	r0, Z+5	; 0x05
    1c14:	f6 81       	ldd	r31, Z+6	; 0x06
    1c16:	e0 2d       	mov	r30, r0
    1c18:	c6 81       	ldd	r28, Z+6	; 0x06
    1c1a:	d7 81       	ldd	r29, Z+7	; 0x07
    1c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c20:	20 91 1e 09 	lds	r18, 0x091E	; 0x80091e <xTickCount>
    1c24:	30 91 1f 09 	lds	r19, 0x091F	; 0x80091f <xTickCount+0x1>
    1c28:	28 17       	cp	r18, r24
    1c2a:	39 07       	cpc	r19, r25
    1c2c:	f8 f4       	brcc	.+62     	; 0x1c6c <vTaskIncrementTick+0x11c>
    1c2e:	19 c0       	rjmp	.+50     	; 0x1c62 <vTaskIncrementTick+0x112>
    1c30:	8f ef       	ldi	r24, 0xFF	; 255
    1c32:	9f ef       	ldi	r25, 0xFF	; 255
    1c34:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <xNextTaskUnblockTime+0x1>
    1c38:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <xNextTaskUnblockTime>
    1c3c:	48 c0       	rjmp	.+144    	; 0x1cce <vTaskIncrementTick+0x17e>
    1c3e:	e0 91 36 09 	lds	r30, 0x0936	; 0x800936 <pxDelayedTaskList>
    1c42:	f0 91 37 09 	lds	r31, 0x0937	; 0x800937 <pxDelayedTaskList+0x1>
    1c46:	05 80       	ldd	r0, Z+5	; 0x05
    1c48:	f6 81       	ldd	r31, Z+6	; 0x06
    1c4a:	e0 2d       	mov	r30, r0
    1c4c:	c6 81       	ldd	r28, Z+6	; 0x06
    1c4e:	d7 81       	ldd	r29, Z+7	; 0x07
    1c50:	8a 81       	ldd	r24, Y+2	; 0x02
    1c52:	9b 81       	ldd	r25, Y+3	; 0x03
    1c54:	20 91 1e 09 	lds	r18, 0x091E	; 0x80091e <xTickCount>
    1c58:	30 91 1f 09 	lds	r19, 0x091F	; 0x80091f <xTickCount+0x1>
    1c5c:	28 17       	cp	r18, r24
    1c5e:	39 07       	cpc	r19, r25
    1c60:	28 f4       	brcc	.+10     	; 0x1c6c <vTaskIncrementTick+0x11c>
    1c62:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <xNextTaskUnblockTime+0x1>
    1c66:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <xNextTaskUnblockTime>
    1c6a:	31 c0       	rjmp	.+98     	; 0x1cce <vTaskIncrementTick+0x17e>
    1c6c:	8e 01       	movw	r16, r28
    1c6e:	0e 5f       	subi	r16, 0xFE	; 254
    1c70:	1f 4f       	sbci	r17, 0xFF	; 255
    1c72:	c8 01       	movw	r24, r16
    1c74:	0e 94 0c 01 	call	0x218	; 0x218 <vListRemove>
    1c78:	8c 89       	ldd	r24, Y+20	; 0x14
    1c7a:	9d 89       	ldd	r25, Y+21	; 0x15
    1c7c:	89 2b       	or	r24, r25
    1c7e:	21 f0       	breq	.+8      	; 0x1c88 <vTaskIncrementTick+0x138>
    1c80:	ce 01       	movw	r24, r28
    1c82:	0c 96       	adiw	r24, 0x0c	; 12
    1c84:	0e 94 0c 01 	call	0x218	; 0x218 <vListRemove>
    1c88:	8e 89       	ldd	r24, Y+22	; 0x16
    1c8a:	90 91 1c 09 	lds	r25, 0x091C	; 0x80091c <uxTopReadyPriority>
    1c8e:	98 17       	cp	r25, r24
    1c90:	10 f4       	brcc	.+4      	; 0x1c96 <vTaskIncrementTick+0x146>
    1c92:	80 93 1c 09 	sts	0x091C, r24	; 0x80091c <uxTopReadyPriority>
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	9c 01       	movw	r18, r24
    1c9a:	22 0f       	add	r18, r18
    1c9c:	33 1f       	adc	r19, r19
    1c9e:	22 0f       	add	r18, r18
    1ca0:	33 1f       	adc	r19, r19
    1ca2:	22 0f       	add	r18, r18
    1ca4:	33 1f       	adc	r19, r19
    1ca6:	82 0f       	add	r24, r18
    1ca8:	93 1f       	adc	r25, r19
    1caa:	b8 01       	movw	r22, r16
    1cac:	86 5b       	subi	r24, 0xB6	; 182
    1cae:	96 4f       	sbci	r25, 0xF6	; 246
    1cb0:	0e 94 aa 00 	call	0x154	; 0x154 <vListInsertEnd>
    1cb4:	e0 91 36 09 	lds	r30, 0x0936	; 0x800936 <pxDelayedTaskList>
    1cb8:	f0 91 37 09 	lds	r31, 0x0937	; 0x800937 <pxDelayedTaskList+0x1>
    1cbc:	80 81       	ld	r24, Z
    1cbe:	81 11       	cpse	r24, r1
    1cc0:	be cf       	rjmp	.-132    	; 0x1c3e <vTaskIncrementTick+0xee>
    1cc2:	b6 cf       	rjmp	.-148    	; 0x1c30 <vTaskIncrementTick+0xe0>
    1cc4:	80 91 19 09 	lds	r24, 0x0919	; 0x800919 <uxMissedTicks>
    1cc8:	8f 5f       	subi	r24, 0xFF	; 255
    1cca:	80 93 19 09 	sts	0x0919, r24	; 0x800919 <uxMissedTicks>
    1cce:	df 91       	pop	r29
    1cd0:	cf 91       	pop	r28
    1cd2:	1f 91       	pop	r17
    1cd4:	0f 91       	pop	r16
    1cd6:	08 95       	ret

00001cd8 <xTaskResumeAll>:
    1cd8:	cf 92       	push	r12
    1cda:	df 92       	push	r13
    1cdc:	ef 92       	push	r14
    1cde:	ff 92       	push	r15
    1ce0:	0f 93       	push	r16
    1ce2:	1f 93       	push	r17
    1ce4:	cf 93       	push	r28
    1ce6:	df 93       	push	r29
    1ce8:	0f b6       	in	r0, 0x3f	; 63
    1cea:	f8 94       	cli
    1cec:	0f 92       	push	r0
    1cee:	80 91 1a 09 	lds	r24, 0x091A	; 0x80091a <uxSchedulerSuspended>
    1cf2:	81 50       	subi	r24, 0x01	; 1
    1cf4:	80 93 1a 09 	sts	0x091A, r24	; 0x80091a <uxSchedulerSuspended>
    1cf8:	80 91 1a 09 	lds	r24, 0x091A	; 0x80091a <uxSchedulerSuspended>
    1cfc:	81 11       	cpse	r24, r1
    1cfe:	62 c0       	rjmp	.+196    	; 0x1dc4 <xTaskResumeAll+0xec>
    1d00:	80 91 20 09 	lds	r24, 0x0920	; 0x800920 <uxCurrentNumberOfTasks>
    1d04:	81 11       	cpse	r24, r1
    1d06:	32 c0       	rjmp	.+100    	; 0x1d6c <xTaskResumeAll+0x94>
    1d08:	60 c0       	rjmp	.+192    	; 0x1dca <xTaskResumeAll+0xf2>
    1d0a:	d7 01       	movw	r26, r14
    1d0c:	15 96       	adiw	r26, 0x05	; 5
    1d0e:	ed 91       	ld	r30, X+
    1d10:	fc 91       	ld	r31, X
    1d12:	16 97       	sbiw	r26, 0x06	; 6
    1d14:	c6 81       	ldd	r28, Z+6	; 0x06
    1d16:	d7 81       	ldd	r29, Z+7	; 0x07
    1d18:	ce 01       	movw	r24, r28
    1d1a:	0c 96       	adiw	r24, 0x0c	; 12
    1d1c:	0e 94 0c 01 	call	0x218	; 0x218 <vListRemove>
    1d20:	8e 01       	movw	r16, r28
    1d22:	0e 5f       	subi	r16, 0xFE	; 254
    1d24:	1f 4f       	sbci	r17, 0xFF	; 255
    1d26:	c8 01       	movw	r24, r16
    1d28:	0e 94 0c 01 	call	0x218	; 0x218 <vListRemove>
    1d2c:	8e 89       	ldd	r24, Y+22	; 0x16
    1d2e:	90 91 1c 09 	lds	r25, 0x091C	; 0x80091c <uxTopReadyPriority>
    1d32:	98 17       	cp	r25, r24
    1d34:	10 f4       	brcc	.+4      	; 0x1d3a <xTaskResumeAll+0x62>
    1d36:	80 93 1c 09 	sts	0x091C, r24	; 0x80091c <uxTopReadyPriority>
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	9c 01       	movw	r18, r24
    1d3e:	22 0f       	add	r18, r18
    1d40:	33 1f       	adc	r19, r19
    1d42:	22 0f       	add	r18, r18
    1d44:	33 1f       	adc	r19, r19
    1d46:	22 0f       	add	r18, r18
    1d48:	33 1f       	adc	r19, r19
    1d4a:	82 0f       	add	r24, r18
    1d4c:	93 1f       	adc	r25, r19
    1d4e:	b8 01       	movw	r22, r16
    1d50:	86 5b       	subi	r24, 0xB6	; 182
    1d52:	96 4f       	sbci	r25, 0xF6	; 246
    1d54:	0e 94 aa 00 	call	0x154	; 0x154 <vListInsertEnd>
    1d58:	e0 91 6e 09 	lds	r30, 0x096E	; 0x80096e <pxCurrentTCB>
    1d5c:	f0 91 6f 09 	lds	r31, 0x096F	; 0x80096f <pxCurrentTCB+0x1>
    1d60:	9e 89       	ldd	r25, Y+22	; 0x16
    1d62:	86 89       	ldd	r24, Z+22	; 0x16
    1d64:	98 17       	cp	r25, r24
    1d66:	58 f0       	brcs	.+22     	; 0x1d7e <xTaskResumeAll+0xa6>
    1d68:	dc 2c       	mov	r13, r12
    1d6a:	09 c0       	rjmp	.+18     	; 0x1d7e <xTaskResumeAll+0xa6>
    1d6c:	d1 2c       	mov	r13, r1
    1d6e:	0f 2e       	mov	r0, r31
    1d70:	fb e2       	ldi	r31, 0x2B	; 43
    1d72:	ef 2e       	mov	r14, r31
    1d74:	f9 e0       	ldi	r31, 0x09	; 9
    1d76:	ff 2e       	mov	r15, r31
    1d78:	f0 2d       	mov	r31, r0
    1d7a:	cc 24       	eor	r12, r12
    1d7c:	c3 94       	inc	r12
    1d7e:	f7 01       	movw	r30, r14
    1d80:	80 81       	ld	r24, Z
    1d82:	81 11       	cpse	r24, r1
    1d84:	c2 cf       	rjmp	.-124    	; 0x1d0a <xTaskResumeAll+0x32>
    1d86:	80 91 19 09 	lds	r24, 0x0919	; 0x800919 <uxMissedTicks>
    1d8a:	88 23       	and	r24, r24
    1d8c:	79 f0       	breq	.+30     	; 0x1dac <xTaskResumeAll+0xd4>
    1d8e:	80 91 19 09 	lds	r24, 0x0919	; 0x800919 <uxMissedTicks>
    1d92:	88 23       	and	r24, r24
    1d94:	91 f0       	breq	.+36     	; 0x1dba <xTaskResumeAll+0xe2>
    1d96:	dc de       	rcall	.-584    	; 0x1b50 <vTaskIncrementTick>
    1d98:	80 91 19 09 	lds	r24, 0x0919	; 0x800919 <uxMissedTicks>
    1d9c:	81 50       	subi	r24, 0x01	; 1
    1d9e:	80 93 19 09 	sts	0x0919, r24	; 0x800919 <uxMissedTicks>
    1da2:	80 91 19 09 	lds	r24, 0x0919	; 0x800919 <uxMissedTicks>
    1da6:	81 11       	cpse	r24, r1
    1da8:	f6 cf       	rjmp	.-20     	; 0x1d96 <xTaskResumeAll+0xbe>
    1daa:	07 c0       	rjmp	.+14     	; 0x1dba <xTaskResumeAll+0xe2>
    1dac:	f1 e0       	ldi	r31, 0x01	; 1
    1dae:	df 16       	cp	r13, r31
    1db0:	21 f0       	breq	.+8      	; 0x1dba <xTaskResumeAll+0xe2>
    1db2:	80 91 18 09 	lds	r24, 0x0918	; 0x800918 <xMissedYield>
    1db6:	81 30       	cpi	r24, 0x01	; 1
    1db8:	39 f4       	brne	.+14     	; 0x1dc8 <xTaskResumeAll+0xf0>
    1dba:	10 92 18 09 	sts	0x0918, r1	; 0x800918 <xMissedYield>
    1dbe:	ae dc       	rcall	.-1700   	; 0x171c <vPortYield>
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	03 c0       	rjmp	.+6      	; 0x1dca <xTaskResumeAll+0xf2>
    1dc4:	80 e0       	ldi	r24, 0x00	; 0
    1dc6:	01 c0       	rjmp	.+2      	; 0x1dca <xTaskResumeAll+0xf2>
    1dc8:	80 e0       	ldi	r24, 0x00	; 0
    1dca:	0f 90       	pop	r0
    1dcc:	0f be       	out	0x3f, r0	; 63
    1dce:	df 91       	pop	r29
    1dd0:	cf 91       	pop	r28
    1dd2:	1f 91       	pop	r17
    1dd4:	0f 91       	pop	r16
    1dd6:	ff 90       	pop	r15
    1dd8:	ef 90       	pop	r14
    1dda:	df 90       	pop	r13
    1ddc:	cf 90       	pop	r12
    1dde:	08 95       	ret

00001de0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    1de0:	cf 93       	push	r28
    1de2:	df 93       	push	r29
    1de4:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    1de6:	89 2b       	or	r24, r25
		{
			vTaskSuspendAll();
    1de8:	99 f0       	breq	.+38     	; 0x1e10 <vTaskDelay+0x30>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    1dea:	ac de       	rcall	.-680    	; 0x1b44 <vTaskSuspendAll>
    1dec:	80 91 1e 09 	lds	r24, 0x091E	; 0x80091e <xTickCount>
    1df0:	90 91 1f 09 	lds	r25, 0x091F	; 0x80091f <xTickCount+0x1>
    1df4:	c8 0f       	add	r28, r24

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    1df6:	d9 1f       	adc	r29, r25
    1df8:	80 91 6e 09 	lds	r24, 0x096E	; 0x80096e <pxCurrentTCB>
    1dfc:	90 91 6f 09 	lds	r25, 0x096F	; 0x80096f <pxCurrentTCB+0x1>
    1e00:	02 96       	adiw	r24, 0x02	; 2
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    1e02:	0e 94 0c 01 	call	0x218	; 0x218 <vListRemove>
			xAlreadyYielded = xTaskResumeAll();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1e06:	ce 01       	movw	r24, r28
    1e08:	3c dd       	rcall	.-1416   	; 0x1882 <prvAddCurrentTaskToDelayedList>
		{
			portYIELD_WITHIN_API();
    1e0a:	66 df       	rcall	.-308    	; 0x1cd8 <xTaskResumeAll>
    1e0c:	81 11       	cpse	r24, r1
		}
	}
    1e0e:	01 c0       	rjmp	.+2      	; 0x1e12 <vTaskDelay+0x32>
    1e10:	85 dc       	rcall	.-1782   	; 0x171c <vPortYield>
    1e12:	df 91       	pop	r29
    1e14:	cf 91       	pop	r28
    1e16:	08 95       	ret

00001e18 <prvIdleTask>:
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1e18:	0f 2e       	mov	r0, r31
    1e1a:	f2 e2       	ldi	r31, 0x22	; 34
    1e1c:	ef 2e       	mov	r14, r31
    1e1e:	f9 e0       	ldi	r31, 0x09	; 9
    1e20:	ff 2e       	mov	r15, r31
    1e22:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    1e24:	ca e4       	ldi	r28, 0x4A	; 74
    1e26:	d9 e0       	ldi	r29, 0x09	; 9
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    1e28:	80 91 21 09 	lds	r24, 0x0921	; 0x800921 <uxTasksDeleted>
    1e2c:	88 23       	and	r24, r24
		{
			vTaskSuspendAll();
    1e2e:	41 f1       	breq	.+80     	; 0x1e80 <prvIdleTask+0x68>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1e30:	89 de       	rcall	.-750    	; 0x1b44 <vTaskSuspendAll>
			xTaskResumeAll();
    1e32:	d7 01       	movw	r26, r14
    1e34:	1c 91       	ld	r17, X

			if( xListIsEmpty == pdFALSE )
    1e36:	50 df       	rcall	.-352    	; 0x1cd8 <xTaskResumeAll>
    1e38:	11 23       	and	r17, r17
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    1e3a:	11 f1       	breq	.+68     	; 0x1e80 <prvIdleTask+0x68>
    1e3c:	0f b6       	in	r0, 0x3f	; 63
    1e3e:	f8 94       	cli
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    1e40:	0f 92       	push	r0
    1e42:	d7 01       	movw	r26, r14
    1e44:	15 96       	adiw	r26, 0x05	; 5
    1e46:	ed 91       	ld	r30, X+
    1e48:	fc 91       	ld	r31, X
    1e4a:	16 97       	sbiw	r26, 0x06	; 6
    1e4c:	06 81       	ldd	r16, Z+6	; 0x06
					vListRemove( &( pxTCB->xGenericListItem ) );
    1e4e:	17 81       	ldd	r17, Z+7	; 0x07
    1e50:	c8 01       	movw	r24, r16
    1e52:	02 96       	adiw	r24, 0x02	; 2
    1e54:	0e 94 0c 01 	call	0x218	; 0x218 <vListRemove>
					--uxCurrentNumberOfTasks;
    1e58:	80 91 20 09 	lds	r24, 0x0920	; 0x800920 <uxCurrentNumberOfTasks>
    1e5c:	81 50       	subi	r24, 0x01	; 1
    1e5e:	80 93 20 09 	sts	0x0920, r24	; 0x800920 <uxCurrentNumberOfTasks>
					--uxTasksDeleted;
    1e62:	80 91 21 09 	lds	r24, 0x0921	; 0x800921 <uxTasksDeleted>
    1e66:	81 50       	subi	r24, 0x01	; 1
    1e68:	80 93 21 09 	sts	0x0921, r24	; 0x800921 <uxTasksDeleted>
				}
				taskEXIT_CRITICAL();
    1e6c:	0f 90       	pop	r0
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    1e6e:	0f be       	out	0x3f, r0	; 63
    1e70:	f8 01       	movw	r30, r16
    1e72:	87 89       	ldd	r24, Z+23	; 0x17
    1e74:	90 8d       	ldd	r25, Z+24	; 0x18
    1e76:	0e 94 97 00 	call	0x12e	; 0x12e <vPortFree>
		vPortFree( pxTCB );
    1e7a:	c8 01       	movw	r24, r16
    1e7c:	0e 94 97 00 	call	0x12e	; 0x12e <vPortFree>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    1e80:	88 81       	ld	r24, Y
			{
				taskYIELD();
    1e82:	82 30       	cpi	r24, 0x02	; 2
    1e84:	88 f2       	brcs	.-94     	; 0x1e28 <prvIdleTask+0x10>
    1e86:	4a dc       	rcall	.-1900   	; 0x171c <vPortYield>
    1e88:	cf cf       	rjmp	.-98     	; 0x1e28 <prvIdleTask+0x10>

00001e8a <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    1e8a:	80 91 1a 09 	lds	r24, 0x091A	; 0x80091a <uxSchedulerSuspended>
    1e8e:	81 11       	cpse	r24, r1
    1e90:	13 c0       	rjmp	.+38     	; 0x1eb8 <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    1e92:	80 91 1c 09 	lds	r24, 0x091C	; 0x80091c <uxTopReadyPriority>
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	fc 01       	movw	r30, r24
    1e9a:	ee 0f       	add	r30, r30
    1e9c:	ff 1f       	adc	r31, r31
    1e9e:	ee 0f       	add	r30, r30
    1ea0:	ff 1f       	adc	r31, r31
    1ea2:	ee 0f       	add	r30, r30
    1ea4:	ff 1f       	adc	r31, r31
    1ea6:	8e 0f       	add	r24, r30
    1ea8:	9f 1f       	adc	r25, r31
    1eaa:	fc 01       	movw	r30, r24
    1eac:	e6 5b       	subi	r30, 0xB6	; 182
    1eae:	f6 4f       	sbci	r31, 0xF6	; 246
    1eb0:	80 81       	ld	r24, Z
    1eb2:	88 23       	and	r24, r24
    1eb4:	29 f0       	breq	.+10     	; 0x1ec0 <vTaskSwitchContext+0x36>
    1eb6:	1b c0       	rjmp	.+54     	; 0x1eee <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	80 93 18 09 	sts	0x0918, r24	; 0x800918 <xMissedYield>
    1ebe:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    1ec0:	80 91 1c 09 	lds	r24, 0x091C	; 0x80091c <uxTopReadyPriority>
    1ec4:	81 50       	subi	r24, 0x01	; 1
    1ec6:	80 93 1c 09 	sts	0x091C, r24	; 0x80091c <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    1eca:	80 91 1c 09 	lds	r24, 0x091C	; 0x80091c <uxTopReadyPriority>
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	fc 01       	movw	r30, r24
    1ed2:	ee 0f       	add	r30, r30
    1ed4:	ff 1f       	adc	r31, r31
    1ed6:	ee 0f       	add	r30, r30
    1ed8:	ff 1f       	adc	r31, r31
    1eda:	ee 0f       	add	r30, r30
    1edc:	ff 1f       	adc	r31, r31
    1ede:	8e 0f       	add	r24, r30
    1ee0:	9f 1f       	adc	r25, r31
    1ee2:	fc 01       	movw	r30, r24
    1ee4:	e6 5b       	subi	r30, 0xB6	; 182
    1ee6:	f6 4f       	sbci	r31, 0xF6	; 246
    1ee8:	80 81       	ld	r24, Z
    1eea:	88 23       	and	r24, r24
    1eec:	49 f3       	breq	.-46     	; 0x1ec0 <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    1eee:	80 91 1c 09 	lds	r24, 0x091C	; 0x80091c <uxTopReadyPriority>
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	9c 01       	movw	r18, r24
    1ef6:	22 0f       	add	r18, r18
    1ef8:	33 1f       	adc	r19, r19
    1efa:	22 0f       	add	r18, r18
    1efc:	33 1f       	adc	r19, r19
    1efe:	22 0f       	add	r18, r18
    1f00:	33 1f       	adc	r19, r19
    1f02:	28 0f       	add	r18, r24
    1f04:	39 1f       	adc	r19, r25
    1f06:	d9 01       	movw	r26, r18
    1f08:	a6 5b       	subi	r26, 0xB6	; 182
    1f0a:	b6 4f       	sbci	r27, 0xF6	; 246
    1f0c:	11 96       	adiw	r26, 0x01	; 1
    1f0e:	ed 91       	ld	r30, X+
    1f10:	fc 91       	ld	r31, X
    1f12:	12 97       	sbiw	r26, 0x02	; 2
    1f14:	02 80       	ldd	r0, Z+2	; 0x02
    1f16:	f3 81       	ldd	r31, Z+3	; 0x03
    1f18:	e0 2d       	mov	r30, r0
    1f1a:	12 96       	adiw	r26, 0x02	; 2
    1f1c:	fc 93       	st	X, r31
    1f1e:	ee 93       	st	-X, r30
    1f20:	11 97       	sbiw	r26, 0x01	; 1
    1f22:	23 5b       	subi	r18, 0xB3	; 179
    1f24:	36 4f       	sbci	r19, 0xF6	; 246
    1f26:	e2 17       	cp	r30, r18
    1f28:	f3 07       	cpc	r31, r19
    1f2a:	29 f4       	brne	.+10     	; 0x1f36 <vTaskSwitchContext+0xac>
    1f2c:	22 81       	ldd	r18, Z+2	; 0x02
    1f2e:	33 81       	ldd	r19, Z+3	; 0x03
    1f30:	fd 01       	movw	r30, r26
    1f32:	32 83       	std	Z+2, r19	; 0x02
    1f34:	21 83       	std	Z+1, r18	; 0x01
    1f36:	fc 01       	movw	r30, r24
    1f38:	ee 0f       	add	r30, r30
    1f3a:	ff 1f       	adc	r31, r31
    1f3c:	ee 0f       	add	r30, r30
    1f3e:	ff 1f       	adc	r31, r31
    1f40:	ee 0f       	add	r30, r30
    1f42:	ff 1f       	adc	r31, r31
    1f44:	8e 0f       	add	r24, r30
    1f46:	9f 1f       	adc	r25, r31
    1f48:	fc 01       	movw	r30, r24
    1f4a:	e6 5b       	subi	r30, 0xB6	; 182
    1f4c:	f6 4f       	sbci	r31, 0xF6	; 246
    1f4e:	01 80       	ldd	r0, Z+1	; 0x01
    1f50:	f2 81       	ldd	r31, Z+2	; 0x02
    1f52:	e0 2d       	mov	r30, r0
    1f54:	86 81       	ldd	r24, Z+6	; 0x06
    1f56:	97 81       	ldd	r25, Z+7	; 0x07
    1f58:	90 93 6f 09 	sts	0x096F, r25	; 0x80096f <pxCurrentTCB+0x1>
    1f5c:	80 93 6e 09 	sts	0x096E, r24	; 0x80096e <pxCurrentTCB>
    1f60:	08 95       	ret

00001f62 <__divmodhi4>:
    1f62:	97 fb       	bst	r25, 7
    1f64:	07 2e       	mov	r0, r23
    1f66:	16 f4       	brtc	.+4      	; 0x1f6c <__divmodhi4+0xa>
    1f68:	00 94       	com	r0
    1f6a:	06 d0       	rcall	.+12     	; 0x1f78 <__divmodhi4_neg1>
    1f6c:	77 fd       	sbrc	r23, 7
    1f6e:	08 d0       	rcall	.+16     	; 0x1f80 <__divmodhi4_neg2>
    1f70:	14 d0       	rcall	.+40     	; 0x1f9a <__udivmodhi4>
    1f72:	07 fc       	sbrc	r0, 7
    1f74:	05 d0       	rcall	.+10     	; 0x1f80 <__divmodhi4_neg2>
    1f76:	3e f4       	brtc	.+14     	; 0x1f86 <__divmodhi4_exit>

00001f78 <__divmodhi4_neg1>:
    1f78:	90 95       	com	r25
    1f7a:	81 95       	neg	r24
    1f7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f7e:	08 95       	ret

00001f80 <__divmodhi4_neg2>:
    1f80:	70 95       	com	r23
    1f82:	61 95       	neg	r22
    1f84:	7f 4f       	sbci	r23, 0xFF	; 255

00001f86 <__divmodhi4_exit>:
    1f86:	08 95       	ret

00001f88 <__tablejump2__>:
    1f88:	ee 0f       	add	r30, r30
    1f8a:	ff 1f       	adc	r31, r31
    1f8c:	00 24       	eor	r0, r0
    1f8e:	00 1c       	adc	r0, r0
    1f90:	0b be       	out	0x3b, r0	; 59
    1f92:	07 90       	elpm	r0, Z+
    1f94:	f6 91       	elpm	r31, Z
    1f96:	e0 2d       	mov	r30, r0
    1f98:	09 94       	ijmp

00001f9a <__udivmodhi4>:
    1f9a:	aa 1b       	sub	r26, r26
    1f9c:	bb 1b       	sub	r27, r27
    1f9e:	51 e1       	ldi	r21, 0x11	; 17
    1fa0:	07 c0       	rjmp	.+14     	; 0x1fb0 <__udivmodhi4_ep>

00001fa2 <__udivmodhi4_loop>:
    1fa2:	aa 1f       	adc	r26, r26
    1fa4:	bb 1f       	adc	r27, r27
    1fa6:	a6 17       	cp	r26, r22
    1fa8:	b7 07       	cpc	r27, r23
    1faa:	10 f0       	brcs	.+4      	; 0x1fb0 <__udivmodhi4_ep>
    1fac:	a6 1b       	sub	r26, r22
    1fae:	b7 0b       	sbc	r27, r23

00001fb0 <__udivmodhi4_ep>:
    1fb0:	88 1f       	adc	r24, r24
    1fb2:	99 1f       	adc	r25, r25
    1fb4:	5a 95       	dec	r21
    1fb6:	a9 f7       	brne	.-22     	; 0x1fa2 <__udivmodhi4_loop>
    1fb8:	80 95       	com	r24
    1fba:	90 95       	com	r25
    1fbc:	bc 01       	movw	r22, r24
    1fbe:	cd 01       	movw	r24, r26
    1fc0:	08 95       	ret

00001fc2 <do_rand>:
    1fc2:	8f 92       	push	r8
    1fc4:	9f 92       	push	r9
    1fc6:	af 92       	push	r10
    1fc8:	bf 92       	push	r11
    1fca:	cf 92       	push	r12
    1fcc:	df 92       	push	r13
    1fce:	ef 92       	push	r14
    1fd0:	ff 92       	push	r15
    1fd2:	cf 93       	push	r28
    1fd4:	df 93       	push	r29
    1fd6:	ec 01       	movw	r28, r24
    1fd8:	68 81       	ld	r22, Y
    1fda:	79 81       	ldd	r23, Y+1	; 0x01
    1fdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fde:	9b 81       	ldd	r25, Y+3	; 0x03
    1fe0:	61 15       	cp	r22, r1
    1fe2:	71 05       	cpc	r23, r1
    1fe4:	81 05       	cpc	r24, r1
    1fe6:	91 05       	cpc	r25, r1
    1fe8:	21 f4       	brne	.+8      	; 0x1ff2 <do_rand+0x30>
    1fea:	64 e2       	ldi	r22, 0x24	; 36
    1fec:	79 ed       	ldi	r23, 0xD9	; 217
    1fee:	8b e5       	ldi	r24, 0x5B	; 91
    1ff0:	97 e0       	ldi	r25, 0x07	; 7
    1ff2:	2d e1       	ldi	r18, 0x1D	; 29
    1ff4:	33 ef       	ldi	r19, 0xF3	; 243
    1ff6:	41 e0       	ldi	r20, 0x01	; 1
    1ff8:	50 e0       	ldi	r21, 0x00	; 0
    1ffa:	68 d0       	rcall	.+208    	; 0x20cc <__divmodsi4>
    1ffc:	49 01       	movw	r8, r18
    1ffe:	5a 01       	movw	r10, r20
    2000:	9b 01       	movw	r18, r22
    2002:	ac 01       	movw	r20, r24
    2004:	a7 ea       	ldi	r26, 0xA7	; 167
    2006:	b1 e4       	ldi	r27, 0x41	; 65
    2008:	7d d0       	rcall	.+250    	; 0x2104 <__muluhisi3>
    200a:	6b 01       	movw	r12, r22
    200c:	7c 01       	movw	r14, r24
    200e:	ac ee       	ldi	r26, 0xEC	; 236
    2010:	b4 ef       	ldi	r27, 0xF4	; 244
    2012:	a5 01       	movw	r20, r10
    2014:	94 01       	movw	r18, r8
    2016:	82 d0       	rcall	.+260    	; 0x211c <__mulohisi3>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	8c 0d       	add	r24, r12
    201e:	9d 1d       	adc	r25, r13
    2020:	ae 1d       	adc	r26, r14
    2022:	bf 1d       	adc	r27, r15
    2024:	b7 ff       	sbrs	r27, 7
    2026:	03 c0       	rjmp	.+6      	; 0x202e <do_rand+0x6c>
    2028:	01 97       	sbiw	r24, 0x01	; 1
    202a:	a1 09       	sbc	r26, r1
    202c:	b0 48       	sbci	r27, 0x80	; 128
    202e:	88 83       	st	Y, r24
    2030:	99 83       	std	Y+1, r25	; 0x01
    2032:	aa 83       	std	Y+2, r26	; 0x02
    2034:	bb 83       	std	Y+3, r27	; 0x03
    2036:	9f 77       	andi	r25, 0x7F	; 127
    2038:	df 91       	pop	r29
    203a:	cf 91       	pop	r28
    203c:	ff 90       	pop	r15
    203e:	ef 90       	pop	r14
    2040:	df 90       	pop	r13
    2042:	cf 90       	pop	r12
    2044:	bf 90       	pop	r11
    2046:	af 90       	pop	r10
    2048:	9f 90       	pop	r9
    204a:	8f 90       	pop	r8
    204c:	08 95       	ret

0000204e <rand_r>:
    204e:	b9 cf       	rjmp	.-142    	; 0x1fc2 <do_rand>

00002050 <rand>:
    2050:	80 e0       	ldi	r24, 0x00	; 0
    2052:	91 e0       	ldi	r25, 0x01	; 1
    2054:	b6 cf       	rjmp	.-148    	; 0x1fc2 <do_rand>

00002056 <srand>:
    2056:	a0 e0       	ldi	r26, 0x00	; 0
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    205e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    2062:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    2066:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    206a:	08 95       	ret

0000206c <memset>:
    206c:	dc 01       	movw	r26, r24
    206e:	01 c0       	rjmp	.+2      	; 0x2072 <memset+0x6>
    2070:	6d 93       	st	X+, r22
    2072:	41 50       	subi	r20, 0x01	; 1
    2074:	50 40       	sbci	r21, 0x00	; 0
    2076:	e0 f7       	brcc	.-8      	; 0x2070 <memset+0x4>
    2078:	08 95       	ret

0000207a <strncpy>:
    207a:	fb 01       	movw	r30, r22
    207c:	dc 01       	movw	r26, r24
    207e:	41 50       	subi	r20, 0x01	; 1
    2080:	50 40       	sbci	r21, 0x00	; 0
    2082:	48 f0       	brcs	.+18     	; 0x2096 <strncpy+0x1c>
    2084:	01 90       	ld	r0, Z+
    2086:	0d 92       	st	X+, r0
    2088:	00 20       	and	r0, r0
    208a:	c9 f7       	brne	.-14     	; 0x207e <strncpy+0x4>
    208c:	01 c0       	rjmp	.+2      	; 0x2090 <strncpy+0x16>
    208e:	1d 92       	st	X+, r1
    2090:	41 50       	subi	r20, 0x01	; 1
    2092:	50 40       	sbci	r21, 0x00	; 0
    2094:	e0 f7       	brcc	.-8      	; 0x208e <strncpy+0x14>
    2096:	08 95       	ret

00002098 <eeprom_read_byte>:
    2098:	f9 99       	sbic	0x1f, 1	; 31
    209a:	fe cf       	rjmp	.-4      	; 0x2098 <eeprom_read_byte>
    209c:	92 bd       	out	0x22, r25	; 34
    209e:	81 bd       	out	0x21, r24	; 33
    20a0:	f8 9a       	sbi	0x1f, 0	; 31
    20a2:	99 27       	eor	r25, r25
    20a4:	80 b5       	in	r24, 0x20	; 32
    20a6:	08 95       	ret

000020a8 <eeprom_update_byte>:
    20a8:	26 2f       	mov	r18, r22

000020aa <eeprom_update_r18>:
    20aa:	f9 99       	sbic	0x1f, 1	; 31
    20ac:	fe cf       	rjmp	.-4      	; 0x20aa <eeprom_update_r18>
    20ae:	92 bd       	out	0x22, r25	; 34
    20b0:	81 bd       	out	0x21, r24	; 33
    20b2:	f8 9a       	sbi	0x1f, 0	; 31
    20b4:	01 97       	sbiw	r24, 0x01	; 1
    20b6:	00 b4       	in	r0, 0x20	; 32
    20b8:	02 16       	cp	r0, r18
    20ba:	39 f0       	breq	.+14     	; 0x20ca <eeprom_update_r18+0x20>
    20bc:	1f ba       	out	0x1f, r1	; 31
    20be:	20 bd       	out	0x20, r18	; 32
    20c0:	0f b6       	in	r0, 0x3f	; 63
    20c2:	f8 94       	cli
    20c4:	fa 9a       	sbi	0x1f, 2	; 31
    20c6:	f9 9a       	sbi	0x1f, 1	; 31
    20c8:	0f be       	out	0x3f, r0	; 63
    20ca:	08 95       	ret

000020cc <__divmodsi4>:
    20cc:	05 2e       	mov	r0, r21
    20ce:	97 fb       	bst	r25, 7
    20d0:	16 f4       	brtc	.+4      	; 0x20d6 <__divmodsi4+0xa>
    20d2:	00 94       	com	r0
    20d4:	0f d0       	rcall	.+30     	; 0x20f4 <__negsi2>
    20d6:	57 fd       	sbrc	r21, 7
    20d8:	05 d0       	rcall	.+10     	; 0x20e4 <__divmodsi4_neg2>
    20da:	24 d0       	rcall	.+72     	; 0x2124 <__udivmodsi4>
    20dc:	07 fc       	sbrc	r0, 7
    20de:	02 d0       	rcall	.+4      	; 0x20e4 <__divmodsi4_neg2>
    20e0:	46 f4       	brtc	.+16     	; 0x20f2 <__divmodsi4_exit>
    20e2:	08 c0       	rjmp	.+16     	; 0x20f4 <__negsi2>

000020e4 <__divmodsi4_neg2>:
    20e4:	50 95       	com	r21
    20e6:	40 95       	com	r20
    20e8:	30 95       	com	r19
    20ea:	21 95       	neg	r18
    20ec:	3f 4f       	sbci	r19, 0xFF	; 255
    20ee:	4f 4f       	sbci	r20, 0xFF	; 255
    20f0:	5f 4f       	sbci	r21, 0xFF	; 255

000020f2 <__divmodsi4_exit>:
    20f2:	08 95       	ret

000020f4 <__negsi2>:
    20f4:	90 95       	com	r25
    20f6:	80 95       	com	r24
    20f8:	70 95       	com	r23
    20fa:	61 95       	neg	r22
    20fc:	7f 4f       	sbci	r23, 0xFF	; 255
    20fe:	8f 4f       	sbci	r24, 0xFF	; 255
    2100:	9f 4f       	sbci	r25, 0xFF	; 255
    2102:	08 95       	ret

00002104 <__muluhisi3>:
    2104:	31 d0       	rcall	.+98     	; 0x2168 <__umulhisi3>
    2106:	a5 9f       	mul	r26, r21
    2108:	90 0d       	add	r25, r0
    210a:	b4 9f       	mul	r27, r20
    210c:	90 0d       	add	r25, r0
    210e:	a4 9f       	mul	r26, r20
    2110:	80 0d       	add	r24, r0
    2112:	91 1d       	adc	r25, r1
    2114:	11 24       	eor	r1, r1
    2116:	08 95       	ret

00002118 <__mulshisi3>:
    2118:	b7 ff       	sbrs	r27, 7
    211a:	f4 cf       	rjmp	.-24     	; 0x2104 <__muluhisi3>

0000211c <__mulohisi3>:
    211c:	f3 df       	rcall	.-26     	; 0x2104 <__muluhisi3>
    211e:	82 1b       	sub	r24, r18
    2120:	93 0b       	sbc	r25, r19
    2122:	08 95       	ret

00002124 <__udivmodsi4>:
    2124:	a1 e2       	ldi	r26, 0x21	; 33
    2126:	1a 2e       	mov	r1, r26
    2128:	aa 1b       	sub	r26, r26
    212a:	bb 1b       	sub	r27, r27
    212c:	fd 01       	movw	r30, r26
    212e:	0d c0       	rjmp	.+26     	; 0x214a <__udivmodsi4_ep>

00002130 <__udivmodsi4_loop>:
    2130:	aa 1f       	adc	r26, r26
    2132:	bb 1f       	adc	r27, r27
    2134:	ee 1f       	adc	r30, r30
    2136:	ff 1f       	adc	r31, r31
    2138:	a2 17       	cp	r26, r18
    213a:	b3 07       	cpc	r27, r19
    213c:	e4 07       	cpc	r30, r20
    213e:	f5 07       	cpc	r31, r21
    2140:	20 f0       	brcs	.+8      	; 0x214a <__udivmodsi4_ep>
    2142:	a2 1b       	sub	r26, r18
    2144:	b3 0b       	sbc	r27, r19
    2146:	e4 0b       	sbc	r30, r20
    2148:	f5 0b       	sbc	r31, r21

0000214a <__udivmodsi4_ep>:
    214a:	66 1f       	adc	r22, r22
    214c:	77 1f       	adc	r23, r23
    214e:	88 1f       	adc	r24, r24
    2150:	99 1f       	adc	r25, r25
    2152:	1a 94       	dec	r1
    2154:	69 f7       	brne	.-38     	; 0x2130 <__udivmodsi4_loop>
    2156:	60 95       	com	r22
    2158:	70 95       	com	r23
    215a:	80 95       	com	r24
    215c:	90 95       	com	r25
    215e:	9b 01       	movw	r18, r22
    2160:	ac 01       	movw	r20, r24
    2162:	bd 01       	movw	r22, r26
    2164:	cf 01       	movw	r24, r30
    2166:	08 95       	ret

00002168 <__umulhisi3>:
    2168:	a2 9f       	mul	r26, r18
    216a:	b0 01       	movw	r22, r0
    216c:	b3 9f       	mul	r27, r19
    216e:	c0 01       	movw	r24, r0
    2170:	a3 9f       	mul	r26, r19
    2172:	70 0d       	add	r23, r0
    2174:	81 1d       	adc	r24, r1
    2176:	11 24       	eor	r1, r1
    2178:	91 1d       	adc	r25, r1
    217a:	b2 9f       	mul	r27, r18
    217c:	70 0d       	add	r23, r0
    217e:	81 1d       	adc	r24, r1
    2180:	11 24       	eor	r1, r1
    2182:	91 1d       	adc	r25, r1
    2184:	08 95       	ret

00002186 <_exit>:
    2186:	f8 94       	cli

00002188 <__stop_program>:
    2188:	ff cf       	rjmp	.-2      	; 0x2188 <__stop_program>
