
CHIP_1_Control_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000218  00800100  00001fdc  00002070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001fdc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000654  00800318  00800318  00002288  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002288  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000022b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000388  00000000  00000000  000022f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003d5b  00000000  00000000  00002680  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000109a  00000000  00000000  000063db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002a21  00000000  00000000  00007475  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000898  00000000  00000000  00009e98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000133d  00000000  00000000  0000a730  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000020df  00000000  00000000  0000ba6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000340  00000000  00000000  0000db4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	50 c0       	rjmp	.+160    	; 0xa2 <__ctors_end>
       2:	00 00       	nop
       4:	6d c0       	rjmp	.+218    	; 0xe0 <__bad_interrupt>
       6:	00 00       	nop
       8:	6b c0       	rjmp	.+214    	; 0xe0 <__bad_interrupt>
       a:	00 00       	nop
       c:	69 c0       	rjmp	.+210    	; 0xe0 <__bad_interrupt>
       e:	00 00       	nop
      10:	67 c0       	rjmp	.+206    	; 0xe0 <__bad_interrupt>
      12:	00 00       	nop
      14:	65 c0       	rjmp	.+202    	; 0xe0 <__bad_interrupt>
      16:	00 00       	nop
      18:	63 c0       	rjmp	.+198    	; 0xe0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	61 c0       	rjmp	.+194    	; 0xe0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5f c0       	rjmp	.+190    	; 0xe0 <__bad_interrupt>
      22:	00 00       	nop
      24:	5d c0       	rjmp	.+186    	; 0xe0 <__bad_interrupt>
      26:	00 00       	nop
      28:	5b c0       	rjmp	.+182    	; 0xe0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	59 c0       	rjmp	.+178    	; 0xe0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	57 c0       	rjmp	.+174    	; 0xe0 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 6c 0b 	jmp	0x16d8	; 0x16d8 <__vector_13>
      38:	53 c0       	rjmp	.+166    	; 0xe0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	51 c0       	rjmp	.+162    	; 0xe0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4f c0       	rjmp	.+158    	; 0xe0 <__bad_interrupt>
      42:	00 00       	nop
      44:	4d c0       	rjmp	.+154    	; 0xe0 <__bad_interrupt>
      46:	00 00       	nop
      48:	4b c0       	rjmp	.+150    	; 0xe0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	49 c0       	rjmp	.+146    	; 0xe0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	47 c0       	rjmp	.+142    	; 0xe0 <__bad_interrupt>
      52:	00 00       	nop
      54:	45 c0       	rjmp	.+138    	; 0xe0 <__bad_interrupt>
      56:	00 00       	nop
      58:	43 c0       	rjmp	.+134    	; 0xe0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	41 c0       	rjmp	.+130    	; 0xe0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3f c0       	rjmp	.+126    	; 0xe0 <__bad_interrupt>
      62:	00 00       	nop
      64:	3d c0       	rjmp	.+122    	; 0xe0 <__bad_interrupt>
      66:	00 00       	nop
      68:	3b c0       	rjmp	.+118    	; 0xe0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	39 c0       	rjmp	.+114    	; 0xe0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	37 c0       	rjmp	.+110    	; 0xe0 <__bad_interrupt>
      72:	00 00       	nop
      74:	35 c0       	rjmp	.+106    	; 0xe0 <__bad_interrupt>
      76:	00 00       	nop
      78:	33 c0       	rjmp	.+102    	; 0xe0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	31 c0       	rjmp	.+98     	; 0xe0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2f c0       	rjmp	.+94     	; 0xe0 <__bad_interrupt>
      82:	00 00       	nop
      84:	2d c0       	rjmp	.+90     	; 0xe0 <__bad_interrupt>
      86:	00 00       	nop
      88:	2b c0       	rjmp	.+86     	; 0xe0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	bb 05       	cpc	r27, r11
      8e:	fb 05       	cpc	r31, r11
      90:	c2 05       	cpc	r28, r2
      92:	4a 06       	cpc	r4, r26
      94:	1f 07       	cpc	r17, r31
      96:	2c 07       	cpc	r18, r28
      98:	44 08       	sbc	r4, r4
      9a:	87 07       	cpc	r24, r23
      9c:	b4 07       	cpc	r27, r20
      9e:	c1 07       	cpc	r28, r17
      a0:	f5 07       	cpc	r31, r21

000000a2 <__ctors_end>:
      a2:	11 24       	eor	r1, r1
      a4:	1f be       	out	0x3f, r1	; 63
      a6:	cf ef       	ldi	r28, 0xFF	; 255
      a8:	d0 e4       	ldi	r29, 0x40	; 64
      aa:	de bf       	out	0x3e, r29	; 62
      ac:	cd bf       	out	0x3d, r28	; 61

000000ae <__do_copy_data>:
      ae:	13 e0       	ldi	r17, 0x03	; 3
      b0:	a0 e0       	ldi	r26, 0x00	; 0
      b2:	b1 e0       	ldi	r27, 0x01	; 1
      b4:	ec ed       	ldi	r30, 0xDC	; 220
      b6:	ff e1       	ldi	r31, 0x1F	; 31
      b8:	00 e0       	ldi	r16, 0x00	; 0
      ba:	0b bf       	out	0x3b, r16	; 59
      bc:	02 c0       	rjmp	.+4      	; 0xc2 <__do_copy_data+0x14>
      be:	07 90       	elpm	r0, Z+
      c0:	0d 92       	st	X+, r0
      c2:	a8 31       	cpi	r26, 0x18	; 24
      c4:	b1 07       	cpc	r27, r17
      c6:	d9 f7       	brne	.-10     	; 0xbe <__do_copy_data+0x10>

000000c8 <__do_clear_bss>:
      c8:	29 e0       	ldi	r18, 0x09	; 9
      ca:	a8 e1       	ldi	r26, 0x18	; 24
      cc:	b3 e0       	ldi	r27, 0x03	; 3
      ce:	01 c0       	rjmp	.+2      	; 0xd2 <.do_clear_bss_start>

000000d0 <.do_clear_bss_loop>:
      d0:	1d 92       	st	X+, r1

000000d2 <.do_clear_bss_start>:
      d2:	ac 36       	cpi	r26, 0x6C	; 108
      d4:	b2 07       	cpc	r27, r18
      d6:	e1 f7       	brne	.-8      	; 0xd0 <.do_clear_bss_loop>
      d8:	0e 94 dd 09 	call	0x13ba	; 0x13ba <main>
      dc:	0c 94 ec 0f 	jmp	0x1fd8	; 0x1fd8 <_exit>

000000e0 <__bad_interrupt>:
      e0:	8f cf       	rjmp	.-226    	; 0x0 <__vectors>

000000e2 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
      e2:	cf 93       	push	r28
      e4:	df 93       	push	r29
      e6:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
      e8:	0e 94 cf 0c 	call	0x199e	; 0x199e <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
      ec:	20 91 18 03 	lds	r18, 0x0318	; 0x800318 <__data_end>
      f0:	30 91 19 03 	lds	r19, 0x0319	; 0x800319 <__data_end+0x1>
      f4:	c9 01       	movw	r24, r18
      f6:	8c 0f       	add	r24, r28
      f8:	9d 1f       	adc	r25, r29
      fa:	8c 3d       	cpi	r24, 0xDC	; 220
      fc:	45 e0       	ldi	r20, 0x05	; 5
      fe:	94 07       	cpc	r25, r20
     100:	58 f4       	brcc	.+22     	; 0x118 <pvPortMalloc+0x36>
     102:	28 17       	cp	r18, r24
     104:	39 07       	cpc	r19, r25
     106:	58 f4       	brcc	.+22     	; 0x11e <pvPortMalloc+0x3c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     108:	e9 01       	movw	r28, r18
     10a:	c6 5e       	subi	r28, 0xE6	; 230
     10c:	dc 4f       	sbci	r29, 0xFC	; 252
			xNextFreeByte += xWantedSize;			
     10e:	90 93 19 03 	sts	0x0319, r25	; 0x800319 <__data_end+0x1>
     112:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <__data_end>
     116:	05 c0       	rjmp	.+10     	; 0x122 <pvPortMalloc+0x40>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
     118:	c0 e0       	ldi	r28, 0x00	; 0
     11a:	d0 e0       	ldi	r29, 0x00	; 0
     11c:	02 c0       	rjmp	.+4      	; 0x122 <pvPortMalloc+0x40>
     11e:	c0 e0       	ldi	r28, 0x00	; 0
     120:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     122:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     126:	ce 01       	movw	r24, r28
     128:	df 91       	pop	r29
     12a:	cf 91       	pop	r28
     12c:	08 95       	ret

0000012e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     12e:	08 95       	ret

00000130 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     130:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     132:	03 96       	adiw	r24, 0x03	; 3
     134:	92 83       	std	Z+2, r25	; 0x02
     136:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     138:	2f ef       	ldi	r18, 0xFF	; 255
     13a:	3f ef       	ldi	r19, 0xFF	; 255
     13c:	34 83       	std	Z+4, r19	; 0x04
     13e:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     140:	96 83       	std	Z+6, r25	; 0x06
     142:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     144:	90 87       	std	Z+8, r25	; 0x08
     146:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     148:	10 82       	st	Z, r1
     14a:	08 95       	ret

0000014c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     14c:	fc 01       	movw	r30, r24
     14e:	11 86       	std	Z+9, r1	; 0x09
     150:	10 86       	std	Z+8, r1	; 0x08
     152:	08 95       	ret

00000154 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     154:	cf 93       	push	r28
     156:	df 93       	push	r29
     158:	fc 01       	movw	r30, r24
     15a:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     15c:	21 81       	ldd	r18, Z+1	; 0x01
     15e:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
     160:	e9 01       	movw	r28, r18
     162:	8a 81       	ldd	r24, Y+2	; 0x02
     164:	9b 81       	ldd	r25, Y+3	; 0x03
     166:	13 96       	adiw	r26, 0x03	; 3
     168:	9c 93       	st	X, r25
     16a:	8e 93       	st	-X, r24
     16c:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
     16e:	81 81       	ldd	r24, Z+1	; 0x01
     170:	92 81       	ldd	r25, Z+2	; 0x02
     172:	15 96       	adiw	r26, 0x05	; 5
     174:	9c 93       	st	X, r25
     176:	8e 93       	st	-X, r24
     178:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     17a:	8a 81       	ldd	r24, Y+2	; 0x02
     17c:	9b 81       	ldd	r25, Y+3	; 0x03
     17e:	ec 01       	movw	r28, r24
     180:	7d 83       	std	Y+5, r23	; 0x05
     182:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     184:	e9 01       	movw	r28, r18
     186:	7b 83       	std	Y+3, r23	; 0x03
     188:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     18a:	72 83       	std	Z+2, r23	; 0x02
     18c:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     18e:	19 96       	adiw	r26, 0x09	; 9
     190:	fc 93       	st	X, r31
     192:	ee 93       	st	-X, r30
     194:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
     196:	80 81       	ld	r24, Z
     198:	8f 5f       	subi	r24, 0xFF	; 255
     19a:	80 83       	st	Z, r24
}
     19c:	df 91       	pop	r29
     19e:	cf 91       	pop	r28
     1a0:	08 95       	ret

000001a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     1a2:	cf 93       	push	r28
     1a4:	df 93       	push	r29
     1a6:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     1a8:	48 81       	ld	r20, Y
     1aa:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     1ac:	4f 3f       	cpi	r20, 0xFF	; 255
     1ae:	2f ef       	ldi	r18, 0xFF	; 255
     1b0:	52 07       	cpc	r21, r18
     1b2:	31 f4       	brne	.+12     	; 0x1c0 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     1b4:	dc 01       	movw	r26, r24
     1b6:	17 96       	adiw	r26, 0x07	; 7
     1b8:	ed 91       	ld	r30, X+
     1ba:	fc 91       	ld	r31, X
     1bc:	18 97       	sbiw	r26, 0x08	; 8
     1be:	17 c0       	rjmp	.+46     	; 0x1ee <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     1c0:	fc 01       	movw	r30, r24
     1c2:	33 96       	adiw	r30, 0x03	; 3
     1c4:	dc 01       	movw	r26, r24
     1c6:	15 96       	adiw	r26, 0x05	; 5
     1c8:	2d 91       	ld	r18, X+
     1ca:	3c 91       	ld	r19, X
     1cc:	16 97       	sbiw	r26, 0x06	; 6
     1ce:	d9 01       	movw	r26, r18
     1d0:	2d 91       	ld	r18, X+
     1d2:	3c 91       	ld	r19, X
     1d4:	42 17       	cp	r20, r18
     1d6:	53 07       	cpc	r21, r19
     1d8:	50 f0       	brcs	.+20     	; 0x1ee <vListInsert+0x4c>
     1da:	02 80       	ldd	r0, Z+2	; 0x02
     1dc:	f3 81       	ldd	r31, Z+3	; 0x03
     1de:	e0 2d       	mov	r30, r0
     1e0:	a2 81       	ldd	r26, Z+2	; 0x02
     1e2:	b3 81       	ldd	r27, Z+3	; 0x03
     1e4:	2d 91       	ld	r18, X+
     1e6:	3c 91       	ld	r19, X
     1e8:	42 17       	cp	r20, r18
     1ea:	53 07       	cpc	r21, r19
     1ec:	b0 f7       	brcc	.-20     	; 0x1da <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     1ee:	a2 81       	ldd	r26, Z+2	; 0x02
     1f0:	b3 81       	ldd	r27, Z+3	; 0x03
     1f2:	bb 83       	std	Y+3, r27	; 0x03
     1f4:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     1f6:	15 96       	adiw	r26, 0x05	; 5
     1f8:	dc 93       	st	X, r29
     1fa:	ce 93       	st	-X, r28
     1fc:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
     1fe:	fd 83       	std	Y+5, r31	; 0x05
     200:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     202:	d3 83       	std	Z+3, r29	; 0x03
     204:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     206:	99 87       	std	Y+9, r25	; 0x09
     208:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     20a:	fc 01       	movw	r30, r24
     20c:	20 81       	ld	r18, Z
     20e:	2f 5f       	subi	r18, 0xFF	; 255
     210:	20 83       	st	Z, r18
}
     212:	df 91       	pop	r29
     214:	cf 91       	pop	r28
     216:	08 95       	ret

00000218 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     218:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     21a:	a2 81       	ldd	r26, Z+2	; 0x02
     21c:	b3 81       	ldd	r27, Z+3	; 0x03
     21e:	84 81       	ldd	r24, Z+4	; 0x04
     220:	95 81       	ldd	r25, Z+5	; 0x05
     222:	15 96       	adiw	r26, 0x05	; 5
     224:	9c 93       	st	X, r25
     226:	8e 93       	st	-X, r24
     228:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     22a:	a4 81       	ldd	r26, Z+4	; 0x04
     22c:	b5 81       	ldd	r27, Z+5	; 0x05
     22e:	82 81       	ldd	r24, Z+2	; 0x02
     230:	93 81       	ldd	r25, Z+3	; 0x03
     232:	13 96       	adiw	r26, 0x03	; 3
     234:	9c 93       	st	X, r25
     236:	8e 93       	st	-X, r24
     238:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     23a:	a0 85       	ldd	r26, Z+8	; 0x08
     23c:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     23e:	11 96       	adiw	r26, 0x01	; 1
     240:	8d 91       	ld	r24, X+
     242:	9c 91       	ld	r25, X
     244:	12 97       	sbiw	r26, 0x02	; 2
     246:	e8 17       	cp	r30, r24
     248:	f9 07       	cpc	r31, r25
     24a:	31 f4       	brne	.+12     	; 0x258 <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     24c:	84 81       	ldd	r24, Z+4	; 0x04
     24e:	95 81       	ldd	r25, Z+5	; 0x05
     250:	12 96       	adiw	r26, 0x02	; 2
     252:	9c 93       	st	X, r25
     254:	8e 93       	st	-X, r24
     256:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
     258:	11 86       	std	Z+9, r1	; 0x09
     25a:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     25c:	8c 91       	ld	r24, X
     25e:	81 50       	subi	r24, 0x01	; 1
     260:	8c 93       	st	X, r24
     262:	08 95       	ret

00000264 <initUSART>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//buzz when sensor tripped
enum BUZZERState {buzz_wait, no_buzz, buzz_high, buzz_low} buzzer_state;

void buzz_Init(){
	buzzer_state = buzz_wait;
     264:	81 30       	cpi	r24, 0x01	; 1
     266:	81 f0       	breq	.+32     	; 0x288 <initUSART+0x24>
     268:	e1 ec       	ldi	r30, 0xC1	; 193
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	88 61       	ori	r24, 0x18	; 24
     270:	80 83       	st	Z, r24
     272:	e2 ec       	ldi	r30, 0xC2	; 194
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	80 81       	ld	r24, Z
     278:	86 60       	ori	r24, 0x06	; 6
     27a:	80 83       	st	Z, r24
     27c:	83 e3       	ldi	r24, 0x33	; 51
     27e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     282:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     286:	08 95       	ret
     288:	e9 ec       	ldi	r30, 0xC9	; 201
     28a:	f0 e0       	ldi	r31, 0x00	; 0
     28c:	80 81       	ld	r24, Z
     28e:	88 61       	ori	r24, 0x18	; 24
     290:	80 83       	st	Z, r24
     292:	ea ec       	ldi	r30, 0xCA	; 202
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	80 81       	ld	r24, Z
     298:	86 60       	ori	r24, 0x06	; 6
     29a:	80 83       	st	Z, r24
     29c:	83 e3       	ldi	r24, 0x33	; 51
     29e:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     2a2:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     2a6:	08 95       	ret

000002a8 <USART_Flush>:
     2a8:	81 30       	cpi	r24, 0x01	; 1
     2aa:	29 f4       	brne	.+10     	; 0x2b6 <USART_Flush+0xe>
     2ac:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     2b0:	88 23       	and	r24, r24
     2b2:	74 f0       	brlt	.+28     	; 0x2d0 <USART_Flush+0x28>
     2b4:	08 95       	ret
     2b6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     2ba:	88 23       	and	r24, r24
     2bc:	8c f4       	brge	.+34     	; 0x2e0 <USART_Flush+0x38>
     2be:	a6 ec       	ldi	r26, 0xC6	; 198
     2c0:	b0 e0       	ldi	r27, 0x00	; 0
     2c2:	e0 ec       	ldi	r30, 0xC0	; 192
     2c4:	f0 e0       	ldi	r31, 0x00	; 0
     2c6:	8c 91       	ld	r24, X
     2c8:	80 81       	ld	r24, Z
     2ca:	88 23       	and	r24, r24
     2cc:	e4 f3       	brlt	.-8      	; 0x2c6 <USART_Flush+0x1e>
     2ce:	08 95       	ret
     2d0:	ae ec       	ldi	r26, 0xCE	; 206
     2d2:	b0 e0       	ldi	r27, 0x00	; 0
     2d4:	e8 ec       	ldi	r30, 0xC8	; 200
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	8c 91       	ld	r24, X
     2da:	80 81       	ld	r24, Z
     2dc:	88 23       	and	r24, r24
     2de:	e4 f3       	brlt	.-8      	; 0x2d8 <USART_Flush+0x30>
     2e0:	08 95       	ret

000002e2 <USART_Send>:
     2e2:	61 30       	cpi	r22, 0x01	; 1
     2e4:	41 f0       	breq	.+16     	; 0x2f6 <USART_Send+0x14>
     2e6:	e0 ec       	ldi	r30, 0xC0	; 192
     2e8:	f0 e0       	ldi	r31, 0x00	; 0
     2ea:	90 81       	ld	r25, Z
     2ec:	95 ff       	sbrs	r25, 5
     2ee:	fd cf       	rjmp	.-6      	; 0x2ea <USART_Send+0x8>
     2f0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     2f4:	08 95       	ret
     2f6:	e8 ec       	ldi	r30, 0xC8	; 200
     2f8:	f0 e0       	ldi	r31, 0x00	; 0
     2fa:	90 81       	ld	r25, Z
     2fc:	95 ff       	sbrs	r25, 5
     2fe:	fd cf       	rjmp	.-6      	; 0x2fa <USART_Send+0x18>
     300:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     304:	08 95       	ret

00000306 <USART_Receive>:
     306:	81 30       	cpi	r24, 0x01	; 1
     308:	41 f0       	breq	.+16     	; 0x31a <USART_Receive+0x14>
     30a:	e0 ec       	ldi	r30, 0xC0	; 192
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	80 81       	ld	r24, Z
     310:	88 23       	and	r24, r24
     312:	ec f7       	brge	.-6      	; 0x30e <USART_Receive+0x8>
     314:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     318:	08 95       	ret
     31a:	e8 ec       	ldi	r30, 0xC8	; 200
     31c:	f0 e0       	ldi	r31, 0x00	; 0
     31e:	80 81       	ld	r24, Z
     320:	88 23       	and	r24, r24
     322:	ec f7       	brge	.-6      	; 0x31e <USART_Receive+0x18>
     324:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     328:	08 95       	ret

0000032a <GetKeypadKey>:
     32a:	8f ee       	ldi	r24, 0xEF	; 239
     32c:	82 b9       	out	0x02, r24	; 2
     32e:	00 00       	nop
     330:	00 9b       	sbis	0x00, 0	; 0
     332:	44 c0       	rjmp	.+136    	; 0x3bc <GetKeypadKey+0x92>
     334:	80 b1       	in	r24, 0x00	; 0
     336:	80 95       	com	r24
     338:	81 fd       	sbrc	r24, 1
     33a:	42 c0       	rjmp	.+132    	; 0x3c0 <GetKeypadKey+0x96>
     33c:	80 b1       	in	r24, 0x00	; 0
     33e:	80 95       	com	r24
     340:	82 fd       	sbrc	r24, 2
     342:	40 c0       	rjmp	.+128    	; 0x3c4 <GetKeypadKey+0x9a>
     344:	80 b1       	in	r24, 0x00	; 0
     346:	80 95       	com	r24
     348:	83 fd       	sbrc	r24, 3
     34a:	3e c0       	rjmp	.+124    	; 0x3c8 <GetKeypadKey+0x9e>
     34c:	8f ed       	ldi	r24, 0xDF	; 223
     34e:	82 b9       	out	0x02, r24	; 2
     350:	00 00       	nop
     352:	00 9b       	sbis	0x00, 0	; 0
     354:	3b c0       	rjmp	.+118    	; 0x3cc <GetKeypadKey+0xa2>
     356:	80 b1       	in	r24, 0x00	; 0
     358:	80 95       	com	r24
     35a:	81 fd       	sbrc	r24, 1
     35c:	39 c0       	rjmp	.+114    	; 0x3d0 <GetKeypadKey+0xa6>
     35e:	80 b1       	in	r24, 0x00	; 0
     360:	80 95       	com	r24
     362:	82 fd       	sbrc	r24, 2
     364:	37 c0       	rjmp	.+110    	; 0x3d4 <GetKeypadKey+0xaa>
     366:	80 b1       	in	r24, 0x00	; 0
     368:	80 95       	com	r24
     36a:	83 fd       	sbrc	r24, 3
     36c:	35 c0       	rjmp	.+106    	; 0x3d8 <GetKeypadKey+0xae>
     36e:	8f eb       	ldi	r24, 0xBF	; 191
     370:	82 b9       	out	0x02, r24	; 2
     372:	00 00       	nop
     374:	00 9b       	sbis	0x00, 0	; 0
     376:	32 c0       	rjmp	.+100    	; 0x3dc <GetKeypadKey+0xb2>
     378:	80 b1       	in	r24, 0x00	; 0
     37a:	80 95       	com	r24
     37c:	81 fd       	sbrc	r24, 1
     37e:	30 c0       	rjmp	.+96     	; 0x3e0 <GetKeypadKey+0xb6>
     380:	80 b1       	in	r24, 0x00	; 0
     382:	80 95       	com	r24
     384:	82 fd       	sbrc	r24, 2
     386:	2e c0       	rjmp	.+92     	; 0x3e4 <GetKeypadKey+0xba>
     388:	80 b1       	in	r24, 0x00	; 0
     38a:	80 95       	com	r24
     38c:	83 fd       	sbrc	r24, 3
     38e:	2c c0       	rjmp	.+88     	; 0x3e8 <GetKeypadKey+0xbe>
     390:	8f e7       	ldi	r24, 0x7F	; 127
     392:	82 b9       	out	0x02, r24	; 2
     394:	00 00       	nop
     396:	90 b1       	in	r25, 0x00	; 0
     398:	90 95       	com	r25
     39a:	89 2f       	mov	r24, r25
     39c:	81 70       	andi	r24, 0x01	; 1
     39e:	90 fd       	sbrc	r25, 0
     3a0:	25 c0       	rjmp	.+74     	; 0x3ec <GetKeypadKey+0xc2>
     3a2:	90 b1       	in	r25, 0x00	; 0
     3a4:	90 95       	com	r25
     3a6:	91 fd       	sbrc	r25, 1
     3a8:	23 c0       	rjmp	.+70     	; 0x3f0 <GetKeypadKey+0xc6>
     3aa:	90 b1       	in	r25, 0x00	; 0
     3ac:	90 95       	com	r25
     3ae:	92 fd       	sbrc	r25, 2
     3b0:	21 c0       	rjmp	.+66     	; 0x3f4 <GetKeypadKey+0xca>
     3b2:	90 b1       	in	r25, 0x00	; 0
     3b4:	90 95       	com	r25
     3b6:	93 fd       	sbrc	r25, 3
     3b8:	1f c0       	rjmp	.+62     	; 0x3f8 <GetKeypadKey+0xce>
     3ba:	08 95       	ret
     3bc:	81 e3       	ldi	r24, 0x31	; 49
     3be:	08 95       	ret
     3c0:	84 e3       	ldi	r24, 0x34	; 52
     3c2:	08 95       	ret
     3c4:	87 e3       	ldi	r24, 0x37	; 55
     3c6:	08 95       	ret
     3c8:	8a e2       	ldi	r24, 0x2A	; 42
     3ca:	08 95       	ret
     3cc:	82 e3       	ldi	r24, 0x32	; 50
     3ce:	08 95       	ret
     3d0:	85 e3       	ldi	r24, 0x35	; 53
     3d2:	08 95       	ret
     3d4:	88 e3       	ldi	r24, 0x38	; 56
     3d6:	08 95       	ret
     3d8:	80 e3       	ldi	r24, 0x30	; 48
     3da:	08 95       	ret
     3dc:	83 e3       	ldi	r24, 0x33	; 51
     3de:	08 95       	ret
     3e0:	86 e3       	ldi	r24, 0x36	; 54
     3e2:	08 95       	ret
     3e4:	89 e3       	ldi	r24, 0x39	; 57
     3e6:	08 95       	ret
     3e8:	83 e2       	ldi	r24, 0x23	; 35
     3ea:	08 95       	ret
     3ec:	81 e4       	ldi	r24, 0x41	; 65
     3ee:	08 95       	ret
     3f0:	82 e4       	ldi	r24, 0x42	; 66
     3f2:	08 95       	ret
     3f4:	83 e4       	ldi	r24, 0x43	; 67
     3f6:	08 95       	ret
     3f8:	84 e4       	ldi	r24, 0x44	; 68
     3fa:	08 95       	ret

000003fc <delay_ms>:
     3fc:	18 16       	cp	r1, r24
     3fe:	19 06       	cpc	r1, r25
     400:	5c f0       	brlt	.+22     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     402:	08 95       	ret
     404:	00 00       	nop
     406:	21 50       	subi	r18, 0x01	; 1
     408:	31 09       	sbc	r19, r1
     40a:	e1 f7       	brne	.-8      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     40c:	4f 5f       	subi	r20, 0xFF	; 255
     40e:	5f 4f       	sbci	r21, 0xFF	; 255
     410:	84 17       	cp	r24, r20
     412:	95 07       	cpc	r25, r21
     414:	19 f4       	brne	.+6      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     416:	08 95       	ret
     418:	40 e0       	ldi	r20, 0x00	; 0
     41a:	50 e0       	ldi	r21, 0x00	; 0
     41c:	27 e0       	ldi	r18, 0x07	; 7
     41e:	33 e0       	ldi	r19, 0x03	; 3
     420:	f1 cf       	rjmp	.-30     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>

00000422 <LCD_WriteCommand>:
     422:	5e 98       	cbi	0x0b, 6	; 11
     424:	88 b9       	out	0x08, r24	; 8
     426:	5f 9a       	sbi	0x0b, 7	; 11
     428:	00 00       	nop
     42a:	5f 98       	cbi	0x0b, 7	; 11
     42c:	82 e0       	ldi	r24, 0x02	; 2
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	e5 cf       	rjmp	.-54     	; 0x3fc <delay_ms>
     432:	08 95       	ret

00000434 <LCD_ClearScreen>:
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	f5 cf       	rjmp	.-22     	; 0x422 <LCD_WriteCommand>
     438:	08 95       	ret

0000043a <LCD_Cursor>:
     43a:	81 31       	cpi	r24, 0x11	; 17
     43c:	18 f4       	brcc	.+6      	; 0x444 <LCD_Cursor+0xa>
     43e:	81 58       	subi	r24, 0x81	; 129
     440:	f0 cf       	rjmp	.-32     	; 0x422 <LCD_WriteCommand>
     442:	08 95       	ret
     444:	81 55       	subi	r24, 0x51	; 81
     446:	ed cf       	rjmp	.-38     	; 0x422 <LCD_WriteCommand>
     448:	08 95       	ret

0000044a <LCD_init>:
     44a:	84 e6       	ldi	r24, 0x64	; 100
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	d6 df       	rcall	.-84     	; 0x3fc <delay_ms>
     450:	88 e3       	ldi	r24, 0x38	; 56
     452:	e7 df       	rcall	.-50     	; 0x422 <LCD_WriteCommand>
     454:	86 e0       	ldi	r24, 0x06	; 6
     456:	e5 df       	rcall	.-54     	; 0x422 <LCD_WriteCommand>
     458:	8f e0       	ldi	r24, 0x0F	; 15
     45a:	e3 df       	rcall	.-58     	; 0x422 <LCD_WriteCommand>
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	e1 df       	rcall	.-62     	; 0x422 <LCD_WriteCommand>
     460:	8a e0       	ldi	r24, 0x0A	; 10
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	cb cf       	rjmp	.-106    	; 0x3fc <delay_ms>
     466:	08 95       	ret

00000468 <LCD_WriteData>:
     468:	5e 9a       	sbi	0x0b, 6	; 11
     46a:	88 b9       	out	0x08, r24	; 8
     46c:	5f 9a       	sbi	0x0b, 7	; 11
     46e:	00 00       	nop
     470:	5f 98       	cbi	0x0b, 7	; 11
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	c2 cf       	rjmp	.-124    	; 0x3fc <delay_ms>
     478:	08 95       	ret

0000047a <LCD_DisplayString>:
     47a:	0f 93       	push	r16
     47c:	1f 93       	push	r17
     47e:	cf 93       	push	r28
     480:	df 93       	push	r29
     482:	18 2f       	mov	r17, r24
     484:	eb 01       	movw	r28, r22
     486:	d6 df       	rcall	.-84     	; 0x434 <LCD_ClearScreen>
     488:	88 81       	ld	r24, Y
     48a:	88 23       	and	r24, r24
     48c:	51 f0       	breq	.+20     	; 0x4a2 <LCD_DisplayString+0x28>
     48e:	01 e0       	ldi	r16, 0x01	; 1
     490:	01 0f       	add	r16, r17
     492:	81 2f       	mov	r24, r17
     494:	d2 df       	rcall	.-92     	; 0x43a <LCD_Cursor>
     496:	89 91       	ld	r24, Y+
     498:	e7 df       	rcall	.-50     	; 0x468 <LCD_WriteData>
     49a:	10 2f       	mov	r17, r16
     49c:	88 81       	ld	r24, Y
     49e:	81 11       	cpse	r24, r1
     4a0:	f6 cf       	rjmp	.-20     	; 0x48e <LCD_DisplayString+0x14>
     4a2:	df 91       	pop	r29
     4a4:	cf 91       	pop	r28
     4a6:	1f 91       	pop	r17
     4a8:	0f 91       	pop	r16
     4aa:	08 95       	ret

000004ac <transmit_data>:
     4ac:	fc 01       	movw	r30, r24
     4ae:	20 e0       	ldi	r18, 0x00	; 0
     4b0:	30 e0       	ldi	r19, 0x00	; 0
     4b2:	58 e0       	ldi	r21, 0x08	; 8
     4b4:	55 b9       	out	0x05, r21	; 5
     4b6:	45 b1       	in	r20, 0x05	; 5
     4b8:	bf 01       	movw	r22, r30
     4ba:	02 2e       	mov	r0, r18
     4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <transmit_data+0x16>
     4be:	76 95       	lsr	r23
     4c0:	67 95       	ror	r22
     4c2:	0a 94       	dec	r0
     4c4:	e2 f7       	brpl	.-8      	; 0x4be <transmit_data+0x12>
     4c6:	96 2f       	mov	r25, r22
     4c8:	91 70       	andi	r25, 0x01	; 1
     4ca:	94 2b       	or	r25, r20
     4cc:	95 b9       	out	0x05, r25	; 5
     4ce:	29 9a       	sbi	0x05, 1	; 5
     4d0:	2f 5f       	subi	r18, 0xFF	; 255
     4d2:	3f 4f       	sbci	r19, 0xFF	; 255
     4d4:	20 31       	cpi	r18, 0x10	; 16
     4d6:	31 05       	cpc	r19, r1
     4d8:	69 f7       	brne	.-38     	; 0x4b4 <transmit_data+0x8>
     4da:	2a 9a       	sbi	0x05, 2	; 5
     4dc:	15 b8       	out	0x05, r1	; 5
     4de:	08 95       	ret

000004e0 <matrix_print>:
     4e0:	fb 01       	movw	r30, r22
     4e2:	da 01       	movw	r26, r20
     4e4:	10 82       	st	Z, r1
     4e6:	1c 92       	st	X, r1
     4e8:	41 e0       	ldi	r20, 0x01	; 1
     4ea:	50 e0       	ldi	r21, 0x00	; 0
     4ec:	02 2e       	mov	r0, r18
     4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <matrix_print+0x14>
     4f0:	44 0f       	add	r20, r20
     4f2:	55 1f       	adc	r21, r21
     4f4:	0a 94       	dec	r0
     4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <matrix_print+0x10>
     4f8:	30 81       	ld	r19, Z
     4fa:	43 2b       	or	r20, r19
     4fc:	40 83       	st	Z, r20
     4fe:	fc 01       	movw	r30, r24
     500:	30 e1       	ldi	r19, 0x10	; 16
     502:	23 9f       	mul	r18, r19
     504:	e0 0d       	add	r30, r0
     506:	f1 1d       	adc	r31, r1
     508:	11 24       	eor	r1, r1
     50a:	20 e0       	ldi	r18, 0x00	; 0
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	41 e0       	ldi	r20, 0x01	; 1
     510:	50 e0       	ldi	r21, 0x00	; 0
     512:	81 91       	ld	r24, Z+
     514:	91 91       	ld	r25, Z+
     516:	89 2b       	or	r24, r25
     518:	51 f4       	brne	.+20     	; 0x52e <matrix_print+0x4e>
     51a:	8c 91       	ld	r24, X
     51c:	ba 01       	movw	r22, r20
     51e:	02 2e       	mov	r0, r18
     520:	02 c0       	rjmp	.+4      	; 0x526 <matrix_print+0x46>
     522:	66 0f       	add	r22, r22
     524:	77 1f       	adc	r23, r23
     526:	0a 94       	dec	r0
     528:	e2 f7       	brpl	.-8      	; 0x522 <matrix_print+0x42>
     52a:	68 2b       	or	r22, r24
     52c:	6c 93       	st	X, r22
     52e:	2f 5f       	subi	r18, 0xFF	; 255
     530:	3f 4f       	sbci	r19, 0xFF	; 255
     532:	28 30       	cpi	r18, 0x08	; 8
     534:	31 05       	cpc	r19, r1
     536:	69 f7       	brne	.-38     	; 0x512 <matrix_print+0x32>
     538:	08 95       	ret

0000053a <print_matrix>:
     53a:	0f 93       	push	r16
     53c:	1f 93       	push	r17
     53e:	cf 93       	push	r28
     540:	8c 01       	movw	r16, r24
     542:	c0 e0       	ldi	r28, 0x00	; 0
     544:	2c 2f       	mov	r18, r28
     546:	49 e0       	ldi	r20, 0x09	; 9
     548:	59 e0       	ldi	r21, 0x09	; 9
     54a:	6a e0       	ldi	r22, 0x0A	; 10
     54c:	79 e0       	ldi	r23, 0x09	; 9
     54e:	c8 01       	movw	r24, r16
     550:	c7 df       	rcall	.-114    	; 0x4e0 <matrix_print>
     552:	80 91 09 09 	lds	r24, 0x0909	; 0x800909 <tmpD>
     556:	20 91 0a 09 	lds	r18, 0x090A	; 0x80090a <tmpB>
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	92 2b       	or	r25, r18
     55e:	a6 df       	rcall	.-180    	; 0x4ac <transmit_data>
     560:	cf 5f       	subi	r28, 0xFF	; 255
     562:	c8 30       	cpi	r28, 0x08	; 8
     564:	79 f7       	brne	.-34     	; 0x544 <print_matrix+0xa>
     566:	cf 91       	pop	r28
     568:	1f 91       	pop	r17
     56a:	0f 91       	pop	r16
     56c:	08 95       	ret

0000056e <alter_c_string>:
     56e:	81 11       	cpse	r24, r1
     570:	06 c0       	rjmp	.+12     	; 0x57e <alter_c_string+0x10>
     572:	fb 01       	movw	r30, r22
     574:	ed 5e       	subi	r30, 0xED	; 237
     576:	fd 4f       	sbci	r31, 0xFD	; 253
     578:	80 e3       	ldi	r24, 0x30	; 48
     57a:	80 83       	st	Z, r24
     57c:	08 95       	ret
     57e:	81 30       	cpi	r24, 0x01	; 1
     580:	31 f4       	brne	.+12     	; 0x58e <alter_c_string+0x20>
     582:	fb 01       	movw	r30, r22
     584:	ed 5e       	subi	r30, 0xED	; 237
     586:	fd 4f       	sbci	r31, 0xFD	; 253
     588:	81 e3       	ldi	r24, 0x31	; 49
     58a:	80 83       	st	Z, r24
     58c:	08 95       	ret
     58e:	82 30       	cpi	r24, 0x02	; 2
     590:	31 f4       	brne	.+12     	; 0x59e <alter_c_string+0x30>
     592:	fb 01       	movw	r30, r22
     594:	ed 5e       	subi	r30, 0xED	; 237
     596:	fd 4f       	sbci	r31, 0xFD	; 253
     598:	82 e3       	ldi	r24, 0x32	; 50
     59a:	80 83       	st	Z, r24
     59c:	08 95       	ret
     59e:	83 30       	cpi	r24, 0x03	; 3
     5a0:	31 f4       	brne	.+12     	; 0x5ae <alter_c_string+0x40>
     5a2:	fb 01       	movw	r30, r22
     5a4:	ed 5e       	subi	r30, 0xED	; 237
     5a6:	fd 4f       	sbci	r31, 0xFD	; 253
     5a8:	83 e3       	ldi	r24, 0x33	; 51
     5aa:	80 83       	st	Z, r24
     5ac:	08 95       	ret
     5ae:	84 30       	cpi	r24, 0x04	; 4
     5b0:	31 f4       	brne	.+12     	; 0x5be <alter_c_string+0x50>
     5b2:	fb 01       	movw	r30, r22
     5b4:	ed 5e       	subi	r30, 0xED	; 237
     5b6:	fd 4f       	sbci	r31, 0xFD	; 253
     5b8:	84 e3       	ldi	r24, 0x34	; 52
     5ba:	80 83       	st	Z, r24
     5bc:	08 95       	ret
     5be:	85 30       	cpi	r24, 0x05	; 5
     5c0:	31 f4       	brne	.+12     	; 0x5ce <alter_c_string+0x60>
     5c2:	fb 01       	movw	r30, r22
     5c4:	ed 5e       	subi	r30, 0xED	; 237
     5c6:	fd 4f       	sbci	r31, 0xFD	; 253
     5c8:	85 e3       	ldi	r24, 0x35	; 53
     5ca:	80 83       	st	Z, r24
     5cc:	08 95       	ret
     5ce:	86 30       	cpi	r24, 0x06	; 6
     5d0:	31 f4       	brne	.+12     	; 0x5de <alter_c_string+0x70>
     5d2:	fb 01       	movw	r30, r22
     5d4:	ed 5e       	subi	r30, 0xED	; 237
     5d6:	fd 4f       	sbci	r31, 0xFD	; 253
     5d8:	86 e3       	ldi	r24, 0x36	; 54
     5da:	80 83       	st	Z, r24
     5dc:	08 95       	ret
     5de:	87 30       	cpi	r24, 0x07	; 7
     5e0:	31 f4       	brne	.+12     	; 0x5ee <alter_c_string+0x80>
     5e2:	fb 01       	movw	r30, r22
     5e4:	ed 5e       	subi	r30, 0xED	; 237
     5e6:	fd 4f       	sbci	r31, 0xFD	; 253
     5e8:	87 e3       	ldi	r24, 0x37	; 55
     5ea:	80 83       	st	Z, r24
     5ec:	08 95       	ret
     5ee:	88 30       	cpi	r24, 0x08	; 8
     5f0:	31 f4       	brne	.+12     	; 0x5fe <alter_c_string+0x90>
     5f2:	fb 01       	movw	r30, r22
     5f4:	ed 5e       	subi	r30, 0xED	; 237
     5f6:	fd 4f       	sbci	r31, 0xFD	; 253
     5f8:	88 e3       	ldi	r24, 0x38	; 56
     5fa:	80 83       	st	Z, r24
     5fc:	08 95       	ret
     5fe:	fb 01       	movw	r30, r22
     600:	ed 5e       	subi	r30, 0xED	; 237
     602:	fd 4f       	sbci	r31, 0xFD	; 253
     604:	89 e3       	ldi	r24, 0x39	; 57
     606:	80 83       	st	Z, r24
     608:	08 95       	ret

0000060a <output_temp>:
     60a:	9d ec       	ldi	r25, 0xCD	; 205
     60c:	89 9f       	mul	r24, r25
     60e:	91 2d       	mov	r25, r1
     610:	11 24       	eor	r1, r1
     612:	96 95       	lsr	r25
     614:	96 95       	lsr	r25
     616:	96 95       	lsr	r25
     618:	90 93 f7 08 	sts	0x08F7, r25	; 0x8008f7 <tens_place>
     61c:	39 2f       	mov	r19, r25
     61e:	33 0f       	add	r19, r19
     620:	23 2f       	mov	r18, r19
     622:	22 0f       	add	r18, r18
     624:	22 0f       	add	r18, r18
     626:	23 0f       	add	r18, r19
     628:	82 1b       	sub	r24, r18
     62a:	80 93 f6 08 	sts	0x08F6, r24	; 0x8008f6 <ones_place>
     62e:	65 e1       	ldi	r22, 0x15	; 21
     630:	70 e0       	ldi	r23, 0x00	; 0
     632:	89 2f       	mov	r24, r25
     634:	9c df       	rcall	.-200    	; 0x56e <alter_c_string>
     636:	66 e1       	ldi	r22, 0x16	; 22
     638:	70 e0       	ldi	r23, 0x00	; 0
     63a:	80 91 f6 08 	lds	r24, 0x08F6	; 0x8008f6 <ones_place>
     63e:	97 df       	rcall	.-210    	; 0x56e <alter_c_string>
     640:	63 e1       	ldi	r22, 0x13	; 19
     642:	72 e0       	ldi	r23, 0x02	; 2
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	19 cf       	rjmp	.-462    	; 0x47a <LCD_DisplayString>
     648:	08 95       	ret

0000064a <enter_c_string>:
     64a:	80 33       	cpi	r24, 0x30	; 48
     64c:	a1 f4       	brne	.+40     	; 0x676 <enter_c_string+0x2c>
     64e:	61 15       	cp	r22, r1
     650:	71 05       	cpc	r23, r1
     652:	29 f4       	brne	.+10     	; 0x65e <enter_c_string+0x14>
     654:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <user_input>
     658:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <PassKey_LCD_data+0x10>
     65c:	08 95       	ret
     65e:	fb 01       	movw	r30, r22
     660:	e5 5f       	subi	r30, 0xF5	; 245
     662:	fd 4f       	sbci	r31, 0xFD	; 253
     664:	10 82       	st	Z, r1
     666:	fb 01       	movw	r30, r22
     668:	ed 5c       	subi	r30, 0xCD	; 205
     66a:	fd 4f       	sbci	r31, 0xFD	; 253
     66c:	80 e3       	ldi	r24, 0x30	; 48
     66e:	80 8b       	std	Z+16, r24	; 0x10
     670:	8a e2       	ldi	r24, 0x2A	; 42
     672:	87 87       	std	Z+15, r24	; 0x0f
     674:	08 95       	ret
     676:	81 33       	cpi	r24, 0x31	; 49
     678:	b9 f4       	brne	.+46     	; 0x6a8 <enter_c_string+0x5e>
     67a:	61 15       	cp	r22, r1
     67c:	71 05       	cpc	r23, r1
     67e:	39 f4       	brne	.+14     	; 0x68e <enter_c_string+0x44>
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <user_input>
     686:	81 e3       	ldi	r24, 0x31	; 49
     688:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <PassKey_LCD_data+0x10>
     68c:	08 95       	ret
     68e:	fb 01       	movw	r30, r22
     690:	e5 5f       	subi	r30, 0xF5	; 245
     692:	fd 4f       	sbci	r31, 0xFD	; 253
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	80 83       	st	Z, r24
     698:	fb 01       	movw	r30, r22
     69a:	ed 5c       	subi	r30, 0xCD	; 205
     69c:	fd 4f       	sbci	r31, 0xFD	; 253
     69e:	81 e3       	ldi	r24, 0x31	; 49
     6a0:	80 8b       	std	Z+16, r24	; 0x10
     6a2:	8a e2       	ldi	r24, 0x2A	; 42
     6a4:	87 87       	std	Z+15, r24	; 0x0f
     6a6:	08 95       	ret
     6a8:	82 33       	cpi	r24, 0x32	; 50
     6aa:	b9 f4       	brne	.+46     	; 0x6da <enter_c_string+0x90>
     6ac:	61 15       	cp	r22, r1
     6ae:	71 05       	cpc	r23, r1
     6b0:	39 f4       	brne	.+14     	; 0x6c0 <enter_c_string+0x76>
     6b2:	82 e0       	ldi	r24, 0x02	; 2
     6b4:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <user_input>
     6b8:	82 e3       	ldi	r24, 0x32	; 50
     6ba:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <PassKey_LCD_data+0x10>
     6be:	08 95       	ret
     6c0:	fb 01       	movw	r30, r22
     6c2:	e5 5f       	subi	r30, 0xF5	; 245
     6c4:	fd 4f       	sbci	r31, 0xFD	; 253
     6c6:	82 e0       	ldi	r24, 0x02	; 2
     6c8:	80 83       	st	Z, r24
     6ca:	fb 01       	movw	r30, r22
     6cc:	ed 5c       	subi	r30, 0xCD	; 205
     6ce:	fd 4f       	sbci	r31, 0xFD	; 253
     6d0:	82 e3       	ldi	r24, 0x32	; 50
     6d2:	80 8b       	std	Z+16, r24	; 0x10
     6d4:	8a e2       	ldi	r24, 0x2A	; 42
     6d6:	87 87       	std	Z+15, r24	; 0x0f
     6d8:	08 95       	ret
     6da:	83 33       	cpi	r24, 0x33	; 51
     6dc:	b9 f4       	brne	.+46     	; 0x70c <enter_c_string+0xc2>
     6de:	61 15       	cp	r22, r1
     6e0:	71 05       	cpc	r23, r1
     6e2:	39 f4       	brne	.+14     	; 0x6f2 <enter_c_string+0xa8>
     6e4:	83 e0       	ldi	r24, 0x03	; 3
     6e6:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <user_input>
     6ea:	83 e3       	ldi	r24, 0x33	; 51
     6ec:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <PassKey_LCD_data+0x10>
     6f0:	08 95       	ret
     6f2:	fb 01       	movw	r30, r22
     6f4:	e5 5f       	subi	r30, 0xF5	; 245
     6f6:	fd 4f       	sbci	r31, 0xFD	; 253
     6f8:	83 e0       	ldi	r24, 0x03	; 3
     6fa:	80 83       	st	Z, r24
     6fc:	fb 01       	movw	r30, r22
     6fe:	ed 5c       	subi	r30, 0xCD	; 205
     700:	fd 4f       	sbci	r31, 0xFD	; 253
     702:	83 e3       	ldi	r24, 0x33	; 51
     704:	80 8b       	std	Z+16, r24	; 0x10
     706:	8a e2       	ldi	r24, 0x2A	; 42
     708:	87 87       	std	Z+15, r24	; 0x0f
     70a:	08 95       	ret
     70c:	84 33       	cpi	r24, 0x34	; 52
     70e:	b9 f4       	brne	.+46     	; 0x73e <enter_c_string+0xf4>
     710:	61 15       	cp	r22, r1
     712:	71 05       	cpc	r23, r1
     714:	39 f4       	brne	.+14     	; 0x724 <enter_c_string+0xda>
     716:	84 e0       	ldi	r24, 0x04	; 4
     718:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <user_input>
     71c:	84 e3       	ldi	r24, 0x34	; 52
     71e:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <PassKey_LCD_data+0x10>
     722:	08 95       	ret
     724:	fb 01       	movw	r30, r22
     726:	e5 5f       	subi	r30, 0xF5	; 245
     728:	fd 4f       	sbci	r31, 0xFD	; 253
     72a:	84 e0       	ldi	r24, 0x04	; 4
     72c:	80 83       	st	Z, r24
     72e:	fb 01       	movw	r30, r22
     730:	ed 5c       	subi	r30, 0xCD	; 205
     732:	fd 4f       	sbci	r31, 0xFD	; 253
     734:	84 e3       	ldi	r24, 0x34	; 52
     736:	80 8b       	std	Z+16, r24	; 0x10
     738:	8a e2       	ldi	r24, 0x2A	; 42
     73a:	87 87       	std	Z+15, r24	; 0x0f
     73c:	08 95       	ret
     73e:	85 33       	cpi	r24, 0x35	; 53
     740:	b9 f4       	brne	.+46     	; 0x770 <enter_c_string+0x126>
     742:	61 15       	cp	r22, r1
     744:	71 05       	cpc	r23, r1
     746:	39 f4       	brne	.+14     	; 0x756 <enter_c_string+0x10c>
     748:	85 e0       	ldi	r24, 0x05	; 5
     74a:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <user_input>
     74e:	85 e3       	ldi	r24, 0x35	; 53
     750:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <PassKey_LCD_data+0x10>
     754:	08 95       	ret
     756:	fb 01       	movw	r30, r22
     758:	e5 5f       	subi	r30, 0xF5	; 245
     75a:	fd 4f       	sbci	r31, 0xFD	; 253
     75c:	85 e0       	ldi	r24, 0x05	; 5
     75e:	80 83       	st	Z, r24
     760:	fb 01       	movw	r30, r22
     762:	ed 5c       	subi	r30, 0xCD	; 205
     764:	fd 4f       	sbci	r31, 0xFD	; 253
     766:	85 e3       	ldi	r24, 0x35	; 53
     768:	80 8b       	std	Z+16, r24	; 0x10
     76a:	8a e2       	ldi	r24, 0x2A	; 42
     76c:	87 87       	std	Z+15, r24	; 0x0f
     76e:	08 95       	ret
     770:	86 33       	cpi	r24, 0x36	; 54
     772:	b9 f4       	brne	.+46     	; 0x7a2 <enter_c_string+0x158>
     774:	61 15       	cp	r22, r1
     776:	71 05       	cpc	r23, r1
     778:	39 f4       	brne	.+14     	; 0x788 <enter_c_string+0x13e>
     77a:	86 e0       	ldi	r24, 0x06	; 6
     77c:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <user_input>
     780:	86 e3       	ldi	r24, 0x36	; 54
     782:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <PassKey_LCD_data+0x10>
     786:	08 95       	ret
     788:	fb 01       	movw	r30, r22
     78a:	e5 5f       	subi	r30, 0xF5	; 245
     78c:	fd 4f       	sbci	r31, 0xFD	; 253
     78e:	86 e0       	ldi	r24, 0x06	; 6
     790:	80 83       	st	Z, r24
     792:	fb 01       	movw	r30, r22
     794:	ed 5c       	subi	r30, 0xCD	; 205
     796:	fd 4f       	sbci	r31, 0xFD	; 253
     798:	86 e3       	ldi	r24, 0x36	; 54
     79a:	80 8b       	std	Z+16, r24	; 0x10
     79c:	8a e2       	ldi	r24, 0x2A	; 42
     79e:	87 87       	std	Z+15, r24	; 0x0f
     7a0:	08 95       	ret
     7a2:	87 33       	cpi	r24, 0x37	; 55
     7a4:	b9 f4       	brne	.+46     	; 0x7d4 <enter_c_string+0x18a>
     7a6:	61 15       	cp	r22, r1
     7a8:	71 05       	cpc	r23, r1
     7aa:	39 f4       	brne	.+14     	; 0x7ba <enter_c_string+0x170>
     7ac:	87 e0       	ldi	r24, 0x07	; 7
     7ae:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <user_input>
     7b2:	87 e3       	ldi	r24, 0x37	; 55
     7b4:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <PassKey_LCD_data+0x10>
     7b8:	08 95       	ret
     7ba:	fb 01       	movw	r30, r22
     7bc:	e5 5f       	subi	r30, 0xF5	; 245
     7be:	fd 4f       	sbci	r31, 0xFD	; 253
     7c0:	87 e0       	ldi	r24, 0x07	; 7
     7c2:	80 83       	st	Z, r24
     7c4:	fb 01       	movw	r30, r22
     7c6:	ed 5c       	subi	r30, 0xCD	; 205
     7c8:	fd 4f       	sbci	r31, 0xFD	; 253
     7ca:	87 e3       	ldi	r24, 0x37	; 55
     7cc:	80 8b       	std	Z+16, r24	; 0x10
     7ce:	8a e2       	ldi	r24, 0x2A	; 42
     7d0:	87 87       	std	Z+15, r24	; 0x0f
     7d2:	08 95       	ret
     7d4:	88 33       	cpi	r24, 0x38	; 56
     7d6:	b9 f4       	brne	.+46     	; 0x806 <enter_c_string+0x1bc>
     7d8:	61 15       	cp	r22, r1
     7da:	71 05       	cpc	r23, r1
     7dc:	39 f4       	brne	.+14     	; 0x7ec <enter_c_string+0x1a2>
     7de:	88 e0       	ldi	r24, 0x08	; 8
     7e0:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <user_input>
     7e4:	88 e3       	ldi	r24, 0x38	; 56
     7e6:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <PassKey_LCD_data+0x10>
     7ea:	08 95       	ret
     7ec:	fb 01       	movw	r30, r22
     7ee:	e5 5f       	subi	r30, 0xF5	; 245
     7f0:	fd 4f       	sbci	r31, 0xFD	; 253
     7f2:	88 e0       	ldi	r24, 0x08	; 8
     7f4:	80 83       	st	Z, r24
     7f6:	fb 01       	movw	r30, r22
     7f8:	ed 5c       	subi	r30, 0xCD	; 205
     7fa:	fd 4f       	sbci	r31, 0xFD	; 253
     7fc:	88 e3       	ldi	r24, 0x38	; 56
     7fe:	80 8b       	std	Z+16, r24	; 0x10
     800:	8a e2       	ldi	r24, 0x2A	; 42
     802:	87 87       	std	Z+15, r24	; 0x0f
     804:	08 95       	ret
     806:	61 15       	cp	r22, r1
     808:	71 05       	cpc	r23, r1
     80a:	39 f4       	brne	.+14     	; 0x81a <enter_c_string+0x1d0>
     80c:	89 e0       	ldi	r24, 0x09	; 9
     80e:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <user_input>
     812:	89 e3       	ldi	r24, 0x39	; 57
     814:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <PassKey_LCD_data+0x10>
     818:	08 95       	ret
     81a:	fb 01       	movw	r30, r22
     81c:	e5 5f       	subi	r30, 0xF5	; 245
     81e:	fd 4f       	sbci	r31, 0xFD	; 253
     820:	89 e0       	ldi	r24, 0x09	; 9
     822:	80 83       	st	Z, r24
     824:	fb 01       	movw	r30, r22
     826:	ed 5c       	subi	r30, 0xCD	; 205
     828:	fd 4f       	sbci	r31, 0xFD	; 253
     82a:	89 e3       	ldi	r24, 0x39	; 57
     82c:	80 8b       	std	Z+16, r24	; 0x10
     82e:	8a e2       	ldi	r24, 0x2A	; 42
     830:	87 87       	std	Z+15, r24	; 0x0f
     832:	08 95       	ret

00000834 <check_password>:
     834:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <current_pass>
     838:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <user_input>
     83c:	98 13       	cpse	r25, r24
     83e:	16 c0       	rjmp	.+44     	; 0x86c <check_password+0x38>
     840:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <current_pass+0x1>
     844:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <user_input+0x1>
     848:	98 13       	cpse	r25, r24
     84a:	13 c0       	rjmp	.+38     	; 0x872 <check_password+0x3e>
     84c:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <current_pass+0x2>
     850:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <user_input+0x2>
     854:	98 13       	cpse	r25, r24
     856:	10 c0       	rjmp	.+32     	; 0x878 <check_password+0x44>
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	30 91 12 02 	lds	r19, 0x0212	; 0x800212 <current_pass+0x3>
     860:	20 91 0e 02 	lds	r18, 0x020E	; 0x80020e <user_input+0x3>
     864:	32 17       	cp	r19, r18
     866:	51 f0       	breq	.+20     	; 0x87c <check_password+0x48>
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	08 95       	ret
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	08 95       	ret
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	08 95       	ret
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	08 95       	ret

0000087e <output_for_user_pass_reset>:
     87e:	cf 93       	push	r28
     880:	c6 2f       	mov	r28, r22
     882:	80 33       	cpi	r24, 0x30	; 48
     884:	79 f4       	brne	.+30     	; 0x8a4 <output_for_user_pass_reset+0x26>
     886:	81 e1       	ldi	r24, 0x11	; 17
     888:	86 0f       	add	r24, r22
     88a:	d7 dd       	rcall	.-1106   	; 0x43a <LCD_Cursor>
     88c:	80 e3       	ldi	r24, 0x30	; 48
     88e:	ec dd       	rcall	.-1064   	; 0x468 <LCD_WriteData>
     890:	8c 2f       	mov	r24, r28
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	fc 01       	movw	r30, r24
     896:	e1 5f       	subi	r30, 0xF1	; 241
     898:	fd 4f       	sbci	r31, 0xFD	; 253
     89a:	10 82       	st	Z, r1
     89c:	60 e0       	ldi	r22, 0x00	; 0
     89e:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <eeprom_write_byte>
     8a2:	9f c0       	rjmp	.+318    	; 0x9e2 <output_for_user_pass_reset+0x164>
     8a4:	81 33       	cpi	r24, 0x31	; 49
     8a6:	81 f4       	brne	.+32     	; 0x8c8 <output_for_user_pass_reset+0x4a>
     8a8:	81 e1       	ldi	r24, 0x11	; 17
     8aa:	86 0f       	add	r24, r22
     8ac:	c6 dd       	rcall	.-1140   	; 0x43a <LCD_Cursor>
     8ae:	81 e3       	ldi	r24, 0x31	; 49
     8b0:	db dd       	rcall	.-1098   	; 0x468 <LCD_WriteData>
     8b2:	8c 2f       	mov	r24, r28
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	fc 01       	movw	r30, r24
     8b8:	e1 5f       	subi	r30, 0xF1	; 241
     8ba:	fd 4f       	sbci	r31, 0xFD	; 253
     8bc:	21 e0       	ldi	r18, 0x01	; 1
     8be:	20 83       	st	Z, r18
     8c0:	61 e0       	ldi	r22, 0x01	; 1
     8c2:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <eeprom_write_byte>
     8c6:	8d c0       	rjmp	.+282    	; 0x9e2 <output_for_user_pass_reset+0x164>
     8c8:	82 33       	cpi	r24, 0x32	; 50
     8ca:	81 f4       	brne	.+32     	; 0x8ec <output_for_user_pass_reset+0x6e>
     8cc:	81 e1       	ldi	r24, 0x11	; 17
     8ce:	86 0f       	add	r24, r22
     8d0:	b4 dd       	rcall	.-1176   	; 0x43a <LCD_Cursor>
     8d2:	82 e3       	ldi	r24, 0x32	; 50
     8d4:	c9 dd       	rcall	.-1134   	; 0x468 <LCD_WriteData>
     8d6:	8c 2f       	mov	r24, r28
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	fc 01       	movw	r30, r24
     8dc:	e1 5f       	subi	r30, 0xF1	; 241
     8de:	fd 4f       	sbci	r31, 0xFD	; 253
     8e0:	22 e0       	ldi	r18, 0x02	; 2
     8e2:	20 83       	st	Z, r18
     8e4:	62 e0       	ldi	r22, 0x02	; 2
     8e6:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <eeprom_write_byte>
     8ea:	7b c0       	rjmp	.+246    	; 0x9e2 <output_for_user_pass_reset+0x164>
     8ec:	83 33       	cpi	r24, 0x33	; 51
     8ee:	81 f4       	brne	.+32     	; 0x910 <output_for_user_pass_reset+0x92>
     8f0:	81 e1       	ldi	r24, 0x11	; 17
     8f2:	86 0f       	add	r24, r22
     8f4:	a2 dd       	rcall	.-1212   	; 0x43a <LCD_Cursor>
     8f6:	83 e3       	ldi	r24, 0x33	; 51
     8f8:	b7 dd       	rcall	.-1170   	; 0x468 <LCD_WriteData>
     8fa:	8c 2f       	mov	r24, r28
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	fc 01       	movw	r30, r24
     900:	e1 5f       	subi	r30, 0xF1	; 241
     902:	fd 4f       	sbci	r31, 0xFD	; 253
     904:	23 e0       	ldi	r18, 0x03	; 3
     906:	20 83       	st	Z, r18
     908:	63 e0       	ldi	r22, 0x03	; 3
     90a:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <eeprom_write_byte>
     90e:	69 c0       	rjmp	.+210    	; 0x9e2 <output_for_user_pass_reset+0x164>
     910:	84 33       	cpi	r24, 0x34	; 52
     912:	81 f4       	brne	.+32     	; 0x934 <output_for_user_pass_reset+0xb6>
     914:	81 e1       	ldi	r24, 0x11	; 17
     916:	86 0f       	add	r24, r22
     918:	90 dd       	rcall	.-1248   	; 0x43a <LCD_Cursor>
     91a:	84 e3       	ldi	r24, 0x34	; 52
     91c:	a5 dd       	rcall	.-1206   	; 0x468 <LCD_WriteData>
     91e:	8c 2f       	mov	r24, r28
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	fc 01       	movw	r30, r24
     924:	e1 5f       	subi	r30, 0xF1	; 241
     926:	fd 4f       	sbci	r31, 0xFD	; 253
     928:	24 e0       	ldi	r18, 0x04	; 4
     92a:	20 83       	st	Z, r18
     92c:	64 e0       	ldi	r22, 0x04	; 4
     92e:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <eeprom_write_byte>
     932:	57 c0       	rjmp	.+174    	; 0x9e2 <output_for_user_pass_reset+0x164>
     934:	85 33       	cpi	r24, 0x35	; 53
     936:	81 f4       	brne	.+32     	; 0x958 <output_for_user_pass_reset+0xda>
     938:	81 e1       	ldi	r24, 0x11	; 17
     93a:	86 0f       	add	r24, r22
     93c:	7e dd       	rcall	.-1284   	; 0x43a <LCD_Cursor>
     93e:	85 e3       	ldi	r24, 0x35	; 53
     940:	93 dd       	rcall	.-1242   	; 0x468 <LCD_WriteData>
     942:	8c 2f       	mov	r24, r28
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	fc 01       	movw	r30, r24
     948:	e1 5f       	subi	r30, 0xF1	; 241
     94a:	fd 4f       	sbci	r31, 0xFD	; 253
     94c:	25 e0       	ldi	r18, 0x05	; 5
     94e:	20 83       	st	Z, r18
     950:	65 e0       	ldi	r22, 0x05	; 5
     952:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <eeprom_write_byte>
     956:	45 c0       	rjmp	.+138    	; 0x9e2 <output_for_user_pass_reset+0x164>
     958:	86 33       	cpi	r24, 0x36	; 54
     95a:	81 f4       	brne	.+32     	; 0x97c <output_for_user_pass_reset+0xfe>
     95c:	81 e1       	ldi	r24, 0x11	; 17
     95e:	86 0f       	add	r24, r22
     960:	6c dd       	rcall	.-1320   	; 0x43a <LCD_Cursor>
     962:	86 e3       	ldi	r24, 0x36	; 54
     964:	81 dd       	rcall	.-1278   	; 0x468 <LCD_WriteData>
     966:	8c 2f       	mov	r24, r28
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	fc 01       	movw	r30, r24
     96c:	e1 5f       	subi	r30, 0xF1	; 241
     96e:	fd 4f       	sbci	r31, 0xFD	; 253
     970:	26 e0       	ldi	r18, 0x06	; 6
     972:	20 83       	st	Z, r18
     974:	66 e0       	ldi	r22, 0x06	; 6
     976:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <eeprom_write_byte>
     97a:	33 c0       	rjmp	.+102    	; 0x9e2 <output_for_user_pass_reset+0x164>
     97c:	87 33       	cpi	r24, 0x37	; 55
     97e:	81 f4       	brne	.+32     	; 0x9a0 <output_for_user_pass_reset+0x122>
     980:	81 e1       	ldi	r24, 0x11	; 17
     982:	86 0f       	add	r24, r22
     984:	5a dd       	rcall	.-1356   	; 0x43a <LCD_Cursor>
     986:	87 e3       	ldi	r24, 0x37	; 55
     988:	6f dd       	rcall	.-1314   	; 0x468 <LCD_WriteData>
     98a:	8c 2f       	mov	r24, r28
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	fc 01       	movw	r30, r24
     990:	e1 5f       	subi	r30, 0xF1	; 241
     992:	fd 4f       	sbci	r31, 0xFD	; 253
     994:	27 e0       	ldi	r18, 0x07	; 7
     996:	20 83       	st	Z, r18
     998:	67 e0       	ldi	r22, 0x07	; 7
     99a:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <eeprom_write_byte>
     99e:	21 c0       	rjmp	.+66     	; 0x9e2 <output_for_user_pass_reset+0x164>
     9a0:	88 33       	cpi	r24, 0x38	; 56
     9a2:	81 f4       	brne	.+32     	; 0x9c4 <output_for_user_pass_reset+0x146>
     9a4:	81 e1       	ldi	r24, 0x11	; 17
     9a6:	86 0f       	add	r24, r22
     9a8:	48 dd       	rcall	.-1392   	; 0x43a <LCD_Cursor>
     9aa:	88 e3       	ldi	r24, 0x38	; 56
     9ac:	5d dd       	rcall	.-1350   	; 0x468 <LCD_WriteData>
     9ae:	8c 2f       	mov	r24, r28
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	fc 01       	movw	r30, r24
     9b4:	e1 5f       	subi	r30, 0xF1	; 241
     9b6:	fd 4f       	sbci	r31, 0xFD	; 253
     9b8:	28 e0       	ldi	r18, 0x08	; 8
     9ba:	20 83       	st	Z, r18
     9bc:	68 e0       	ldi	r22, 0x08	; 8
     9be:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <eeprom_write_byte>
     9c2:	0f c0       	rjmp	.+30     	; 0x9e2 <output_for_user_pass_reset+0x164>
     9c4:	81 e1       	ldi	r24, 0x11	; 17
     9c6:	86 0f       	add	r24, r22
     9c8:	38 dd       	rcall	.-1424   	; 0x43a <LCD_Cursor>
     9ca:	89 e3       	ldi	r24, 0x39	; 57
     9cc:	4d dd       	rcall	.-1382   	; 0x468 <LCD_WriteData>
     9ce:	8c 2f       	mov	r24, r28
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	fc 01       	movw	r30, r24
     9d4:	e1 5f       	subi	r30, 0xF1	; 241
     9d6:	fd 4f       	sbci	r31, 0xFD	; 253
     9d8:	29 e0       	ldi	r18, 0x09	; 9
     9da:	20 83       	st	Z, r18
     9dc:	69 e0       	ldi	r22, 0x09	; 9
     9de:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <eeprom_write_byte>
     9e2:	cf 91       	pop	r28
     9e4:	08 95       	ret

000009e6 <generate_random_pass>:
     9e6:	0f 93       	push	r16
     9e8:	1f 93       	push	r17
     9ea:	cf 93       	push	r28
     9ec:	df 93       	push	r29
     9ee:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <srand>
     9f2:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <rand>
     9f6:	c7 e0       	ldi	r28, 0x07	; 7
     9f8:	d2 e0       	ldi	r29, 0x02	; 2
     9fa:	0a e0       	ldi	r16, 0x0A	; 10
     9fc:	10 e0       	ldi	r17, 0x00	; 0
     9fe:	b8 01       	movw	r22, r16
     a00:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <__divmodhi4>
     a04:	88 83       	st	Y, r24
     a06:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <rand>
     a0a:	b8 01       	movw	r22, r16
     a0c:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <__divmodhi4>
     a10:	89 83       	std	Y+1, r24	; 0x01
     a12:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <rand>
     a16:	b8 01       	movw	r22, r16
     a18:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <__divmodhi4>
     a1c:	8a 83       	std	Y+2, r24	; 0x02
     a1e:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <rand>
     a22:	b8 01       	movw	r22, r16
     a24:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <__divmodhi4>
     a28:	8b 83       	std	Y+3, r24	; 0x03
     a2a:	df 91       	pop	r29
     a2c:	cf 91       	pop	r28
     a2e:	1f 91       	pop	r17
     a30:	0f 91       	pop	r16
     a32:	08 95       	ret

00000a34 <Trans_Tick>:
     a34:	80 91 67 09 	lds	r24, 0x0967	; 0x800967 <trans_state>
     a38:	81 30       	cpi	r24, 0x01	; 1
     a3a:	21 f4       	brne	.+8      	; 0xa44 <Trans_Tick+0x10>
     a3c:	60 e0       	ldi	r22, 0x00	; 0
     a3e:	80 91 06 09 	lds	r24, 0x0906	; 0x800906 <data_to_send>
     a42:	4f dc       	rcall	.-1890   	; 0x2e2 <USART_Send>
     a44:	80 91 67 09 	lds	r24, 0x0967	; 0x800967 <trans_state>
     a48:	88 23       	and	r24, r24
     a4a:	19 f0       	breq	.+6      	; 0xa52 <Trans_Tick+0x1e>
     a4c:	81 30       	cpi	r24, 0x01	; 1
     a4e:	99 f0       	breq	.+38     	; 0xa76 <Trans_Tick+0x42>
     a50:	19 c0       	rjmp	.+50     	; 0xa84 <Trans_Tick+0x50>
     a52:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     a56:	85 ff       	sbrs	r24, 5
     a58:	17 c0       	rjmp	.+46     	; 0xa88 <Trans_Tick+0x54>
     a5a:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <ARM_DISARM>
     a5e:	81 30       	cpi	r24, 0x01	; 1
     a60:	21 f4       	brne	.+8      	; 0xa6a <Trans_Tick+0x36>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	80 93 06 09 	sts	0x0906, r24	; 0x800906 <data_to_send>
     a68:	02 c0       	rjmp	.+4      	; 0xa6e <Trans_Tick+0x3a>
     a6a:	10 92 06 09 	sts	0x0906, r1	; 0x800906 <data_to_send>
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	80 93 67 09 	sts	0x0967, r24	; 0x800967 <trans_state>
     a74:	08 95       	ret
     a76:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     a7a:	86 ff       	sbrs	r24, 6
     a7c:	05 c0       	rjmp	.+10     	; 0xa88 <Trans_Tick+0x54>
     a7e:	10 92 67 09 	sts	0x0967, r1	; 0x800967 <trans_state>
     a82:	08 95       	ret
     a84:	10 92 67 09 	sts	0x0967, r1	; 0x800967 <trans_state>
     a88:	08 95       	ret

00000a8a <TransSecTask>:
     a8a:	10 92 67 09 	sts	0x0967, r1	; 0x800967 <trans_state>
     a8e:	d2 df       	rcall	.-92     	; 0xa34 <Trans_Tick>
     a90:	8a e0       	ldi	r24, 0x0A	; 10
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <vTaskDelay>
     a98:	fa cf       	rjmp	.-12     	; 0xa8e <TransSecTask+0x4>

00000a9a <TransSecPulse>:
     a9a:	af 92       	push	r10
     a9c:	bf 92       	push	r11
     a9e:	cf 92       	push	r12
     aa0:	df 92       	push	r13
     aa2:	ef 92       	push	r14
     aa4:	ff 92       	push	r15
     aa6:	0f 93       	push	r16
     aa8:	a1 2c       	mov	r10, r1
     aaa:	b1 2c       	mov	r11, r1
     aac:	c1 2c       	mov	r12, r1
     aae:	d1 2c       	mov	r13, r1
     ab0:	e1 2c       	mov	r14, r1
     ab2:	f1 2c       	mov	r15, r1
     ab4:	08 2f       	mov	r16, r24
     ab6:	20 e0       	ldi	r18, 0x00	; 0
     ab8:	30 e0       	ldi	r19, 0x00	; 0
     aba:	45 e5       	ldi	r20, 0x55	; 85
     abc:	50 e0       	ldi	r21, 0x00	; 0
     abe:	65 e5       	ldi	r22, 0x55	; 85
     ac0:	72 e0       	ldi	r23, 0x02	; 2
     ac2:	85 e4       	ldi	r24, 0x45	; 69
     ac4:	95 e0       	ldi	r25, 0x05	; 5
     ac6:	41 d6       	rcall	.+3202   	; 0x174a <xTaskGenericCreate>
     ac8:	0f 91       	pop	r16
     aca:	ff 90       	pop	r15
     acc:	ef 90       	pop	r14
     ace:	df 90       	pop	r13
     ad0:	cf 90       	pop	r12
     ad2:	bf 90       	pop	r11
     ad4:	af 90       	pop	r10
     ad6:	08 95       	ret

00000ad8 <Rec_Tick>:
     ad8:	80 91 65 09 	lds	r24, 0x0965	; 0x800965 <rec_state>
     adc:	81 30       	cpi	r24, 0x01	; 1
     ade:	31 f4       	brne	.+12     	; 0xaec <Rec_Tick+0x14>
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	11 dc       	rcall	.-2014   	; 0x306 <USART_Receive>
     ae4:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <received_value>
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	de db       	rcall	.-2116   	; 0x2a8 <USART_Flush>
     aec:	80 91 65 09 	lds	r24, 0x0965	; 0x800965 <rec_state>
     af0:	88 23       	and	r24, r24
     af2:	19 f0       	breq	.+6      	; 0xafa <Rec_Tick+0x22>
     af4:	10 92 65 09 	sts	0x0965, r1	; 0x800965 <rec_state>
     af8:	08 95       	ret
     afa:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     afe:	88 23       	and	r24, r24
     b00:	1c f4       	brge	.+6      	; 0xb08 <Rec_Tick+0x30>
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	80 93 65 09 	sts	0x0965, r24	; 0x800965 <rec_state>
     b08:	08 95       	ret

00000b0a <RecSecTask>:
     b0a:	10 92 65 09 	sts	0x0965, r1	; 0x800965 <rec_state>
     b0e:	e4 df       	rcall	.-56     	; 0xad8 <Rec_Tick>
     b10:	8a e0       	ldi	r24, 0x0A	; 10
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <vTaskDelay>
     b18:	fa cf       	rjmp	.-12     	; 0xb0e <RecSecTask+0x4>

00000b1a <RecSecPulse>:
     b1a:	af 92       	push	r10
     b1c:	bf 92       	push	r11
     b1e:	cf 92       	push	r12
     b20:	df 92       	push	r13
     b22:	ef 92       	push	r14
     b24:	ff 92       	push	r15
     b26:	0f 93       	push	r16
     b28:	a1 2c       	mov	r10, r1
     b2a:	b1 2c       	mov	r11, r1
     b2c:	c1 2c       	mov	r12, r1
     b2e:	d1 2c       	mov	r13, r1
     b30:	e1 2c       	mov	r14, r1
     b32:	f1 2c       	mov	r15, r1
     b34:	08 2f       	mov	r16, r24
     b36:	20 e0       	ldi	r18, 0x00	; 0
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	45 e5       	ldi	r20, 0x55	; 85
     b3c:	50 e0       	ldi	r21, 0x00	; 0
     b3e:	62 e6       	ldi	r22, 0x62	; 98
     b40:	72 e0       	ldi	r23, 0x02	; 2
     b42:	85 e8       	ldi	r24, 0x85	; 133
     b44:	95 e0       	ldi	r25, 0x05	; 5
     b46:	01 d6       	rcall	.+3074   	; 0x174a <xTaskGenericCreate>
     b48:	0f 91       	pop	r16
     b4a:	ff 90       	pop	r15
     b4c:	ef 90       	pop	r14
     b4e:	df 90       	pop	r13
     b50:	cf 90       	pop	r12
     b52:	bf 90       	pop	r11
     b54:	af 90       	pop	r10
     b56:	08 95       	ret

00000b58 <Menu_Tick>:
     b58:	cf 93       	push	r28
     b5a:	df 93       	push	r29
     b5c:	e0 91 68 09 	lds	r30, 0x0968	; 0x800968 <menu_state>
     b60:	8e 2f       	mov	r24, r30
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	8b 30       	cpi	r24, 0x0B	; 11
     b66:	91 05       	cpc	r25, r1
     b68:	08 f0       	brcs	.+2      	; 0xb6c <Menu_Tick+0x14>
     b6a:	8e c2       	rjmp	.+1308   	; 0x1088 <Menu_Tick+0x530>
     b6c:	fc 01       	movw	r30, r24
     b6e:	ea 5b       	subi	r30, 0xBA	; 186
     b70:	ff 4f       	sbci	r31, 0xFF	; 255
     b72:	0c 94 f1 0e 	jmp	0x1de2	; 0x1de2 <__tablejump2__>
     b76:	80 91 07 09 	lds	r24, 0x0907	; 0x800907 <received_value>
     b7a:	47 dd       	rcall	.-1394   	; 0x60a <output_temp>
     b7c:	82 e0       	ldi	r24, 0x02	; 2
     b7e:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <menu_state>
     b82:	82 c2       	rjmp	.+1284   	; 0x1088 <Menu_Tick+0x530>
     b84:	d2 db       	rcall	.-2140   	; 0x32a <GetKeypadKey>
     b86:	80 93 fc 08 	sts	0x08FC, r24	; 0x8008fc <keypad_val>
     b8a:	81 11       	cpse	r24, r1
     b8c:	07 c0       	rjmp	.+14     	; 0xb9c <Menu_Tick+0x44>
     b8e:	82 e0       	ldi	r24, 0x02	; 2
     b90:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <menu_state>
     b94:	80 91 07 09 	lds	r24, 0x0907	; 0x800907 <received_value>
     b98:	38 dd       	rcall	.-1424   	; 0x60a <output_temp>
     b9a:	76 c2       	rjmp	.+1260   	; 0x1088 <Menu_Tick+0x530>
     b9c:	81 34       	cpi	r24, 0x41	; 65
     b9e:	c9 f4       	brne	.+50     	; 0xbd2 <Menu_Tick+0x7a>
     ba0:	83 e0       	ldi	r24, 0x03	; 3
     ba2:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <menu_state>
     ba6:	63 e3       	ldi	r22, 0x33	; 51
     ba8:	72 e0       	ldi	r23, 0x02	; 2
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	66 dc       	rcall	.-1844   	; 0x47a <LCD_DisplayString>
     bae:	10 92 05 09 	sts	0x0905, r1	; 0x800905 <mode>
     bb2:	10 92 f9 08 	sts	0x08F9, r1	; 0x8008f9 <pass_location>
     bb6:	eb e0       	ldi	r30, 0x0B	; 11
     bb8:	f2 e0       	ldi	r31, 0x02	; 2
     bba:	10 82       	st	Z, r1
     bbc:	11 82       	std	Z+1, r1	; 0x01
     bbe:	12 82       	std	Z+2, r1	; 0x02
     bc0:	13 82       	std	Z+3, r1	; 0x03
     bc2:	e3 e3       	ldi	r30, 0x33	; 51
     bc4:	f2 e0       	ldi	r31, 0x02	; 2
     bc6:	80 e2       	ldi	r24, 0x20	; 32
     bc8:	80 8b       	std	Z+16, r24	; 0x10
     bca:	81 8b       	std	Z+17, r24	; 0x11
     bcc:	82 8b       	std	Z+18, r24	; 0x12
     bce:	83 8b       	std	Z+19, r24	; 0x13
     bd0:	5b c2       	rjmp	.+1206   	; 0x1088 <Menu_Tick+0x530>
     bd2:	82 34       	cpi	r24, 0x42	; 66
     bd4:	61 f4       	brne	.+24     	; 0xbee <Menu_Tick+0x96>
     bd6:	85 e0       	ldi	r24, 0x05	; 5
     bd8:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <menu_state>
     bdc:	69 e7       	ldi	r22, 0x79	; 121
     bde:	72 e0       	ldi	r23, 0x02	; 2
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	4b dc       	rcall	.-1898   	; 0x47a <LCD_DisplayString>
     be4:	10 92 fb 08 	sts	0x08FB, r1	; 0x8008fb <random_count+0x1>
     be8:	10 92 fa 08 	sts	0x08FA, r1	; 0x8008fa <random_count>
     bec:	4d c2       	rjmp	.+1178   	; 0x1088 <Menu_Tick+0x530>
     bee:	82 e0       	ldi	r24, 0x02	; 2
     bf0:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <menu_state>
     bf4:	49 c2       	rjmp	.+1170   	; 0x1088 <Menu_Tick+0x530>
     bf6:	99 db       	rcall	.-2254   	; 0x32a <GetKeypadKey>
     bf8:	80 93 fc 08 	sts	0x08FC, r24	; 0x8008fc <keypad_val>
     bfc:	91 e0       	ldi	r25, 0x01	; 1
     bfe:	90 93 68 09 	sts	0x0968, r25	; 0x800968 <menu_state>
     c02:	90 91 00 09 	lds	r25, 0x0900	; 0x800900 <sensors_tripped>
     c06:	91 30       	cpi	r25, 0x01	; 1
     c08:	81 f0       	breq	.+32     	; 0xc2a <Menu_Tick+0xd2>
     c0a:	90 91 01 09 	lds	r25, 0x0901	; 0x800901 <sensors_tripped+0x1>
     c0e:	91 30       	cpi	r25, 0x01	; 1
     c10:	61 f0       	breq	.+24     	; 0xc2a <Menu_Tick+0xd2>
     c12:	90 91 02 09 	lds	r25, 0x0902	; 0x800902 <sensors_tripped+0x2>
     c16:	91 30       	cpi	r25, 0x01	; 1
     c18:	41 f0       	breq	.+16     	; 0xc2a <Menu_Tick+0xd2>
     c1a:	90 91 03 09 	lds	r25, 0x0903	; 0x800903 <sensors_tripped+0x3>
     c1e:	91 30       	cpi	r25, 0x01	; 1
     c20:	21 f0       	breq	.+8      	; 0xc2a <Menu_Tick+0xd2>
     c22:	90 91 04 09 	lds	r25, 0x0904	; 0x800904 <sensors_tripped+0x4>
     c26:	91 30       	cpi	r25, 0x01	; 1
     c28:	41 f4       	brne	.+16     	; 0xc3a <Menu_Tick+0xe2>
     c2a:	8a e0       	ldi	r24, 0x0A	; 10
     c2c:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <menu_state>
     c30:	6e e9       	ldi	r22, 0x9E	; 158
     c32:	72 e0       	ldi	r23, 0x02	; 2
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	21 dc       	rcall	.-1982   	; 0x47a <LCD_DisplayString>
     c38:	27 c2       	rjmp	.+1102   	; 0x1088 <Menu_Tick+0x530>
     c3a:	88 23       	and	r24, r24
     c3c:	21 f0       	breq	.+8      	; 0xc46 <Menu_Tick+0xee>
     c3e:	9e eb       	ldi	r25, 0xBE	; 190
     c40:	98 0f       	add	r25, r24
     c42:	93 30       	cpi	r25, 0x03	; 3
     c44:	28 f4       	brcc	.+10     	; 0xc50 <Menu_Tick+0xf8>
     c46:	60 eb       	ldi	r22, 0xB0	; 176
     c48:	72 e0       	ldi	r23, 0x02	; 2
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	16 dc       	rcall	.-2004   	; 0x47a <LCD_DisplayString>
     c4e:	1c c2       	rjmp	.+1080   	; 0x1088 <Menu_Tick+0x530>
     c50:	81 34       	cpi	r24, 0x41	; 65
     c52:	c9 f4       	brne	.+50     	; 0xc86 <Menu_Tick+0x12e>
     c54:	83 e0       	ldi	r24, 0x03	; 3
     c56:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <menu_state>
     c5a:	63 e3       	ldi	r22, 0x33	; 51
     c5c:	72 e0       	ldi	r23, 0x02	; 2
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	0c dc       	rcall	.-2024   	; 0x47a <LCD_DisplayString>
     c62:	10 92 05 09 	sts	0x0905, r1	; 0x800905 <mode>
     c66:	10 92 f9 08 	sts	0x08F9, r1	; 0x8008f9 <pass_location>
     c6a:	eb e0       	ldi	r30, 0x0B	; 11
     c6c:	f2 e0       	ldi	r31, 0x02	; 2
     c6e:	10 82       	st	Z, r1
     c70:	11 82       	std	Z+1, r1	; 0x01
     c72:	12 82       	std	Z+2, r1	; 0x02
     c74:	13 82       	std	Z+3, r1	; 0x03
     c76:	e3 e3       	ldi	r30, 0x33	; 51
     c78:	f2 e0       	ldi	r31, 0x02	; 2
     c7a:	80 e2       	ldi	r24, 0x20	; 32
     c7c:	80 8b       	std	Z+16, r24	; 0x10
     c7e:	81 8b       	std	Z+17, r24	; 0x11
     c80:	82 8b       	std	Z+18, r24	; 0x12
     c82:	83 8b       	std	Z+19, r24	; 0x13
     c84:	01 c2       	rjmp	.+1026   	; 0x1088 <Menu_Tick+0x530>
     c86:	60 eb       	ldi	r22, 0xB0	; 176
     c88:	72 e0       	ldi	r23, 0x02	; 2
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	f6 db       	rcall	.-2068   	; 0x47a <LCD_DisplayString>
     c8e:	10 92 ff 08 	sts	0x08FF, r1	; 0x8008ff <trip_location>
     c92:	fa c1       	rjmp	.+1012   	; 0x1088 <Menu_Tick+0x530>
     c94:	4a db       	rcall	.-2412   	; 0x32a <GetKeypadKey>
     c96:	80 93 fc 08 	sts	0x08FC, r24	; 0x8008fc <keypad_val>
     c9a:	88 23       	and	r24, r24
     c9c:	41 f0       	breq	.+16     	; 0xcae <Menu_Tick+0x156>
     c9e:	9f eb       	ldi	r25, 0xBF	; 191
     ca0:	98 0f       	add	r25, r24
     ca2:	92 30       	cpi	r25, 0x02	; 2
     ca4:	20 f0       	brcs	.+8      	; 0xcae <Menu_Tick+0x156>
     ca6:	8a 32       	cpi	r24, 0x2A	; 42
     ca8:	11 f0       	breq	.+4      	; 0xcae <Menu_Tick+0x156>
     caa:	83 32       	cpi	r24, 0x23	; 35
     cac:	41 f4       	brne	.+16     	; 0xcbe <Menu_Tick+0x166>
     cae:	83 e0       	ldi	r24, 0x03	; 3
     cb0:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <menu_state>
     cb4:	63 e3       	ldi	r22, 0x33	; 51
     cb6:	72 e0       	ldi	r23, 0x02	; 2
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	df db       	rcall	.-2114   	; 0x47a <LCD_DisplayString>
     cbc:	e5 c1       	rjmp	.+970    	; 0x1088 <Menu_Tick+0x530>
     cbe:	83 34       	cpi	r24, 0x43	; 67
     cc0:	61 f4       	brne	.+24     	; 0xcda <Menu_Tick+0x182>
     cc2:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <ARM_DISARM>
     cc6:	81 11       	cpse	r24, r1
     cc8:	04 c0       	rjmp	.+8      	; 0xcd2 <Menu_Tick+0x17a>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <menu_state>
     cd0:	db c1       	rjmp	.+950    	; 0x1088 <Menu_Tick+0x530>
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <menu_state>
     cd8:	d7 c1       	rjmp	.+942    	; 0x1088 <Menu_Tick+0x530>
     cda:	84 34       	cpi	r24, 0x44	; 68
     cdc:	09 f0       	breq	.+2      	; 0xce0 <Menu_Tick+0x188>
     cde:	9f c0       	rjmp	.+318    	; 0xe1e <Menu_Tick+0x2c6>
     ce0:	a9 dd       	rcall	.-1198   	; 0x834 <check_password>
     ce2:	81 30       	cpi	r24, 0x01	; 1
     ce4:	91 05       	cpc	r25, r1
     ce6:	a1 f4       	brne	.+40     	; 0xd10 <Menu_Tick+0x1b8>
     ce8:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <mode>
     cec:	81 11       	cpse	r24, r1
     cee:	23 c0       	rjmp	.+70     	; 0xd36 <Menu_Tick+0x1de>
     cf0:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <ARM_DISARM>
     cf4:	81 11       	cpse	r24, r1
     cf6:	06 c0       	rjmp	.+12     	; 0xd04 <Menu_Tick+0x1ac>
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	80 93 08 09 	sts	0x0908, r24	; 0x800908 <ARM_DISARM>
     cfe:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <menu_state>
     d02:	c2 c1       	rjmp	.+900    	; 0x1088 <Menu_Tick+0x530>
     d04:	10 92 08 09 	sts	0x0908, r1	; 0x800908 <ARM_DISARM>
     d08:	82 e0       	ldi	r24, 0x02	; 2
     d0a:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <menu_state>
     d0e:	bc c1       	rjmp	.+888    	; 0x1088 <Menu_Tick+0x530>
     d10:	89 2b       	or	r24, r25
     d12:	09 f0       	breq	.+2      	; 0xd16 <Menu_Tick+0x1be>
     d14:	b9 c1       	rjmp	.+882    	; 0x1088 <Menu_Tick+0x530>
     d16:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <mode>
     d1a:	81 11       	cpse	r24, r1
     d1c:	21 c0       	rjmp	.+66     	; 0xd60 <Menu_Tick+0x208>
     d1e:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <ARM_DISARM>
     d22:	81 11       	cpse	r24, r1
     d24:	04 c0       	rjmp	.+8      	; 0xd2e <Menu_Tick+0x1d6>
     d26:	82 e0       	ldi	r24, 0x02	; 2
     d28:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <menu_state>
     d2c:	ad c1       	rjmp	.+858    	; 0x1088 <Menu_Tick+0x530>
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <menu_state>
     d34:	a9 c1       	rjmp	.+850    	; 0x1088 <Menu_Tick+0x530>
     d36:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <mode>
     d3a:	81 30       	cpi	r24, 0x01	; 1
     d3c:	e9 f4       	brne	.+58     	; 0xd78 <Menu_Tick+0x220>
     d3e:	61 ec       	ldi	r22, 0xC1	; 193
     d40:	72 e0       	ldi	r23, 0x02	; 2
     d42:	9b db       	rcall	.-2250   	; 0x47a <LCD_DisplayString>
     d44:	81 e2       	ldi	r24, 0x21	; 33
     d46:	79 db       	rcall	.-2318   	; 0x43a <LCD_Cursor>
     d48:	87 e0       	ldi	r24, 0x07	; 7
     d4a:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <menu_state>
     d4e:	10 92 f9 08 	sts	0x08F9, r1	; 0x8008f9 <pass_location>
     d52:	eb e0       	ldi	r30, 0x0B	; 11
     d54:	f2 e0       	ldi	r31, 0x02	; 2
     d56:	10 82       	st	Z, r1
     d58:	11 82       	std	Z+1, r1	; 0x01
     d5a:	12 82       	std	Z+2, r1	; 0x02
     d5c:	13 82       	std	Z+3, r1	; 0x03
     d5e:	94 c1       	rjmp	.+808    	; 0x1088 <Menu_Tick+0x530>
     d60:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <mode>
     d64:	81 30       	cpi	r24, 0x01	; 1
     d66:	79 f5       	brne	.+94     	; 0xdc6 <Menu_Tick+0x26e>
     d68:	85 e0       	ldi	r24, 0x05	; 5
     d6a:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <menu_state>
     d6e:	69 e7       	ldi	r22, 0x79	; 121
     d70:	72 e0       	ldi	r23, 0x02	; 2
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	82 db       	rcall	.-2300   	; 0x47a <LCD_DisplayString>
     d76:	88 c1       	rjmp	.+784    	; 0x1088 <Menu_Tick+0x530>
     d78:	82 30       	cpi	r24, 0x02	; 2
     d7a:	89 f5       	brne	.+98     	; 0xdde <Menu_Tick+0x286>
     d7c:	89 e0       	ldi	r24, 0x09	; 9
     d7e:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <menu_state>
     d82:	80 91 fa 08 	lds	r24, 0x08FA	; 0x8008fa <random_count>
     d86:	90 91 fb 08 	lds	r25, 0x08FB	; 0x8008fb <random_count+0x1>
     d8a:	2d de       	rcall	.-934    	; 0x9e6 <generate_random_pass>
     d8c:	61 ed       	ldi	r22, 0xD1	; 209
     d8e:	72 e0       	ldi	r23, 0x02	; 2
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	73 db       	rcall	.-2330   	; 0x47a <LCD_DisplayString>
     d94:	81 e1       	ldi	r24, 0x11	; 17
     d96:	51 db       	rcall	.-2398   	; 0x43a <LCD_Cursor>
     d98:	c7 e0       	ldi	r28, 0x07	; 7
     d9a:	d2 e0       	ldi	r29, 0x02	; 2
     d9c:	88 81       	ld	r24, Y
     d9e:	80 5d       	subi	r24, 0xD0	; 208
     da0:	63 db       	rcall	.-2362   	; 0x468 <LCD_WriteData>
     da2:	82 e1       	ldi	r24, 0x12	; 18
     da4:	4a db       	rcall	.-2412   	; 0x43a <LCD_Cursor>
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	80 5d       	subi	r24, 0xD0	; 208
     daa:	5e db       	rcall	.-2372   	; 0x468 <LCD_WriteData>
     dac:	83 e1       	ldi	r24, 0x13	; 19
     dae:	45 db       	rcall	.-2422   	; 0x43a <LCD_Cursor>
     db0:	8a 81       	ldd	r24, Y+2	; 0x02
     db2:	80 5d       	subi	r24, 0xD0	; 208
     db4:	59 db       	rcall	.-2382   	; 0x468 <LCD_WriteData>
     db6:	84 e1       	ldi	r24, 0x14	; 20
     db8:	40 db       	rcall	.-2432   	; 0x43a <LCD_Cursor>
     dba:	8b 81       	ldd	r24, Y+3	; 0x03
     dbc:	80 5d       	subi	r24, 0xD0	; 208
     dbe:	54 db       	rcall	.-2392   	; 0x468 <LCD_WriteData>
     dc0:	81 e2       	ldi	r24, 0x21	; 33
     dc2:	3b db       	rcall	.-2442   	; 0x43a <LCD_Cursor>
     dc4:	61 c1       	rjmp	.+706    	; 0x1088 <Menu_Tick+0x530>
     dc6:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <mode>
     dca:	82 30       	cpi	r24, 0x02	; 2
     dcc:	99 f4       	brne	.+38     	; 0xdf4 <Menu_Tick+0x29c>
     dce:	85 e0       	ldi	r24, 0x05	; 5
     dd0:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <menu_state>
     dd4:	69 e7       	ldi	r22, 0x79	; 121
     dd6:	72 e0       	ldi	r23, 0x02	; 2
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	4f db       	rcall	.-2402   	; 0x47a <LCD_DisplayString>
     ddc:	55 c1       	rjmp	.+682    	; 0x1088 <Menu_Tick+0x530>
     dde:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <mode>
     de2:	83 30       	cpi	r24, 0x03	; 3
     de4:	09 f0       	breq	.+2      	; 0xde8 <Menu_Tick+0x290>
     de6:	50 c1       	rjmp	.+672    	; 0x1088 <Menu_Tick+0x530>
     de8:	82 e0       	ldi	r24, 0x02	; 2
     dea:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <menu_state>
     dee:	10 92 08 09 	sts	0x0908, r1	; 0x800908 <ARM_DISARM>
     df2:	4a c1       	rjmp	.+660    	; 0x1088 <Menu_Tick+0x530>
     df4:	83 30       	cpi	r24, 0x03	; 3
     df6:	09 f0       	breq	.+2      	; 0xdfa <Menu_Tick+0x2a2>
     df8:	47 c1       	rjmp	.+654    	; 0x1088 <Menu_Tick+0x530>
     dfa:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <menu_state>
     dfe:	10 92 f9 08 	sts	0x08F9, r1	; 0x8008f9 <pass_location>
     e02:	eb e0       	ldi	r30, 0x0B	; 11
     e04:	f2 e0       	ldi	r31, 0x02	; 2
     e06:	10 82       	st	Z, r1
     e08:	11 82       	std	Z+1, r1	; 0x01
     e0a:	12 82       	std	Z+2, r1	; 0x02
     e0c:	13 82       	std	Z+3, r1	; 0x03
     e0e:	e3 e3       	ldi	r30, 0x33	; 51
     e10:	f2 e0       	ldi	r31, 0x02	; 2
     e12:	80 e2       	ldi	r24, 0x20	; 32
     e14:	80 8b       	std	Z+16, r24	; 0x10
     e16:	81 8b       	std	Z+17, r24	; 0x11
     e18:	82 8b       	std	Z+18, r24	; 0x12
     e1a:	83 8b       	std	Z+19, r24	; 0x13
     e1c:	35 c1       	rjmp	.+618    	; 0x1088 <Menu_Tick+0x530>
     e1e:	94 e0       	ldi	r25, 0x04	; 4
     e20:	90 93 68 09 	sts	0x0968, r25	; 0x800968 <menu_state>
     e24:	60 91 f9 08 	lds	r22, 0x08F9	; 0x8008f9 <pass_location>
     e28:	64 30       	cpi	r22, 0x04	; 4
     e2a:	08 f0       	brcs	.+2      	; 0xe2e <Menu_Tick+0x2d6>
     e2c:	2d c1       	rjmp	.+602    	; 0x1088 <Menu_Tick+0x530>
     e2e:	70 e0       	ldi	r23, 0x00	; 0
     e30:	0c dc       	rcall	.-2024   	; 0x64a <enter_c_string>
     e32:	80 91 f9 08 	lds	r24, 0x08F9	; 0x8008f9 <pass_location>
     e36:	8f 5f       	subi	r24, 0xFF	; 255
     e38:	80 93 f9 08 	sts	0x08F9, r24	; 0x8008f9 <pass_location>
     e3c:	25 c1       	rjmp	.+586    	; 0x1088 <Menu_Tick+0x530>
     e3e:	75 da       	rcall	.-2838   	; 0x32a <GetKeypadKey>
     e40:	80 93 fc 08 	sts	0x08FC, r24	; 0x8008fc <keypad_val>
     e44:	81 11       	cpse	r24, r1
     e46:	04 c0       	rjmp	.+8      	; 0xe50 <Menu_Tick+0x2f8>
     e48:	83 e0       	ldi	r24, 0x03	; 3
     e4a:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <menu_state>
     e4e:	1c c1       	rjmp	.+568    	; 0x1088 <Menu_Tick+0x530>
     e50:	84 e0       	ldi	r24, 0x04	; 4
     e52:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <menu_state>
     e56:	18 c1       	rjmp	.+560    	; 0x1088 <Menu_Tick+0x530>
     e58:	68 da       	rcall	.-2864   	; 0x32a <GetKeypadKey>
     e5a:	80 93 fc 08 	sts	0x08FC, r24	; 0x8008fc <keypad_val>
     e5e:	20 91 fa 08 	lds	r18, 0x08FA	; 0x8008fa <random_count>
     e62:	30 91 fb 08 	lds	r19, 0x08FB	; 0x8008fb <random_count+0x1>
     e66:	2f 5f       	subi	r18, 0xFF	; 255
     e68:	3f 4f       	sbci	r19, 0xFF	; 255
     e6a:	30 93 fb 08 	sts	0x08FB, r19	; 0x8008fb <random_count+0x1>
     e6e:	20 93 fa 08 	sts	0x08FA, r18	; 0x8008fa <random_count>
     e72:	88 23       	and	r24, r24
     e74:	31 f0       	breq	.+12     	; 0xe82 <Menu_Tick+0x32a>
     e76:	9f eb       	ldi	r25, 0xBF	; 191
     e78:	98 0f       	add	r25, r24
     e7a:	92 30       	cpi	r25, 0x02	; 2
     e7c:	10 f0       	brcs	.+4      	; 0xe82 <Menu_Tick+0x32a>
     e7e:	84 34       	cpi	r24, 0x44	; 68
     e80:	21 f4       	brne	.+8      	; 0xe8a <Menu_Tick+0x332>
     e82:	85 e0       	ldi	r24, 0x05	; 5
     e84:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <menu_state>
     e88:	ff c0       	rjmp	.+510    	; 0x1088 <Menu_Tick+0x530>
     e8a:	83 34       	cpi	r24, 0x43	; 67
     e8c:	61 f4       	brne	.+24     	; 0xea6 <Menu_Tick+0x34e>
     e8e:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <ARM_DISARM>
     e92:	81 11       	cpse	r24, r1
     e94:	04 c0       	rjmp	.+8      	; 0xe9e <Menu_Tick+0x346>
     e96:	82 e0       	ldi	r24, 0x02	; 2
     e98:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <menu_state>
     e9c:	f5 c0       	rjmp	.+490    	; 0x1088 <Menu_Tick+0x530>
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <menu_state>
     ea4:	f1 c0       	rjmp	.+482    	; 0x1088 <Menu_Tick+0x530>
     ea6:	8a 32       	cpi	r24, 0x2A	; 42
     ea8:	b1 f4       	brne	.+44     	; 0xed6 <Menu_Tick+0x37e>
     eaa:	83 e0       	ldi	r24, 0x03	; 3
     eac:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <menu_state>
     eb0:	10 92 f9 08 	sts	0x08F9, r1	; 0x8008f9 <pass_location>
     eb4:	eb e0       	ldi	r30, 0x0B	; 11
     eb6:	f2 e0       	ldi	r31, 0x02	; 2
     eb8:	10 82       	st	Z, r1
     eba:	11 82       	std	Z+1, r1	; 0x01
     ebc:	12 82       	std	Z+2, r1	; 0x02
     ebe:	13 82       	std	Z+3, r1	; 0x03
     ec0:	e3 e3       	ldi	r30, 0x33	; 51
     ec2:	f2 e0       	ldi	r31, 0x02	; 2
     ec4:	80 e2       	ldi	r24, 0x20	; 32
     ec6:	80 8b       	std	Z+16, r24	; 0x10
     ec8:	81 8b       	std	Z+17, r24	; 0x11
     eca:	82 8b       	std	Z+18, r24	; 0x12
     ecc:	83 8b       	std	Z+19, r24	; 0x13
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	80 93 05 09 	sts	0x0905, r24	; 0x800905 <mode>
     ed4:	d9 c0       	rjmp	.+434    	; 0x1088 <Menu_Tick+0x530>
     ed6:	83 32       	cpi	r24, 0x23	; 35
     ed8:	b1 f4       	brne	.+44     	; 0xf06 <Menu_Tick+0x3ae>
     eda:	83 e0       	ldi	r24, 0x03	; 3
     edc:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <menu_state>
     ee0:	10 92 f9 08 	sts	0x08F9, r1	; 0x8008f9 <pass_location>
     ee4:	eb e0       	ldi	r30, 0x0B	; 11
     ee6:	f2 e0       	ldi	r31, 0x02	; 2
     ee8:	10 82       	st	Z, r1
     eea:	11 82       	std	Z+1, r1	; 0x01
     eec:	12 82       	std	Z+2, r1	; 0x02
     eee:	13 82       	std	Z+3, r1	; 0x03
     ef0:	e3 e3       	ldi	r30, 0x33	; 51
     ef2:	f2 e0       	ldi	r31, 0x02	; 2
     ef4:	80 e2       	ldi	r24, 0x20	; 32
     ef6:	80 8b       	std	Z+16, r24	; 0x10
     ef8:	81 8b       	std	Z+17, r24	; 0x11
     efa:	82 8b       	std	Z+18, r24	; 0x12
     efc:	83 8b       	std	Z+19, r24	; 0x13
     efe:	82 e0       	ldi	r24, 0x02	; 2
     f00:	80 93 05 09 	sts	0x0905, r24	; 0x800905 <mode>
     f04:	c1 c0       	rjmp	.+386    	; 0x1088 <Menu_Tick+0x530>
     f06:	85 e0       	ldi	r24, 0x05	; 5
     f08:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <menu_state>
     f0c:	bd c0       	rjmp	.+378    	; 0x1088 <Menu_Tick+0x530>
     f0e:	0d da       	rcall	.-3046   	; 0x32a <GetKeypadKey>
     f10:	80 93 fc 08 	sts	0x08FC, r24	; 0x8008fc <keypad_val>
     f14:	88 23       	and	r24, r24
     f16:	51 f0       	breq	.+20     	; 0xf2c <Menu_Tick+0x3d4>
     f18:	9f eb       	ldi	r25, 0xBF	; 191
     f1a:	98 0f       	add	r25, r24
     f1c:	92 30       	cpi	r25, 0x02	; 2
     f1e:	30 f0       	brcs	.+12     	; 0xf2c <Menu_Tick+0x3d4>
     f20:	84 34       	cpi	r24, 0x44	; 68
     f22:	21 f0       	breq	.+8      	; 0xf2c <Menu_Tick+0x3d4>
     f24:	8a 32       	cpi	r24, 0x2A	; 42
     f26:	11 f0       	breq	.+4      	; 0xf2c <Menu_Tick+0x3d4>
     f28:	83 32       	cpi	r24, 0x23	; 35
     f2a:	21 f4       	brne	.+8      	; 0xf34 <Menu_Tick+0x3dc>
     f2c:	87 e0       	ldi	r24, 0x07	; 7
     f2e:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <menu_state>
     f32:	aa c0       	rjmp	.+340    	; 0x1088 <Menu_Tick+0x530>
     f34:	83 34       	cpi	r24, 0x43	; 67
     f36:	21 f4       	brne	.+8      	; 0xf40 <Menu_Tick+0x3e8>
     f38:	82 e0       	ldi	r24, 0x02	; 2
     f3a:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <menu_state>
     f3e:	a4 c0       	rjmp	.+328    	; 0x1088 <Menu_Tick+0x530>
     f40:	60 91 f9 08 	lds	r22, 0x08F9	; 0x8008f9 <pass_location>
     f44:	64 30       	cpi	r22, 0x04	; 4
     f46:	31 f4       	brne	.+12     	; 0xf54 <Menu_Tick+0x3fc>
     f48:	82 e0       	ldi	r24, 0x02	; 2
     f4a:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <menu_state>
     f4e:	10 92 f9 08 	sts	0x08F9, r1	; 0x8008f9 <pass_location>
     f52:	9a c0       	rjmp	.+308    	; 0x1088 <Menu_Tick+0x530>
     f54:	98 e0       	ldi	r25, 0x08	; 8
     f56:	90 93 68 09 	sts	0x0968, r25	; 0x800968 <menu_state>
     f5a:	91 dc       	rcall	.-1758   	; 0x87e <output_for_user_pass_reset>
     f5c:	80 91 f9 08 	lds	r24, 0x08F9	; 0x8008f9 <pass_location>
     f60:	8f 5f       	subi	r24, 0xFF	; 255
     f62:	80 93 f9 08 	sts	0x08F9, r24	; 0x8008f9 <pass_location>
     f66:	90 c0       	rjmp	.+288    	; 0x1088 <Menu_Tick+0x530>
     f68:	e0 d9       	rcall	.-3136   	; 0x32a <GetKeypadKey>
     f6a:	80 93 fc 08 	sts	0x08FC, r24	; 0x8008fc <keypad_val>
     f6e:	81 11       	cpse	r24, r1
     f70:	04 c0       	rjmp	.+8      	; 0xf7a <Menu_Tick+0x422>
     f72:	87 e0       	ldi	r24, 0x07	; 7
     f74:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <menu_state>
     f78:	87 c0       	rjmp	.+270    	; 0x1088 <Menu_Tick+0x530>
     f7a:	88 e0       	ldi	r24, 0x08	; 8
     f7c:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <menu_state>
     f80:	83 c0       	rjmp	.+262    	; 0x1088 <Menu_Tick+0x530>
     f82:	d3 d9       	rcall	.-3162   	; 0x32a <GetKeypadKey>
     f84:	80 93 fc 08 	sts	0x08FC, r24	; 0x8008fc <keypad_val>
     f88:	81 11       	cpse	r24, r1
     f8a:	04 c0       	rjmp	.+8      	; 0xf94 <Menu_Tick+0x43c>
     f8c:	89 e0       	ldi	r24, 0x09	; 9
     f8e:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <menu_state>
     f92:	7a c0       	rjmp	.+244    	; 0x1088 <Menu_Tick+0x530>
     f94:	83 32       	cpi	r24, 0x23	; 35
     f96:	f9 f4       	brne	.+62     	; 0xfd6 <Menu_Tick+0x47e>
     f98:	e7 e0       	ldi	r30, 0x07	; 7
     f9a:	f2 e0       	ldi	r31, 0x02	; 2
     f9c:	60 81       	ld	r22, Z
     f9e:	cf e0       	ldi	r28, 0x0F	; 15
     fa0:	d2 e0       	ldi	r29, 0x02	; 2
     fa2:	68 83       	st	Y, r22
     fa4:	81 81       	ldd	r24, Z+1	; 0x01
     fa6:	89 83       	std	Y+1, r24	; 0x01
     fa8:	82 81       	ldd	r24, Z+2	; 0x02
     faa:	8a 83       	std	Y+2, r24	; 0x02
     fac:	83 81       	ldd	r24, Z+3	; 0x03
     fae:	8b 83       	std	Y+3, r24	; 0x03
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	a6 d7       	rcall	.+3916   	; 0x1f02 <eeprom_write_byte>
     fb6:	69 81       	ldd	r22, Y+1	; 0x01
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	a2 d7       	rcall	.+3908   	; 0x1f02 <eeprom_write_byte>
     fbe:	6a 81       	ldd	r22, Y+2	; 0x02
     fc0:	82 e0       	ldi	r24, 0x02	; 2
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	9e d7       	rcall	.+3900   	; 0x1f02 <eeprom_write_byte>
     fc6:	6b 81       	ldd	r22, Y+3	; 0x03
     fc8:	83 e0       	ldi	r24, 0x03	; 3
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	9a d7       	rcall	.+3892   	; 0x1f02 <eeprom_write_byte>
     fce:	82 e0       	ldi	r24, 0x02	; 2
     fd0:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <menu_state>
     fd4:	59 c0       	rjmp	.+178    	; 0x1088 <Menu_Tick+0x530>
     fd6:	83 34       	cpi	r24, 0x43	; 67
     fd8:	21 f4       	brne	.+8      	; 0xfe2 <Menu_Tick+0x48a>
     fda:	82 e0       	ldi	r24, 0x02	; 2
     fdc:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <menu_state>
     fe0:	53 c0       	rjmp	.+166    	; 0x1088 <Menu_Tick+0x530>
     fe2:	89 e0       	ldi	r24, 0x09	; 9
     fe4:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <menu_state>
     fe8:	4f c0       	rjmp	.+158    	; 0x1088 <Menu_Tick+0x530>
     fea:	80 91 00 09 	lds	r24, 0x0900	; 0x800900 <sensors_tripped>
     fee:	81 30       	cpi	r24, 0x01	; 1
     ff0:	31 f4       	brne	.+12     	; 0xffe <Menu_Tick+0x4a6>
     ff2:	82 e1       	ldi	r24, 0x12	; 18
     ff4:	22 da       	rcall	.-3004   	; 0x43a <LCD_Cursor>
     ff6:	81 e3       	ldi	r24, 0x31	; 49
     ff8:	37 da       	rcall	.-2962   	; 0x468 <LCD_WriteData>
     ffa:	81 e2       	ldi	r24, 0x21	; 33
     ffc:	1e da       	rcall	.-3012   	; 0x43a <LCD_Cursor>
     ffe:	80 91 01 09 	lds	r24, 0x0901	; 0x800901 <sensors_tripped+0x1>
    1002:	81 30       	cpi	r24, 0x01	; 1
    1004:	31 f4       	brne	.+12     	; 0x1012 <Menu_Tick+0x4ba>
    1006:	84 e1       	ldi	r24, 0x14	; 20
    1008:	18 da       	rcall	.-3024   	; 0x43a <LCD_Cursor>
    100a:	82 e3       	ldi	r24, 0x32	; 50
    100c:	2d da       	rcall	.-2982   	; 0x468 <LCD_WriteData>
    100e:	81 e2       	ldi	r24, 0x21	; 33
    1010:	14 da       	rcall	.-3032   	; 0x43a <LCD_Cursor>
    1012:	80 91 02 09 	lds	r24, 0x0902	; 0x800902 <sensors_tripped+0x2>
    1016:	81 30       	cpi	r24, 0x01	; 1
    1018:	31 f4       	brne	.+12     	; 0x1026 <Menu_Tick+0x4ce>
    101a:	86 e1       	ldi	r24, 0x16	; 22
    101c:	0e da       	rcall	.-3044   	; 0x43a <LCD_Cursor>
    101e:	83 e3       	ldi	r24, 0x33	; 51
    1020:	23 da       	rcall	.-3002   	; 0x468 <LCD_WriteData>
    1022:	81 e2       	ldi	r24, 0x21	; 33
    1024:	0a da       	rcall	.-3052   	; 0x43a <LCD_Cursor>
    1026:	80 91 03 09 	lds	r24, 0x0903	; 0x800903 <sensors_tripped+0x3>
    102a:	81 30       	cpi	r24, 0x01	; 1
    102c:	31 f4       	brne	.+12     	; 0x103a <Menu_Tick+0x4e2>
    102e:	88 e1       	ldi	r24, 0x18	; 24
    1030:	04 da       	rcall	.-3064   	; 0x43a <LCD_Cursor>
    1032:	84 e3       	ldi	r24, 0x34	; 52
    1034:	19 da       	rcall	.-3022   	; 0x468 <LCD_WriteData>
    1036:	81 e2       	ldi	r24, 0x21	; 33
    1038:	00 da       	rcall	.-3072   	; 0x43a <LCD_Cursor>
    103a:	80 91 04 09 	lds	r24, 0x0904	; 0x800904 <sensors_tripped+0x4>
    103e:	81 30       	cpi	r24, 0x01	; 1
    1040:	31 f4       	brne	.+12     	; 0x104e <Menu_Tick+0x4f6>
    1042:	8a e1       	ldi	r24, 0x1A	; 26
    1044:	fa d9       	rcall	.-3084   	; 0x43a <LCD_Cursor>
    1046:	85 e3       	ldi	r24, 0x35	; 53
    1048:	0f da       	rcall	.-3042   	; 0x468 <LCD_WriteData>
    104a:	81 e2       	ldi	r24, 0x21	; 33
    104c:	f6 d9       	rcall	.-3092   	; 0x43a <LCD_Cursor>
    104e:	6d d9       	rcall	.-3366   	; 0x32a <GetKeypadKey>
    1050:	80 93 fc 08 	sts	0x08FC, r24	; 0x8008fc <keypad_val>
    1054:	81 34       	cpi	r24, 0x41	; 65
    1056:	a9 f4       	brne	.+42     	; 0x1082 <Menu_Tick+0x52a>
    1058:	93 e0       	ldi	r25, 0x03	; 3
    105a:	90 93 68 09 	sts	0x0968, r25	; 0x800968 <menu_state>
    105e:	10 92 f9 08 	sts	0x08F9, r1	; 0x8008f9 <pass_location>
    1062:	eb e0       	ldi	r30, 0x0B	; 11
    1064:	f2 e0       	ldi	r31, 0x02	; 2
    1066:	10 82       	st	Z, r1
    1068:	11 82       	std	Z+1, r1	; 0x01
    106a:	12 82       	std	Z+2, r1	; 0x02
    106c:	13 82       	std	Z+3, r1	; 0x03
    106e:	e3 e3       	ldi	r30, 0x33	; 51
    1070:	f2 e0       	ldi	r31, 0x02	; 2
    1072:	80 e2       	ldi	r24, 0x20	; 32
    1074:	80 8b       	std	Z+16, r24	; 0x10
    1076:	81 8b       	std	Z+17, r24	; 0x11
    1078:	82 8b       	std	Z+18, r24	; 0x12
    107a:	83 8b       	std	Z+19, r24	; 0x13
    107c:	90 93 05 09 	sts	0x0905, r25	; 0x800905 <mode>
    1080:	03 c0       	rjmp	.+6      	; 0x1088 <Menu_Tick+0x530>
    1082:	8a e0       	ldi	r24, 0x0A	; 10
    1084:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <menu_state>
    1088:	df 91       	pop	r29
    108a:	cf 91       	pop	r28
    108c:	08 95       	ret

0000108e <MenuSecTask>:
    108e:	10 92 68 09 	sts	0x0968, r1	; 0x800968 <menu_state>
    1092:	62 dd       	rcall	.-1340   	; 0xb58 <Menu_Tick>
    1094:	8a e0       	ldi	r24, 0x0A	; 10
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	d0 d5       	rcall	.+2976   	; 0x1c3a <vTaskDelay>
    109a:	fb cf       	rjmp	.-10     	; 0x1092 <MenuSecTask+0x4>

0000109c <MenuSecPulse>:
    109c:	af 92       	push	r10
    109e:	bf 92       	push	r11
    10a0:	cf 92       	push	r12
    10a2:	df 92       	push	r13
    10a4:	ef 92       	push	r14
    10a6:	ff 92       	push	r15
    10a8:	0f 93       	push	r16
    10aa:	a1 2c       	mov	r10, r1
    10ac:	b1 2c       	mov	r11, r1
    10ae:	c1 2c       	mov	r12, r1
    10b0:	d1 2c       	mov	r13, r1
    10b2:	e1 2c       	mov	r14, r1
    10b4:	f1 2c       	mov	r15, r1
    10b6:	08 2f       	mov	r16, r24
    10b8:	20 e0       	ldi	r18, 0x00	; 0
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	45 e5       	ldi	r20, 0x55	; 85
    10be:	50 e0       	ldi	r21, 0x00	; 0
    10c0:	60 ee       	ldi	r22, 0xE0	; 224
    10c2:	72 e0       	ldi	r23, 0x02	; 2
    10c4:	87 e4       	ldi	r24, 0x47	; 71
    10c6:	98 e0       	ldi	r25, 0x08	; 8
    10c8:	40 d3       	rcall	.+1664   	; 0x174a <xTaskGenericCreate>
    10ca:	0f 91       	pop	r16
    10cc:	ff 90       	pop	r15
    10ce:	ef 90       	pop	r14
    10d0:	df 90       	pop	r13
    10d2:	cf 90       	pop	r12
    10d4:	bf 90       	pop	r11
    10d6:	af 90       	pop	r10
    10d8:	08 95       	ret

000010da <Sense_Tick>:
    10da:	80 91 6a 09 	lds	r24, 0x096A	; 0x80096a <sense_state>
    10de:	88 23       	and	r24, r24
    10e0:	19 f0       	breq	.+6      	; 0x10e8 <Sense_Tick+0xe>
    10e2:	82 30       	cpi	r24, 0x02	; 2
    10e4:	21 f0       	breq	.+8      	; 0x10ee <Sense_Tick+0x14>
    10e6:	29 c0       	rjmp	.+82     	; 0x113a <Sense_Tick+0x60>
    10e8:	10 92 fd 08 	sts	0x08FD, r1	; 0x8008fd <sensor_trip>
    10ec:	2d c0       	rjmp	.+90     	; 0x1148 <Sense_Tick+0x6e>
    10ee:	80 91 07 09 	lds	r24, 0x0907	; 0x800907 <received_value>
    10f2:	80 ff       	sbrs	r24, 0
    10f4:	05 c0       	rjmp	.+10     	; 0x1100 <Sense_Tick+0x26>
    10f6:	91 e0       	ldi	r25, 0x01	; 1
    10f8:	90 93 00 09 	sts	0x0900, r25	; 0x800900 <sensors_tripped>
    10fc:	90 93 fd 08 	sts	0x08FD, r25	; 0x8008fd <sensor_trip>
    1100:	81 ff       	sbrs	r24, 1
    1102:	05 c0       	rjmp	.+10     	; 0x110e <Sense_Tick+0x34>
    1104:	21 e0       	ldi	r18, 0x01	; 1
    1106:	20 93 01 09 	sts	0x0901, r18	; 0x800901 <sensors_tripped+0x1>
    110a:	20 93 fd 08 	sts	0x08FD, r18	; 0x8008fd <sensor_trip>
    110e:	82 ff       	sbrs	r24, 2
    1110:	05 c0       	rjmp	.+10     	; 0x111c <Sense_Tick+0x42>
    1112:	21 e0       	ldi	r18, 0x01	; 1
    1114:	20 93 02 09 	sts	0x0902, r18	; 0x800902 <sensors_tripped+0x2>
    1118:	20 93 fd 08 	sts	0x08FD, r18	; 0x8008fd <sensor_trip>
    111c:	83 ff       	sbrs	r24, 3
    111e:	05 c0       	rjmp	.+10     	; 0x112a <Sense_Tick+0x50>
    1120:	21 e0       	ldi	r18, 0x01	; 1
    1122:	20 93 03 09 	sts	0x0903, r18	; 0x800903 <sensors_tripped+0x3>
    1126:	20 93 fd 08 	sts	0x08FD, r18	; 0x8008fd <sensor_trip>
    112a:	84 ff       	sbrs	r24, 4
    112c:	41 c0       	rjmp	.+130    	; 0x11b0 <Sense_Tick+0xd6>
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <sensors_tripped+0x4>
    1134:	80 93 fd 08 	sts	0x08FD, r24	; 0x8008fd <sensor_trip>
    1138:	3b c0       	rjmp	.+118    	; 0x11b0 <Sense_Tick+0xd6>
    113a:	81 30       	cpi	r24, 0x01	; 1
    113c:	c1 f0       	breq	.+48     	; 0x116e <Sense_Tick+0x94>
    113e:	20 f0       	brcs	.+8      	; 0x1148 <Sense_Tick+0x6e>
    1140:	82 30       	cpi	r24, 0x02	; 2
    1142:	09 f0       	breq	.+2      	; 0x1146 <Sense_Tick+0x6c>
    1144:	40 c0       	rjmp	.+128    	; 0x11c6 <Sense_Tick+0xec>
    1146:	34 c0       	rjmp	.+104    	; 0x11b0 <Sense_Tick+0xd6>
    1148:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <ARM_DISARM>
    114c:	81 30       	cpi	r24, 0x01	; 1
    114e:	19 f4       	brne	.+6      	; 0x1156 <Sense_Tick+0x7c>
    1150:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sense_state>
    1154:	08 95       	ret
    1156:	10 92 6a 09 	sts	0x096A, r1	; 0x80096a <sense_state>
    115a:	e0 e0       	ldi	r30, 0x00	; 0
    115c:	f9 e0       	ldi	r31, 0x09	; 9
    115e:	10 82       	st	Z, r1
    1160:	11 82       	std	Z+1, r1	; 0x01
    1162:	12 82       	std	Z+2, r1	; 0x02
    1164:	13 82       	std	Z+3, r1	; 0x03
    1166:	14 82       	std	Z+4, r1	; 0x04
    1168:	10 92 fe 08 	sts	0x08FE, r1	; 0x8008fe <sensor_delay_count>
    116c:	08 95       	ret
    116e:	80 91 fe 08 	lds	r24, 0x08FE	; 0x8008fe <sensor_delay_count>
    1172:	8f 5f       	subi	r24, 0xFF	; 255
    1174:	80 93 fe 08 	sts	0x08FE, r24	; 0x8008fe <sensor_delay_count>
    1178:	90 91 08 09 	lds	r25, 0x0908	; 0x800908 <ARM_DISARM>
    117c:	91 11       	cpse	r25, r1
    117e:	05 c0       	rjmp	.+10     	; 0x118a <Sense_Tick+0xb0>
    1180:	10 92 6a 09 	sts	0x096A, r1	; 0x80096a <sense_state>
    1184:	10 92 fe 08 	sts	0x08FE, r1	; 0x8008fe <sensor_delay_count>
    1188:	08 95       	ret
    118a:	8a 30       	cpi	r24, 0x0A	; 10
    118c:	20 f4       	brcc	.+8      	; 0x1196 <Sense_Tick+0xbc>
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sense_state>
    1194:	08 95       	ret
    1196:	82 e0       	ldi	r24, 0x02	; 2
    1198:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sense_state>
    119c:	e0 e0       	ldi	r30, 0x00	; 0
    119e:	f9 e0       	ldi	r31, 0x09	; 9
    11a0:	10 82       	st	Z, r1
    11a2:	11 82       	std	Z+1, r1	; 0x01
    11a4:	12 82       	std	Z+2, r1	; 0x02
    11a6:	13 82       	std	Z+3, r1	; 0x03
    11a8:	14 82       	std	Z+4, r1	; 0x04
    11aa:	10 92 fe 08 	sts	0x08FE, r1	; 0x8008fe <sensor_delay_count>
    11ae:	08 95       	ret
    11b0:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <ARM_DISARM>
    11b4:	81 30       	cpi	r24, 0x01	; 1
    11b6:	21 f4       	brne	.+8      	; 0x11c0 <Sense_Tick+0xe6>
    11b8:	82 e0       	ldi	r24, 0x02	; 2
    11ba:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sense_state>
    11be:	08 95       	ret
    11c0:	10 92 6a 09 	sts	0x096A, r1	; 0x80096a <sense_state>
    11c4:	08 95       	ret
    11c6:	10 92 6a 09 	sts	0x096A, r1	; 0x80096a <sense_state>
    11ca:	08 95       	ret

000011cc <SenseSecTask>:
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sense_state>
    11d2:	83 df       	rcall	.-250    	; 0x10da <Sense_Tick>
    11d4:	88 ec       	ldi	r24, 0xC8	; 200
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	30 d5       	rcall	.+2656   	; 0x1c3a <vTaskDelay>
    11da:	fb cf       	rjmp	.-10     	; 0x11d2 <SenseSecTask+0x6>

000011dc <SenseSecPulse>:
    11dc:	af 92       	push	r10
    11de:	bf 92       	push	r11
    11e0:	cf 92       	push	r12
    11e2:	df 92       	push	r13
    11e4:	ef 92       	push	r14
    11e6:	ff 92       	push	r15
    11e8:	0f 93       	push	r16
    11ea:	a1 2c       	mov	r10, r1
    11ec:	b1 2c       	mov	r11, r1
    11ee:	c1 2c       	mov	r12, r1
    11f0:	d1 2c       	mov	r13, r1
    11f2:	e1 2c       	mov	r14, r1
    11f4:	f1 2c       	mov	r15, r1
    11f6:	08 2f       	mov	r16, r24
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	45 e5       	ldi	r20, 0x55	; 85
    11fe:	50 e0       	ldi	r21, 0x00	; 0
    1200:	6c ee       	ldi	r22, 0xEC	; 236
    1202:	72 e0       	ldi	r23, 0x02	; 2
    1204:	86 ee       	ldi	r24, 0xE6	; 230
    1206:	98 e0       	ldi	r25, 0x08	; 8
    1208:	a0 d2       	rcall	.+1344   	; 0x174a <xTaskGenericCreate>
    120a:	0f 91       	pop	r16
    120c:	ff 90       	pop	r15
    120e:	ef 90       	pop	r14
    1210:	df 90       	pop	r13
    1212:	cf 90       	pop	r12
    1214:	bf 90       	pop	r11
    1216:	af 90       	pop	r10
    1218:	08 95       	ret

0000121a <Matrix_Tick>:
    121a:	80 91 66 09 	lds	r24, 0x0966	; 0x800966 <matrix_state>
    121e:	81 11       	cpse	r24, r1
    1220:	0b c0       	rjmp	.+22     	; 0x1238 <Matrix_Tick+0x1e>
    1222:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <ARM_DISARM>
    1226:	81 30       	cpi	r24, 0x01	; 1
    1228:	21 f4       	brne	.+8      	; 0x1232 <Matrix_Tick+0x18>
    122a:	87 e8       	ldi	r24, 0x87	; 135
    122c:	91 e0       	ldi	r25, 0x01	; 1
    122e:	85 d9       	rcall	.-3318   	; 0x53a <print_matrix>
    1230:	03 c0       	rjmp	.+6      	; 0x1238 <Matrix_Tick+0x1e>
    1232:	87 e0       	ldi	r24, 0x07	; 7
    1234:	91 e0       	ldi	r25, 0x01	; 1
    1236:	81 d9       	rcall	.-3326   	; 0x53a <print_matrix>
    1238:	10 92 66 09 	sts	0x0966, r1	; 0x800966 <matrix_state>
    123c:	08 95       	ret

0000123e <MatrixSecTask>:
    123e:	10 92 66 09 	sts	0x0966, r1	; 0x800966 <matrix_state>
    1242:	eb df       	rcall	.-42     	; 0x121a <Matrix_Tick>
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	f8 d4       	rcall	.+2544   	; 0x1c3a <vTaskDelay>
    124a:	fb cf       	rjmp	.-10     	; 0x1242 <MatrixSecTask+0x4>

0000124c <MatrixSecPulse>:
    124c:	af 92       	push	r10
    124e:	bf 92       	push	r11
    1250:	cf 92       	push	r12
    1252:	df 92       	push	r13
    1254:	ef 92       	push	r14
    1256:	ff 92       	push	r15
    1258:	0f 93       	push	r16
    125a:	a1 2c       	mov	r10, r1
    125c:	b1 2c       	mov	r11, r1
    125e:	c1 2c       	mov	r12, r1
    1260:	d1 2c       	mov	r13, r1
    1262:	e1 2c       	mov	r14, r1
    1264:	f1 2c       	mov	r15, r1
    1266:	08 2f       	mov	r16, r24
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	45 e5       	ldi	r20, 0x55	; 85
    126e:	50 e0       	ldi	r21, 0x00	; 0
    1270:	69 ef       	ldi	r22, 0xF9	; 249
    1272:	72 e0       	ldi	r23, 0x02	; 2
    1274:	8f e1       	ldi	r24, 0x1F	; 31
    1276:	99 e0       	ldi	r25, 0x09	; 9
    1278:	68 d2       	rcall	.+1232   	; 0x174a <xTaskGenericCreate>
    127a:	0f 91       	pop	r16
    127c:	ff 90       	pop	r15
    127e:	ef 90       	pop	r14
    1280:	df 90       	pop	r13
    1282:	cf 90       	pop	r12
    1284:	bf 90       	pop	r11
    1286:	af 90       	pop	r10
    1288:	08 95       	ret

0000128a <Buzz_Tick>:
}

void Buzz_Tick(){
	//Actions
	switch(buzzer_state){
    128a:	80 91 6b 09 	lds	r24, 0x096B	; 0x80096b <buzzer_state>
    128e:	82 30       	cpi	r24, 0x02	; 2
    1290:	51 f0       	breq	.+20     	; 0x12a6 <Buzz_Tick+0x1c>
    1292:	83 30       	cpi	r24, 0x03	; 3
    1294:	79 f0       	breq	.+30     	; 0x12b4 <Buzz_Tick+0x2a>
    1296:	81 30       	cpi	r24, 0x01	; 1
    1298:	99 f4       	brne	.+38     	; 0x12c0 <Buzz_Tick+0x36>
		case buzz_wait:
		break;

		case no_buzz:
			++buzzer_counter;
    129a:	80 91 f8 08 	lds	r24, 0x08F8	; 0x8008f8 <buzzer_counter>
    129e:	8f 5f       	subi	r24, 0xFF	; 255
    12a0:	80 93 f8 08 	sts	0x08F8, r24	; 0x8008f8 <buzzer_counter>
    12a4:	2f c0       	rjmp	.+94     	; 0x1304 <Buzz_Tick+0x7a>
		break;

		case buzz_high:
			++buzzer_counter;
    12a6:	80 91 f8 08 	lds	r24, 0x08F8	; 0x8008f8 <buzzer_counter>
    12aa:	8f 5f       	subi	r24, 0xFF	; 255
    12ac:	80 93 f8 08 	sts	0x08F8, r24	; 0x8008f8 <buzzer_counter>
			PORTB = PORTB|0x10;  //set PIN B4 to 1
    12b0:	2c 9a       	sbi	0x05, 4	; 5
		break;
    12b2:	06 c0       	rjmp	.+12     	; 0x12c0 <Buzz_Tick+0x36>

		case buzz_low:
			++buzzer_counter;    //set PIN B4 to 0
    12b4:	80 91 f8 08 	lds	r24, 0x08F8	; 0x8008f8 <buzzer_counter>
    12b8:	8f 5f       	subi	r24, 0xFF	; 255
    12ba:	80 93 f8 08 	sts	0x08F8, r24	; 0x8008f8 <buzzer_counter>
			PORTB = PORTB & 0xEF; 
    12be:	2c 98       	cbi	0x05, 4	; 5

		default:
		break;
	}
	//Transitions
	switch(buzzer_state){
    12c0:	80 91 6b 09 	lds	r24, 0x096B	; 0x80096b <buzzer_state>
    12c4:	81 30       	cpi	r24, 0x01	; 1
    12c6:	f1 f0       	breq	.+60     	; 0x1304 <Buzz_Tick+0x7a>
    12c8:	28 f0       	brcs	.+10     	; 0x12d4 <Buzz_Tick+0x4a>
    12ca:	82 30       	cpi	r24, 0x02	; 2
    12cc:	71 f1       	breq	.+92     	; 0x132a <Buzz_Tick+0xa0>
    12ce:	83 30       	cpi	r24, 0x03	; 3
    12d0:	c1 f1       	breq	.+112    	; 0x1342 <Buzz_Tick+0xb8>
    12d2:	4a c0       	rjmp	.+148    	; 0x1368 <Buzz_Tick+0xde>
		case buzz_wait:
		if(ARM_DISARM == 0){
    12d4:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <ARM_DISARM>
    12d8:	88 23       	and	r24, r24
    12da:	09 f4       	brne	.+2      	; 0x12de <Buzz_Tick+0x54>
    12dc:	47 c0       	rjmp	.+142    	; 0x136c <Buzz_Tick+0xe2>
			buzzer_state = buzz_wait;
		}
		else if(sensor_trip == 1 && ARM_DISARM == 1){
    12de:	90 91 fd 08 	lds	r25, 0x08FD	; 0x8008fd <sensor_trip>
    12e2:	91 30       	cpi	r25, 0x01	; 1
    12e4:	41 f4       	brne	.+16     	; 0x12f6 <Buzz_Tick+0x6c>
    12e6:	81 30       	cpi	r24, 0x01	; 1
    12e8:	09 f0       	breq	.+2      	; 0x12ec <Buzz_Tick+0x62>
    12ea:	40 c0       	rjmp	.+128    	; 0x136c <Buzz_Tick+0xe2>
			buzzer_state = no_buzz;
    12ec:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <buzzer_state>
			buzzer_counter = 0; //initialize counter
    12f0:	10 92 f8 08 	sts	0x08F8, r1	; 0x8008f8 <buzzer_counter>
    12f4:	08 95       	ret
		}
		else if(sensor_trip == 0 && ARM_DISARM == 1){
    12f6:	91 11       	cpse	r25, r1
    12f8:	39 c0       	rjmp	.+114    	; 0x136c <Buzz_Tick+0xe2>
    12fa:	81 30       	cpi	r24, 0x01	; 1
    12fc:	b9 f5       	brne	.+110    	; 0x136c <Buzz_Tick+0xe2>
			buzzer_state = buzz_wait;
			buzzer_counter = 0; //initialize counter
    12fe:	10 92 f8 08 	sts	0x08F8, r1	; 0x8008f8 <buzzer_counter>
    1302:	08 95       	ret
		}
		break;

		case no_buzz:            //if disarmed no buzz go back
		if(ARM_DISARM == 0){
    1304:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <ARM_DISARM>
    1308:	81 11       	cpse	r24, r1
    130a:	03 c0       	rjmp	.+6      	; 0x1312 <Buzz_Tick+0x88>
			buzzer_state = buzz_wait;
    130c:	10 92 6b 09 	sts	0x096B, r1	; 0x80096b <buzzer_state>
    1310:	08 95       	ret
		}						//if counter less than off period stay
		else if(buzzer_counter < buzz_off_period){
    1312:	90 91 f8 08 	lds	r25, 0x08F8	; 0x8008f8 <buzzer_counter>
    1316:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <buzz_off_period>
    131a:	98 17       	cp	r25, r24
    131c:	38 f1       	brcs	.+78     	; 0x136c <Buzz_Tick+0xe2>
			buzzer_state = no_buzz;
		}
		else{					//else go to buzzer high
			buzzer_state = buzz_high;
    131e:	82 e0       	ldi	r24, 0x02	; 2
    1320:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <buzzer_state>
			buzzer_counter = 0; //initialize counter
    1324:	10 92 f8 08 	sts	0x08F8, r1	; 0x8008f8 <buzzer_counter>
    1328:	08 95       	ret
		}
		break;

		case buzz_high:
		if(buzzer_counter < buzzer_hign_period){
    132a:	90 91 f8 08 	lds	r25, 0x08F8	; 0x8008f8 <buzzer_counter>
    132e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <buzzer_hign_period>
    1332:	98 17       	cp	r25, r24
    1334:	d8 f0       	brcs	.+54     	; 0x136c <Buzz_Tick+0xe2>
			buzzer_state = buzz_high;
		}
		else{					//else go to buzzer high
			buzzer_state = buzz_low;
    1336:	83 e0       	ldi	r24, 0x03	; 3
    1338:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <buzzer_state>
			buzzer_counter = 0; //initialize counter
    133c:	10 92 f8 08 	sts	0x08F8, r1	; 0x8008f8 <buzzer_counter>
    1340:	08 95       	ret
		}
		break;

		case buzz_low:
		if(ARM_DISARM == 0){    //if system is disarmed turn off alarm
    1342:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <ARM_DISARM>
    1346:	81 11       	cpse	r24, r1
    1348:	03 c0       	rjmp	.+6      	; 0x1350 <Buzz_Tick+0xc6>
			buzzer_state = buzz_wait;
    134a:	10 92 6b 09 	sts	0x096B, r1	; 0x80096b <buzzer_state>
    134e:	08 95       	ret
		}
		else if(buzzer_counter < buzzer_low_period){
    1350:	90 91 f8 08 	lds	r25, 0x08F8	; 0x8008f8 <buzzer_counter>
    1354:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <buzzer_low_period>
    1358:	98 17       	cp	r25, r24
    135a:	40 f0       	brcs	.+16     	; 0x136c <Buzz_Tick+0xe2>
			buzzer_state = buzz_low;
		}
		else{					//else go to buzzer high
			buzzer_state = buzz_high;
    135c:	82 e0       	ldi	r24, 0x02	; 2
    135e:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <buzzer_state>
			buzzer_counter = 0; //initialize counter
    1362:	10 92 f8 08 	sts	0x08F8, r1	; 0x8008f8 <buzzer_counter>
    1366:	08 95       	ret
		}
		break;

		default:
		buzzer_state = buzz_wait;
    1368:	10 92 6b 09 	sts	0x096B, r1	; 0x80096b <buzzer_state>
    136c:	08 95       	ret

0000136e <BuzzSecTask>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//buzz when sensor tripped
enum BUZZERState {buzz_wait, no_buzz, buzz_high, buzz_low} buzzer_state;

void buzz_Init(){
	buzzer_state = buzz_wait;
    136e:	10 92 6b 09 	sts	0x096B, r1	; 0x80096b <buzzer_state>
{
	buzz_Init();
	for(;;)
	{
		Buzz_Tick();
		vTaskDelay(1);
    1372:	8b df       	rcall	.-234    	; 0x128a <Buzz_Tick>
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	60 d4       	rcall	.+2240   	; 0x1c3a <vTaskDelay>
    137a:	fb cf       	rjmp	.-10     	; 0x1372 <BuzzSecTask+0x4>

0000137c <BuzzSecPulse>:
	}
}

void BuzzSecPulse(unsigned portBASE_TYPE Priority)
{
    137c:	af 92       	push	r10
    137e:	bf 92       	push	r11
    1380:	cf 92       	push	r12
    1382:	df 92       	push	r13
    1384:	ef 92       	push	r14
    1386:	ff 92       	push	r15
    1388:	0f 93       	push	r16
	xTaskCreate(BuzzSecTask, (signed portCHAR *)"BuzzSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
    138a:	a1 2c       	mov	r10, r1
    138c:	b1 2c       	mov	r11, r1
    138e:	c1 2c       	mov	r12, r1
    1390:	d1 2c       	mov	r13, r1
    1392:	e1 2c       	mov	r14, r1
    1394:	f1 2c       	mov	r15, r1
    1396:	08 2f       	mov	r16, r24
    1398:	20 e0       	ldi	r18, 0x00	; 0
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	45 e5       	ldi	r20, 0x55	; 85
    139e:	50 e0       	ldi	r21, 0x00	; 0
    13a0:	67 e0       	ldi	r22, 0x07	; 7
    13a2:	73 e0       	ldi	r23, 0x03	; 3
    13a4:	87 eb       	ldi	r24, 0xB7	; 183
    13a6:	99 e0       	ldi	r25, 0x09	; 9
    13a8:	d0 d1       	rcall	.+928    	; 0x174a <xTaskGenericCreate>
}
    13aa:	0f 91       	pop	r16
    13ac:	ff 90       	pop	r15
    13ae:	ef 90       	pop	r14
    13b0:	df 90       	pop	r13
    13b2:	cf 90       	pop	r12
    13b4:	bf 90       	pop	r11
    13b6:	af 90       	pop	r10
    13b8:	08 95       	ret

000013ba <main>:



///////////////////////////////////////////////////////////////////////////////////////////////////////////////
int main(void) 
{ 
    13ba:	cf 93       	push	r28
    13bc:	df 93       	push	r29
   DDRA = 0xF0; PORTA = 0x0F; // PC7..4 outputs init 0s, PC3..0 inputs init 1s FOR KEYPAD
    13be:	80 ef       	ldi	r24, 0xF0	; 240
    13c0:	81 b9       	out	0x01, r24	; 1
    13c2:	8f e0       	ldi	r24, 0x0F	; 15
    13c4:	82 b9       	out	0x02, r24	; 2
   DDRC = 0xFF; PORTC = 0x00; // set as output for lcd
    13c6:	8f ef       	ldi	r24, 0xFF	; 255
    13c8:	87 b9       	out	0x07, r24	; 7
    13ca:	18 b8       	out	0x08, r1	; 8
   DDRD = 0xFF; PORTD = 0x00; // LCD control lines
    13cc:	8a b9       	out	0x0a, r24	; 10
    13ce:	1b b8       	out	0x0b, r1	; 11
   DDRB = 0xFF; PORTB = 0x00;
    13d0:	84 b9       	out	0x04, r24	; 4
    13d2:	15 b8       	out	0x05, r1	; 5
  //eeprom_write_byte(0,1);  //address 0
  //eeprom_write_byte(1,2);  //address 1
  //eeprom_write_byte(2,3);  //address 2
  //eeprom_write_byte(3,4);  //address 3

  current_pass[0] = eeprom_read_byte(0);
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	8c d5       	rcall	.+2840   	; 0x1ef2 <eeprom_read_byte>
    13da:	cf e0       	ldi	r28, 0x0F	; 15
    13dc:	d2 e0       	ldi	r29, 0x02	; 2
    13de:	88 83       	st	Y, r24
  current_pass[1] = eeprom_read_byte(1);
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	86 d5       	rcall	.+2828   	; 0x1ef2 <eeprom_read_byte>
  current_pass[2] = eeprom_read_byte(2);
    13e6:	89 83       	std	Y+1, r24	; 0x01
    13e8:	82 e0       	ldi	r24, 0x02	; 2
    13ea:	90 e0       	ldi	r25, 0x00	; 0
  current_pass[3] = eeprom_read_byte(3);
    13ec:	82 d5       	rcall	.+2820   	; 0x1ef2 <eeprom_read_byte>
    13ee:	8a 83       	std	Y+2, r24	; 0x02
    13f0:	83 e0       	ldi	r24, 0x03	; 3
    13f2:	90 e0       	ldi	r25, 0x00	; 0

  unsigned char temp = eeprom_read_byte(0);

   //LCD init
   LCD_init();
    13f4:	7e d5       	rcall	.+2812   	; 0x1ef2 <eeprom_read_byte>
    13f6:	8b 83       	std	Y+3, r24	; 0x03
   //init USART
   initUSART(0); //used to communicate to CHIP 0
    13f8:	28 d8       	rcall	.-4016   	; 0x44a <LCD_init>
    13fa:	80 e0       	ldi	r24, 0x00	; 0
   initUSART(1); //used to communicate via bluetooth  
    13fc:	0e 94 32 01 	call	0x264	; 0x264 <initUSART>
  
  
   //Start Tasks  
   TransSecPulse(1);
   RecSecPulse(1);
    1400:	81 e0       	ldi	r24, 0x01	; 1
   MatrixSecPulse(1);
    1402:	0e 94 32 01 	call	0x264	; 0x264 <initUSART>
   MenuSecPulse(1);
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	48 db       	rcall	.-2416   	; 0xa9a <TransSecPulse>
   SenseSecPulse(1);
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	86 db       	rcall	.-2292   	; 0xb1a <RecSecPulse>
    140e:	81 e0       	ldi	r24, 0x01	; 1
   BuzzSecPulse(1);
    1410:	1d df       	rcall	.-454    	; 0x124c <MatrixSecPulse>
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	43 de       	rcall	.-890    	; 0x109c <MenuSecPulse>
    //RunSchedular 
   vTaskStartScheduler(); 
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	e1 de       	rcall	.-574    	; 0x11dc <SenseSecPulse>
 
   return 0; 
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	af df       	rcall	.-162    	; 0x137c <BuzzSecPulse>
    141e:	96 d2       	rcall	.+1324   	; 0x194c <vTaskStartScheduler>
    1420:	80 e0       	ldi	r24, 0x00	; 0
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	df 91       	pop	r29
    1426:	cf 91       	pop	r28
    1428:	08 95       	ret

0000142a <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    142a:	31 e1       	ldi	r19, 0x11	; 17
    142c:	fc 01       	movw	r30, r24
    142e:	30 83       	st	Z, r19
    1430:	31 97       	sbiw	r30, 0x01	; 1
    1432:	22 e2       	ldi	r18, 0x22	; 34
    1434:	20 83       	st	Z, r18
    1436:	31 97       	sbiw	r30, 0x01	; 1
    1438:	a3 e3       	ldi	r26, 0x33	; 51
    143a:	a0 83       	st	Z, r26
    143c:	31 97       	sbiw	r30, 0x01	; 1
    143e:	60 83       	st	Z, r22
    1440:	31 97       	sbiw	r30, 0x01	; 1
    1442:	70 83       	st	Z, r23
    1444:	31 97       	sbiw	r30, 0x01	; 1
    1446:	10 82       	st	Z, r1
    1448:	31 97       	sbiw	r30, 0x01	; 1
    144a:	60 e8       	ldi	r22, 0x80	; 128
    144c:	60 83       	st	Z, r22
    144e:	31 97       	sbiw	r30, 0x01	; 1
    1450:	10 82       	st	Z, r1
    1452:	31 97       	sbiw	r30, 0x01	; 1
    1454:	62 e0       	ldi	r22, 0x02	; 2
    1456:	60 83       	st	Z, r22
    1458:	31 97       	sbiw	r30, 0x01	; 1
    145a:	63 e0       	ldi	r22, 0x03	; 3
    145c:	60 83       	st	Z, r22
    145e:	31 97       	sbiw	r30, 0x01	; 1
    1460:	64 e0       	ldi	r22, 0x04	; 4
    1462:	60 83       	st	Z, r22
    1464:	31 97       	sbiw	r30, 0x01	; 1
    1466:	65 e0       	ldi	r22, 0x05	; 5
    1468:	60 83       	st	Z, r22
    146a:	31 97       	sbiw	r30, 0x01	; 1
    146c:	66 e0       	ldi	r22, 0x06	; 6
    146e:	60 83       	st	Z, r22
    1470:	31 97       	sbiw	r30, 0x01	; 1
    1472:	67 e0       	ldi	r22, 0x07	; 7
    1474:	60 83       	st	Z, r22
    1476:	31 97       	sbiw	r30, 0x01	; 1
    1478:	68 e0       	ldi	r22, 0x08	; 8
    147a:	60 83       	st	Z, r22
    147c:	31 97       	sbiw	r30, 0x01	; 1
    147e:	69 e0       	ldi	r22, 0x09	; 9
    1480:	60 83       	st	Z, r22
    1482:	31 97       	sbiw	r30, 0x01	; 1
    1484:	60 e1       	ldi	r22, 0x10	; 16
    1486:	60 83       	st	Z, r22
    1488:	31 97       	sbiw	r30, 0x01	; 1
    148a:	30 83       	st	Z, r19
    148c:	31 97       	sbiw	r30, 0x01	; 1
    148e:	32 e1       	ldi	r19, 0x12	; 18
    1490:	30 83       	st	Z, r19
    1492:	31 97       	sbiw	r30, 0x01	; 1
    1494:	33 e1       	ldi	r19, 0x13	; 19
    1496:	30 83       	st	Z, r19
    1498:	31 97       	sbiw	r30, 0x01	; 1
    149a:	34 e1       	ldi	r19, 0x14	; 20
    149c:	30 83       	st	Z, r19
    149e:	31 97       	sbiw	r30, 0x01	; 1
    14a0:	35 e1       	ldi	r19, 0x15	; 21
    14a2:	30 83       	st	Z, r19
    14a4:	31 97       	sbiw	r30, 0x01	; 1
    14a6:	36 e1       	ldi	r19, 0x16	; 22
    14a8:	30 83       	st	Z, r19
    14aa:	31 97       	sbiw	r30, 0x01	; 1
    14ac:	37 e1       	ldi	r19, 0x17	; 23
    14ae:	30 83       	st	Z, r19
    14b0:	31 97       	sbiw	r30, 0x01	; 1
    14b2:	38 e1       	ldi	r19, 0x18	; 24
    14b4:	30 83       	st	Z, r19
    14b6:	31 97       	sbiw	r30, 0x01	; 1
    14b8:	39 e1       	ldi	r19, 0x19	; 25
    14ba:	30 83       	st	Z, r19
    14bc:	31 97       	sbiw	r30, 0x01	; 1
    14be:	30 e2       	ldi	r19, 0x20	; 32
    14c0:	30 83       	st	Z, r19
    14c2:	31 97       	sbiw	r30, 0x01	; 1
    14c4:	31 e2       	ldi	r19, 0x21	; 33
    14c6:	30 83       	st	Z, r19
    14c8:	31 97       	sbiw	r30, 0x01	; 1
    14ca:	20 83       	st	Z, r18
    14cc:	31 97       	sbiw	r30, 0x01	; 1
    14ce:	23 e2       	ldi	r18, 0x23	; 35
    14d0:	20 83       	st	Z, r18
    14d2:	31 97       	sbiw	r30, 0x01	; 1
    14d4:	40 83       	st	Z, r20
    14d6:	31 97       	sbiw	r30, 0x01	; 1
    14d8:	50 83       	st	Z, r21
    14da:	31 97       	sbiw	r30, 0x01	; 1
    14dc:	26 e2       	ldi	r18, 0x26	; 38
    14de:	20 83       	st	Z, r18
    14e0:	31 97       	sbiw	r30, 0x01	; 1
    14e2:	27 e2       	ldi	r18, 0x27	; 39
    14e4:	20 83       	st	Z, r18
    14e6:	31 97       	sbiw	r30, 0x01	; 1
    14e8:	28 e2       	ldi	r18, 0x28	; 40
    14ea:	20 83       	st	Z, r18
    14ec:	31 97       	sbiw	r30, 0x01	; 1
    14ee:	29 e2       	ldi	r18, 0x29	; 41
    14f0:	20 83       	st	Z, r18
    14f2:	31 97       	sbiw	r30, 0x01	; 1
    14f4:	20 e3       	ldi	r18, 0x30	; 48
    14f6:	20 83       	st	Z, r18
    14f8:	31 97       	sbiw	r30, 0x01	; 1
    14fa:	21 e3       	ldi	r18, 0x31	; 49
    14fc:	20 83       	st	Z, r18
    14fe:	86 97       	sbiw	r24, 0x26	; 38
    1500:	08 95       	ret

00001502 <xPortStartScheduler>:
    1502:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1506:	8c e7       	ldi	r24, 0x7C	; 124
    1508:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    150c:	8b e0       	ldi	r24, 0x0B	; 11
    150e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1512:	ef e6       	ldi	r30, 0x6F	; 111
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	82 60       	ori	r24, 0x02	; 2
    151a:	80 83       	st	Z, r24
    151c:	a0 91 63 09 	lds	r26, 0x0963	; 0x800963 <pxCurrentTCB>
    1520:	b0 91 64 09 	lds	r27, 0x0964	; 0x800964 <pxCurrentTCB+0x1>
    1524:	cd 91       	ld	r28, X+
    1526:	cd bf       	out	0x3d, r28	; 61
    1528:	dd 91       	ld	r29, X+
    152a:	de bf       	out	0x3e, r29	; 62
    152c:	ff 91       	pop	r31
    152e:	ef 91       	pop	r30
    1530:	df 91       	pop	r29
    1532:	cf 91       	pop	r28
    1534:	bf 91       	pop	r27
    1536:	af 91       	pop	r26
    1538:	9f 91       	pop	r25
    153a:	8f 91       	pop	r24
    153c:	7f 91       	pop	r23
    153e:	6f 91       	pop	r22
    1540:	5f 91       	pop	r21
    1542:	4f 91       	pop	r20
    1544:	3f 91       	pop	r19
    1546:	2f 91       	pop	r18
    1548:	1f 91       	pop	r17
    154a:	0f 91       	pop	r16
    154c:	ff 90       	pop	r15
    154e:	ef 90       	pop	r14
    1550:	df 90       	pop	r13
    1552:	cf 90       	pop	r12
    1554:	bf 90       	pop	r11
    1556:	af 90       	pop	r10
    1558:	9f 90       	pop	r9
    155a:	8f 90       	pop	r8
    155c:	7f 90       	pop	r7
    155e:	6f 90       	pop	r6
    1560:	5f 90       	pop	r5
    1562:	4f 90       	pop	r4
    1564:	3f 90       	pop	r3
    1566:	2f 90       	pop	r2
    1568:	1f 90       	pop	r1
    156a:	0f 90       	pop	r0
    156c:	0f be       	out	0x3f, r0	; 63
    156e:	0f 90       	pop	r0
    1570:	08 95       	ret
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	08 95       	ret

00001576 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    1576:	0f 92       	push	r0
    1578:	0f b6       	in	r0, 0x3f	; 63
    157a:	f8 94       	cli
    157c:	0f 92       	push	r0
    157e:	1f 92       	push	r1
    1580:	11 24       	eor	r1, r1
    1582:	2f 92       	push	r2
    1584:	3f 92       	push	r3
    1586:	4f 92       	push	r4
    1588:	5f 92       	push	r5
    158a:	6f 92       	push	r6
    158c:	7f 92       	push	r7
    158e:	8f 92       	push	r8
    1590:	9f 92       	push	r9
    1592:	af 92       	push	r10
    1594:	bf 92       	push	r11
    1596:	cf 92       	push	r12
    1598:	df 92       	push	r13
    159a:	ef 92       	push	r14
    159c:	ff 92       	push	r15
    159e:	0f 93       	push	r16
    15a0:	1f 93       	push	r17
    15a2:	2f 93       	push	r18
    15a4:	3f 93       	push	r19
    15a6:	4f 93       	push	r20
    15a8:	5f 93       	push	r21
    15aa:	6f 93       	push	r22
    15ac:	7f 93       	push	r23
    15ae:	8f 93       	push	r24
    15b0:	9f 93       	push	r25
    15b2:	af 93       	push	r26
    15b4:	bf 93       	push	r27
    15b6:	cf 93       	push	r28
    15b8:	df 93       	push	r29
    15ba:	ef 93       	push	r30
    15bc:	ff 93       	push	r31
    15be:	a0 91 63 09 	lds	r26, 0x0963	; 0x800963 <pxCurrentTCB>
    15c2:	b0 91 64 09 	lds	r27, 0x0964	; 0x800964 <pxCurrentTCB+0x1>
    15c6:	0d b6       	in	r0, 0x3d	; 61
    15c8:	0d 92       	st	X+, r0
    15ca:	0e b6       	in	r0, 0x3e	; 62
	vTaskSwitchContext();
    15cc:	0d 92       	st	X+, r0
	portRESTORE_CONTEXT();
    15ce:	8a d3       	rcall	.+1812   	; 0x1ce4 <vTaskSwitchContext>
    15d0:	a0 91 63 09 	lds	r26, 0x0963	; 0x800963 <pxCurrentTCB>
    15d4:	b0 91 64 09 	lds	r27, 0x0964	; 0x800964 <pxCurrentTCB+0x1>
    15d8:	cd 91       	ld	r28, X+
    15da:	cd bf       	out	0x3d, r28	; 61
    15dc:	dd 91       	ld	r29, X+
    15de:	de bf       	out	0x3e, r29	; 62
    15e0:	ff 91       	pop	r31
    15e2:	ef 91       	pop	r30
    15e4:	df 91       	pop	r29
    15e6:	cf 91       	pop	r28
    15e8:	bf 91       	pop	r27
    15ea:	af 91       	pop	r26
    15ec:	9f 91       	pop	r25
    15ee:	8f 91       	pop	r24
    15f0:	7f 91       	pop	r23
    15f2:	6f 91       	pop	r22
    15f4:	5f 91       	pop	r21
    15f6:	4f 91       	pop	r20
    15f8:	3f 91       	pop	r19
    15fa:	2f 91       	pop	r18
    15fc:	1f 91       	pop	r17
    15fe:	0f 91       	pop	r16
    1600:	ff 90       	pop	r15
    1602:	ef 90       	pop	r14
    1604:	df 90       	pop	r13
    1606:	cf 90       	pop	r12
    1608:	bf 90       	pop	r11
    160a:	af 90       	pop	r10
    160c:	9f 90       	pop	r9
    160e:	8f 90       	pop	r8
    1610:	7f 90       	pop	r7
    1612:	6f 90       	pop	r6
    1614:	5f 90       	pop	r5
    1616:	4f 90       	pop	r4
    1618:	3f 90       	pop	r3
    161a:	2f 90       	pop	r2
    161c:	1f 90       	pop	r1
    161e:	0f 90       	pop	r0
    1620:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
    1622:	0f 90       	pop	r0
    1624:	08 95       	ret

00001626 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    1626:	0f 92       	push	r0
    1628:	0f b6       	in	r0, 0x3f	; 63
    162a:	f8 94       	cli
    162c:	0f 92       	push	r0
    162e:	1f 92       	push	r1
    1630:	11 24       	eor	r1, r1
    1632:	2f 92       	push	r2
    1634:	3f 92       	push	r3
    1636:	4f 92       	push	r4
    1638:	5f 92       	push	r5
    163a:	6f 92       	push	r6
    163c:	7f 92       	push	r7
    163e:	8f 92       	push	r8
    1640:	9f 92       	push	r9
    1642:	af 92       	push	r10
    1644:	bf 92       	push	r11
    1646:	cf 92       	push	r12
    1648:	df 92       	push	r13
    164a:	ef 92       	push	r14
    164c:	ff 92       	push	r15
    164e:	0f 93       	push	r16
    1650:	1f 93       	push	r17
    1652:	2f 93       	push	r18
    1654:	3f 93       	push	r19
    1656:	4f 93       	push	r20
    1658:	5f 93       	push	r21
    165a:	6f 93       	push	r22
    165c:	7f 93       	push	r23
    165e:	8f 93       	push	r24
    1660:	9f 93       	push	r25
    1662:	af 93       	push	r26
    1664:	bf 93       	push	r27
    1666:	cf 93       	push	r28
    1668:	df 93       	push	r29
    166a:	ef 93       	push	r30
    166c:	ff 93       	push	r31
    166e:	a0 91 63 09 	lds	r26, 0x0963	; 0x800963 <pxCurrentTCB>
    1672:	b0 91 64 09 	lds	r27, 0x0964	; 0x800964 <pxCurrentTCB+0x1>
    1676:	0d b6       	in	r0, 0x3d	; 61
    1678:	0d 92       	st	X+, r0
    167a:	0e b6       	in	r0, 0x3e	; 62
	vTaskIncrementTick();
	vTaskSwitchContext();
    167c:	0d 92       	st	X+, r0
    167e:	95 d1       	rcall	.+810    	; 0x19aa <vTaskIncrementTick>
	portRESTORE_CONTEXT();
    1680:	31 d3       	rcall	.+1634   	; 0x1ce4 <vTaskSwitchContext>
    1682:	a0 91 63 09 	lds	r26, 0x0963	; 0x800963 <pxCurrentTCB>
    1686:	b0 91 64 09 	lds	r27, 0x0964	; 0x800964 <pxCurrentTCB+0x1>
    168a:	cd 91       	ld	r28, X+
    168c:	cd bf       	out	0x3d, r28	; 61
    168e:	dd 91       	ld	r29, X+
    1690:	de bf       	out	0x3e, r29	; 62
    1692:	ff 91       	pop	r31
    1694:	ef 91       	pop	r30
    1696:	df 91       	pop	r29
    1698:	cf 91       	pop	r28
    169a:	bf 91       	pop	r27
    169c:	af 91       	pop	r26
    169e:	9f 91       	pop	r25
    16a0:	8f 91       	pop	r24
    16a2:	7f 91       	pop	r23
    16a4:	6f 91       	pop	r22
    16a6:	5f 91       	pop	r21
    16a8:	4f 91       	pop	r20
    16aa:	3f 91       	pop	r19
    16ac:	2f 91       	pop	r18
    16ae:	1f 91       	pop	r17
    16b0:	0f 91       	pop	r16
    16b2:	ff 90       	pop	r15
    16b4:	ef 90       	pop	r14
    16b6:	df 90       	pop	r13
    16b8:	cf 90       	pop	r12
    16ba:	bf 90       	pop	r11
    16bc:	af 90       	pop	r10
    16be:	9f 90       	pop	r9
    16c0:	8f 90       	pop	r8
    16c2:	7f 90       	pop	r7
    16c4:	6f 90       	pop	r6
    16c6:	5f 90       	pop	r5
    16c8:	4f 90       	pop	r4
    16ca:	3f 90       	pop	r3
    16cc:	2f 90       	pop	r2
    16ce:	1f 90       	pop	r1
    16d0:	0f 90       	pop	r0
    16d2:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
    16d4:	0f 90       	pop	r0
    16d6:	08 95       	ret

000016d8 <__vector_13>:
}
    16d8:	a6 df       	rcall	.-180    	; 0x1626 <vPortYieldFromTick>
    16da:	18 95       	reti

000016dc <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
    16dc:	cf 93       	push	r28
    16de:	df 93       	push	r29
    16e0:	ec 01       	movw	r28, r24
    16e2:	e0 91 63 09 	lds	r30, 0x0963	; 0x800963 <pxCurrentTCB>
    16e6:	f0 91 64 09 	lds	r31, 0x0964	; 0x800964 <pxCurrentTCB+0x1>
    16ea:	93 83       	std	Z+3, r25	; 0x03
    16ec:	82 83       	std	Z+2, r24	; 0x02
    16ee:	80 91 13 09 	lds	r24, 0x0913	; 0x800913 <xTickCount>
    16f2:	90 91 14 09 	lds	r25, 0x0914	; 0x800914 <xTickCount+0x1>
    16f6:	c8 17       	cp	r28, r24
    16f8:	d9 07       	cpc	r29, r25
    16fa:	68 f4       	brcc	.+26     	; 0x1716 <prvAddCurrentTaskToDelayedList+0x3a>
    16fc:	60 91 63 09 	lds	r22, 0x0963	; 0x800963 <pxCurrentTCB>
    1700:	70 91 64 09 	lds	r23, 0x0964	; 0x800964 <pxCurrentTCB+0x1>
    1704:	80 91 29 09 	lds	r24, 0x0929	; 0x800929 <pxOverflowDelayedTaskList>
    1708:	90 91 2a 09 	lds	r25, 0x092A	; 0x80092a <pxOverflowDelayedTaskList+0x1>
    170c:	6e 5f       	subi	r22, 0xFE	; 254
    170e:	7f 4f       	sbci	r23, 0xFF	; 255
    1710:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <vListInsert>
    1714:	17 c0       	rjmp	.+46     	; 0x1744 <prvAddCurrentTaskToDelayedList+0x68>
    1716:	60 91 63 09 	lds	r22, 0x0963	; 0x800963 <pxCurrentTCB>
    171a:	70 91 64 09 	lds	r23, 0x0964	; 0x800964 <pxCurrentTCB+0x1>
    171e:	80 91 2b 09 	lds	r24, 0x092B	; 0x80092b <pxDelayedTaskList>
    1722:	90 91 2c 09 	lds	r25, 0x092C	; 0x80092c <pxDelayedTaskList+0x1>
    1726:	6e 5f       	subi	r22, 0xFE	; 254
    1728:	7f 4f       	sbci	r23, 0xFF	; 255
    172a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <vListInsert>
    172e:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <xNextTaskUnblockTime>
    1732:	90 91 54 02 	lds	r25, 0x0254	; 0x800254 <xNextTaskUnblockTime+0x1>
    1736:	c8 17       	cp	r28, r24
    1738:	d9 07       	cpc	r29, r25
    173a:	20 f4       	brcc	.+8      	; 0x1744 <prvAddCurrentTaskToDelayedList+0x68>
    173c:	d0 93 54 02 	sts	0x0254, r29	; 0x800254 <xNextTaskUnblockTime+0x1>
    1740:	c0 93 53 02 	sts	0x0253, r28	; 0x800253 <xNextTaskUnblockTime>
    1744:	df 91       	pop	r29
    1746:	cf 91       	pop	r28
    1748:	08 95       	ret

0000174a <xTaskGenericCreate>:
    174a:	4f 92       	push	r4
    174c:	5f 92       	push	r5
    174e:	6f 92       	push	r6
    1750:	7f 92       	push	r7
    1752:	8f 92       	push	r8
    1754:	9f 92       	push	r9
    1756:	af 92       	push	r10
    1758:	bf 92       	push	r11
    175a:	cf 92       	push	r12
    175c:	df 92       	push	r13
    175e:	ef 92       	push	r14
    1760:	ff 92       	push	r15
    1762:	0f 93       	push	r16
    1764:	1f 93       	push	r17
    1766:	cf 93       	push	r28
    1768:	df 93       	push	r29
    176a:	5c 01       	movw	r10, r24
    176c:	4b 01       	movw	r8, r22
    176e:	3a 01       	movw	r6, r20
    1770:	29 01       	movw	r4, r18
    1772:	81 e2       	ldi	r24, 0x21	; 33
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	0e 94 71 00 	call	0xe2	; 0xe2 <pvPortMalloc>
    177a:	ec 01       	movw	r28, r24
    177c:	89 2b       	or	r24, r25
    177e:	09 f4       	brne	.+2      	; 0x1782 <xTaskGenericCreate+0x38>
    1780:	d3 c0       	rjmp	.+422    	; 0x1928 <xTaskGenericCreate+0x1de>
    1782:	c1 14       	cp	r12, r1
    1784:	d1 04       	cpc	r13, r1
    1786:	09 f0       	breq	.+2      	; 0x178a <xTaskGenericCreate+0x40>
    1788:	cb c0       	rjmp	.+406    	; 0x1920 <xTaskGenericCreate+0x1d6>
    178a:	c3 01       	movw	r24, r6
    178c:	0e 94 71 00 	call	0xe2	; 0xe2 <pvPortMalloc>
    1790:	98 8f       	std	Y+24, r25	; 0x18
    1792:	8f 8b       	std	Y+23, r24	; 0x17
    1794:	00 97       	sbiw	r24, 0x00	; 0
    1796:	21 f4       	brne	.+8      	; 0x17a0 <xTaskGenericCreate+0x56>
    1798:	ce 01       	movw	r24, r28
    179a:	0e 94 97 00 	call	0x12e	; 0x12e <vPortFree>
    179e:	c4 c0       	rjmp	.+392    	; 0x1928 <xTaskGenericCreate+0x1de>
    17a0:	a3 01       	movw	r20, r6
    17a2:	65 ea       	ldi	r22, 0xA5	; 165
    17a4:	70 e0       	ldi	r23, 0x00	; 0
    17a6:	8f d3       	rcall	.+1822   	; 0x1ec6 <memset>
    17a8:	93 01       	movw	r18, r6
    17aa:	21 50       	subi	r18, 0x01	; 1
    17ac:	31 09       	sbc	r19, r1
    17ae:	8f 89       	ldd	r24, Y+23	; 0x17
    17b0:	98 8d       	ldd	r25, Y+24	; 0x18
    17b2:	3c 01       	movw	r6, r24
    17b4:	62 0e       	add	r6, r18
    17b6:	73 1e       	adc	r7, r19
    17b8:	48 e0       	ldi	r20, 0x08	; 8
    17ba:	50 e0       	ldi	r21, 0x00	; 0
    17bc:	b4 01       	movw	r22, r8
    17be:	ce 01       	movw	r24, r28
    17c0:	49 96       	adiw	r24, 0x19	; 25
    17c2:	88 d3       	rcall	.+1808   	; 0x1ed4 <strncpy>
    17c4:	18 a2       	std	Y+32, r1	; 0x20
    17c6:	10 2f       	mov	r17, r16
    17c8:	04 30       	cpi	r16, 0x04	; 4
    17ca:	08 f0       	brcs	.+2      	; 0x17ce <xTaskGenericCreate+0x84>
    17cc:	13 e0       	ldi	r17, 0x03	; 3
    17ce:	1e 8b       	std	Y+22, r17	; 0x16
    17d0:	6e 01       	movw	r12, r28
    17d2:	82 e0       	ldi	r24, 0x02	; 2
    17d4:	c8 0e       	add	r12, r24
    17d6:	d1 1c       	adc	r13, r1
    17d8:	c6 01       	movw	r24, r12
    17da:	0e 94 a6 00 	call	0x14c	; 0x14c <vListInitialiseItem>
    17de:	ce 01       	movw	r24, r28
    17e0:	0c 96       	adiw	r24, 0x0c	; 12
    17e2:	0e 94 a6 00 	call	0x14c	; 0x14c <vListInitialiseItem>
    17e6:	d9 87       	std	Y+9, r29	; 0x09
    17e8:	c8 87       	std	Y+8, r28	; 0x08
    17ea:	84 e0       	ldi	r24, 0x04	; 4
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	81 1b       	sub	r24, r17
    17f0:	91 09       	sbc	r25, r1
    17f2:	9d 87       	std	Y+13, r25	; 0x0d
    17f4:	8c 87       	std	Y+12, r24	; 0x0c
    17f6:	db 8b       	std	Y+19, r29	; 0x13
    17f8:	ca 8b       	std	Y+18, r28	; 0x12
    17fa:	a2 01       	movw	r20, r4
    17fc:	b5 01       	movw	r22, r10
    17fe:	c3 01       	movw	r24, r6
    1800:	14 de       	rcall	.-984    	; 0x142a <pxPortInitialiseStack>
    1802:	99 83       	std	Y+1, r25	; 0x01
    1804:	88 83       	st	Y, r24
    1806:	e1 14       	cp	r14, r1
    1808:	f1 04       	cpc	r15, r1
    180a:	19 f0       	breq	.+6      	; 0x1812 <xTaskGenericCreate+0xc8>
    180c:	f7 01       	movw	r30, r14
    180e:	d1 83       	std	Z+1, r29	; 0x01
    1810:	c0 83       	st	Z, r28
    1812:	0f b6       	in	r0, 0x3f	; 63
    1814:	f8 94       	cli
    1816:	0f 92       	push	r0
    1818:	80 91 15 09 	lds	r24, 0x0915	; 0x800915 <uxCurrentNumberOfTasks>
    181c:	8f 5f       	subi	r24, 0xFF	; 255
    181e:	80 93 15 09 	sts	0x0915, r24	; 0x800915 <uxCurrentNumberOfTasks>
    1822:	80 91 63 09 	lds	r24, 0x0963	; 0x800963 <pxCurrentTCB>
    1826:	90 91 64 09 	lds	r25, 0x0964	; 0x800964 <pxCurrentTCB+0x1>
    182a:	89 2b       	or	r24, r25
    182c:	a9 f5       	brne	.+106    	; 0x1898 <xTaskGenericCreate+0x14e>
    182e:	d0 93 64 09 	sts	0x0964, r29	; 0x800964 <pxCurrentTCB+0x1>
    1832:	c0 93 63 09 	sts	0x0963, r28	; 0x800963 <pxCurrentTCB>
    1836:	80 91 15 09 	lds	r24, 0x0915	; 0x800915 <uxCurrentNumberOfTasks>
    183a:	81 30       	cpi	r24, 0x01	; 1
    183c:	e1 f5       	brne	.+120    	; 0x18b6 <xTaskGenericCreate+0x16c>
    183e:	8f e3       	ldi	r24, 0x3F	; 63
    1840:	99 e0       	ldi	r25, 0x09	; 9
    1842:	0e 94 98 00 	call	0x130	; 0x130 <vListInitialise>
    1846:	88 e4       	ldi	r24, 0x48	; 72
    1848:	99 e0       	ldi	r25, 0x09	; 9
    184a:	0e 94 98 00 	call	0x130	; 0x130 <vListInitialise>
    184e:	81 e5       	ldi	r24, 0x51	; 81
    1850:	99 e0       	ldi	r25, 0x09	; 9
    1852:	0e 94 98 00 	call	0x130	; 0x130 <vListInitialise>
    1856:	8a e5       	ldi	r24, 0x5A	; 90
    1858:	99 e0       	ldi	r25, 0x09	; 9
    185a:	0e 94 98 00 	call	0x130	; 0x130 <vListInitialise>
    185e:	86 e3       	ldi	r24, 0x36	; 54
    1860:	99 e0       	ldi	r25, 0x09	; 9
    1862:	0e 94 98 00 	call	0x130	; 0x130 <vListInitialise>
    1866:	8d e2       	ldi	r24, 0x2D	; 45
    1868:	99 e0       	ldi	r25, 0x09	; 9
    186a:	0e 94 98 00 	call	0x130	; 0x130 <vListInitialise>
    186e:	80 e2       	ldi	r24, 0x20	; 32
    1870:	99 e0       	ldi	r25, 0x09	; 9
    1872:	0e 94 98 00 	call	0x130	; 0x130 <vListInitialise>
    1876:	87 e1       	ldi	r24, 0x17	; 23
    1878:	99 e0       	ldi	r25, 0x09	; 9
    187a:	0e 94 98 00 	call	0x130	; 0x130 <vListInitialise>
    187e:	86 e3       	ldi	r24, 0x36	; 54
    1880:	99 e0       	ldi	r25, 0x09	; 9
    1882:	90 93 2c 09 	sts	0x092C, r25	; 0x80092c <pxDelayedTaskList+0x1>
    1886:	80 93 2b 09 	sts	0x092B, r24	; 0x80092b <pxDelayedTaskList>
    188a:	8d e2       	ldi	r24, 0x2D	; 45
    188c:	99 e0       	ldi	r25, 0x09	; 9
    188e:	90 93 2a 09 	sts	0x092A, r25	; 0x80092a <pxOverflowDelayedTaskList+0x1>
    1892:	80 93 29 09 	sts	0x0929, r24	; 0x800929 <pxOverflowDelayedTaskList>
    1896:	0f c0       	rjmp	.+30     	; 0x18b6 <xTaskGenericCreate+0x16c>
    1898:	80 91 10 09 	lds	r24, 0x0910	; 0x800910 <xSchedulerRunning>
    189c:	81 11       	cpse	r24, r1
    189e:	0b c0       	rjmp	.+22     	; 0x18b6 <xTaskGenericCreate+0x16c>
    18a0:	e0 91 63 09 	lds	r30, 0x0963	; 0x800963 <pxCurrentTCB>
    18a4:	f0 91 64 09 	lds	r31, 0x0964	; 0x800964 <pxCurrentTCB+0x1>
    18a8:	86 89       	ldd	r24, Z+22	; 0x16
    18aa:	08 17       	cp	r16, r24
    18ac:	20 f0       	brcs	.+8      	; 0x18b6 <xTaskGenericCreate+0x16c>
    18ae:	d0 93 64 09 	sts	0x0964, r29	; 0x800964 <pxCurrentTCB+0x1>
    18b2:	c0 93 63 09 	sts	0x0963, r28	; 0x800963 <pxCurrentTCB>
    18b6:	8e 89       	ldd	r24, Y+22	; 0x16
    18b8:	90 91 12 09 	lds	r25, 0x0912	; 0x800912 <uxTopUsedPriority>
    18bc:	98 17       	cp	r25, r24
    18be:	10 f4       	brcc	.+4      	; 0x18c4 <xTaskGenericCreate+0x17a>
    18c0:	80 93 12 09 	sts	0x0912, r24	; 0x800912 <uxTopUsedPriority>
    18c4:	90 91 0b 09 	lds	r25, 0x090B	; 0x80090b <uxTaskNumber>
    18c8:	9f 5f       	subi	r25, 0xFF	; 255
    18ca:	90 93 0b 09 	sts	0x090B, r25	; 0x80090b <uxTaskNumber>
    18ce:	90 91 11 09 	lds	r25, 0x0911	; 0x800911 <uxTopReadyPriority>
    18d2:	98 17       	cp	r25, r24
    18d4:	10 f4       	brcc	.+4      	; 0x18da <xTaskGenericCreate+0x190>
    18d6:	80 93 11 09 	sts	0x0911, r24	; 0x800911 <uxTopReadyPriority>
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	9c 01       	movw	r18, r24
    18de:	22 0f       	add	r18, r18
    18e0:	33 1f       	adc	r19, r19
    18e2:	22 0f       	add	r18, r18
    18e4:	33 1f       	adc	r19, r19
    18e6:	22 0f       	add	r18, r18
    18e8:	33 1f       	adc	r19, r19
    18ea:	82 0f       	add	r24, r18
    18ec:	93 1f       	adc	r25, r19
    18ee:	b6 01       	movw	r22, r12
    18f0:	81 5c       	subi	r24, 0xC1	; 193
    18f2:	96 4f       	sbci	r25, 0xF6	; 246
    18f4:	0e 94 aa 00 	call	0x154	; 0x154 <vListInsertEnd>
    18f8:	0f 90       	pop	r0
    18fa:	0f be       	out	0x3f, r0	; 63
    18fc:	80 91 10 09 	lds	r24, 0x0910	; 0x800910 <xSchedulerRunning>
    1900:	88 23       	and	r24, r24
    1902:	51 f0       	breq	.+20     	; 0x1918 <xTaskGenericCreate+0x1ce>
    1904:	e0 91 63 09 	lds	r30, 0x0963	; 0x800963 <pxCurrentTCB>
    1908:	f0 91 64 09 	lds	r31, 0x0964	; 0x800964 <pxCurrentTCB+0x1>
    190c:	86 89       	ldd	r24, Z+22	; 0x16
    190e:	80 17       	cp	r24, r16
    1910:	28 f4       	brcc	.+10     	; 0x191c <xTaskGenericCreate+0x1d2>
    1912:	31 de       	rcall	.-926    	; 0x1576 <vPortYield>
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	09 c0       	rjmp	.+18     	; 0x192a <xTaskGenericCreate+0x1e0>
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	07 c0       	rjmp	.+14     	; 0x192a <xTaskGenericCreate+0x1e0>
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	05 c0       	rjmp	.+10     	; 0x192a <xTaskGenericCreate+0x1e0>
    1920:	d8 8e       	std	Y+24, r13	; 0x18
    1922:	cf 8a       	std	Y+23, r12	; 0x17
    1924:	c6 01       	movw	r24, r12
    1926:	3c cf       	rjmp	.-392    	; 0x17a0 <xTaskGenericCreate+0x56>
    1928:	8f ef       	ldi	r24, 0xFF	; 255
    192a:	df 91       	pop	r29
    192c:	cf 91       	pop	r28
    192e:	1f 91       	pop	r17
    1930:	0f 91       	pop	r16
    1932:	ff 90       	pop	r15
    1934:	ef 90       	pop	r14
    1936:	df 90       	pop	r13
    1938:	cf 90       	pop	r12
    193a:	bf 90       	pop	r11
    193c:	af 90       	pop	r10
    193e:	9f 90       	pop	r9
    1940:	8f 90       	pop	r8
    1942:	7f 90       	pop	r7
    1944:	6f 90       	pop	r6
    1946:	5f 90       	pop	r5
    1948:	4f 90       	pop	r4
    194a:	08 95       	ret

0000194c <vTaskStartScheduler>:
    194c:	af 92       	push	r10
    194e:	bf 92       	push	r11
    1950:	cf 92       	push	r12
    1952:	df 92       	push	r13
    1954:	ef 92       	push	r14
    1956:	ff 92       	push	r15
    1958:	0f 93       	push	r16
    195a:	a1 2c       	mov	r10, r1
    195c:	b1 2c       	mov	r11, r1
    195e:	c1 2c       	mov	r12, r1
    1960:	d1 2c       	mov	r13, r1
    1962:	e1 2c       	mov	r14, r1
    1964:	f1 2c       	mov	r15, r1
    1966:	00 e0       	ldi	r16, 0x00	; 0
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	45 e5       	ldi	r20, 0x55	; 85
    196e:	50 e0       	ldi	r21, 0x00	; 0
    1970:	63 e1       	ldi	r22, 0x13	; 19
    1972:	73 e0       	ldi	r23, 0x03	; 3
    1974:	89 e3       	ldi	r24, 0x39	; 57
    1976:	9e e0       	ldi	r25, 0x0E	; 14
    1978:	e8 de       	rcall	.-560    	; 0x174a <xTaskGenericCreate>
    197a:	81 30       	cpi	r24, 0x01	; 1
    197c:	41 f4       	brne	.+16     	; 0x198e <vTaskStartScheduler+0x42>
    197e:	f8 94       	cli
    1980:	80 93 10 09 	sts	0x0910, r24	; 0x800910 <xSchedulerRunning>
    1984:	10 92 14 09 	sts	0x0914, r1	; 0x800914 <xTickCount+0x1>
    1988:	10 92 13 09 	sts	0x0913, r1	; 0x800913 <xTickCount>
    198c:	ba dd       	rcall	.-1164   	; 0x1502 <xPortStartScheduler>
    198e:	0f 91       	pop	r16
    1990:	ff 90       	pop	r15
    1992:	ef 90       	pop	r14
    1994:	df 90       	pop	r13
    1996:	cf 90       	pop	r12
    1998:	bf 90       	pop	r11
    199a:	af 90       	pop	r10
    199c:	08 95       	ret

0000199e <vTaskSuspendAll>:
    199e:	80 91 0f 09 	lds	r24, 0x090F	; 0x80090f <uxSchedulerSuspended>
    19a2:	8f 5f       	subi	r24, 0xFF	; 255
    19a4:	80 93 0f 09 	sts	0x090F, r24	; 0x80090f <uxSchedulerSuspended>
    19a8:	08 95       	ret

000019aa <vTaskIncrementTick>:
    19aa:	0f 93       	push	r16
    19ac:	1f 93       	push	r17
    19ae:	cf 93       	push	r28
    19b0:	df 93       	push	r29
    19b2:	80 91 0f 09 	lds	r24, 0x090F	; 0x80090f <uxSchedulerSuspended>
    19b6:	81 11       	cpse	r24, r1
    19b8:	b2 c0       	rjmp	.+356    	; 0x1b1e <vTaskIncrementTick+0x174>
    19ba:	80 91 13 09 	lds	r24, 0x0913	; 0x800913 <xTickCount>
    19be:	90 91 14 09 	lds	r25, 0x0914	; 0x800914 <xTickCount+0x1>
    19c2:	01 96       	adiw	r24, 0x01	; 1
    19c4:	90 93 14 09 	sts	0x0914, r25	; 0x800914 <xTickCount+0x1>
    19c8:	80 93 13 09 	sts	0x0913, r24	; 0x800913 <xTickCount>
    19cc:	80 91 13 09 	lds	r24, 0x0913	; 0x800913 <xTickCount>
    19d0:	90 91 14 09 	lds	r25, 0x0914	; 0x800914 <xTickCount+0x1>
    19d4:	89 2b       	or	r24, r25
    19d6:	99 f5       	brne	.+102    	; 0x1a3e <vTaskIncrementTick+0x94>
    19d8:	80 91 2b 09 	lds	r24, 0x092B	; 0x80092b <pxDelayedTaskList>
    19dc:	90 91 2c 09 	lds	r25, 0x092C	; 0x80092c <pxDelayedTaskList+0x1>
    19e0:	20 91 29 09 	lds	r18, 0x0929	; 0x800929 <pxOverflowDelayedTaskList>
    19e4:	30 91 2a 09 	lds	r19, 0x092A	; 0x80092a <pxOverflowDelayedTaskList+0x1>
    19e8:	30 93 2c 09 	sts	0x092C, r19	; 0x80092c <pxDelayedTaskList+0x1>
    19ec:	20 93 2b 09 	sts	0x092B, r18	; 0x80092b <pxDelayedTaskList>
    19f0:	90 93 2a 09 	sts	0x092A, r25	; 0x80092a <pxOverflowDelayedTaskList+0x1>
    19f4:	80 93 29 09 	sts	0x0929, r24	; 0x800929 <pxOverflowDelayedTaskList>
    19f8:	80 91 0c 09 	lds	r24, 0x090C	; 0x80090c <xNumOfOverflows>
    19fc:	8f 5f       	subi	r24, 0xFF	; 255
    19fe:	80 93 0c 09 	sts	0x090C, r24	; 0x80090c <xNumOfOverflows>
    1a02:	e0 91 2b 09 	lds	r30, 0x092B	; 0x80092b <pxDelayedTaskList>
    1a06:	f0 91 2c 09 	lds	r31, 0x092C	; 0x80092c <pxDelayedTaskList+0x1>
    1a0a:	80 81       	ld	r24, Z
    1a0c:	81 11       	cpse	r24, r1
    1a0e:	07 c0       	rjmp	.+14     	; 0x1a1e <vTaskIncrementTick+0x74>
    1a10:	8f ef       	ldi	r24, 0xFF	; 255
    1a12:	9f ef       	ldi	r25, 0xFF	; 255
    1a14:	90 93 54 02 	sts	0x0254, r25	; 0x800254 <xNextTaskUnblockTime+0x1>
    1a18:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <xNextTaskUnblockTime>
    1a1c:	10 c0       	rjmp	.+32     	; 0x1a3e <vTaskIncrementTick+0x94>
    1a1e:	e0 91 2b 09 	lds	r30, 0x092B	; 0x80092b <pxDelayedTaskList>
    1a22:	f0 91 2c 09 	lds	r31, 0x092C	; 0x80092c <pxDelayedTaskList+0x1>
    1a26:	05 80       	ldd	r0, Z+5	; 0x05
    1a28:	f6 81       	ldd	r31, Z+6	; 0x06
    1a2a:	e0 2d       	mov	r30, r0
    1a2c:	06 80       	ldd	r0, Z+6	; 0x06
    1a2e:	f7 81       	ldd	r31, Z+7	; 0x07
    1a30:	e0 2d       	mov	r30, r0
    1a32:	82 81       	ldd	r24, Z+2	; 0x02
    1a34:	93 81       	ldd	r25, Z+3	; 0x03
    1a36:	90 93 54 02 	sts	0x0254, r25	; 0x800254 <xNextTaskUnblockTime+0x1>
    1a3a:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <xNextTaskUnblockTime>
    1a3e:	20 91 13 09 	lds	r18, 0x0913	; 0x800913 <xTickCount>
    1a42:	30 91 14 09 	lds	r19, 0x0914	; 0x800914 <xTickCount+0x1>
    1a46:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <xNextTaskUnblockTime>
    1a4a:	90 91 54 02 	lds	r25, 0x0254	; 0x800254 <xNextTaskUnblockTime+0x1>
    1a4e:	28 17       	cp	r18, r24
    1a50:	39 07       	cpc	r19, r25
    1a52:	08 f4       	brcc	.+2      	; 0x1a56 <vTaskIncrementTick+0xac>
    1a54:	69 c0       	rjmp	.+210    	; 0x1b28 <vTaskIncrementTick+0x17e>
    1a56:	e0 91 2b 09 	lds	r30, 0x092B	; 0x80092b <pxDelayedTaskList>
    1a5a:	f0 91 2c 09 	lds	r31, 0x092C	; 0x80092c <pxDelayedTaskList+0x1>
    1a5e:	80 81       	ld	r24, Z
    1a60:	88 23       	and	r24, r24
    1a62:	99 f0       	breq	.+38     	; 0x1a8a <vTaskIncrementTick+0xe0>
    1a64:	e0 91 2b 09 	lds	r30, 0x092B	; 0x80092b <pxDelayedTaskList>
    1a68:	f0 91 2c 09 	lds	r31, 0x092C	; 0x80092c <pxDelayedTaskList+0x1>
    1a6c:	05 80       	ldd	r0, Z+5	; 0x05
    1a6e:	f6 81       	ldd	r31, Z+6	; 0x06
    1a70:	e0 2d       	mov	r30, r0
    1a72:	c6 81       	ldd	r28, Z+6	; 0x06
    1a74:	d7 81       	ldd	r29, Z+7	; 0x07
    1a76:	8a 81       	ldd	r24, Y+2	; 0x02
    1a78:	9b 81       	ldd	r25, Y+3	; 0x03
    1a7a:	20 91 13 09 	lds	r18, 0x0913	; 0x800913 <xTickCount>
    1a7e:	30 91 14 09 	lds	r19, 0x0914	; 0x800914 <xTickCount+0x1>
    1a82:	28 17       	cp	r18, r24
    1a84:	39 07       	cpc	r19, r25
    1a86:	f8 f4       	brcc	.+62     	; 0x1ac6 <vTaskIncrementTick+0x11c>
    1a88:	19 c0       	rjmp	.+50     	; 0x1abc <vTaskIncrementTick+0x112>
    1a8a:	8f ef       	ldi	r24, 0xFF	; 255
    1a8c:	9f ef       	ldi	r25, 0xFF	; 255
    1a8e:	90 93 54 02 	sts	0x0254, r25	; 0x800254 <xNextTaskUnblockTime+0x1>
    1a92:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <xNextTaskUnblockTime>
    1a96:	48 c0       	rjmp	.+144    	; 0x1b28 <vTaskIncrementTick+0x17e>
    1a98:	e0 91 2b 09 	lds	r30, 0x092B	; 0x80092b <pxDelayedTaskList>
    1a9c:	f0 91 2c 09 	lds	r31, 0x092C	; 0x80092c <pxDelayedTaskList+0x1>
    1aa0:	05 80       	ldd	r0, Z+5	; 0x05
    1aa2:	f6 81       	ldd	r31, Z+6	; 0x06
    1aa4:	e0 2d       	mov	r30, r0
    1aa6:	c6 81       	ldd	r28, Z+6	; 0x06
    1aa8:	d7 81       	ldd	r29, Z+7	; 0x07
    1aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1aac:	9b 81       	ldd	r25, Y+3	; 0x03
    1aae:	20 91 13 09 	lds	r18, 0x0913	; 0x800913 <xTickCount>
    1ab2:	30 91 14 09 	lds	r19, 0x0914	; 0x800914 <xTickCount+0x1>
    1ab6:	28 17       	cp	r18, r24
    1ab8:	39 07       	cpc	r19, r25
    1aba:	28 f4       	brcc	.+10     	; 0x1ac6 <vTaskIncrementTick+0x11c>
    1abc:	90 93 54 02 	sts	0x0254, r25	; 0x800254 <xNextTaskUnblockTime+0x1>
    1ac0:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <xNextTaskUnblockTime>
    1ac4:	31 c0       	rjmp	.+98     	; 0x1b28 <vTaskIncrementTick+0x17e>
    1ac6:	8e 01       	movw	r16, r28
    1ac8:	0e 5f       	subi	r16, 0xFE	; 254
    1aca:	1f 4f       	sbci	r17, 0xFF	; 255
    1acc:	c8 01       	movw	r24, r16
    1ace:	0e 94 0c 01 	call	0x218	; 0x218 <vListRemove>
    1ad2:	8c 89       	ldd	r24, Y+20	; 0x14
    1ad4:	9d 89       	ldd	r25, Y+21	; 0x15
    1ad6:	89 2b       	or	r24, r25
    1ad8:	21 f0       	breq	.+8      	; 0x1ae2 <vTaskIncrementTick+0x138>
    1ada:	ce 01       	movw	r24, r28
    1adc:	0c 96       	adiw	r24, 0x0c	; 12
    1ade:	0e 94 0c 01 	call	0x218	; 0x218 <vListRemove>
    1ae2:	8e 89       	ldd	r24, Y+22	; 0x16
    1ae4:	90 91 11 09 	lds	r25, 0x0911	; 0x800911 <uxTopReadyPriority>
    1ae8:	98 17       	cp	r25, r24
    1aea:	10 f4       	brcc	.+4      	; 0x1af0 <vTaskIncrementTick+0x146>
    1aec:	80 93 11 09 	sts	0x0911, r24	; 0x800911 <uxTopReadyPriority>
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	9c 01       	movw	r18, r24
    1af4:	22 0f       	add	r18, r18
    1af6:	33 1f       	adc	r19, r19
    1af8:	22 0f       	add	r18, r18
    1afa:	33 1f       	adc	r19, r19
    1afc:	22 0f       	add	r18, r18
    1afe:	33 1f       	adc	r19, r19
    1b00:	82 0f       	add	r24, r18
    1b02:	93 1f       	adc	r25, r19
    1b04:	b8 01       	movw	r22, r16
    1b06:	81 5c       	subi	r24, 0xC1	; 193
    1b08:	96 4f       	sbci	r25, 0xF6	; 246
    1b0a:	0e 94 aa 00 	call	0x154	; 0x154 <vListInsertEnd>
    1b0e:	e0 91 2b 09 	lds	r30, 0x092B	; 0x80092b <pxDelayedTaskList>
    1b12:	f0 91 2c 09 	lds	r31, 0x092C	; 0x80092c <pxDelayedTaskList+0x1>
    1b16:	80 81       	ld	r24, Z
    1b18:	81 11       	cpse	r24, r1
    1b1a:	be cf       	rjmp	.-132    	; 0x1a98 <vTaskIncrementTick+0xee>
    1b1c:	b6 cf       	rjmp	.-148    	; 0x1a8a <vTaskIncrementTick+0xe0>
    1b1e:	80 91 0e 09 	lds	r24, 0x090E	; 0x80090e <uxMissedTicks>
    1b22:	8f 5f       	subi	r24, 0xFF	; 255
    1b24:	80 93 0e 09 	sts	0x090E, r24	; 0x80090e <uxMissedTicks>
    1b28:	df 91       	pop	r29
    1b2a:	cf 91       	pop	r28
    1b2c:	1f 91       	pop	r17
    1b2e:	0f 91       	pop	r16
    1b30:	08 95       	ret

00001b32 <xTaskResumeAll>:
    1b32:	cf 92       	push	r12
    1b34:	df 92       	push	r13
    1b36:	ef 92       	push	r14
    1b38:	ff 92       	push	r15
    1b3a:	0f 93       	push	r16
    1b3c:	1f 93       	push	r17
    1b3e:	cf 93       	push	r28
    1b40:	df 93       	push	r29
    1b42:	0f b6       	in	r0, 0x3f	; 63
    1b44:	f8 94       	cli
    1b46:	0f 92       	push	r0
    1b48:	80 91 0f 09 	lds	r24, 0x090F	; 0x80090f <uxSchedulerSuspended>
    1b4c:	81 50       	subi	r24, 0x01	; 1
    1b4e:	80 93 0f 09 	sts	0x090F, r24	; 0x80090f <uxSchedulerSuspended>
    1b52:	80 91 0f 09 	lds	r24, 0x090F	; 0x80090f <uxSchedulerSuspended>
    1b56:	81 11       	cpse	r24, r1
    1b58:	62 c0       	rjmp	.+196    	; 0x1c1e <xTaskResumeAll+0xec>
    1b5a:	80 91 15 09 	lds	r24, 0x0915	; 0x800915 <uxCurrentNumberOfTasks>
    1b5e:	81 11       	cpse	r24, r1
    1b60:	32 c0       	rjmp	.+100    	; 0x1bc6 <xTaskResumeAll+0x94>
    1b62:	60 c0       	rjmp	.+192    	; 0x1c24 <xTaskResumeAll+0xf2>
    1b64:	d7 01       	movw	r26, r14
    1b66:	15 96       	adiw	r26, 0x05	; 5
    1b68:	ed 91       	ld	r30, X+
    1b6a:	fc 91       	ld	r31, X
    1b6c:	16 97       	sbiw	r26, 0x06	; 6
    1b6e:	c6 81       	ldd	r28, Z+6	; 0x06
    1b70:	d7 81       	ldd	r29, Z+7	; 0x07
    1b72:	ce 01       	movw	r24, r28
    1b74:	0c 96       	adiw	r24, 0x0c	; 12
    1b76:	0e 94 0c 01 	call	0x218	; 0x218 <vListRemove>
    1b7a:	8e 01       	movw	r16, r28
    1b7c:	0e 5f       	subi	r16, 0xFE	; 254
    1b7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b80:	c8 01       	movw	r24, r16
    1b82:	0e 94 0c 01 	call	0x218	; 0x218 <vListRemove>
    1b86:	8e 89       	ldd	r24, Y+22	; 0x16
    1b88:	90 91 11 09 	lds	r25, 0x0911	; 0x800911 <uxTopReadyPriority>
    1b8c:	98 17       	cp	r25, r24
    1b8e:	10 f4       	brcc	.+4      	; 0x1b94 <xTaskResumeAll+0x62>
    1b90:	80 93 11 09 	sts	0x0911, r24	; 0x800911 <uxTopReadyPriority>
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	9c 01       	movw	r18, r24
    1b98:	22 0f       	add	r18, r18
    1b9a:	33 1f       	adc	r19, r19
    1b9c:	22 0f       	add	r18, r18
    1b9e:	33 1f       	adc	r19, r19
    1ba0:	22 0f       	add	r18, r18
    1ba2:	33 1f       	adc	r19, r19
    1ba4:	82 0f       	add	r24, r18
    1ba6:	93 1f       	adc	r25, r19
    1ba8:	b8 01       	movw	r22, r16
    1baa:	81 5c       	subi	r24, 0xC1	; 193
    1bac:	96 4f       	sbci	r25, 0xF6	; 246
    1bae:	0e 94 aa 00 	call	0x154	; 0x154 <vListInsertEnd>
    1bb2:	e0 91 63 09 	lds	r30, 0x0963	; 0x800963 <pxCurrentTCB>
    1bb6:	f0 91 64 09 	lds	r31, 0x0964	; 0x800964 <pxCurrentTCB+0x1>
    1bba:	9e 89       	ldd	r25, Y+22	; 0x16
    1bbc:	86 89       	ldd	r24, Z+22	; 0x16
    1bbe:	98 17       	cp	r25, r24
    1bc0:	58 f0       	brcs	.+22     	; 0x1bd8 <xTaskResumeAll+0xa6>
    1bc2:	dc 2c       	mov	r13, r12
    1bc4:	09 c0       	rjmp	.+18     	; 0x1bd8 <xTaskResumeAll+0xa6>
    1bc6:	d1 2c       	mov	r13, r1
    1bc8:	0f 2e       	mov	r0, r31
    1bca:	f0 e2       	ldi	r31, 0x20	; 32
    1bcc:	ef 2e       	mov	r14, r31
    1bce:	f9 e0       	ldi	r31, 0x09	; 9
    1bd0:	ff 2e       	mov	r15, r31
    1bd2:	f0 2d       	mov	r31, r0
    1bd4:	cc 24       	eor	r12, r12
    1bd6:	c3 94       	inc	r12
    1bd8:	f7 01       	movw	r30, r14
    1bda:	80 81       	ld	r24, Z
    1bdc:	81 11       	cpse	r24, r1
    1bde:	c2 cf       	rjmp	.-124    	; 0x1b64 <xTaskResumeAll+0x32>
    1be0:	80 91 0e 09 	lds	r24, 0x090E	; 0x80090e <uxMissedTicks>
    1be4:	88 23       	and	r24, r24
    1be6:	79 f0       	breq	.+30     	; 0x1c06 <xTaskResumeAll+0xd4>
    1be8:	80 91 0e 09 	lds	r24, 0x090E	; 0x80090e <uxMissedTicks>
    1bec:	88 23       	and	r24, r24
    1bee:	91 f0       	breq	.+36     	; 0x1c14 <xTaskResumeAll+0xe2>
    1bf0:	dc de       	rcall	.-584    	; 0x19aa <vTaskIncrementTick>
    1bf2:	80 91 0e 09 	lds	r24, 0x090E	; 0x80090e <uxMissedTicks>
    1bf6:	81 50       	subi	r24, 0x01	; 1
    1bf8:	80 93 0e 09 	sts	0x090E, r24	; 0x80090e <uxMissedTicks>
    1bfc:	80 91 0e 09 	lds	r24, 0x090E	; 0x80090e <uxMissedTicks>
    1c00:	81 11       	cpse	r24, r1
    1c02:	f6 cf       	rjmp	.-20     	; 0x1bf0 <xTaskResumeAll+0xbe>
    1c04:	07 c0       	rjmp	.+14     	; 0x1c14 <xTaskResumeAll+0xe2>
    1c06:	f1 e0       	ldi	r31, 0x01	; 1
    1c08:	df 16       	cp	r13, r31
    1c0a:	21 f0       	breq	.+8      	; 0x1c14 <xTaskResumeAll+0xe2>
    1c0c:	80 91 0d 09 	lds	r24, 0x090D	; 0x80090d <xMissedYield>
    1c10:	81 30       	cpi	r24, 0x01	; 1
    1c12:	39 f4       	brne	.+14     	; 0x1c22 <xTaskResumeAll+0xf0>
    1c14:	10 92 0d 09 	sts	0x090D, r1	; 0x80090d <xMissedYield>
    1c18:	ae dc       	rcall	.-1700   	; 0x1576 <vPortYield>
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	03 c0       	rjmp	.+6      	; 0x1c24 <xTaskResumeAll+0xf2>
    1c1e:	80 e0       	ldi	r24, 0x00	; 0
    1c20:	01 c0       	rjmp	.+2      	; 0x1c24 <xTaskResumeAll+0xf2>
    1c22:	80 e0       	ldi	r24, 0x00	; 0
    1c24:	0f 90       	pop	r0
    1c26:	0f be       	out	0x3f, r0	; 63
    1c28:	df 91       	pop	r29
    1c2a:	cf 91       	pop	r28
    1c2c:	1f 91       	pop	r17
    1c2e:	0f 91       	pop	r16
    1c30:	ff 90       	pop	r15
    1c32:	ef 90       	pop	r14
    1c34:	df 90       	pop	r13
    1c36:	cf 90       	pop	r12
    1c38:	08 95       	ret

00001c3a <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    1c3a:	cf 93       	push	r28
    1c3c:	df 93       	push	r29
    1c3e:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    1c40:	89 2b       	or	r24, r25
		{
			vTaskSuspendAll();
    1c42:	99 f0       	breq	.+38     	; 0x1c6a <vTaskDelay+0x30>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    1c44:	ac de       	rcall	.-680    	; 0x199e <vTaskSuspendAll>
    1c46:	80 91 13 09 	lds	r24, 0x0913	; 0x800913 <xTickCount>
    1c4a:	90 91 14 09 	lds	r25, 0x0914	; 0x800914 <xTickCount+0x1>
    1c4e:	c8 0f       	add	r28, r24

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    1c50:	d9 1f       	adc	r29, r25
    1c52:	80 91 63 09 	lds	r24, 0x0963	; 0x800963 <pxCurrentTCB>
    1c56:	90 91 64 09 	lds	r25, 0x0964	; 0x800964 <pxCurrentTCB+0x1>
    1c5a:	02 96       	adiw	r24, 0x02	; 2
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    1c5c:	0e 94 0c 01 	call	0x218	; 0x218 <vListRemove>
			xAlreadyYielded = xTaskResumeAll();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1c60:	ce 01       	movw	r24, r28
    1c62:	3c dd       	rcall	.-1416   	; 0x16dc <prvAddCurrentTaskToDelayedList>
		{
			portYIELD_WITHIN_API();
    1c64:	66 df       	rcall	.-308    	; 0x1b32 <xTaskResumeAll>
    1c66:	81 11       	cpse	r24, r1
		}
	}
    1c68:	01 c0       	rjmp	.+2      	; 0x1c6c <vTaskDelay+0x32>
    1c6a:	85 dc       	rcall	.-1782   	; 0x1576 <vPortYield>
    1c6c:	df 91       	pop	r29
    1c6e:	cf 91       	pop	r28
    1c70:	08 95       	ret

00001c72 <prvIdleTask>:
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1c72:	0f 2e       	mov	r0, r31
    1c74:	f7 e1       	ldi	r31, 0x17	; 23
    1c76:	ef 2e       	mov	r14, r31
    1c78:	f9 e0       	ldi	r31, 0x09	; 9
    1c7a:	ff 2e       	mov	r15, r31
    1c7c:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    1c7e:	cf e3       	ldi	r28, 0x3F	; 63
    1c80:	d9 e0       	ldi	r29, 0x09	; 9
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    1c82:	80 91 16 09 	lds	r24, 0x0916	; 0x800916 <uxTasksDeleted>
    1c86:	88 23       	and	r24, r24
		{
			vTaskSuspendAll();
    1c88:	41 f1       	breq	.+80     	; 0x1cda <prvIdleTask+0x68>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1c8a:	89 de       	rcall	.-750    	; 0x199e <vTaskSuspendAll>
			xTaskResumeAll();
    1c8c:	d7 01       	movw	r26, r14
    1c8e:	1c 91       	ld	r17, X

			if( xListIsEmpty == pdFALSE )
    1c90:	50 df       	rcall	.-352    	; 0x1b32 <xTaskResumeAll>
    1c92:	11 23       	and	r17, r17
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    1c94:	11 f1       	breq	.+68     	; 0x1cda <prvIdleTask+0x68>
    1c96:	0f b6       	in	r0, 0x3f	; 63
    1c98:	f8 94       	cli
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    1c9a:	0f 92       	push	r0
    1c9c:	d7 01       	movw	r26, r14
    1c9e:	15 96       	adiw	r26, 0x05	; 5
    1ca0:	ed 91       	ld	r30, X+
    1ca2:	fc 91       	ld	r31, X
    1ca4:	16 97       	sbiw	r26, 0x06	; 6
    1ca6:	06 81       	ldd	r16, Z+6	; 0x06
					vListRemove( &( pxTCB->xGenericListItem ) );
    1ca8:	17 81       	ldd	r17, Z+7	; 0x07
    1caa:	c8 01       	movw	r24, r16
    1cac:	02 96       	adiw	r24, 0x02	; 2
    1cae:	0e 94 0c 01 	call	0x218	; 0x218 <vListRemove>
					--uxCurrentNumberOfTasks;
    1cb2:	80 91 15 09 	lds	r24, 0x0915	; 0x800915 <uxCurrentNumberOfTasks>
    1cb6:	81 50       	subi	r24, 0x01	; 1
    1cb8:	80 93 15 09 	sts	0x0915, r24	; 0x800915 <uxCurrentNumberOfTasks>
					--uxTasksDeleted;
    1cbc:	80 91 16 09 	lds	r24, 0x0916	; 0x800916 <uxTasksDeleted>
    1cc0:	81 50       	subi	r24, 0x01	; 1
    1cc2:	80 93 16 09 	sts	0x0916, r24	; 0x800916 <uxTasksDeleted>
				}
				taskEXIT_CRITICAL();
    1cc6:	0f 90       	pop	r0
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    1cc8:	0f be       	out	0x3f, r0	; 63
    1cca:	f8 01       	movw	r30, r16
    1ccc:	87 89       	ldd	r24, Z+23	; 0x17
    1cce:	90 8d       	ldd	r25, Z+24	; 0x18
    1cd0:	0e 94 97 00 	call	0x12e	; 0x12e <vPortFree>
		vPortFree( pxTCB );
    1cd4:	c8 01       	movw	r24, r16
    1cd6:	0e 94 97 00 	call	0x12e	; 0x12e <vPortFree>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    1cda:	88 81       	ld	r24, Y
			{
				taskYIELD();
    1cdc:	82 30       	cpi	r24, 0x02	; 2
    1cde:	88 f2       	brcs	.-94     	; 0x1c82 <prvIdleTask+0x10>
    1ce0:	4a dc       	rcall	.-1900   	; 0x1576 <vPortYield>
    1ce2:	cf cf       	rjmp	.-98     	; 0x1c82 <prvIdleTask+0x10>

00001ce4 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    1ce4:	80 91 0f 09 	lds	r24, 0x090F	; 0x80090f <uxSchedulerSuspended>
    1ce8:	81 11       	cpse	r24, r1
    1cea:	13 c0       	rjmp	.+38     	; 0x1d12 <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    1cec:	80 91 11 09 	lds	r24, 0x0911	; 0x800911 <uxTopReadyPriority>
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	fc 01       	movw	r30, r24
    1cf4:	ee 0f       	add	r30, r30
    1cf6:	ff 1f       	adc	r31, r31
    1cf8:	ee 0f       	add	r30, r30
    1cfa:	ff 1f       	adc	r31, r31
    1cfc:	ee 0f       	add	r30, r30
    1cfe:	ff 1f       	adc	r31, r31
    1d00:	8e 0f       	add	r24, r30
    1d02:	9f 1f       	adc	r25, r31
    1d04:	fc 01       	movw	r30, r24
    1d06:	e1 5c       	subi	r30, 0xC1	; 193
    1d08:	f6 4f       	sbci	r31, 0xF6	; 246
    1d0a:	80 81       	ld	r24, Z
    1d0c:	88 23       	and	r24, r24
    1d0e:	29 f0       	breq	.+10     	; 0x1d1a <vTaskSwitchContext+0x36>
    1d10:	1b c0       	rjmp	.+54     	; 0x1d48 <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	80 93 0d 09 	sts	0x090D, r24	; 0x80090d <xMissedYield>
    1d18:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    1d1a:	80 91 11 09 	lds	r24, 0x0911	; 0x800911 <uxTopReadyPriority>
    1d1e:	81 50       	subi	r24, 0x01	; 1
    1d20:	80 93 11 09 	sts	0x0911, r24	; 0x800911 <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    1d24:	80 91 11 09 	lds	r24, 0x0911	; 0x800911 <uxTopReadyPriority>
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	fc 01       	movw	r30, r24
    1d2c:	ee 0f       	add	r30, r30
    1d2e:	ff 1f       	adc	r31, r31
    1d30:	ee 0f       	add	r30, r30
    1d32:	ff 1f       	adc	r31, r31
    1d34:	ee 0f       	add	r30, r30
    1d36:	ff 1f       	adc	r31, r31
    1d38:	8e 0f       	add	r24, r30
    1d3a:	9f 1f       	adc	r25, r31
    1d3c:	fc 01       	movw	r30, r24
    1d3e:	e1 5c       	subi	r30, 0xC1	; 193
    1d40:	f6 4f       	sbci	r31, 0xF6	; 246
    1d42:	80 81       	ld	r24, Z
    1d44:	88 23       	and	r24, r24
    1d46:	49 f3       	breq	.-46     	; 0x1d1a <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    1d48:	80 91 11 09 	lds	r24, 0x0911	; 0x800911 <uxTopReadyPriority>
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	9c 01       	movw	r18, r24
    1d50:	22 0f       	add	r18, r18
    1d52:	33 1f       	adc	r19, r19
    1d54:	22 0f       	add	r18, r18
    1d56:	33 1f       	adc	r19, r19
    1d58:	22 0f       	add	r18, r18
    1d5a:	33 1f       	adc	r19, r19
    1d5c:	28 0f       	add	r18, r24
    1d5e:	39 1f       	adc	r19, r25
    1d60:	d9 01       	movw	r26, r18
    1d62:	a1 5c       	subi	r26, 0xC1	; 193
    1d64:	b6 4f       	sbci	r27, 0xF6	; 246
    1d66:	11 96       	adiw	r26, 0x01	; 1
    1d68:	ed 91       	ld	r30, X+
    1d6a:	fc 91       	ld	r31, X
    1d6c:	12 97       	sbiw	r26, 0x02	; 2
    1d6e:	02 80       	ldd	r0, Z+2	; 0x02
    1d70:	f3 81       	ldd	r31, Z+3	; 0x03
    1d72:	e0 2d       	mov	r30, r0
    1d74:	12 96       	adiw	r26, 0x02	; 2
    1d76:	fc 93       	st	X, r31
    1d78:	ee 93       	st	-X, r30
    1d7a:	11 97       	sbiw	r26, 0x01	; 1
    1d7c:	2e 5b       	subi	r18, 0xBE	; 190
    1d7e:	36 4f       	sbci	r19, 0xF6	; 246
    1d80:	e2 17       	cp	r30, r18
    1d82:	f3 07       	cpc	r31, r19
    1d84:	29 f4       	brne	.+10     	; 0x1d90 <vTaskSwitchContext+0xac>
    1d86:	22 81       	ldd	r18, Z+2	; 0x02
    1d88:	33 81       	ldd	r19, Z+3	; 0x03
    1d8a:	fd 01       	movw	r30, r26
    1d8c:	32 83       	std	Z+2, r19	; 0x02
    1d8e:	21 83       	std	Z+1, r18	; 0x01
    1d90:	fc 01       	movw	r30, r24
    1d92:	ee 0f       	add	r30, r30
    1d94:	ff 1f       	adc	r31, r31
    1d96:	ee 0f       	add	r30, r30
    1d98:	ff 1f       	adc	r31, r31
    1d9a:	ee 0f       	add	r30, r30
    1d9c:	ff 1f       	adc	r31, r31
    1d9e:	8e 0f       	add	r24, r30
    1da0:	9f 1f       	adc	r25, r31
    1da2:	fc 01       	movw	r30, r24
    1da4:	e1 5c       	subi	r30, 0xC1	; 193
    1da6:	f6 4f       	sbci	r31, 0xF6	; 246
    1da8:	01 80       	ldd	r0, Z+1	; 0x01
    1daa:	f2 81       	ldd	r31, Z+2	; 0x02
    1dac:	e0 2d       	mov	r30, r0
    1dae:	86 81       	ldd	r24, Z+6	; 0x06
    1db0:	97 81       	ldd	r25, Z+7	; 0x07
    1db2:	90 93 64 09 	sts	0x0964, r25	; 0x800964 <pxCurrentTCB+0x1>
    1db6:	80 93 63 09 	sts	0x0963, r24	; 0x800963 <pxCurrentTCB>
    1dba:	08 95       	ret

00001dbc <__divmodhi4>:
    1dbc:	97 fb       	bst	r25, 7
    1dbe:	07 2e       	mov	r0, r23
    1dc0:	16 f4       	brtc	.+4      	; 0x1dc6 <__divmodhi4+0xa>
    1dc2:	00 94       	com	r0
    1dc4:	06 d0       	rcall	.+12     	; 0x1dd2 <__divmodhi4_neg1>
    1dc6:	77 fd       	sbrc	r23, 7
    1dc8:	08 d0       	rcall	.+16     	; 0x1dda <__divmodhi4_neg2>
    1dca:	14 d0       	rcall	.+40     	; 0x1df4 <__udivmodhi4>
    1dcc:	07 fc       	sbrc	r0, 7
    1dce:	05 d0       	rcall	.+10     	; 0x1dda <__divmodhi4_neg2>
    1dd0:	3e f4       	brtc	.+14     	; 0x1de0 <__divmodhi4_exit>

00001dd2 <__divmodhi4_neg1>:
    1dd2:	90 95       	com	r25
    1dd4:	81 95       	neg	r24
    1dd6:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd8:	08 95       	ret

00001dda <__divmodhi4_neg2>:
    1dda:	70 95       	com	r23
    1ddc:	61 95       	neg	r22
    1dde:	7f 4f       	sbci	r23, 0xFF	; 255

00001de0 <__divmodhi4_exit>:
    1de0:	08 95       	ret

00001de2 <__tablejump2__>:
    1de2:	ee 0f       	add	r30, r30
    1de4:	ff 1f       	adc	r31, r31
    1de6:	00 24       	eor	r0, r0
    1de8:	00 1c       	adc	r0, r0
    1dea:	0b be       	out	0x3b, r0	; 59
    1dec:	07 90       	elpm	r0, Z+
    1dee:	f6 91       	elpm	r31, Z
    1df0:	e0 2d       	mov	r30, r0
    1df2:	09 94       	ijmp

00001df4 <__udivmodhi4>:
    1df4:	aa 1b       	sub	r26, r26
    1df6:	bb 1b       	sub	r27, r27
    1df8:	51 e1       	ldi	r21, 0x11	; 17
    1dfa:	07 c0       	rjmp	.+14     	; 0x1e0a <__udivmodhi4_ep>

00001dfc <__udivmodhi4_loop>:
    1dfc:	aa 1f       	adc	r26, r26
    1dfe:	bb 1f       	adc	r27, r27
    1e00:	a6 17       	cp	r26, r22
    1e02:	b7 07       	cpc	r27, r23
    1e04:	10 f0       	brcs	.+4      	; 0x1e0a <__udivmodhi4_ep>
    1e06:	a6 1b       	sub	r26, r22
    1e08:	b7 0b       	sbc	r27, r23

00001e0a <__udivmodhi4_ep>:
    1e0a:	88 1f       	adc	r24, r24
    1e0c:	99 1f       	adc	r25, r25
    1e0e:	5a 95       	dec	r21
    1e10:	a9 f7       	brne	.-22     	; 0x1dfc <__udivmodhi4_loop>
    1e12:	80 95       	com	r24
    1e14:	90 95       	com	r25
    1e16:	bc 01       	movw	r22, r24
    1e18:	cd 01       	movw	r24, r26
    1e1a:	08 95       	ret

00001e1c <do_rand>:
    1e1c:	8f 92       	push	r8
    1e1e:	9f 92       	push	r9
    1e20:	af 92       	push	r10
    1e22:	bf 92       	push	r11
    1e24:	cf 92       	push	r12
    1e26:	df 92       	push	r13
    1e28:	ef 92       	push	r14
    1e2a:	ff 92       	push	r15
    1e2c:	cf 93       	push	r28
    1e2e:	df 93       	push	r29
    1e30:	ec 01       	movw	r28, r24
    1e32:	68 81       	ld	r22, Y
    1e34:	79 81       	ldd	r23, Y+1	; 0x01
    1e36:	8a 81       	ldd	r24, Y+2	; 0x02
    1e38:	9b 81       	ldd	r25, Y+3	; 0x03
    1e3a:	61 15       	cp	r22, r1
    1e3c:	71 05       	cpc	r23, r1
    1e3e:	81 05       	cpc	r24, r1
    1e40:	91 05       	cpc	r25, r1
    1e42:	21 f4       	brne	.+8      	; 0x1e4c <do_rand+0x30>
    1e44:	64 e2       	ldi	r22, 0x24	; 36
    1e46:	79 ed       	ldi	r23, 0xD9	; 217
    1e48:	8b e5       	ldi	r24, 0x5B	; 91
    1e4a:	97 e0       	ldi	r25, 0x07	; 7
    1e4c:	2d e1       	ldi	r18, 0x1D	; 29
    1e4e:	33 ef       	ldi	r19, 0xF3	; 243
    1e50:	41 e0       	ldi	r20, 0x01	; 1
    1e52:	50 e0       	ldi	r21, 0x00	; 0
    1e54:	64 d0       	rcall	.+200    	; 0x1f1e <__divmodsi4>
    1e56:	49 01       	movw	r8, r18
    1e58:	5a 01       	movw	r10, r20
    1e5a:	9b 01       	movw	r18, r22
    1e5c:	ac 01       	movw	r20, r24
    1e5e:	a7 ea       	ldi	r26, 0xA7	; 167
    1e60:	b1 e4       	ldi	r27, 0x41	; 65
    1e62:	79 d0       	rcall	.+242    	; 0x1f56 <__muluhisi3>
    1e64:	6b 01       	movw	r12, r22
    1e66:	7c 01       	movw	r14, r24
    1e68:	ac ee       	ldi	r26, 0xEC	; 236
    1e6a:	b4 ef       	ldi	r27, 0xF4	; 244
    1e6c:	a5 01       	movw	r20, r10
    1e6e:	94 01       	movw	r18, r8
    1e70:	7e d0       	rcall	.+252    	; 0x1f6e <__mulohisi3>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	8c 0d       	add	r24, r12
    1e78:	9d 1d       	adc	r25, r13
    1e7a:	ae 1d       	adc	r26, r14
    1e7c:	bf 1d       	adc	r27, r15
    1e7e:	b7 ff       	sbrs	r27, 7
    1e80:	03 c0       	rjmp	.+6      	; 0x1e88 <do_rand+0x6c>
    1e82:	01 97       	sbiw	r24, 0x01	; 1
    1e84:	a1 09       	sbc	r26, r1
    1e86:	b0 48       	sbci	r27, 0x80	; 128
    1e88:	88 83       	st	Y, r24
    1e8a:	99 83       	std	Y+1, r25	; 0x01
    1e8c:	aa 83       	std	Y+2, r26	; 0x02
    1e8e:	bb 83       	std	Y+3, r27	; 0x03
    1e90:	9f 77       	andi	r25, 0x7F	; 127
    1e92:	df 91       	pop	r29
    1e94:	cf 91       	pop	r28
    1e96:	ff 90       	pop	r15
    1e98:	ef 90       	pop	r14
    1e9a:	df 90       	pop	r13
    1e9c:	cf 90       	pop	r12
    1e9e:	bf 90       	pop	r11
    1ea0:	af 90       	pop	r10
    1ea2:	9f 90       	pop	r9
    1ea4:	8f 90       	pop	r8
    1ea6:	08 95       	ret

00001ea8 <rand_r>:
    1ea8:	b9 cf       	rjmp	.-142    	; 0x1e1c <do_rand>

00001eaa <rand>:
    1eaa:	80 e0       	ldi	r24, 0x00	; 0
    1eac:	91 e0       	ldi	r25, 0x01	; 1
    1eae:	b6 cf       	rjmp	.-148    	; 0x1e1c <do_rand>

00001eb0 <srand>:
    1eb0:	a0 e0       	ldi	r26, 0x00	; 0
    1eb2:	b0 e0       	ldi	r27, 0x00	; 0
    1eb4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    1eb8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1ebc:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    1ec0:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    1ec4:	08 95       	ret

00001ec6 <memset>:
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	01 c0       	rjmp	.+2      	; 0x1ecc <memset+0x6>
    1eca:	6d 93       	st	X+, r22
    1ecc:	41 50       	subi	r20, 0x01	; 1
    1ece:	50 40       	sbci	r21, 0x00	; 0
    1ed0:	e0 f7       	brcc	.-8      	; 0x1eca <memset+0x4>
    1ed2:	08 95       	ret

00001ed4 <strncpy>:
    1ed4:	fb 01       	movw	r30, r22
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	41 50       	subi	r20, 0x01	; 1
    1eda:	50 40       	sbci	r21, 0x00	; 0
    1edc:	48 f0       	brcs	.+18     	; 0x1ef0 <strncpy+0x1c>
    1ede:	01 90       	ld	r0, Z+
    1ee0:	0d 92       	st	X+, r0
    1ee2:	00 20       	and	r0, r0
    1ee4:	c9 f7       	brne	.-14     	; 0x1ed8 <strncpy+0x4>
    1ee6:	01 c0       	rjmp	.+2      	; 0x1eea <strncpy+0x16>
    1ee8:	1d 92       	st	X+, r1
    1eea:	41 50       	subi	r20, 0x01	; 1
    1eec:	50 40       	sbci	r21, 0x00	; 0
    1eee:	e0 f7       	brcc	.-8      	; 0x1ee8 <strncpy+0x14>
    1ef0:	08 95       	ret

00001ef2 <eeprom_read_byte>:
    1ef2:	f9 99       	sbic	0x1f, 1	; 31
    1ef4:	fe cf       	rjmp	.-4      	; 0x1ef2 <eeprom_read_byte>
    1ef6:	92 bd       	out	0x22, r25	; 34
    1ef8:	81 bd       	out	0x21, r24	; 33
    1efa:	f8 9a       	sbi	0x1f, 0	; 31
    1efc:	99 27       	eor	r25, r25
    1efe:	80 b5       	in	r24, 0x20	; 32
    1f00:	08 95       	ret

00001f02 <eeprom_write_byte>:
    1f02:	26 2f       	mov	r18, r22

00001f04 <eeprom_write_r18>:
    1f04:	f9 99       	sbic	0x1f, 1	; 31
    1f06:	fe cf       	rjmp	.-4      	; 0x1f04 <eeprom_write_r18>
    1f08:	1f ba       	out	0x1f, r1	; 31
    1f0a:	92 bd       	out	0x22, r25	; 34
    1f0c:	81 bd       	out	0x21, r24	; 33
    1f0e:	20 bd       	out	0x20, r18	; 32
    1f10:	0f b6       	in	r0, 0x3f	; 63
    1f12:	f8 94       	cli
    1f14:	fa 9a       	sbi	0x1f, 2	; 31
    1f16:	f9 9a       	sbi	0x1f, 1	; 31
    1f18:	0f be       	out	0x3f, r0	; 63
    1f1a:	01 96       	adiw	r24, 0x01	; 1
    1f1c:	08 95       	ret

00001f1e <__divmodsi4>:
    1f1e:	05 2e       	mov	r0, r21
    1f20:	97 fb       	bst	r25, 7
    1f22:	16 f4       	brtc	.+4      	; 0x1f28 <__divmodsi4+0xa>
    1f24:	00 94       	com	r0
    1f26:	0f d0       	rcall	.+30     	; 0x1f46 <__negsi2>
    1f28:	57 fd       	sbrc	r21, 7
    1f2a:	05 d0       	rcall	.+10     	; 0x1f36 <__divmodsi4_neg2>
    1f2c:	24 d0       	rcall	.+72     	; 0x1f76 <__udivmodsi4>
    1f2e:	07 fc       	sbrc	r0, 7
    1f30:	02 d0       	rcall	.+4      	; 0x1f36 <__divmodsi4_neg2>
    1f32:	46 f4       	brtc	.+16     	; 0x1f44 <__divmodsi4_exit>
    1f34:	08 c0       	rjmp	.+16     	; 0x1f46 <__negsi2>

00001f36 <__divmodsi4_neg2>:
    1f36:	50 95       	com	r21
    1f38:	40 95       	com	r20
    1f3a:	30 95       	com	r19
    1f3c:	21 95       	neg	r18
    1f3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f40:	4f 4f       	sbci	r20, 0xFF	; 255
    1f42:	5f 4f       	sbci	r21, 0xFF	; 255

00001f44 <__divmodsi4_exit>:
    1f44:	08 95       	ret

00001f46 <__negsi2>:
    1f46:	90 95       	com	r25
    1f48:	80 95       	com	r24
    1f4a:	70 95       	com	r23
    1f4c:	61 95       	neg	r22
    1f4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f50:	8f 4f       	sbci	r24, 0xFF	; 255
    1f52:	9f 4f       	sbci	r25, 0xFF	; 255
    1f54:	08 95       	ret

00001f56 <__muluhisi3>:
    1f56:	31 d0       	rcall	.+98     	; 0x1fba <__umulhisi3>
    1f58:	a5 9f       	mul	r26, r21
    1f5a:	90 0d       	add	r25, r0
    1f5c:	b4 9f       	mul	r27, r20
    1f5e:	90 0d       	add	r25, r0
    1f60:	a4 9f       	mul	r26, r20
    1f62:	80 0d       	add	r24, r0
    1f64:	91 1d       	adc	r25, r1
    1f66:	11 24       	eor	r1, r1
    1f68:	08 95       	ret

00001f6a <__mulshisi3>:
    1f6a:	b7 ff       	sbrs	r27, 7
    1f6c:	f4 cf       	rjmp	.-24     	; 0x1f56 <__muluhisi3>

00001f6e <__mulohisi3>:
    1f6e:	f3 df       	rcall	.-26     	; 0x1f56 <__muluhisi3>
    1f70:	82 1b       	sub	r24, r18
    1f72:	93 0b       	sbc	r25, r19
    1f74:	08 95       	ret

00001f76 <__udivmodsi4>:
    1f76:	a1 e2       	ldi	r26, 0x21	; 33
    1f78:	1a 2e       	mov	r1, r26
    1f7a:	aa 1b       	sub	r26, r26
    1f7c:	bb 1b       	sub	r27, r27
    1f7e:	fd 01       	movw	r30, r26
    1f80:	0d c0       	rjmp	.+26     	; 0x1f9c <__udivmodsi4_ep>

00001f82 <__udivmodsi4_loop>:
    1f82:	aa 1f       	adc	r26, r26
    1f84:	bb 1f       	adc	r27, r27
    1f86:	ee 1f       	adc	r30, r30
    1f88:	ff 1f       	adc	r31, r31
    1f8a:	a2 17       	cp	r26, r18
    1f8c:	b3 07       	cpc	r27, r19
    1f8e:	e4 07       	cpc	r30, r20
    1f90:	f5 07       	cpc	r31, r21
    1f92:	20 f0       	brcs	.+8      	; 0x1f9c <__udivmodsi4_ep>
    1f94:	a2 1b       	sub	r26, r18
    1f96:	b3 0b       	sbc	r27, r19
    1f98:	e4 0b       	sbc	r30, r20
    1f9a:	f5 0b       	sbc	r31, r21

00001f9c <__udivmodsi4_ep>:
    1f9c:	66 1f       	adc	r22, r22
    1f9e:	77 1f       	adc	r23, r23
    1fa0:	88 1f       	adc	r24, r24
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	1a 94       	dec	r1
    1fa6:	69 f7       	brne	.-38     	; 0x1f82 <__udivmodsi4_loop>
    1fa8:	60 95       	com	r22
    1faa:	70 95       	com	r23
    1fac:	80 95       	com	r24
    1fae:	90 95       	com	r25
    1fb0:	9b 01       	movw	r18, r22
    1fb2:	ac 01       	movw	r20, r24
    1fb4:	bd 01       	movw	r22, r26
    1fb6:	cf 01       	movw	r24, r30
    1fb8:	08 95       	ret

00001fba <__umulhisi3>:
    1fba:	a2 9f       	mul	r26, r18
    1fbc:	b0 01       	movw	r22, r0
    1fbe:	b3 9f       	mul	r27, r19
    1fc0:	c0 01       	movw	r24, r0
    1fc2:	a3 9f       	mul	r26, r19
    1fc4:	70 0d       	add	r23, r0
    1fc6:	81 1d       	adc	r24, r1
    1fc8:	11 24       	eor	r1, r1
    1fca:	91 1d       	adc	r25, r1
    1fcc:	b2 9f       	mul	r27, r18
    1fce:	70 0d       	add	r23, r0
    1fd0:	81 1d       	adc	r24, r1
    1fd2:	11 24       	eor	r1, r1
    1fd4:	91 1d       	adc	r25, r1
    1fd6:	08 95       	ret

00001fd8 <_exit>:
    1fd8:	f8 94       	cli

00001fda <__stop_program>:
    1fda:	ff cf       	rjmp	.-2      	; 0x1fda <__stop_program>
