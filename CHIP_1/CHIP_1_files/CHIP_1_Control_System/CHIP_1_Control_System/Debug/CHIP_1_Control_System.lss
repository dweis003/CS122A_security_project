
CHIP_1_Control_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000021e  00800100  00002132  000021c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002132  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000065a  0080031e  0080031e  000023e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000023e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002414  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a8  00000000  00000000  00002458  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003ef6  00000000  00000000  00002800  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000109a  00000000  00000000  000066f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002bb9  00000000  00000000  00007790  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000904  00000000  00000000  0000a34c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001381  00000000  00000000  0000ac50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000021a9  00000000  00000000  0000bfd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000360  00000000  00000000  0000e17a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	50 c0       	rjmp	.+160    	; 0xa2 <__ctors_end>
       2:	00 00       	nop
       4:	6d c0       	rjmp	.+218    	; 0xe0 <__bad_interrupt>
       6:	00 00       	nop
       8:	6b c0       	rjmp	.+214    	; 0xe0 <__bad_interrupt>
       a:	00 00       	nop
       c:	69 c0       	rjmp	.+210    	; 0xe0 <__bad_interrupt>
       e:	00 00       	nop
      10:	67 c0       	rjmp	.+206    	; 0xe0 <__bad_interrupt>
      12:	00 00       	nop
      14:	65 c0       	rjmp	.+202    	; 0xe0 <__bad_interrupt>
      16:	00 00       	nop
      18:	63 c0       	rjmp	.+198    	; 0xe0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	61 c0       	rjmp	.+194    	; 0xe0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5f c0       	rjmp	.+190    	; 0xe0 <__bad_interrupt>
      22:	00 00       	nop
      24:	5d c0       	rjmp	.+186    	; 0xe0 <__bad_interrupt>
      26:	00 00       	nop
      28:	5b c0       	rjmp	.+182    	; 0xe0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	59 c0       	rjmp	.+178    	; 0xe0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	57 c0       	rjmp	.+174    	; 0xe0 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 13 0c 	jmp	0x1826	; 0x1826 <__vector_13>
      38:	53 c0       	rjmp	.+166    	; 0xe0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	51 c0       	rjmp	.+162    	; 0xe0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4f c0       	rjmp	.+158    	; 0xe0 <__bad_interrupt>
      42:	00 00       	nop
      44:	4d c0       	rjmp	.+154    	; 0xe0 <__bad_interrupt>
      46:	00 00       	nop
      48:	4b c0       	rjmp	.+150    	; 0xe0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	49 c0       	rjmp	.+146    	; 0xe0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	47 c0       	rjmp	.+142    	; 0xe0 <__bad_interrupt>
      52:	00 00       	nop
      54:	45 c0       	rjmp	.+138    	; 0xe0 <__bad_interrupt>
      56:	00 00       	nop
      58:	43 c0       	rjmp	.+134    	; 0xe0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	41 c0       	rjmp	.+130    	; 0xe0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3f c0       	rjmp	.+126    	; 0xe0 <__bad_interrupt>
      62:	00 00       	nop
      64:	3d c0       	rjmp	.+122    	; 0xe0 <__bad_interrupt>
      66:	00 00       	nop
      68:	3b c0       	rjmp	.+118    	; 0xe0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	39 c0       	rjmp	.+114    	; 0xe0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	37 c0       	rjmp	.+110    	; 0xe0 <__bad_interrupt>
      72:	00 00       	nop
      74:	35 c0       	rjmp	.+106    	; 0xe0 <__bad_interrupt>
      76:	00 00       	nop
      78:	33 c0       	rjmp	.+102    	; 0xe0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	31 c0       	rjmp	.+98     	; 0xe0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2f c0       	rjmp	.+94     	; 0xe0 <__bad_interrupt>
      82:	00 00       	nop
      84:	2d c0       	rjmp	.+90     	; 0xe0 <__bad_interrupt>
      86:	00 00       	nop
      88:	2b c0       	rjmp	.+86     	; 0xe0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	95 05       	cpc	r25, r5
      8e:	ef 05       	cpc	r30, r15
      90:	9c 05       	cpc	r25, r12
      92:	54 06       	cpc	r5, r20
      94:	2c 07       	cpc	r18, r28
      96:	39 07       	cpc	r19, r25
      98:	98 08       	sbc	r9, r8
      9a:	94 07       	cpc	r25, r20
      9c:	ef 07       	cpc	r30, r31
      9e:	fc 07       	cpc	r31, r28
      a0:	34 08       	sbc	r3, r4

000000a2 <__ctors_end>:
      a2:	11 24       	eor	r1, r1
      a4:	1f be       	out	0x3f, r1	; 63
      a6:	cf ef       	ldi	r28, 0xFF	; 255
      a8:	d0 e4       	ldi	r29, 0x40	; 64
      aa:	de bf       	out	0x3e, r29	; 62
      ac:	cd bf       	out	0x3d, r28	; 61

000000ae <__do_copy_data>:
      ae:	13 e0       	ldi	r17, 0x03	; 3
      b0:	a0 e0       	ldi	r26, 0x00	; 0
      b2:	b1 e0       	ldi	r27, 0x01	; 1
      b4:	e2 e3       	ldi	r30, 0x32	; 50
      b6:	f1 e2       	ldi	r31, 0x21	; 33
      b8:	00 e0       	ldi	r16, 0x00	; 0
      ba:	0b bf       	out	0x3b, r16	; 59
      bc:	02 c0       	rjmp	.+4      	; 0xc2 <__do_copy_data+0x14>
      be:	07 90       	elpm	r0, Z+
      c0:	0d 92       	st	X+, r0
      c2:	ae 31       	cpi	r26, 0x1E	; 30
      c4:	b1 07       	cpc	r27, r17
      c6:	d9 f7       	brne	.-10     	; 0xbe <__do_copy_data+0x10>

000000c8 <__do_clear_bss>:
      c8:	29 e0       	ldi	r18, 0x09	; 9
      ca:	ae e1       	ldi	r26, 0x1E	; 30
      cc:	b3 e0       	ldi	r27, 0x03	; 3
      ce:	01 c0       	rjmp	.+2      	; 0xd2 <.do_clear_bss_start>

000000d0 <.do_clear_bss_loop>:
      d0:	1d 92       	st	X+, r1

000000d2 <.do_clear_bss_start>:
      d2:	a8 37       	cpi	r26, 0x78	; 120
      d4:	b2 07       	cpc	r27, r18
      d6:	e1 f7       	brne	.-8      	; 0xd0 <.do_clear_bss_loop>
      d8:	0e 94 81 0a 	call	0x1502	; 0x1502 <main>
      dc:	0c 94 97 10 	jmp	0x212e	; 0x212e <_exit>

000000e0 <__bad_interrupt>:
      e0:	8f cf       	rjmp	.-226    	; 0x0 <__vectors>

000000e2 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
      e2:	cf 93       	push	r28
      e4:	df 93       	push	r29
      e6:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
      e8:	0e 94 76 0d 	call	0x1aec	; 0x1aec <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
      ec:	20 91 1e 03 	lds	r18, 0x031E	; 0x80031e <__data_end>
      f0:	30 91 1f 03 	lds	r19, 0x031F	; 0x80031f <__data_end+0x1>
      f4:	c9 01       	movw	r24, r18
      f6:	8c 0f       	add	r24, r28
      f8:	9d 1f       	adc	r25, r29
      fa:	8c 3d       	cpi	r24, 0xDC	; 220
      fc:	45 e0       	ldi	r20, 0x05	; 5
      fe:	94 07       	cpc	r25, r20
     100:	58 f4       	brcc	.+22     	; 0x118 <pvPortMalloc+0x36>
     102:	28 17       	cp	r18, r24
     104:	39 07       	cpc	r19, r25
     106:	58 f4       	brcc	.+22     	; 0x11e <pvPortMalloc+0x3c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     108:	e9 01       	movw	r28, r18
     10a:	c0 5e       	subi	r28, 0xE0	; 224
     10c:	dc 4f       	sbci	r29, 0xFC	; 252
			xNextFreeByte += xWantedSize;			
     10e:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <__data_end+0x1>
     112:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <__data_end>
     116:	05 c0       	rjmp	.+10     	; 0x122 <pvPortMalloc+0x40>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
     118:	c0 e0       	ldi	r28, 0x00	; 0
     11a:	d0 e0       	ldi	r29, 0x00	; 0
     11c:	02 c0       	rjmp	.+4      	; 0x122 <pvPortMalloc+0x40>
     11e:	c0 e0       	ldi	r28, 0x00	; 0
     120:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     122:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     126:	ce 01       	movw	r24, r28
     128:	df 91       	pop	r29
     12a:	cf 91       	pop	r28
     12c:	08 95       	ret

0000012e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     12e:	08 95       	ret

00000130 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     130:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     132:	03 96       	adiw	r24, 0x03	; 3
     134:	92 83       	std	Z+2, r25	; 0x02
     136:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     138:	2f ef       	ldi	r18, 0xFF	; 255
     13a:	3f ef       	ldi	r19, 0xFF	; 255
     13c:	34 83       	std	Z+4, r19	; 0x04
     13e:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     140:	96 83       	std	Z+6, r25	; 0x06
     142:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     144:	90 87       	std	Z+8, r25	; 0x08
     146:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     148:	10 82       	st	Z, r1
     14a:	08 95       	ret

0000014c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     14c:	fc 01       	movw	r30, r24
     14e:	11 86       	std	Z+9, r1	; 0x09
     150:	10 86       	std	Z+8, r1	; 0x08
     152:	08 95       	ret

00000154 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     154:	cf 93       	push	r28
     156:	df 93       	push	r29
     158:	fc 01       	movw	r30, r24
     15a:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     15c:	21 81       	ldd	r18, Z+1	; 0x01
     15e:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
     160:	e9 01       	movw	r28, r18
     162:	8a 81       	ldd	r24, Y+2	; 0x02
     164:	9b 81       	ldd	r25, Y+3	; 0x03
     166:	13 96       	adiw	r26, 0x03	; 3
     168:	9c 93       	st	X, r25
     16a:	8e 93       	st	-X, r24
     16c:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
     16e:	81 81       	ldd	r24, Z+1	; 0x01
     170:	92 81       	ldd	r25, Z+2	; 0x02
     172:	15 96       	adiw	r26, 0x05	; 5
     174:	9c 93       	st	X, r25
     176:	8e 93       	st	-X, r24
     178:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     17a:	8a 81       	ldd	r24, Y+2	; 0x02
     17c:	9b 81       	ldd	r25, Y+3	; 0x03
     17e:	ec 01       	movw	r28, r24
     180:	7d 83       	std	Y+5, r23	; 0x05
     182:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     184:	e9 01       	movw	r28, r18
     186:	7b 83       	std	Y+3, r23	; 0x03
     188:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     18a:	72 83       	std	Z+2, r23	; 0x02
     18c:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     18e:	19 96       	adiw	r26, 0x09	; 9
     190:	fc 93       	st	X, r31
     192:	ee 93       	st	-X, r30
     194:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
     196:	80 81       	ld	r24, Z
     198:	8f 5f       	subi	r24, 0xFF	; 255
     19a:	80 83       	st	Z, r24
}
     19c:	df 91       	pop	r29
     19e:	cf 91       	pop	r28
     1a0:	08 95       	ret

000001a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     1a2:	cf 93       	push	r28
     1a4:	df 93       	push	r29
     1a6:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     1a8:	48 81       	ld	r20, Y
     1aa:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     1ac:	4f 3f       	cpi	r20, 0xFF	; 255
     1ae:	2f ef       	ldi	r18, 0xFF	; 255
     1b0:	52 07       	cpc	r21, r18
     1b2:	31 f4       	brne	.+12     	; 0x1c0 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     1b4:	dc 01       	movw	r26, r24
     1b6:	17 96       	adiw	r26, 0x07	; 7
     1b8:	ed 91       	ld	r30, X+
     1ba:	fc 91       	ld	r31, X
     1bc:	18 97       	sbiw	r26, 0x08	; 8
     1be:	17 c0       	rjmp	.+46     	; 0x1ee <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     1c0:	fc 01       	movw	r30, r24
     1c2:	33 96       	adiw	r30, 0x03	; 3
     1c4:	dc 01       	movw	r26, r24
     1c6:	15 96       	adiw	r26, 0x05	; 5
     1c8:	2d 91       	ld	r18, X+
     1ca:	3c 91       	ld	r19, X
     1cc:	16 97       	sbiw	r26, 0x06	; 6
     1ce:	d9 01       	movw	r26, r18
     1d0:	2d 91       	ld	r18, X+
     1d2:	3c 91       	ld	r19, X
     1d4:	42 17       	cp	r20, r18
     1d6:	53 07       	cpc	r21, r19
     1d8:	50 f0       	brcs	.+20     	; 0x1ee <vListInsert+0x4c>
     1da:	02 80       	ldd	r0, Z+2	; 0x02
     1dc:	f3 81       	ldd	r31, Z+3	; 0x03
     1de:	e0 2d       	mov	r30, r0
     1e0:	a2 81       	ldd	r26, Z+2	; 0x02
     1e2:	b3 81       	ldd	r27, Z+3	; 0x03
     1e4:	2d 91       	ld	r18, X+
     1e6:	3c 91       	ld	r19, X
     1e8:	42 17       	cp	r20, r18
     1ea:	53 07       	cpc	r21, r19
     1ec:	b0 f7       	brcc	.-20     	; 0x1da <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     1ee:	a2 81       	ldd	r26, Z+2	; 0x02
     1f0:	b3 81       	ldd	r27, Z+3	; 0x03
     1f2:	bb 83       	std	Y+3, r27	; 0x03
     1f4:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     1f6:	15 96       	adiw	r26, 0x05	; 5
     1f8:	dc 93       	st	X, r29
     1fa:	ce 93       	st	-X, r28
     1fc:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
     1fe:	fd 83       	std	Y+5, r31	; 0x05
     200:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     202:	d3 83       	std	Z+3, r29	; 0x03
     204:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     206:	99 87       	std	Y+9, r25	; 0x09
     208:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     20a:	fc 01       	movw	r30, r24
     20c:	20 81       	ld	r18, Z
     20e:	2f 5f       	subi	r18, 0xFF	; 255
     210:	20 83       	st	Z, r18
}
     212:	df 91       	pop	r29
     214:	cf 91       	pop	r28
     216:	08 95       	ret

00000218 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     218:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     21a:	a2 81       	ldd	r26, Z+2	; 0x02
     21c:	b3 81       	ldd	r27, Z+3	; 0x03
     21e:	84 81       	ldd	r24, Z+4	; 0x04
     220:	95 81       	ldd	r25, Z+5	; 0x05
     222:	15 96       	adiw	r26, 0x05	; 5
     224:	9c 93       	st	X, r25
     226:	8e 93       	st	-X, r24
     228:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     22a:	a4 81       	ldd	r26, Z+4	; 0x04
     22c:	b5 81       	ldd	r27, Z+5	; 0x05
     22e:	82 81       	ldd	r24, Z+2	; 0x02
     230:	93 81       	ldd	r25, Z+3	; 0x03
     232:	13 96       	adiw	r26, 0x03	; 3
     234:	9c 93       	st	X, r25
     236:	8e 93       	st	-X, r24
     238:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     23a:	a0 85       	ldd	r26, Z+8	; 0x08
     23c:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     23e:	11 96       	adiw	r26, 0x01	; 1
     240:	8d 91       	ld	r24, X+
     242:	9c 91       	ld	r25, X
     244:	12 97       	sbiw	r26, 0x02	; 2
     246:	e8 17       	cp	r30, r24
     248:	f9 07       	cpc	r31, r25
     24a:	31 f4       	brne	.+12     	; 0x258 <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     24c:	84 81       	ldd	r24, Z+4	; 0x04
     24e:	95 81       	ldd	r25, Z+5	; 0x05
     250:	12 96       	adiw	r26, 0x02	; 2
     252:	9c 93       	st	X, r25
     254:	8e 93       	st	-X, r24
     256:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
     258:	11 86       	std	Z+9, r1	; 0x09
     25a:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     25c:	8c 91       	ld	r24, X
     25e:	81 50       	subi	r24, 0x01	; 1
     260:	8c 93       	st	X, r24
     262:	08 95       	ret

00000264 <initUSART>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//buzz when sensor tripped
enum BUZZERState {buzz_wait, no_buzz, buzz_high, buzz_low} buzzer_state;

void buzz_Init(){
	buzzer_state = buzz_wait;
     264:	81 30       	cpi	r24, 0x01	; 1
     266:	81 f0       	breq	.+32     	; 0x288 <initUSART+0x24>
     268:	e1 ec       	ldi	r30, 0xC1	; 193
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	88 61       	ori	r24, 0x18	; 24
     270:	80 83       	st	Z, r24
     272:	e2 ec       	ldi	r30, 0xC2	; 194
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	80 81       	ld	r24, Z
     278:	86 60       	ori	r24, 0x06	; 6
     27a:	80 83       	st	Z, r24
     27c:	83 e3       	ldi	r24, 0x33	; 51
     27e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     282:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     286:	08 95       	ret
     288:	e9 ec       	ldi	r30, 0xC9	; 201
     28a:	f0 e0       	ldi	r31, 0x00	; 0
     28c:	80 81       	ld	r24, Z
     28e:	88 61       	ori	r24, 0x18	; 24
     290:	80 83       	st	Z, r24
     292:	ea ec       	ldi	r30, 0xCA	; 202
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	80 81       	ld	r24, Z
     298:	86 60       	ori	r24, 0x06	; 6
     29a:	80 83       	st	Z, r24
     29c:	83 e3       	ldi	r24, 0x33	; 51
     29e:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     2a2:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     2a6:	08 95       	ret

000002a8 <USART_Flush>:
     2a8:	81 30       	cpi	r24, 0x01	; 1
     2aa:	29 f4       	brne	.+10     	; 0x2b6 <USART_Flush+0xe>
     2ac:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     2b0:	88 23       	and	r24, r24
     2b2:	74 f0       	brlt	.+28     	; 0x2d0 <USART_Flush+0x28>
     2b4:	08 95       	ret
     2b6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     2ba:	88 23       	and	r24, r24
     2bc:	8c f4       	brge	.+34     	; 0x2e0 <USART_Flush+0x38>
     2be:	a6 ec       	ldi	r26, 0xC6	; 198
     2c0:	b0 e0       	ldi	r27, 0x00	; 0
     2c2:	e0 ec       	ldi	r30, 0xC0	; 192
     2c4:	f0 e0       	ldi	r31, 0x00	; 0
     2c6:	8c 91       	ld	r24, X
     2c8:	80 81       	ld	r24, Z
     2ca:	88 23       	and	r24, r24
     2cc:	e4 f3       	brlt	.-8      	; 0x2c6 <USART_Flush+0x1e>
     2ce:	08 95       	ret
     2d0:	ae ec       	ldi	r26, 0xCE	; 206
     2d2:	b0 e0       	ldi	r27, 0x00	; 0
     2d4:	e8 ec       	ldi	r30, 0xC8	; 200
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	8c 91       	ld	r24, X
     2da:	80 81       	ld	r24, Z
     2dc:	88 23       	and	r24, r24
     2de:	e4 f3       	brlt	.-8      	; 0x2d8 <USART_Flush+0x30>
     2e0:	08 95       	ret

000002e2 <USART_Send>:
     2e2:	61 30       	cpi	r22, 0x01	; 1
     2e4:	41 f0       	breq	.+16     	; 0x2f6 <USART_Send+0x14>
     2e6:	e0 ec       	ldi	r30, 0xC0	; 192
     2e8:	f0 e0       	ldi	r31, 0x00	; 0
     2ea:	90 81       	ld	r25, Z
     2ec:	95 ff       	sbrs	r25, 5
     2ee:	fd cf       	rjmp	.-6      	; 0x2ea <USART_Send+0x8>
     2f0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     2f4:	08 95       	ret
     2f6:	e8 ec       	ldi	r30, 0xC8	; 200
     2f8:	f0 e0       	ldi	r31, 0x00	; 0
     2fa:	90 81       	ld	r25, Z
     2fc:	95 ff       	sbrs	r25, 5
     2fe:	fd cf       	rjmp	.-6      	; 0x2fa <USART_Send+0x18>
     300:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     304:	08 95       	ret

00000306 <USART_Receive>:
     306:	81 30       	cpi	r24, 0x01	; 1
     308:	41 f0       	breq	.+16     	; 0x31a <USART_Receive+0x14>
     30a:	e0 ec       	ldi	r30, 0xC0	; 192
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	80 81       	ld	r24, Z
     310:	88 23       	and	r24, r24
     312:	ec f7       	brge	.-6      	; 0x30e <USART_Receive+0x8>
     314:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     318:	08 95       	ret
     31a:	e8 ec       	ldi	r30, 0xC8	; 200
     31c:	f0 e0       	ldi	r31, 0x00	; 0
     31e:	80 81       	ld	r24, Z
     320:	88 23       	and	r24, r24
     322:	ec f7       	brge	.-6      	; 0x31e <USART_Receive+0x18>
     324:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     328:	08 95       	ret

0000032a <GetKeypadKey>:
     32a:	8f ee       	ldi	r24, 0xEF	; 239
     32c:	82 b9       	out	0x02, r24	; 2
     32e:	00 00       	nop
     330:	00 9b       	sbis	0x00, 0	; 0
     332:	44 c0       	rjmp	.+136    	; 0x3bc <GetKeypadKey+0x92>
     334:	80 b1       	in	r24, 0x00	; 0
     336:	80 95       	com	r24
     338:	81 fd       	sbrc	r24, 1
     33a:	42 c0       	rjmp	.+132    	; 0x3c0 <GetKeypadKey+0x96>
     33c:	80 b1       	in	r24, 0x00	; 0
     33e:	80 95       	com	r24
     340:	82 fd       	sbrc	r24, 2
     342:	40 c0       	rjmp	.+128    	; 0x3c4 <GetKeypadKey+0x9a>
     344:	80 b1       	in	r24, 0x00	; 0
     346:	80 95       	com	r24
     348:	83 fd       	sbrc	r24, 3
     34a:	3e c0       	rjmp	.+124    	; 0x3c8 <GetKeypadKey+0x9e>
     34c:	8f ed       	ldi	r24, 0xDF	; 223
     34e:	82 b9       	out	0x02, r24	; 2
     350:	00 00       	nop
     352:	00 9b       	sbis	0x00, 0	; 0
     354:	3b c0       	rjmp	.+118    	; 0x3cc <GetKeypadKey+0xa2>
     356:	80 b1       	in	r24, 0x00	; 0
     358:	80 95       	com	r24
     35a:	81 fd       	sbrc	r24, 1
     35c:	39 c0       	rjmp	.+114    	; 0x3d0 <GetKeypadKey+0xa6>
     35e:	80 b1       	in	r24, 0x00	; 0
     360:	80 95       	com	r24
     362:	82 fd       	sbrc	r24, 2
     364:	37 c0       	rjmp	.+110    	; 0x3d4 <GetKeypadKey+0xaa>
     366:	80 b1       	in	r24, 0x00	; 0
     368:	80 95       	com	r24
     36a:	83 fd       	sbrc	r24, 3
     36c:	35 c0       	rjmp	.+106    	; 0x3d8 <GetKeypadKey+0xae>
     36e:	8f eb       	ldi	r24, 0xBF	; 191
     370:	82 b9       	out	0x02, r24	; 2
     372:	00 00       	nop
     374:	00 9b       	sbis	0x00, 0	; 0
     376:	32 c0       	rjmp	.+100    	; 0x3dc <GetKeypadKey+0xb2>
     378:	80 b1       	in	r24, 0x00	; 0
     37a:	80 95       	com	r24
     37c:	81 fd       	sbrc	r24, 1
     37e:	30 c0       	rjmp	.+96     	; 0x3e0 <GetKeypadKey+0xb6>
     380:	80 b1       	in	r24, 0x00	; 0
     382:	80 95       	com	r24
     384:	82 fd       	sbrc	r24, 2
     386:	2e c0       	rjmp	.+92     	; 0x3e4 <GetKeypadKey+0xba>
     388:	80 b1       	in	r24, 0x00	; 0
     38a:	80 95       	com	r24
     38c:	83 fd       	sbrc	r24, 3
     38e:	2c c0       	rjmp	.+88     	; 0x3e8 <GetKeypadKey+0xbe>
     390:	8f e7       	ldi	r24, 0x7F	; 127
     392:	82 b9       	out	0x02, r24	; 2
     394:	00 00       	nop
     396:	90 b1       	in	r25, 0x00	; 0
     398:	90 95       	com	r25
     39a:	89 2f       	mov	r24, r25
     39c:	81 70       	andi	r24, 0x01	; 1
     39e:	90 fd       	sbrc	r25, 0
     3a0:	25 c0       	rjmp	.+74     	; 0x3ec <GetKeypadKey+0xc2>
     3a2:	90 b1       	in	r25, 0x00	; 0
     3a4:	90 95       	com	r25
     3a6:	91 fd       	sbrc	r25, 1
     3a8:	23 c0       	rjmp	.+70     	; 0x3f0 <GetKeypadKey+0xc6>
     3aa:	90 b1       	in	r25, 0x00	; 0
     3ac:	90 95       	com	r25
     3ae:	92 fd       	sbrc	r25, 2
     3b0:	21 c0       	rjmp	.+66     	; 0x3f4 <GetKeypadKey+0xca>
     3b2:	90 b1       	in	r25, 0x00	; 0
     3b4:	90 95       	com	r25
     3b6:	93 fd       	sbrc	r25, 3
     3b8:	1f c0       	rjmp	.+62     	; 0x3f8 <GetKeypadKey+0xce>
     3ba:	08 95       	ret
     3bc:	81 e3       	ldi	r24, 0x31	; 49
     3be:	08 95       	ret
     3c0:	84 e3       	ldi	r24, 0x34	; 52
     3c2:	08 95       	ret
     3c4:	87 e3       	ldi	r24, 0x37	; 55
     3c6:	08 95       	ret
     3c8:	8a e2       	ldi	r24, 0x2A	; 42
     3ca:	08 95       	ret
     3cc:	82 e3       	ldi	r24, 0x32	; 50
     3ce:	08 95       	ret
     3d0:	85 e3       	ldi	r24, 0x35	; 53
     3d2:	08 95       	ret
     3d4:	88 e3       	ldi	r24, 0x38	; 56
     3d6:	08 95       	ret
     3d8:	80 e3       	ldi	r24, 0x30	; 48
     3da:	08 95       	ret
     3dc:	83 e3       	ldi	r24, 0x33	; 51
     3de:	08 95       	ret
     3e0:	86 e3       	ldi	r24, 0x36	; 54
     3e2:	08 95       	ret
     3e4:	89 e3       	ldi	r24, 0x39	; 57
     3e6:	08 95       	ret
     3e8:	83 e2       	ldi	r24, 0x23	; 35
     3ea:	08 95       	ret
     3ec:	81 e4       	ldi	r24, 0x41	; 65
     3ee:	08 95       	ret
     3f0:	82 e4       	ldi	r24, 0x42	; 66
     3f2:	08 95       	ret
     3f4:	83 e4       	ldi	r24, 0x43	; 67
     3f6:	08 95       	ret
     3f8:	84 e4       	ldi	r24, 0x44	; 68
     3fa:	08 95       	ret

000003fc <delay_ms>:
     3fc:	18 16       	cp	r1, r24
     3fe:	19 06       	cpc	r1, r25
     400:	5c f0       	brlt	.+22     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     402:	08 95       	ret
     404:	00 00       	nop
     406:	21 50       	subi	r18, 0x01	; 1
     408:	31 09       	sbc	r19, r1
     40a:	e1 f7       	brne	.-8      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     40c:	4f 5f       	subi	r20, 0xFF	; 255
     40e:	5f 4f       	sbci	r21, 0xFF	; 255
     410:	84 17       	cp	r24, r20
     412:	95 07       	cpc	r25, r21
     414:	19 f4       	brne	.+6      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     416:	08 95       	ret
     418:	40 e0       	ldi	r20, 0x00	; 0
     41a:	50 e0       	ldi	r21, 0x00	; 0
     41c:	27 e0       	ldi	r18, 0x07	; 7
     41e:	33 e0       	ldi	r19, 0x03	; 3
     420:	f1 cf       	rjmp	.-30     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>

00000422 <LCD_WriteCommand>:
     422:	5e 98       	cbi	0x0b, 6	; 11
     424:	88 b9       	out	0x08, r24	; 8
     426:	5f 9a       	sbi	0x0b, 7	; 11
     428:	00 00       	nop
     42a:	5f 98       	cbi	0x0b, 7	; 11
     42c:	82 e0       	ldi	r24, 0x02	; 2
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	e5 cf       	rjmp	.-54     	; 0x3fc <delay_ms>
     432:	08 95       	ret

00000434 <LCD_ClearScreen>:
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	f5 cf       	rjmp	.-22     	; 0x422 <LCD_WriteCommand>
     438:	08 95       	ret

0000043a <LCD_Cursor>:
     43a:	81 31       	cpi	r24, 0x11	; 17
     43c:	18 f4       	brcc	.+6      	; 0x444 <LCD_Cursor+0xa>
     43e:	81 58       	subi	r24, 0x81	; 129
     440:	f0 cf       	rjmp	.-32     	; 0x422 <LCD_WriteCommand>
     442:	08 95       	ret
     444:	81 55       	subi	r24, 0x51	; 81
     446:	ed cf       	rjmp	.-38     	; 0x422 <LCD_WriteCommand>
     448:	08 95       	ret

0000044a <LCD_init>:
     44a:	84 e6       	ldi	r24, 0x64	; 100
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	d6 df       	rcall	.-84     	; 0x3fc <delay_ms>
     450:	88 e3       	ldi	r24, 0x38	; 56
     452:	e7 df       	rcall	.-50     	; 0x422 <LCD_WriteCommand>
     454:	86 e0       	ldi	r24, 0x06	; 6
     456:	e5 df       	rcall	.-54     	; 0x422 <LCD_WriteCommand>
     458:	8f e0       	ldi	r24, 0x0F	; 15
     45a:	e3 df       	rcall	.-58     	; 0x422 <LCD_WriteCommand>
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	e1 df       	rcall	.-62     	; 0x422 <LCD_WriteCommand>
     460:	8a e0       	ldi	r24, 0x0A	; 10
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	cb cf       	rjmp	.-106    	; 0x3fc <delay_ms>
     466:	08 95       	ret

00000468 <LCD_WriteData>:
     468:	5e 9a       	sbi	0x0b, 6	; 11
     46a:	88 b9       	out	0x08, r24	; 8
     46c:	5f 9a       	sbi	0x0b, 7	; 11
     46e:	00 00       	nop
     470:	5f 98       	cbi	0x0b, 7	; 11
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	c2 cf       	rjmp	.-124    	; 0x3fc <delay_ms>
     478:	08 95       	ret

0000047a <LCD_DisplayString>:
     47a:	0f 93       	push	r16
     47c:	1f 93       	push	r17
     47e:	cf 93       	push	r28
     480:	df 93       	push	r29
     482:	18 2f       	mov	r17, r24
     484:	eb 01       	movw	r28, r22
     486:	d6 df       	rcall	.-84     	; 0x434 <LCD_ClearScreen>
     488:	88 81       	ld	r24, Y
     48a:	88 23       	and	r24, r24
     48c:	51 f0       	breq	.+20     	; 0x4a2 <LCD_DisplayString+0x28>
     48e:	01 e0       	ldi	r16, 0x01	; 1
     490:	01 0f       	add	r16, r17
     492:	81 2f       	mov	r24, r17
     494:	d2 df       	rcall	.-92     	; 0x43a <LCD_Cursor>
     496:	89 91       	ld	r24, Y+
     498:	e7 df       	rcall	.-50     	; 0x468 <LCD_WriteData>
     49a:	10 2f       	mov	r17, r16
     49c:	88 81       	ld	r24, Y
     49e:	81 11       	cpse	r24, r1
     4a0:	f6 cf       	rjmp	.-20     	; 0x48e <LCD_DisplayString+0x14>
     4a2:	df 91       	pop	r29
     4a4:	cf 91       	pop	r28
     4a6:	1f 91       	pop	r17
     4a8:	0f 91       	pop	r16
     4aa:	08 95       	ret

000004ac <transmit_data>:
     4ac:	fc 01       	movw	r30, r24
     4ae:	20 e0       	ldi	r18, 0x00	; 0
     4b0:	30 e0       	ldi	r19, 0x00	; 0
     4b2:	58 e0       	ldi	r21, 0x08	; 8
     4b4:	55 b9       	out	0x05, r21	; 5
     4b6:	45 b1       	in	r20, 0x05	; 5
     4b8:	bf 01       	movw	r22, r30
     4ba:	02 2e       	mov	r0, r18
     4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <transmit_data+0x16>
     4be:	76 95       	lsr	r23
     4c0:	67 95       	ror	r22
     4c2:	0a 94       	dec	r0
     4c4:	e2 f7       	brpl	.-8      	; 0x4be <transmit_data+0x12>
     4c6:	96 2f       	mov	r25, r22
     4c8:	91 70       	andi	r25, 0x01	; 1
     4ca:	94 2b       	or	r25, r20
     4cc:	95 b9       	out	0x05, r25	; 5
     4ce:	29 9a       	sbi	0x05, 1	; 5
     4d0:	2f 5f       	subi	r18, 0xFF	; 255
     4d2:	3f 4f       	sbci	r19, 0xFF	; 255
     4d4:	20 31       	cpi	r18, 0x10	; 16
     4d6:	31 05       	cpc	r19, r1
     4d8:	69 f7       	brne	.-38     	; 0x4b4 <transmit_data+0x8>
     4da:	2a 9a       	sbi	0x05, 2	; 5
     4dc:	15 b8       	out	0x05, r1	; 5
     4de:	08 95       	ret

000004e0 <matrix_print>:
     4e0:	fb 01       	movw	r30, r22
     4e2:	da 01       	movw	r26, r20
     4e4:	10 82       	st	Z, r1
     4e6:	1c 92       	st	X, r1
     4e8:	41 e0       	ldi	r20, 0x01	; 1
     4ea:	50 e0       	ldi	r21, 0x00	; 0
     4ec:	02 2e       	mov	r0, r18
     4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <matrix_print+0x14>
     4f0:	44 0f       	add	r20, r20
     4f2:	55 1f       	adc	r21, r21
     4f4:	0a 94       	dec	r0
     4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <matrix_print+0x10>
     4f8:	30 81       	ld	r19, Z
     4fa:	43 2b       	or	r20, r19
     4fc:	40 83       	st	Z, r20
     4fe:	fc 01       	movw	r30, r24
     500:	30 e1       	ldi	r19, 0x10	; 16
     502:	23 9f       	mul	r18, r19
     504:	e0 0d       	add	r30, r0
     506:	f1 1d       	adc	r31, r1
     508:	11 24       	eor	r1, r1
     50a:	20 e0       	ldi	r18, 0x00	; 0
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	41 e0       	ldi	r20, 0x01	; 1
     510:	50 e0       	ldi	r21, 0x00	; 0
     512:	81 91       	ld	r24, Z+
     514:	91 91       	ld	r25, Z+
     516:	89 2b       	or	r24, r25
     518:	51 f4       	brne	.+20     	; 0x52e <matrix_print+0x4e>
     51a:	8c 91       	ld	r24, X
     51c:	ba 01       	movw	r22, r20
     51e:	02 2e       	mov	r0, r18
     520:	02 c0       	rjmp	.+4      	; 0x526 <matrix_print+0x46>
     522:	66 0f       	add	r22, r22
     524:	77 1f       	adc	r23, r23
     526:	0a 94       	dec	r0
     528:	e2 f7       	brpl	.-8      	; 0x522 <matrix_print+0x42>
     52a:	68 2b       	or	r22, r24
     52c:	6c 93       	st	X, r22
     52e:	2f 5f       	subi	r18, 0xFF	; 255
     530:	3f 4f       	sbci	r19, 0xFF	; 255
     532:	28 30       	cpi	r18, 0x08	; 8
     534:	31 05       	cpc	r19, r1
     536:	69 f7       	brne	.-38     	; 0x512 <matrix_print+0x32>
     538:	08 95       	ret

0000053a <print_matrix>:
     53a:	0f 93       	push	r16
     53c:	1f 93       	push	r17
     53e:	cf 93       	push	r28
     540:	8c 01       	movw	r16, r24
     542:	c0 e0       	ldi	r28, 0x00	; 0
     544:	2c 2f       	mov	r18, r28
     546:	44 e1       	ldi	r20, 0x14	; 20
     548:	59 e0       	ldi	r21, 0x09	; 9
     54a:	65 e1       	ldi	r22, 0x15	; 21
     54c:	79 e0       	ldi	r23, 0x09	; 9
     54e:	c8 01       	movw	r24, r16
     550:	c7 df       	rcall	.-114    	; 0x4e0 <matrix_print>
     552:	80 91 14 09 	lds	r24, 0x0914	; 0x800914 <tmpD>
     556:	20 91 15 09 	lds	r18, 0x0915	; 0x800915 <tmpB>
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	92 2b       	or	r25, r18
     55e:	a6 df       	rcall	.-180    	; 0x4ac <transmit_data>
     560:	cf 5f       	subi	r28, 0xFF	; 255
     562:	c8 30       	cpi	r28, 0x08	; 8
     564:	79 f7       	brne	.-34     	; 0x544 <print_matrix+0xa>
     566:	cf 91       	pop	r28
     568:	1f 91       	pop	r17
     56a:	0f 91       	pop	r16
     56c:	08 95       	ret

0000056e <alter_c_string>:
     56e:	81 11       	cpse	r24, r1
     570:	06 c0       	rjmp	.+12     	; 0x57e <alter_c_string+0x10>
     572:	fb 01       	movw	r30, r22
     574:	ec 5e       	subi	r30, 0xEC	; 236
     576:	fd 4f       	sbci	r31, 0xFD	; 253
     578:	80 e3       	ldi	r24, 0x30	; 48
     57a:	80 83       	st	Z, r24
     57c:	08 95       	ret
     57e:	81 30       	cpi	r24, 0x01	; 1
     580:	31 f4       	brne	.+12     	; 0x58e <alter_c_string+0x20>
     582:	fb 01       	movw	r30, r22
     584:	ec 5e       	subi	r30, 0xEC	; 236
     586:	fd 4f       	sbci	r31, 0xFD	; 253
     588:	81 e3       	ldi	r24, 0x31	; 49
     58a:	80 83       	st	Z, r24
     58c:	08 95       	ret
     58e:	82 30       	cpi	r24, 0x02	; 2
     590:	31 f4       	brne	.+12     	; 0x59e <alter_c_string+0x30>
     592:	fb 01       	movw	r30, r22
     594:	ec 5e       	subi	r30, 0xEC	; 236
     596:	fd 4f       	sbci	r31, 0xFD	; 253
     598:	82 e3       	ldi	r24, 0x32	; 50
     59a:	80 83       	st	Z, r24
     59c:	08 95       	ret
     59e:	83 30       	cpi	r24, 0x03	; 3
     5a0:	31 f4       	brne	.+12     	; 0x5ae <alter_c_string+0x40>
     5a2:	fb 01       	movw	r30, r22
     5a4:	ec 5e       	subi	r30, 0xEC	; 236
     5a6:	fd 4f       	sbci	r31, 0xFD	; 253
     5a8:	83 e3       	ldi	r24, 0x33	; 51
     5aa:	80 83       	st	Z, r24
     5ac:	08 95       	ret
     5ae:	84 30       	cpi	r24, 0x04	; 4
     5b0:	31 f4       	brne	.+12     	; 0x5be <alter_c_string+0x50>
     5b2:	fb 01       	movw	r30, r22
     5b4:	ec 5e       	subi	r30, 0xEC	; 236
     5b6:	fd 4f       	sbci	r31, 0xFD	; 253
     5b8:	84 e3       	ldi	r24, 0x34	; 52
     5ba:	80 83       	st	Z, r24
     5bc:	08 95       	ret
     5be:	85 30       	cpi	r24, 0x05	; 5
     5c0:	31 f4       	brne	.+12     	; 0x5ce <alter_c_string+0x60>
     5c2:	fb 01       	movw	r30, r22
     5c4:	ec 5e       	subi	r30, 0xEC	; 236
     5c6:	fd 4f       	sbci	r31, 0xFD	; 253
     5c8:	85 e3       	ldi	r24, 0x35	; 53
     5ca:	80 83       	st	Z, r24
     5cc:	08 95       	ret
     5ce:	86 30       	cpi	r24, 0x06	; 6
     5d0:	31 f4       	brne	.+12     	; 0x5de <alter_c_string+0x70>
     5d2:	fb 01       	movw	r30, r22
     5d4:	ec 5e       	subi	r30, 0xEC	; 236
     5d6:	fd 4f       	sbci	r31, 0xFD	; 253
     5d8:	86 e3       	ldi	r24, 0x36	; 54
     5da:	80 83       	st	Z, r24
     5dc:	08 95       	ret
     5de:	87 30       	cpi	r24, 0x07	; 7
     5e0:	31 f4       	brne	.+12     	; 0x5ee <alter_c_string+0x80>
     5e2:	fb 01       	movw	r30, r22
     5e4:	ec 5e       	subi	r30, 0xEC	; 236
     5e6:	fd 4f       	sbci	r31, 0xFD	; 253
     5e8:	87 e3       	ldi	r24, 0x37	; 55
     5ea:	80 83       	st	Z, r24
     5ec:	08 95       	ret
     5ee:	88 30       	cpi	r24, 0x08	; 8
     5f0:	31 f4       	brne	.+12     	; 0x5fe <alter_c_string+0x90>
     5f2:	fb 01       	movw	r30, r22
     5f4:	ec 5e       	subi	r30, 0xEC	; 236
     5f6:	fd 4f       	sbci	r31, 0xFD	; 253
     5f8:	88 e3       	ldi	r24, 0x38	; 56
     5fa:	80 83       	st	Z, r24
     5fc:	08 95       	ret
     5fe:	fb 01       	movw	r30, r22
     600:	ec 5e       	subi	r30, 0xEC	; 236
     602:	fd 4f       	sbci	r31, 0xFD	; 253
     604:	89 e3       	ldi	r24, 0x39	; 57
     606:	80 83       	st	Z, r24
     608:	08 95       	ret

0000060a <output_temp>:
     60a:	9d ec       	ldi	r25, 0xCD	; 205
     60c:	89 9f       	mul	r24, r25
     60e:	91 2d       	mov	r25, r1
     610:	11 24       	eor	r1, r1
     612:	96 95       	lsr	r25
     614:	96 95       	lsr	r25
     616:	96 95       	lsr	r25
     618:	90 93 fd 08 	sts	0x08FD, r25	; 0x8008fd <tens_place>
     61c:	39 2f       	mov	r19, r25
     61e:	33 0f       	add	r19, r19
     620:	23 2f       	mov	r18, r19
     622:	22 0f       	add	r18, r18
     624:	22 0f       	add	r18, r18
     626:	23 0f       	add	r18, r19
     628:	82 1b       	sub	r24, r18
     62a:	80 93 fc 08 	sts	0x08FC, r24	; 0x8008fc <ones_place>
     62e:	65 e1       	ldi	r22, 0x15	; 21
     630:	70 e0       	ldi	r23, 0x00	; 0
     632:	89 2f       	mov	r24, r25
     634:	9c df       	rcall	.-200    	; 0x56e <alter_c_string>
     636:	66 e1       	ldi	r22, 0x16	; 22
     638:	70 e0       	ldi	r23, 0x00	; 0
     63a:	80 91 fc 08 	lds	r24, 0x08FC	; 0x8008fc <ones_place>
     63e:	97 df       	rcall	.-210    	; 0x56e <alter_c_string>
     640:	64 e1       	ldi	r22, 0x14	; 20
     642:	72 e0       	ldi	r23, 0x02	; 2
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	19 cf       	rjmp	.-462    	; 0x47a <LCD_DisplayString>
     648:	08 95       	ret

0000064a <enter_c_string>:
     64a:	80 33       	cpi	r24, 0x30	; 48
     64c:	a1 f4       	brne	.+40     	; 0x676 <enter_c_string+0x2c>
     64e:	61 15       	cp	r22, r1
     650:	71 05       	cpc	r23, r1
     652:	29 f4       	brne	.+10     	; 0x65e <enter_c_string+0x14>
     654:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <user_input>
     658:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <PassKey_LCD_data+0x10>
     65c:	08 95       	ret
     65e:	fb 01       	movw	r30, r22
     660:	e4 5f       	subi	r30, 0xF4	; 244
     662:	fd 4f       	sbci	r31, 0xFD	; 253
     664:	10 82       	st	Z, r1
     666:	fb 01       	movw	r30, r22
     668:	ec 5c       	subi	r30, 0xCC	; 204
     66a:	fd 4f       	sbci	r31, 0xFD	; 253
     66c:	80 e3       	ldi	r24, 0x30	; 48
     66e:	80 8b       	std	Z+16, r24	; 0x10
     670:	8a e2       	ldi	r24, 0x2A	; 42
     672:	87 87       	std	Z+15, r24	; 0x0f
     674:	08 95       	ret
     676:	81 33       	cpi	r24, 0x31	; 49
     678:	b9 f4       	brne	.+46     	; 0x6a8 <enter_c_string+0x5e>
     67a:	61 15       	cp	r22, r1
     67c:	71 05       	cpc	r23, r1
     67e:	39 f4       	brne	.+14     	; 0x68e <enter_c_string+0x44>
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <user_input>
     686:	81 e3       	ldi	r24, 0x31	; 49
     688:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <PassKey_LCD_data+0x10>
     68c:	08 95       	ret
     68e:	fb 01       	movw	r30, r22
     690:	e4 5f       	subi	r30, 0xF4	; 244
     692:	fd 4f       	sbci	r31, 0xFD	; 253
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	80 83       	st	Z, r24
     698:	fb 01       	movw	r30, r22
     69a:	ec 5c       	subi	r30, 0xCC	; 204
     69c:	fd 4f       	sbci	r31, 0xFD	; 253
     69e:	81 e3       	ldi	r24, 0x31	; 49
     6a0:	80 8b       	std	Z+16, r24	; 0x10
     6a2:	8a e2       	ldi	r24, 0x2A	; 42
     6a4:	87 87       	std	Z+15, r24	; 0x0f
     6a6:	08 95       	ret
     6a8:	82 33       	cpi	r24, 0x32	; 50
     6aa:	b9 f4       	brne	.+46     	; 0x6da <enter_c_string+0x90>
     6ac:	61 15       	cp	r22, r1
     6ae:	71 05       	cpc	r23, r1
     6b0:	39 f4       	brne	.+14     	; 0x6c0 <enter_c_string+0x76>
     6b2:	82 e0       	ldi	r24, 0x02	; 2
     6b4:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <user_input>
     6b8:	82 e3       	ldi	r24, 0x32	; 50
     6ba:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <PassKey_LCD_data+0x10>
     6be:	08 95       	ret
     6c0:	fb 01       	movw	r30, r22
     6c2:	e4 5f       	subi	r30, 0xF4	; 244
     6c4:	fd 4f       	sbci	r31, 0xFD	; 253
     6c6:	82 e0       	ldi	r24, 0x02	; 2
     6c8:	80 83       	st	Z, r24
     6ca:	fb 01       	movw	r30, r22
     6cc:	ec 5c       	subi	r30, 0xCC	; 204
     6ce:	fd 4f       	sbci	r31, 0xFD	; 253
     6d0:	82 e3       	ldi	r24, 0x32	; 50
     6d2:	80 8b       	std	Z+16, r24	; 0x10
     6d4:	8a e2       	ldi	r24, 0x2A	; 42
     6d6:	87 87       	std	Z+15, r24	; 0x0f
     6d8:	08 95       	ret
     6da:	83 33       	cpi	r24, 0x33	; 51
     6dc:	b9 f4       	brne	.+46     	; 0x70c <enter_c_string+0xc2>
     6de:	61 15       	cp	r22, r1
     6e0:	71 05       	cpc	r23, r1
     6e2:	39 f4       	brne	.+14     	; 0x6f2 <enter_c_string+0xa8>
     6e4:	83 e0       	ldi	r24, 0x03	; 3
     6e6:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <user_input>
     6ea:	83 e3       	ldi	r24, 0x33	; 51
     6ec:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <PassKey_LCD_data+0x10>
     6f0:	08 95       	ret
     6f2:	fb 01       	movw	r30, r22
     6f4:	e4 5f       	subi	r30, 0xF4	; 244
     6f6:	fd 4f       	sbci	r31, 0xFD	; 253
     6f8:	83 e0       	ldi	r24, 0x03	; 3
     6fa:	80 83       	st	Z, r24
     6fc:	fb 01       	movw	r30, r22
     6fe:	ec 5c       	subi	r30, 0xCC	; 204
     700:	fd 4f       	sbci	r31, 0xFD	; 253
     702:	83 e3       	ldi	r24, 0x33	; 51
     704:	80 8b       	std	Z+16, r24	; 0x10
     706:	8a e2       	ldi	r24, 0x2A	; 42
     708:	87 87       	std	Z+15, r24	; 0x0f
     70a:	08 95       	ret
     70c:	84 33       	cpi	r24, 0x34	; 52
     70e:	b9 f4       	brne	.+46     	; 0x73e <enter_c_string+0xf4>
     710:	61 15       	cp	r22, r1
     712:	71 05       	cpc	r23, r1
     714:	39 f4       	brne	.+14     	; 0x724 <enter_c_string+0xda>
     716:	84 e0       	ldi	r24, 0x04	; 4
     718:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <user_input>
     71c:	84 e3       	ldi	r24, 0x34	; 52
     71e:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <PassKey_LCD_data+0x10>
     722:	08 95       	ret
     724:	fb 01       	movw	r30, r22
     726:	e4 5f       	subi	r30, 0xF4	; 244
     728:	fd 4f       	sbci	r31, 0xFD	; 253
     72a:	84 e0       	ldi	r24, 0x04	; 4
     72c:	80 83       	st	Z, r24
     72e:	fb 01       	movw	r30, r22
     730:	ec 5c       	subi	r30, 0xCC	; 204
     732:	fd 4f       	sbci	r31, 0xFD	; 253
     734:	84 e3       	ldi	r24, 0x34	; 52
     736:	80 8b       	std	Z+16, r24	; 0x10
     738:	8a e2       	ldi	r24, 0x2A	; 42
     73a:	87 87       	std	Z+15, r24	; 0x0f
     73c:	08 95       	ret
     73e:	85 33       	cpi	r24, 0x35	; 53
     740:	b9 f4       	brne	.+46     	; 0x770 <enter_c_string+0x126>
     742:	61 15       	cp	r22, r1
     744:	71 05       	cpc	r23, r1
     746:	39 f4       	brne	.+14     	; 0x756 <enter_c_string+0x10c>
     748:	85 e0       	ldi	r24, 0x05	; 5
     74a:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <user_input>
     74e:	85 e3       	ldi	r24, 0x35	; 53
     750:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <PassKey_LCD_data+0x10>
     754:	08 95       	ret
     756:	fb 01       	movw	r30, r22
     758:	e4 5f       	subi	r30, 0xF4	; 244
     75a:	fd 4f       	sbci	r31, 0xFD	; 253
     75c:	85 e0       	ldi	r24, 0x05	; 5
     75e:	80 83       	st	Z, r24
     760:	fb 01       	movw	r30, r22
     762:	ec 5c       	subi	r30, 0xCC	; 204
     764:	fd 4f       	sbci	r31, 0xFD	; 253
     766:	85 e3       	ldi	r24, 0x35	; 53
     768:	80 8b       	std	Z+16, r24	; 0x10
     76a:	8a e2       	ldi	r24, 0x2A	; 42
     76c:	87 87       	std	Z+15, r24	; 0x0f
     76e:	08 95       	ret
     770:	86 33       	cpi	r24, 0x36	; 54
     772:	b9 f4       	brne	.+46     	; 0x7a2 <enter_c_string+0x158>
     774:	61 15       	cp	r22, r1
     776:	71 05       	cpc	r23, r1
     778:	39 f4       	brne	.+14     	; 0x788 <enter_c_string+0x13e>
     77a:	86 e0       	ldi	r24, 0x06	; 6
     77c:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <user_input>
     780:	86 e3       	ldi	r24, 0x36	; 54
     782:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <PassKey_LCD_data+0x10>
     786:	08 95       	ret
     788:	fb 01       	movw	r30, r22
     78a:	e4 5f       	subi	r30, 0xF4	; 244
     78c:	fd 4f       	sbci	r31, 0xFD	; 253
     78e:	86 e0       	ldi	r24, 0x06	; 6
     790:	80 83       	st	Z, r24
     792:	fb 01       	movw	r30, r22
     794:	ec 5c       	subi	r30, 0xCC	; 204
     796:	fd 4f       	sbci	r31, 0xFD	; 253
     798:	86 e3       	ldi	r24, 0x36	; 54
     79a:	80 8b       	std	Z+16, r24	; 0x10
     79c:	8a e2       	ldi	r24, 0x2A	; 42
     79e:	87 87       	std	Z+15, r24	; 0x0f
     7a0:	08 95       	ret
     7a2:	87 33       	cpi	r24, 0x37	; 55
     7a4:	b9 f4       	brne	.+46     	; 0x7d4 <enter_c_string+0x18a>
     7a6:	61 15       	cp	r22, r1
     7a8:	71 05       	cpc	r23, r1
     7aa:	39 f4       	brne	.+14     	; 0x7ba <enter_c_string+0x170>
     7ac:	87 e0       	ldi	r24, 0x07	; 7
     7ae:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <user_input>
     7b2:	87 e3       	ldi	r24, 0x37	; 55
     7b4:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <PassKey_LCD_data+0x10>
     7b8:	08 95       	ret
     7ba:	fb 01       	movw	r30, r22
     7bc:	e4 5f       	subi	r30, 0xF4	; 244
     7be:	fd 4f       	sbci	r31, 0xFD	; 253
     7c0:	87 e0       	ldi	r24, 0x07	; 7
     7c2:	80 83       	st	Z, r24
     7c4:	fb 01       	movw	r30, r22
     7c6:	ec 5c       	subi	r30, 0xCC	; 204
     7c8:	fd 4f       	sbci	r31, 0xFD	; 253
     7ca:	87 e3       	ldi	r24, 0x37	; 55
     7cc:	80 8b       	std	Z+16, r24	; 0x10
     7ce:	8a e2       	ldi	r24, 0x2A	; 42
     7d0:	87 87       	std	Z+15, r24	; 0x0f
     7d2:	08 95       	ret
     7d4:	88 33       	cpi	r24, 0x38	; 56
     7d6:	b9 f4       	brne	.+46     	; 0x806 <enter_c_string+0x1bc>
     7d8:	61 15       	cp	r22, r1
     7da:	71 05       	cpc	r23, r1
     7dc:	39 f4       	brne	.+14     	; 0x7ec <enter_c_string+0x1a2>
     7de:	88 e0       	ldi	r24, 0x08	; 8
     7e0:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <user_input>
     7e4:	88 e3       	ldi	r24, 0x38	; 56
     7e6:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <PassKey_LCD_data+0x10>
     7ea:	08 95       	ret
     7ec:	fb 01       	movw	r30, r22
     7ee:	e4 5f       	subi	r30, 0xF4	; 244
     7f0:	fd 4f       	sbci	r31, 0xFD	; 253
     7f2:	88 e0       	ldi	r24, 0x08	; 8
     7f4:	80 83       	st	Z, r24
     7f6:	fb 01       	movw	r30, r22
     7f8:	ec 5c       	subi	r30, 0xCC	; 204
     7fa:	fd 4f       	sbci	r31, 0xFD	; 253
     7fc:	88 e3       	ldi	r24, 0x38	; 56
     7fe:	80 8b       	std	Z+16, r24	; 0x10
     800:	8a e2       	ldi	r24, 0x2A	; 42
     802:	87 87       	std	Z+15, r24	; 0x0f
     804:	08 95       	ret
     806:	61 15       	cp	r22, r1
     808:	71 05       	cpc	r23, r1
     80a:	39 f4       	brne	.+14     	; 0x81a <enter_c_string+0x1d0>
     80c:	89 e0       	ldi	r24, 0x09	; 9
     80e:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <user_input>
     812:	89 e3       	ldi	r24, 0x39	; 57
     814:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <PassKey_LCD_data+0x10>
     818:	08 95       	ret
     81a:	fb 01       	movw	r30, r22
     81c:	e4 5f       	subi	r30, 0xF4	; 244
     81e:	fd 4f       	sbci	r31, 0xFD	; 253
     820:	89 e0       	ldi	r24, 0x09	; 9
     822:	80 83       	st	Z, r24
     824:	fb 01       	movw	r30, r22
     826:	ec 5c       	subi	r30, 0xCC	; 204
     828:	fd 4f       	sbci	r31, 0xFD	; 253
     82a:	89 e3       	ldi	r24, 0x39	; 57
     82c:	80 8b       	std	Z+16, r24	; 0x10
     82e:	8a e2       	ldi	r24, 0x2A	; 42
     830:	87 87       	std	Z+15, r24	; 0x0f
     832:	08 95       	ret

00000834 <check_password>:
     834:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <current_pass>
     838:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <user_input>
     83c:	98 13       	cpse	r25, r24
     83e:	16 c0       	rjmp	.+44     	; 0x86c <check_password+0x38>
     840:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <current_pass+0x1>
     844:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <user_input+0x1>
     848:	98 13       	cpse	r25, r24
     84a:	13 c0       	rjmp	.+38     	; 0x872 <check_password+0x3e>
     84c:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <current_pass+0x2>
     850:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <user_input+0x2>
     854:	98 13       	cpse	r25, r24
     856:	10 c0       	rjmp	.+32     	; 0x878 <check_password+0x44>
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <current_pass+0x3>
     860:	20 91 0f 02 	lds	r18, 0x020F	; 0x80020f <user_input+0x3>
     864:	32 17       	cp	r19, r18
     866:	51 f0       	breq	.+20     	; 0x87c <check_password+0x48>
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	08 95       	ret
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	08 95       	ret
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	08 95       	ret
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	08 95       	ret

0000087e <output_for_user_pass_reset>:
     87e:	cf 93       	push	r28
     880:	c6 2f       	mov	r28, r22
     882:	80 33       	cpi	r24, 0x30	; 48
     884:	59 f4       	brne	.+22     	; 0x89c <output_for_user_pass_reset+0x1e>
     886:	81 e1       	ldi	r24, 0x11	; 17
     888:	86 0f       	add	r24, r22
     88a:	d7 dd       	rcall	.-1106   	; 0x43a <LCD_Cursor>
     88c:	80 e3       	ldi	r24, 0x30	; 48
     88e:	ec dd       	rcall	.-1064   	; 0x468 <LCD_WriteData>
     890:	ec 2f       	mov	r30, r28
     892:	f0 e0       	ldi	r31, 0x00	; 0
     894:	e0 50       	subi	r30, 0x00	; 0
     896:	f7 4f       	sbci	r31, 0xF7	; 247
     898:	10 82       	st	Z, r1
     89a:	7b c0       	rjmp	.+246    	; 0x992 <output_for_user_pass_reset+0x114>
     89c:	81 33       	cpi	r24, 0x31	; 49
     89e:	61 f4       	brne	.+24     	; 0x8b8 <output_for_user_pass_reset+0x3a>
     8a0:	81 e1       	ldi	r24, 0x11	; 17
     8a2:	86 0f       	add	r24, r22
     8a4:	ca dd       	rcall	.-1132   	; 0x43a <LCD_Cursor>
     8a6:	81 e3       	ldi	r24, 0x31	; 49
     8a8:	df dd       	rcall	.-1090   	; 0x468 <LCD_WriteData>
     8aa:	ec 2f       	mov	r30, r28
     8ac:	f0 e0       	ldi	r31, 0x00	; 0
     8ae:	e0 50       	subi	r30, 0x00	; 0
     8b0:	f7 4f       	sbci	r31, 0xF7	; 247
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	80 83       	st	Z, r24
     8b6:	6d c0       	rjmp	.+218    	; 0x992 <output_for_user_pass_reset+0x114>
     8b8:	82 33       	cpi	r24, 0x32	; 50
     8ba:	61 f4       	brne	.+24     	; 0x8d4 <output_for_user_pass_reset+0x56>
     8bc:	81 e1       	ldi	r24, 0x11	; 17
     8be:	86 0f       	add	r24, r22
     8c0:	bc dd       	rcall	.-1160   	; 0x43a <LCD_Cursor>
     8c2:	82 e3       	ldi	r24, 0x32	; 50
     8c4:	d1 dd       	rcall	.-1118   	; 0x468 <LCD_WriteData>
     8c6:	ec 2f       	mov	r30, r28
     8c8:	f0 e0       	ldi	r31, 0x00	; 0
     8ca:	e0 50       	subi	r30, 0x00	; 0
     8cc:	f7 4f       	sbci	r31, 0xF7	; 247
     8ce:	82 e0       	ldi	r24, 0x02	; 2
     8d0:	80 83       	st	Z, r24
     8d2:	5f c0       	rjmp	.+190    	; 0x992 <output_for_user_pass_reset+0x114>
     8d4:	83 33       	cpi	r24, 0x33	; 51
     8d6:	61 f4       	brne	.+24     	; 0x8f0 <output_for_user_pass_reset+0x72>
     8d8:	81 e1       	ldi	r24, 0x11	; 17
     8da:	86 0f       	add	r24, r22
     8dc:	ae dd       	rcall	.-1188   	; 0x43a <LCD_Cursor>
     8de:	83 e3       	ldi	r24, 0x33	; 51
     8e0:	c3 dd       	rcall	.-1146   	; 0x468 <LCD_WriteData>
     8e2:	ec 2f       	mov	r30, r28
     8e4:	f0 e0       	ldi	r31, 0x00	; 0
     8e6:	e0 50       	subi	r30, 0x00	; 0
     8e8:	f7 4f       	sbci	r31, 0xF7	; 247
     8ea:	83 e0       	ldi	r24, 0x03	; 3
     8ec:	80 83       	st	Z, r24
     8ee:	51 c0       	rjmp	.+162    	; 0x992 <output_for_user_pass_reset+0x114>
     8f0:	84 33       	cpi	r24, 0x34	; 52
     8f2:	61 f4       	brne	.+24     	; 0x90c <output_for_user_pass_reset+0x8e>
     8f4:	81 e1       	ldi	r24, 0x11	; 17
     8f6:	86 0f       	add	r24, r22
     8f8:	a0 dd       	rcall	.-1216   	; 0x43a <LCD_Cursor>
     8fa:	84 e3       	ldi	r24, 0x34	; 52
     8fc:	b5 dd       	rcall	.-1174   	; 0x468 <LCD_WriteData>
     8fe:	ec 2f       	mov	r30, r28
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	e0 50       	subi	r30, 0x00	; 0
     904:	f7 4f       	sbci	r31, 0xF7	; 247
     906:	84 e0       	ldi	r24, 0x04	; 4
     908:	80 83       	st	Z, r24
     90a:	43 c0       	rjmp	.+134    	; 0x992 <output_for_user_pass_reset+0x114>
     90c:	85 33       	cpi	r24, 0x35	; 53
     90e:	61 f4       	brne	.+24     	; 0x928 <output_for_user_pass_reset+0xaa>
     910:	81 e1       	ldi	r24, 0x11	; 17
     912:	86 0f       	add	r24, r22
     914:	92 dd       	rcall	.-1244   	; 0x43a <LCD_Cursor>
     916:	85 e3       	ldi	r24, 0x35	; 53
     918:	a7 dd       	rcall	.-1202   	; 0x468 <LCD_WriteData>
     91a:	ec 2f       	mov	r30, r28
     91c:	f0 e0       	ldi	r31, 0x00	; 0
     91e:	e0 50       	subi	r30, 0x00	; 0
     920:	f7 4f       	sbci	r31, 0xF7	; 247
     922:	85 e0       	ldi	r24, 0x05	; 5
     924:	80 83       	st	Z, r24
     926:	35 c0       	rjmp	.+106    	; 0x992 <output_for_user_pass_reset+0x114>
     928:	86 33       	cpi	r24, 0x36	; 54
     92a:	61 f4       	brne	.+24     	; 0x944 <output_for_user_pass_reset+0xc6>
     92c:	81 e1       	ldi	r24, 0x11	; 17
     92e:	86 0f       	add	r24, r22
     930:	84 dd       	rcall	.-1272   	; 0x43a <LCD_Cursor>
     932:	86 e3       	ldi	r24, 0x36	; 54
     934:	99 dd       	rcall	.-1230   	; 0x468 <LCD_WriteData>
     936:	ec 2f       	mov	r30, r28
     938:	f0 e0       	ldi	r31, 0x00	; 0
     93a:	e0 50       	subi	r30, 0x00	; 0
     93c:	f7 4f       	sbci	r31, 0xF7	; 247
     93e:	86 e0       	ldi	r24, 0x06	; 6
     940:	80 83       	st	Z, r24
     942:	27 c0       	rjmp	.+78     	; 0x992 <output_for_user_pass_reset+0x114>
     944:	87 33       	cpi	r24, 0x37	; 55
     946:	61 f4       	brne	.+24     	; 0x960 <output_for_user_pass_reset+0xe2>
     948:	81 e1       	ldi	r24, 0x11	; 17
     94a:	86 0f       	add	r24, r22
     94c:	76 dd       	rcall	.-1300   	; 0x43a <LCD_Cursor>
     94e:	87 e3       	ldi	r24, 0x37	; 55
     950:	8b dd       	rcall	.-1258   	; 0x468 <LCD_WriteData>
     952:	ec 2f       	mov	r30, r28
     954:	f0 e0       	ldi	r31, 0x00	; 0
     956:	e0 50       	subi	r30, 0x00	; 0
     958:	f7 4f       	sbci	r31, 0xF7	; 247
     95a:	87 e0       	ldi	r24, 0x07	; 7
     95c:	80 83       	st	Z, r24
     95e:	19 c0       	rjmp	.+50     	; 0x992 <output_for_user_pass_reset+0x114>
     960:	88 33       	cpi	r24, 0x38	; 56
     962:	61 f4       	brne	.+24     	; 0x97c <output_for_user_pass_reset+0xfe>
     964:	81 e1       	ldi	r24, 0x11	; 17
     966:	86 0f       	add	r24, r22
     968:	68 dd       	rcall	.-1328   	; 0x43a <LCD_Cursor>
     96a:	88 e3       	ldi	r24, 0x38	; 56
     96c:	7d dd       	rcall	.-1286   	; 0x468 <LCD_WriteData>
     96e:	ec 2f       	mov	r30, r28
     970:	f0 e0       	ldi	r31, 0x00	; 0
     972:	e0 50       	subi	r30, 0x00	; 0
     974:	f7 4f       	sbci	r31, 0xF7	; 247
     976:	88 e0       	ldi	r24, 0x08	; 8
     978:	80 83       	st	Z, r24
     97a:	0b c0       	rjmp	.+22     	; 0x992 <output_for_user_pass_reset+0x114>
     97c:	81 e1       	ldi	r24, 0x11	; 17
     97e:	86 0f       	add	r24, r22
     980:	5c dd       	rcall	.-1352   	; 0x43a <LCD_Cursor>
     982:	89 e3       	ldi	r24, 0x39	; 57
     984:	71 dd       	rcall	.-1310   	; 0x468 <LCD_WriteData>
     986:	ec 2f       	mov	r30, r28
     988:	f0 e0       	ldi	r31, 0x00	; 0
     98a:	e0 50       	subi	r30, 0x00	; 0
     98c:	f7 4f       	sbci	r31, 0xF7	; 247
     98e:	89 e0       	ldi	r24, 0x09	; 9
     990:	80 83       	st	Z, r24
     992:	cf 91       	pop	r28
     994:	08 95       	ret

00000996 <generate_random_pass>:
     996:	0f 93       	push	r16
     998:	1f 93       	push	r17
     99a:	cf 93       	push	r28
     99c:	df 93       	push	r29
     99e:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <srand>
     9a2:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <rand>
     9a6:	c8 e0       	ldi	r28, 0x08	; 8
     9a8:	d2 e0       	ldi	r29, 0x02	; 2
     9aa:	0a e0       	ldi	r16, 0x0A	; 10
     9ac:	10 e0       	ldi	r17, 0x00	; 0
     9ae:	b8 01       	movw	r22, r16
     9b0:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__divmodhi4>
     9b4:	88 83       	st	Y, r24
     9b6:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <rand>
     9ba:	b8 01       	movw	r22, r16
     9bc:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__divmodhi4>
     9c0:	89 83       	std	Y+1, r24	; 0x01
     9c2:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <rand>
     9c6:	b8 01       	movw	r22, r16
     9c8:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__divmodhi4>
     9cc:	8a 83       	std	Y+2, r24	; 0x02
     9ce:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <rand>
     9d2:	b8 01       	movw	r22, r16
     9d4:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__divmodhi4>
     9d8:	8b 83       	std	Y+3, r24	; 0x03
     9da:	df 91       	pop	r29
     9dc:	cf 91       	pop	r28
     9de:	1f 91       	pop	r17
     9e0:	0f 91       	pop	r16
     9e2:	08 95       	ret

000009e4 <Trans_Tick>:
     9e4:	80 91 73 09 	lds	r24, 0x0973	; 0x800973 <trans_state>
     9e8:	81 30       	cpi	r24, 0x01	; 1
     9ea:	21 f4       	brne	.+8      	; 0x9f4 <Trans_Tick+0x10>
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	80 91 11 09 	lds	r24, 0x0911	; 0x800911 <data_to_send>
     9f2:	77 dc       	rcall	.-1810   	; 0x2e2 <USART_Send>
     9f4:	80 91 73 09 	lds	r24, 0x0973	; 0x800973 <trans_state>
     9f8:	88 23       	and	r24, r24
     9fa:	19 f0       	breq	.+6      	; 0xa02 <Trans_Tick+0x1e>
     9fc:	81 30       	cpi	r24, 0x01	; 1
     9fe:	99 f0       	breq	.+38     	; 0xa26 <Trans_Tick+0x42>
     a00:	19 c0       	rjmp	.+50     	; 0xa34 <Trans_Tick+0x50>
     a02:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     a06:	85 ff       	sbrs	r24, 5
     a08:	17 c0       	rjmp	.+46     	; 0xa38 <Trans_Tick+0x54>
     a0a:	80 91 13 09 	lds	r24, 0x0913	; 0x800913 <ARM_DISARM>
     a0e:	81 30       	cpi	r24, 0x01	; 1
     a10:	21 f4       	brne	.+8      	; 0xa1a <Trans_Tick+0x36>
     a12:	8f ef       	ldi	r24, 0xFF	; 255
     a14:	80 93 11 09 	sts	0x0911, r24	; 0x800911 <data_to_send>
     a18:	02 c0       	rjmp	.+4      	; 0xa1e <Trans_Tick+0x3a>
     a1a:	10 92 11 09 	sts	0x0911, r1	; 0x800911 <data_to_send>
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	80 93 73 09 	sts	0x0973, r24	; 0x800973 <trans_state>
     a24:	08 95       	ret
     a26:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     a2a:	86 ff       	sbrs	r24, 6
     a2c:	05 c0       	rjmp	.+10     	; 0xa38 <Trans_Tick+0x54>
     a2e:	10 92 73 09 	sts	0x0973, r1	; 0x800973 <trans_state>
     a32:	08 95       	ret
     a34:	10 92 73 09 	sts	0x0973, r1	; 0x800973 <trans_state>
     a38:	08 95       	ret

00000a3a <TransSecTask>:
     a3a:	10 92 73 09 	sts	0x0973, r1	; 0x800973 <trans_state>
     a3e:	d2 df       	rcall	.-92     	; 0x9e4 <Trans_Tick>
     a40:	8a e0       	ldi	r24, 0x0A	; 10
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <vTaskDelay>
     a48:	fa cf       	rjmp	.-12     	; 0xa3e <TransSecTask+0x4>

00000a4a <TransSecPulse>:
     a4a:	af 92       	push	r10
     a4c:	bf 92       	push	r11
     a4e:	cf 92       	push	r12
     a50:	df 92       	push	r13
     a52:	ef 92       	push	r14
     a54:	ff 92       	push	r15
     a56:	0f 93       	push	r16
     a58:	a1 2c       	mov	r10, r1
     a5a:	b1 2c       	mov	r11, r1
     a5c:	c1 2c       	mov	r12, r1
     a5e:	d1 2c       	mov	r13, r1
     a60:	e1 2c       	mov	r14, r1
     a62:	f1 2c       	mov	r15, r1
     a64:	08 2f       	mov	r16, r24
     a66:	20 e0       	ldi	r18, 0x00	; 0
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	45 e5       	ldi	r20, 0x55	; 85
     a6c:	50 e0       	ldi	r21, 0x00	; 0
     a6e:	66 e5       	ldi	r22, 0x56	; 86
     a70:	72 e0       	ldi	r23, 0x02	; 2
     a72:	8d e1       	ldi	r24, 0x1D	; 29
     a74:	95 e0       	ldi	r25, 0x05	; 5
     a76:	10 d7       	rcall	.+3616   	; 0x1898 <xTaskGenericCreate>
     a78:	0f 91       	pop	r16
     a7a:	ff 90       	pop	r15
     a7c:	ef 90       	pop	r14
     a7e:	df 90       	pop	r13
     a80:	cf 90       	pop	r12
     a82:	bf 90       	pop	r11
     a84:	af 90       	pop	r10
     a86:	08 95       	ret

00000a88 <Rec_Tick>:
     a88:	80 91 70 09 	lds	r24, 0x0970	; 0x800970 <rec_state>
     a8c:	81 30       	cpi	r24, 0x01	; 1
     a8e:	31 f4       	brne	.+12     	; 0xa9c <Rec_Tick+0x14>
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	39 dc       	rcall	.-1934   	; 0x306 <USART_Receive>
     a94:	80 93 12 09 	sts	0x0912, r24	; 0x800912 <received_value>
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	06 dc       	rcall	.-2036   	; 0x2a8 <USART_Flush>
     a9c:	80 91 70 09 	lds	r24, 0x0970	; 0x800970 <rec_state>
     aa0:	88 23       	and	r24, r24
     aa2:	19 f0       	breq	.+6      	; 0xaaa <Rec_Tick+0x22>
     aa4:	10 92 70 09 	sts	0x0970, r1	; 0x800970 <rec_state>
     aa8:	08 95       	ret
     aaa:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     aae:	88 23       	and	r24, r24
     ab0:	1c f4       	brge	.+6      	; 0xab8 <Rec_Tick+0x30>
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <rec_state>
     ab8:	08 95       	ret

00000aba <RecSecTask>:
     aba:	10 92 70 09 	sts	0x0970, r1	; 0x800970 <rec_state>
     abe:	e4 df       	rcall	.-56     	; 0xa88 <Rec_Tick>
     ac0:	8a e0       	ldi	r24, 0x0A	; 10
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <vTaskDelay>
     ac8:	fa cf       	rjmp	.-12     	; 0xabe <RecSecTask+0x4>

00000aca <RecSecPulse>:
     aca:	af 92       	push	r10
     acc:	bf 92       	push	r11
     ace:	cf 92       	push	r12
     ad0:	df 92       	push	r13
     ad2:	ef 92       	push	r14
     ad4:	ff 92       	push	r15
     ad6:	0f 93       	push	r16
     ad8:	a1 2c       	mov	r10, r1
     ada:	b1 2c       	mov	r11, r1
     adc:	c1 2c       	mov	r12, r1
     ade:	d1 2c       	mov	r13, r1
     ae0:	e1 2c       	mov	r14, r1
     ae2:	f1 2c       	mov	r15, r1
     ae4:	08 2f       	mov	r16, r24
     ae6:	20 e0       	ldi	r18, 0x00	; 0
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	45 e5       	ldi	r20, 0x55	; 85
     aec:	50 e0       	ldi	r21, 0x00	; 0
     aee:	61 e0       	ldi	r22, 0x01	; 1
     af0:	73 e0       	ldi	r23, 0x03	; 3
     af2:	8d e5       	ldi	r24, 0x5D	; 93
     af4:	95 e0       	ldi	r25, 0x05	; 5
     af6:	d0 d6       	rcall	.+3488   	; 0x1898 <xTaskGenericCreate>
     af8:	0f 91       	pop	r16
     afa:	ff 90       	pop	r15
     afc:	ef 90       	pop	r14
     afe:	df 90       	pop	r13
     b00:	cf 90       	pop	r12
     b02:	bf 90       	pop	r11
     b04:	af 90       	pop	r10
     b06:	08 95       	ret

00000b08 <Menu_Tick>:
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	cf 93       	push	r28
     b0e:	df 93       	push	r29
     b10:	e0 91 74 09 	lds	r30, 0x0974	; 0x800974 <menu_state>
     b14:	8e 2f       	mov	r24, r30
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	8b 30       	cpi	r24, 0x0B	; 11
     b1a:	91 05       	cpc	r25, r1
     b1c:	08 f0       	brcs	.+2      	; 0xb20 <Menu_Tick+0x18>
     b1e:	08 c3       	rjmp	.+1552   	; 0x1130 <Menu_Tick+0x628>
     b20:	fc 01       	movw	r30, r24
     b22:	ea 5b       	subi	r30, 0xBA	; 186
     b24:	ff 4f       	sbci	r31, 0xFF	; 255
     b26:	0c 94 98 0f 	jmp	0x1f30	; 0x1f30 <__tablejump2__>
     b2a:	80 91 12 09 	lds	r24, 0x0912	; 0x800912 <received_value>
     b2e:	6d dd       	rcall	.-1318   	; 0x60a <output_temp>
     b30:	82 e0       	ldi	r24, 0x02	; 2
     b32:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     b36:	fc c2       	rjmp	.+1528   	; 0x1130 <Menu_Tick+0x628>
     b38:	f8 db       	rcall	.-2064   	; 0x32a <GetKeypadKey>
     b3a:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <keypad_val>
     b3e:	81 11       	cpse	r24, r1
     b40:	21 c0       	rjmp	.+66     	; 0xb84 <Menu_Tick+0x7c>
     b42:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <bluetooth_arm_disarm>
     b46:	82 30       	cpi	r24, 0x02	; 2
     b48:	31 f4       	brne	.+12     	; 0xb56 <Menu_Tick+0x4e>
     b4a:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     b4e:	80 91 12 09 	lds	r24, 0x0912	; 0x800912 <received_value>
     b52:	5b dd       	rcall	.-1354   	; 0x60a <output_temp>
     b54:	ed c2       	rjmp	.+1498   	; 0x1130 <Menu_Tick+0x628>
     b56:	81 11       	cpse	r24, r1
     b58:	09 c0       	rjmp	.+18     	; 0xb6c <Menu_Tick+0x64>
     b5a:	82 e0       	ldi	r24, 0x02	; 2
     b5c:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     b60:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <bluetooth_arm_disarm>
     b64:	80 91 12 09 	lds	r24, 0x0912	; 0x800912 <received_value>
     b68:	50 dd       	rcall	.-1376   	; 0x60a <output_temp>
     b6a:	e2 c2       	rjmp	.+1476   	; 0x1130 <Menu_Tick+0x628>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     b72:	92 e0       	ldi	r25, 0x02	; 2
     b74:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <bluetooth_arm_disarm>
     b78:	80 93 13 09 	sts	0x0913, r24	; 0x800913 <ARM_DISARM>
     b7c:	6f e6       	ldi	r22, 0x6F	; 111
     b7e:	72 e0       	ldi	r23, 0x02	; 2
     b80:	7c dc       	rcall	.-1800   	; 0x47a <LCD_DisplayString>
     b82:	d6 c2       	rjmp	.+1452   	; 0x1130 <Menu_Tick+0x628>
     b84:	81 34       	cpi	r24, 0x41	; 65
     b86:	c9 f4       	brne	.+50     	; 0xbba <Menu_Tick+0xb2>
     b88:	83 e0       	ldi	r24, 0x03	; 3
     b8a:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     b8e:	64 e3       	ldi	r22, 0x34	; 52
     b90:	72 e0       	ldi	r23, 0x02	; 2
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	72 dc       	rcall	.-1820   	; 0x47a <LCD_DisplayString>
     b96:	10 92 10 09 	sts	0x0910, r1	; 0x800910 <mode>
     b9a:	10 92 04 09 	sts	0x0904, r1	; 0x800904 <pass_location>
     b9e:	ec e0       	ldi	r30, 0x0C	; 12
     ba0:	f2 e0       	ldi	r31, 0x02	; 2
     ba2:	10 82       	st	Z, r1
     ba4:	11 82       	std	Z+1, r1	; 0x01
     ba6:	12 82       	std	Z+2, r1	; 0x02
     ba8:	13 82       	std	Z+3, r1	; 0x03
     baa:	e4 e3       	ldi	r30, 0x34	; 52
     bac:	f2 e0       	ldi	r31, 0x02	; 2
     bae:	80 e2       	ldi	r24, 0x20	; 32
     bb0:	80 8b       	std	Z+16, r24	; 0x10
     bb2:	81 8b       	std	Z+17, r24	; 0x11
     bb4:	82 8b       	std	Z+18, r24	; 0x12
     bb6:	83 8b       	std	Z+19, r24	; 0x13
     bb8:	bb c2       	rjmp	.+1398   	; 0x1130 <Menu_Tick+0x628>
     bba:	82 34       	cpi	r24, 0x42	; 66
     bbc:	61 f4       	brne	.+24     	; 0xbd6 <Menu_Tick+0xce>
     bbe:	85 e0       	ldi	r24, 0x05	; 5
     bc0:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     bc4:	60 e8       	ldi	r22, 0x80	; 128
     bc6:	72 e0       	ldi	r23, 0x02	; 2
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	57 dc       	rcall	.-1874   	; 0x47a <LCD_DisplayString>
     bcc:	10 92 06 09 	sts	0x0906, r1	; 0x800906 <random_count+0x1>
     bd0:	10 92 05 09 	sts	0x0905, r1	; 0x800905 <random_count>
     bd4:	ad c2       	rjmp	.+1370   	; 0x1130 <Menu_Tick+0x628>
     bd6:	82 e0       	ldi	r24, 0x02	; 2
     bd8:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     bdc:	a9 c2       	rjmp	.+1362   	; 0x1130 <Menu_Tick+0x628>
     bde:	a5 db       	rcall	.-2230   	; 0x32a <GetKeypadKey>
     be0:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <keypad_val>
     be4:	91 e0       	ldi	r25, 0x01	; 1
     be6:	90 93 74 09 	sts	0x0974, r25	; 0x800974 <menu_state>
     bea:	90 91 0b 09 	lds	r25, 0x090B	; 0x80090b <sensors_tripped>
     bee:	91 30       	cpi	r25, 0x01	; 1
     bf0:	81 f0       	breq	.+32     	; 0xc12 <Menu_Tick+0x10a>
     bf2:	90 91 0c 09 	lds	r25, 0x090C	; 0x80090c <sensors_tripped+0x1>
     bf6:	91 30       	cpi	r25, 0x01	; 1
     bf8:	61 f0       	breq	.+24     	; 0xc12 <Menu_Tick+0x10a>
     bfa:	90 91 0d 09 	lds	r25, 0x090D	; 0x80090d <sensors_tripped+0x2>
     bfe:	91 30       	cpi	r25, 0x01	; 1
     c00:	41 f0       	breq	.+16     	; 0xc12 <Menu_Tick+0x10a>
     c02:	90 91 0e 09 	lds	r25, 0x090E	; 0x80090e <sensors_tripped+0x3>
     c06:	91 30       	cpi	r25, 0x01	; 1
     c08:	21 f0       	breq	.+8      	; 0xc12 <Menu_Tick+0x10a>
     c0a:	90 91 0f 09 	lds	r25, 0x090F	; 0x80090f <sensors_tripped+0x4>
     c0e:	91 30       	cpi	r25, 0x01	; 1
     c10:	41 f4       	brne	.+16     	; 0xc22 <Menu_Tick+0x11a>
     c12:	8a e0       	ldi	r24, 0x0A	; 10
     c14:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     c18:	65 ea       	ldi	r22, 0xA5	; 165
     c1a:	72 e0       	ldi	r23, 0x02	; 2
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	2d dc       	rcall	.-1958   	; 0x47a <LCD_DisplayString>
     c20:	87 c2       	rjmp	.+1294   	; 0x1130 <Menu_Tick+0x628>
     c22:	88 23       	and	r24, r24
     c24:	21 f0       	breq	.+8      	; 0xc2e <Menu_Tick+0x126>
     c26:	9e eb       	ldi	r25, 0xBE	; 190
     c28:	98 0f       	add	r25, r24
     c2a:	93 30       	cpi	r25, 0x03	; 3
     c2c:	d8 f4       	brcc	.+54     	; 0xc64 <Menu_Tick+0x15c>
     c2e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <bluetooth_arm_disarm>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	29 f4       	brne	.+10     	; 0xc40 <Menu_Tick+0x138>
     c36:	6f e6       	ldi	r22, 0x6F	; 111
     c38:	72 e0       	ldi	r23, 0x02	; 2
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	1e dc       	rcall	.-1988   	; 0x47a <LCD_DisplayString>
     c3e:	78 c2       	rjmp	.+1264   	; 0x1130 <Menu_Tick+0x628>
     c40:	81 30       	cpi	r24, 0x01	; 1
     c42:	41 f4       	brne	.+16     	; 0xc54 <Menu_Tick+0x14c>
     c44:	82 e0       	ldi	r24, 0x02	; 2
     c46:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <bluetooth_arm_disarm>
     c4a:	6f e6       	ldi	r22, 0x6F	; 111
     c4c:	72 e0       	ldi	r23, 0x02	; 2
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	14 dc       	rcall	.-2008   	; 0x47a <LCD_DisplayString>
     c52:	6e c2       	rjmp	.+1244   	; 0x1130 <Menu_Tick+0x628>
     c54:	82 e0       	ldi	r24, 0x02	; 2
     c56:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     c5a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <bluetooth_arm_disarm>
     c5e:	10 92 13 09 	sts	0x0913, r1	; 0x800913 <ARM_DISARM>
     c62:	66 c2       	rjmp	.+1228   	; 0x1130 <Menu_Tick+0x628>
     c64:	81 34       	cpi	r24, 0x41	; 65
     c66:	c9 f4       	brne	.+50     	; 0xc9a <Menu_Tick+0x192>
     c68:	83 e0       	ldi	r24, 0x03	; 3
     c6a:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     c6e:	64 e3       	ldi	r22, 0x34	; 52
     c70:	72 e0       	ldi	r23, 0x02	; 2
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	02 dc       	rcall	.-2044   	; 0x47a <LCD_DisplayString>
     c76:	10 92 10 09 	sts	0x0910, r1	; 0x800910 <mode>
     c7a:	10 92 04 09 	sts	0x0904, r1	; 0x800904 <pass_location>
     c7e:	ec e0       	ldi	r30, 0x0C	; 12
     c80:	f2 e0       	ldi	r31, 0x02	; 2
     c82:	10 82       	st	Z, r1
     c84:	11 82       	std	Z+1, r1	; 0x01
     c86:	12 82       	std	Z+2, r1	; 0x02
     c88:	13 82       	std	Z+3, r1	; 0x03
     c8a:	e4 e3       	ldi	r30, 0x34	; 52
     c8c:	f2 e0       	ldi	r31, 0x02	; 2
     c8e:	80 e2       	ldi	r24, 0x20	; 32
     c90:	80 8b       	std	Z+16, r24	; 0x10
     c92:	81 8b       	std	Z+17, r24	; 0x11
     c94:	82 8b       	std	Z+18, r24	; 0x12
     c96:	83 8b       	std	Z+19, r24	; 0x13
     c98:	4b c2       	rjmp	.+1174   	; 0x1130 <Menu_Tick+0x628>
     c9a:	6f e6       	ldi	r22, 0x6F	; 111
     c9c:	72 e0       	ldi	r23, 0x02	; 2
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	ec db       	rcall	.-2088   	; 0x47a <LCD_DisplayString>
     ca2:	10 92 0a 09 	sts	0x090A, r1	; 0x80090a <trip_location>
     ca6:	44 c2       	rjmp	.+1160   	; 0x1130 <Menu_Tick+0x628>
     ca8:	40 db       	rcall	.-2432   	; 0x32a <GetKeypadKey>
     caa:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <keypad_val>
     cae:	92 e0       	ldi	r25, 0x02	; 2
     cb0:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <bluetooth_arm_disarm>
     cb4:	88 23       	and	r24, r24
     cb6:	41 f0       	breq	.+16     	; 0xcc8 <Menu_Tick+0x1c0>
     cb8:	9f eb       	ldi	r25, 0xBF	; 191
     cba:	98 0f       	add	r25, r24
     cbc:	92 30       	cpi	r25, 0x02	; 2
     cbe:	20 f0       	brcs	.+8      	; 0xcc8 <Menu_Tick+0x1c0>
     cc0:	8a 32       	cpi	r24, 0x2A	; 42
     cc2:	11 f0       	breq	.+4      	; 0xcc8 <Menu_Tick+0x1c0>
     cc4:	83 32       	cpi	r24, 0x23	; 35
     cc6:	41 f4       	brne	.+16     	; 0xcd8 <Menu_Tick+0x1d0>
     cc8:	83 e0       	ldi	r24, 0x03	; 3
     cca:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     cce:	64 e3       	ldi	r22, 0x34	; 52
     cd0:	72 e0       	ldi	r23, 0x02	; 2
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	d2 db       	rcall	.-2140   	; 0x47a <LCD_DisplayString>
     cd6:	2c c2       	rjmp	.+1112   	; 0x1130 <Menu_Tick+0x628>
     cd8:	83 34       	cpi	r24, 0x43	; 67
     cda:	61 f4       	brne	.+24     	; 0xcf4 <Menu_Tick+0x1ec>
     cdc:	80 91 13 09 	lds	r24, 0x0913	; 0x800913 <ARM_DISARM>
     ce0:	81 11       	cpse	r24, r1
     ce2:	04 c0       	rjmp	.+8      	; 0xcec <Menu_Tick+0x1e4>
     ce4:	82 e0       	ldi	r24, 0x02	; 2
     ce6:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     cea:	22 c2       	rjmp	.+1092   	; 0x1130 <Menu_Tick+0x628>
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     cf2:	1e c2       	rjmp	.+1084   	; 0x1130 <Menu_Tick+0x628>
     cf4:	84 34       	cpi	r24, 0x44	; 68
     cf6:	09 f0       	breq	.+2      	; 0xcfa <Menu_Tick+0x1f2>
     cf8:	9f c0       	rjmp	.+318    	; 0xe38 <Menu_Tick+0x330>
     cfa:	9c dd       	rcall	.-1224   	; 0x834 <check_password>
     cfc:	81 30       	cpi	r24, 0x01	; 1
     cfe:	91 05       	cpc	r25, r1
     d00:	a1 f4       	brne	.+40     	; 0xd2a <Menu_Tick+0x222>
     d02:	80 91 10 09 	lds	r24, 0x0910	; 0x800910 <mode>
     d06:	81 11       	cpse	r24, r1
     d08:	23 c0       	rjmp	.+70     	; 0xd50 <Menu_Tick+0x248>
     d0a:	80 91 13 09 	lds	r24, 0x0913	; 0x800913 <ARM_DISARM>
     d0e:	81 11       	cpse	r24, r1
     d10:	06 c0       	rjmp	.+12     	; 0xd1e <Menu_Tick+0x216>
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	80 93 13 09 	sts	0x0913, r24	; 0x800913 <ARM_DISARM>
     d18:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     d1c:	09 c2       	rjmp	.+1042   	; 0x1130 <Menu_Tick+0x628>
     d1e:	10 92 13 09 	sts	0x0913, r1	; 0x800913 <ARM_DISARM>
     d22:	82 e0       	ldi	r24, 0x02	; 2
     d24:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     d28:	03 c2       	rjmp	.+1030   	; 0x1130 <Menu_Tick+0x628>
     d2a:	89 2b       	or	r24, r25
     d2c:	09 f0       	breq	.+2      	; 0xd30 <Menu_Tick+0x228>
     d2e:	00 c2       	rjmp	.+1024   	; 0x1130 <Menu_Tick+0x628>
     d30:	80 91 10 09 	lds	r24, 0x0910	; 0x800910 <mode>
     d34:	81 11       	cpse	r24, r1
     d36:	21 c0       	rjmp	.+66     	; 0xd7a <Menu_Tick+0x272>
     d38:	80 91 13 09 	lds	r24, 0x0913	; 0x800913 <ARM_DISARM>
     d3c:	81 11       	cpse	r24, r1
     d3e:	04 c0       	rjmp	.+8      	; 0xd48 <Menu_Tick+0x240>
     d40:	82 e0       	ldi	r24, 0x02	; 2
     d42:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     d46:	f4 c1       	rjmp	.+1000   	; 0x1130 <Menu_Tick+0x628>
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     d4e:	f0 c1       	rjmp	.+992    	; 0x1130 <Menu_Tick+0x628>
     d50:	80 91 10 09 	lds	r24, 0x0910	; 0x800910 <mode>
     d54:	81 30       	cpi	r24, 0x01	; 1
     d56:	e9 f4       	brne	.+58     	; 0xd92 <Menu_Tick+0x28a>
     d58:	67 eb       	ldi	r22, 0xB7	; 183
     d5a:	72 e0       	ldi	r23, 0x02	; 2
     d5c:	8e db       	rcall	.-2276   	; 0x47a <LCD_DisplayString>
     d5e:	81 e2       	ldi	r24, 0x21	; 33
     d60:	6c db       	rcall	.-2344   	; 0x43a <LCD_Cursor>
     d62:	87 e0       	ldi	r24, 0x07	; 7
     d64:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     d68:	10 92 04 09 	sts	0x0904, r1	; 0x800904 <pass_location>
     d6c:	ec e0       	ldi	r30, 0x0C	; 12
     d6e:	f2 e0       	ldi	r31, 0x02	; 2
     d70:	10 82       	st	Z, r1
     d72:	11 82       	std	Z+1, r1	; 0x01
     d74:	12 82       	std	Z+2, r1	; 0x02
     d76:	13 82       	std	Z+3, r1	; 0x03
     d78:	db c1       	rjmp	.+950    	; 0x1130 <Menu_Tick+0x628>
     d7a:	80 91 10 09 	lds	r24, 0x0910	; 0x800910 <mode>
     d7e:	81 30       	cpi	r24, 0x01	; 1
     d80:	79 f5       	brne	.+94     	; 0xde0 <Menu_Tick+0x2d8>
     d82:	85 e0       	ldi	r24, 0x05	; 5
     d84:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     d88:	60 e8       	ldi	r22, 0x80	; 128
     d8a:	72 e0       	ldi	r23, 0x02	; 2
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	75 db       	rcall	.-2326   	; 0x47a <LCD_DisplayString>
     d90:	cf c1       	rjmp	.+926    	; 0x1130 <Menu_Tick+0x628>
     d92:	82 30       	cpi	r24, 0x02	; 2
     d94:	89 f5       	brne	.+98     	; 0xdf8 <Menu_Tick+0x2f0>
     d96:	89 e0       	ldi	r24, 0x09	; 9
     d98:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     d9c:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <random_count>
     da0:	90 91 06 09 	lds	r25, 0x0906	; 0x800906 <random_count+0x1>
     da4:	f8 dd       	rcall	.-1040   	; 0x996 <generate_random_pass>
     da6:	67 ec       	ldi	r22, 0xC7	; 199
     da8:	72 e0       	ldi	r23, 0x02	; 2
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	66 db       	rcall	.-2356   	; 0x47a <LCD_DisplayString>
     dae:	81 e1       	ldi	r24, 0x11	; 17
     db0:	44 db       	rcall	.-2424   	; 0x43a <LCD_Cursor>
     db2:	c8 e0       	ldi	r28, 0x08	; 8
     db4:	d2 e0       	ldi	r29, 0x02	; 2
     db6:	88 81       	ld	r24, Y
     db8:	80 5d       	subi	r24, 0xD0	; 208
     dba:	56 db       	rcall	.-2388   	; 0x468 <LCD_WriteData>
     dbc:	82 e1       	ldi	r24, 0x12	; 18
     dbe:	3d db       	rcall	.-2438   	; 0x43a <LCD_Cursor>
     dc0:	89 81       	ldd	r24, Y+1	; 0x01
     dc2:	80 5d       	subi	r24, 0xD0	; 208
     dc4:	51 db       	rcall	.-2398   	; 0x468 <LCD_WriteData>
     dc6:	83 e1       	ldi	r24, 0x13	; 19
     dc8:	38 db       	rcall	.-2448   	; 0x43a <LCD_Cursor>
     dca:	8a 81       	ldd	r24, Y+2	; 0x02
     dcc:	80 5d       	subi	r24, 0xD0	; 208
     dce:	4c db       	rcall	.-2408   	; 0x468 <LCD_WriteData>
     dd0:	84 e1       	ldi	r24, 0x14	; 20
     dd2:	33 db       	rcall	.-2458   	; 0x43a <LCD_Cursor>
     dd4:	8b 81       	ldd	r24, Y+3	; 0x03
     dd6:	80 5d       	subi	r24, 0xD0	; 208
     dd8:	47 db       	rcall	.-2418   	; 0x468 <LCD_WriteData>
     dda:	81 e2       	ldi	r24, 0x21	; 33
     ddc:	2e db       	rcall	.-2468   	; 0x43a <LCD_Cursor>
     dde:	a8 c1       	rjmp	.+848    	; 0x1130 <Menu_Tick+0x628>
     de0:	80 91 10 09 	lds	r24, 0x0910	; 0x800910 <mode>
     de4:	82 30       	cpi	r24, 0x02	; 2
     de6:	99 f4       	brne	.+38     	; 0xe0e <Menu_Tick+0x306>
     de8:	85 e0       	ldi	r24, 0x05	; 5
     dea:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     dee:	60 e8       	ldi	r22, 0x80	; 128
     df0:	72 e0       	ldi	r23, 0x02	; 2
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	42 db       	rcall	.-2428   	; 0x47a <LCD_DisplayString>
     df6:	9c c1       	rjmp	.+824    	; 0x1130 <Menu_Tick+0x628>
     df8:	80 91 10 09 	lds	r24, 0x0910	; 0x800910 <mode>
     dfc:	83 30       	cpi	r24, 0x03	; 3
     dfe:	09 f0       	breq	.+2      	; 0xe02 <Menu_Tick+0x2fa>
     e00:	97 c1       	rjmp	.+814    	; 0x1130 <Menu_Tick+0x628>
     e02:	82 e0       	ldi	r24, 0x02	; 2
     e04:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     e08:	10 92 13 09 	sts	0x0913, r1	; 0x800913 <ARM_DISARM>
     e0c:	91 c1       	rjmp	.+802    	; 0x1130 <Menu_Tick+0x628>
     e0e:	83 30       	cpi	r24, 0x03	; 3
     e10:	09 f0       	breq	.+2      	; 0xe14 <Menu_Tick+0x30c>
     e12:	8e c1       	rjmp	.+796    	; 0x1130 <Menu_Tick+0x628>
     e14:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     e18:	10 92 04 09 	sts	0x0904, r1	; 0x800904 <pass_location>
     e1c:	ec e0       	ldi	r30, 0x0C	; 12
     e1e:	f2 e0       	ldi	r31, 0x02	; 2
     e20:	10 82       	st	Z, r1
     e22:	11 82       	std	Z+1, r1	; 0x01
     e24:	12 82       	std	Z+2, r1	; 0x02
     e26:	13 82       	std	Z+3, r1	; 0x03
     e28:	e4 e3       	ldi	r30, 0x34	; 52
     e2a:	f2 e0       	ldi	r31, 0x02	; 2
     e2c:	80 e2       	ldi	r24, 0x20	; 32
     e2e:	80 8b       	std	Z+16, r24	; 0x10
     e30:	81 8b       	std	Z+17, r24	; 0x11
     e32:	82 8b       	std	Z+18, r24	; 0x12
     e34:	83 8b       	std	Z+19, r24	; 0x13
     e36:	7c c1       	rjmp	.+760    	; 0x1130 <Menu_Tick+0x628>
     e38:	94 e0       	ldi	r25, 0x04	; 4
     e3a:	90 93 74 09 	sts	0x0974, r25	; 0x800974 <menu_state>
     e3e:	60 91 04 09 	lds	r22, 0x0904	; 0x800904 <pass_location>
     e42:	64 30       	cpi	r22, 0x04	; 4
     e44:	08 f0       	brcs	.+2      	; 0xe48 <Menu_Tick+0x340>
     e46:	74 c1       	rjmp	.+744    	; 0x1130 <Menu_Tick+0x628>
     e48:	70 e0       	ldi	r23, 0x00	; 0
     e4a:	ff db       	rcall	.-2050   	; 0x64a <enter_c_string>
     e4c:	80 91 04 09 	lds	r24, 0x0904	; 0x800904 <pass_location>
     e50:	8f 5f       	subi	r24, 0xFF	; 255
     e52:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <pass_location>
     e56:	6c c1       	rjmp	.+728    	; 0x1130 <Menu_Tick+0x628>
     e58:	68 da       	rcall	.-2864   	; 0x32a <GetKeypadKey>
     e5a:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <keypad_val>
     e5e:	81 11       	cpse	r24, r1
     e60:	04 c0       	rjmp	.+8      	; 0xe6a <Menu_Tick+0x362>
     e62:	83 e0       	ldi	r24, 0x03	; 3
     e64:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     e68:	63 c1       	rjmp	.+710    	; 0x1130 <Menu_Tick+0x628>
     e6a:	84 e0       	ldi	r24, 0x04	; 4
     e6c:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     e70:	5f c1       	rjmp	.+702    	; 0x1130 <Menu_Tick+0x628>
     e72:	5b da       	rcall	.-2890   	; 0x32a <GetKeypadKey>
     e74:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <keypad_val>
     e78:	20 91 05 09 	lds	r18, 0x0905	; 0x800905 <random_count>
     e7c:	30 91 06 09 	lds	r19, 0x0906	; 0x800906 <random_count+0x1>
     e80:	2f 5f       	subi	r18, 0xFF	; 255
     e82:	3f 4f       	sbci	r19, 0xFF	; 255
     e84:	30 93 06 09 	sts	0x0906, r19	; 0x800906 <random_count+0x1>
     e88:	20 93 05 09 	sts	0x0905, r18	; 0x800905 <random_count>
     e8c:	88 23       	and	r24, r24
     e8e:	31 f0       	breq	.+12     	; 0xe9c <Menu_Tick+0x394>
     e90:	9f eb       	ldi	r25, 0xBF	; 191
     e92:	98 0f       	add	r25, r24
     e94:	92 30       	cpi	r25, 0x02	; 2
     e96:	10 f0       	brcs	.+4      	; 0xe9c <Menu_Tick+0x394>
     e98:	84 34       	cpi	r24, 0x44	; 68
     e9a:	21 f4       	brne	.+8      	; 0xea4 <Menu_Tick+0x39c>
     e9c:	85 e0       	ldi	r24, 0x05	; 5
     e9e:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     ea2:	46 c1       	rjmp	.+652    	; 0x1130 <Menu_Tick+0x628>
     ea4:	83 34       	cpi	r24, 0x43	; 67
     ea6:	61 f4       	brne	.+24     	; 0xec0 <Menu_Tick+0x3b8>
     ea8:	80 91 13 09 	lds	r24, 0x0913	; 0x800913 <ARM_DISARM>
     eac:	81 11       	cpse	r24, r1
     eae:	04 c0       	rjmp	.+8      	; 0xeb8 <Menu_Tick+0x3b0>
     eb0:	82 e0       	ldi	r24, 0x02	; 2
     eb2:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     eb6:	3c c1       	rjmp	.+632    	; 0x1130 <Menu_Tick+0x628>
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     ebe:	38 c1       	rjmp	.+624    	; 0x1130 <Menu_Tick+0x628>
     ec0:	8a 32       	cpi	r24, 0x2A	; 42
     ec2:	b1 f4       	brne	.+44     	; 0xef0 <Menu_Tick+0x3e8>
     ec4:	83 e0       	ldi	r24, 0x03	; 3
     ec6:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     eca:	10 92 04 09 	sts	0x0904, r1	; 0x800904 <pass_location>
     ece:	ec e0       	ldi	r30, 0x0C	; 12
     ed0:	f2 e0       	ldi	r31, 0x02	; 2
     ed2:	10 82       	st	Z, r1
     ed4:	11 82       	std	Z+1, r1	; 0x01
     ed6:	12 82       	std	Z+2, r1	; 0x02
     ed8:	13 82       	std	Z+3, r1	; 0x03
     eda:	e4 e3       	ldi	r30, 0x34	; 52
     edc:	f2 e0       	ldi	r31, 0x02	; 2
     ede:	80 e2       	ldi	r24, 0x20	; 32
     ee0:	80 8b       	std	Z+16, r24	; 0x10
     ee2:	81 8b       	std	Z+17, r24	; 0x11
     ee4:	82 8b       	std	Z+18, r24	; 0x12
     ee6:	83 8b       	std	Z+19, r24	; 0x13
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	80 93 10 09 	sts	0x0910, r24	; 0x800910 <mode>
     eee:	20 c1       	rjmp	.+576    	; 0x1130 <Menu_Tick+0x628>
     ef0:	83 32       	cpi	r24, 0x23	; 35
     ef2:	b1 f4       	brne	.+44     	; 0xf20 <Menu_Tick+0x418>
     ef4:	83 e0       	ldi	r24, 0x03	; 3
     ef6:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     efa:	10 92 04 09 	sts	0x0904, r1	; 0x800904 <pass_location>
     efe:	ec e0       	ldi	r30, 0x0C	; 12
     f00:	f2 e0       	ldi	r31, 0x02	; 2
     f02:	10 82       	st	Z, r1
     f04:	11 82       	std	Z+1, r1	; 0x01
     f06:	12 82       	std	Z+2, r1	; 0x02
     f08:	13 82       	std	Z+3, r1	; 0x03
     f0a:	e4 e3       	ldi	r30, 0x34	; 52
     f0c:	f2 e0       	ldi	r31, 0x02	; 2
     f0e:	80 e2       	ldi	r24, 0x20	; 32
     f10:	80 8b       	std	Z+16, r24	; 0x10
     f12:	81 8b       	std	Z+17, r24	; 0x11
     f14:	82 8b       	std	Z+18, r24	; 0x12
     f16:	83 8b       	std	Z+19, r24	; 0x13
     f18:	82 e0       	ldi	r24, 0x02	; 2
     f1a:	80 93 10 09 	sts	0x0910, r24	; 0x800910 <mode>
     f1e:	08 c1       	rjmp	.+528    	; 0x1130 <Menu_Tick+0x628>
     f20:	85 e0       	ldi	r24, 0x05	; 5
     f22:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     f26:	04 c1       	rjmp	.+520    	; 0x1130 <Menu_Tick+0x628>
     f28:	00 da       	rcall	.-3072   	; 0x32a <GetKeypadKey>
     f2a:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <keypad_val>
     f2e:	88 23       	and	r24, r24
     f30:	51 f0       	breq	.+20     	; 0xf46 <Menu_Tick+0x43e>
     f32:	9f eb       	ldi	r25, 0xBF	; 191
     f34:	98 0f       	add	r25, r24
     f36:	92 30       	cpi	r25, 0x02	; 2
     f38:	30 f0       	brcs	.+12     	; 0xf46 <Menu_Tick+0x43e>
     f3a:	84 34       	cpi	r24, 0x44	; 68
     f3c:	21 f0       	breq	.+8      	; 0xf46 <Menu_Tick+0x43e>
     f3e:	8a 32       	cpi	r24, 0x2A	; 42
     f40:	11 f0       	breq	.+4      	; 0xf46 <Menu_Tick+0x43e>
     f42:	83 32       	cpi	r24, 0x23	; 35
     f44:	91 f5       	brne	.+100    	; 0xfaa <Menu_Tick+0x4a2>
     f46:	80 91 04 09 	lds	r24, 0x0904	; 0x800904 <pass_location>
     f4a:	84 30       	cpi	r24, 0x04	; 4
     f4c:	51 f5       	brne	.+84     	; 0xfa2 <Menu_Tick+0x49a>
     f4e:	82 e0       	ldi	r24, 0x02	; 2
     f50:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     f54:	10 92 04 09 	sts	0x0904, r1	; 0x800904 <pass_location>
     f58:	c0 e0       	ldi	r28, 0x00	; 0
     f5a:	d9 e0       	ldi	r29, 0x09	; 9
     f5c:	68 81       	ld	r22, Y
     f5e:	00 e1       	ldi	r16, 0x10	; 16
     f60:	12 e0       	ldi	r17, 0x02	; 2
     f62:	f8 01       	movw	r30, r16
     f64:	60 83       	st	Z, r22
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	0e 94 28 10 	call	0x2050	; 0x2050 <eeprom_update_byte>
     f6e:	69 81       	ldd	r22, Y+1	; 0x01
     f70:	f8 01       	movw	r30, r16
     f72:	61 83       	std	Z+1, r22	; 0x01
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	0e 94 28 10 	call	0x2050	; 0x2050 <eeprom_update_byte>
     f7c:	6a 81       	ldd	r22, Y+2	; 0x02
     f7e:	f8 01       	movw	r30, r16
     f80:	62 83       	std	Z+2, r22	; 0x02
     f82:	82 e0       	ldi	r24, 0x02	; 2
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	0e 94 28 10 	call	0x2050	; 0x2050 <eeprom_update_byte>
     f8a:	6b 81       	ldd	r22, Y+3	; 0x03
     f8c:	f8 01       	movw	r30, r16
     f8e:	63 83       	std	Z+3, r22	; 0x03
     f90:	83 e0       	ldi	r24, 0x03	; 3
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	0e 94 28 10 	call	0x2050	; 0x2050 <eeprom_update_byte>
     f98:	18 82       	st	Y, r1
     f9a:	19 82       	std	Y+1, r1	; 0x01
     f9c:	1a 82       	std	Y+2, r1	; 0x02
     f9e:	1b 82       	std	Y+3, r1	; 0x03
     fa0:	c7 c0       	rjmp	.+398    	; 0x1130 <Menu_Tick+0x628>
     fa2:	87 e0       	ldi	r24, 0x07	; 7
     fa4:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     fa8:	c3 c0       	rjmp	.+390    	; 0x1130 <Menu_Tick+0x628>
     faa:	83 34       	cpi	r24, 0x43	; 67
     fac:	21 f4       	brne	.+8      	; 0xfb6 <Menu_Tick+0x4ae>
     fae:	82 e0       	ldi	r24, 0x02	; 2
     fb0:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     fb4:	bd c0       	rjmp	.+378    	; 0x1130 <Menu_Tick+0x628>
     fb6:	60 91 04 09 	lds	r22, 0x0904	; 0x800904 <pass_location>
     fba:	64 30       	cpi	r22, 0x04	; 4
     fbc:	31 f4       	brne	.+12     	; 0xfca <Menu_Tick+0x4c2>
     fbe:	82 e0       	ldi	r24, 0x02	; 2
     fc0:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     fc4:	10 92 04 09 	sts	0x0904, r1	; 0x800904 <pass_location>
     fc8:	b3 c0       	rjmp	.+358    	; 0x1130 <Menu_Tick+0x628>
     fca:	98 e0       	ldi	r25, 0x08	; 8
     fcc:	90 93 74 09 	sts	0x0974, r25	; 0x800974 <menu_state>
     fd0:	56 dc       	rcall	.-1876   	; 0x87e <output_for_user_pass_reset>
     fd2:	80 91 04 09 	lds	r24, 0x0904	; 0x800904 <pass_location>
     fd6:	8f 5f       	subi	r24, 0xFF	; 255
     fd8:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <pass_location>
     fdc:	a9 c0       	rjmp	.+338    	; 0x1130 <Menu_Tick+0x628>
     fde:	a5 d9       	rcall	.-3254   	; 0x32a <GetKeypadKey>
     fe0:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <keypad_val>
     fe4:	81 11       	cpse	r24, r1
     fe6:	04 c0       	rjmp	.+8      	; 0xff0 <Menu_Tick+0x4e8>
     fe8:	87 e0       	ldi	r24, 0x07	; 7
     fea:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     fee:	a0 c0       	rjmp	.+320    	; 0x1130 <Menu_Tick+0x628>
     ff0:	88 e0       	ldi	r24, 0x08	; 8
     ff2:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
     ff6:	9c c0       	rjmp	.+312    	; 0x1130 <Menu_Tick+0x628>
     ff8:	98 d9       	rcall	.-3280   	; 0x32a <GetKeypadKey>
     ffa:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <keypad_val>
     ffe:	81 11       	cpse	r24, r1
    1000:	04 c0       	rjmp	.+8      	; 0x100a <Menu_Tick+0x502>
    1002:	89 e0       	ldi	r24, 0x09	; 9
    1004:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
    1008:	93 c0       	rjmp	.+294    	; 0x1130 <Menu_Tick+0x628>
    100a:	83 32       	cpi	r24, 0x23	; 35
    100c:	19 f5       	brne	.+70     	; 0x1054 <Menu_Tick+0x54c>
    100e:	e8 e0       	ldi	r30, 0x08	; 8
    1010:	f2 e0       	ldi	r31, 0x02	; 2
    1012:	60 81       	ld	r22, Z
    1014:	c0 e1       	ldi	r28, 0x10	; 16
    1016:	d2 e0       	ldi	r29, 0x02	; 2
    1018:	68 83       	st	Y, r22
    101a:	81 81       	ldd	r24, Z+1	; 0x01
    101c:	89 83       	std	Y+1, r24	; 0x01
    101e:	82 81       	ldd	r24, Z+2	; 0x02
    1020:	8a 83       	std	Y+2, r24	; 0x02
    1022:	83 81       	ldd	r24, Z+3	; 0x03
    1024:	8b 83       	std	Y+3, r24	; 0x03
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	0e 94 28 10 	call	0x2050	; 0x2050 <eeprom_update_byte>
    102e:	69 81       	ldd	r22, Y+1	; 0x01
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	0e 94 28 10 	call	0x2050	; 0x2050 <eeprom_update_byte>
    1038:	6a 81       	ldd	r22, Y+2	; 0x02
    103a:	82 e0       	ldi	r24, 0x02	; 2
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	0e 94 28 10 	call	0x2050	; 0x2050 <eeprom_update_byte>
    1042:	6b 81       	ldd	r22, Y+3	; 0x03
    1044:	83 e0       	ldi	r24, 0x03	; 3
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	0e 94 28 10 	call	0x2050	; 0x2050 <eeprom_update_byte>
    104c:	82 e0       	ldi	r24, 0x02	; 2
    104e:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
    1052:	6e c0       	rjmp	.+220    	; 0x1130 <Menu_Tick+0x628>
    1054:	83 34       	cpi	r24, 0x43	; 67
    1056:	21 f4       	brne	.+8      	; 0x1060 <Menu_Tick+0x558>
    1058:	82 e0       	ldi	r24, 0x02	; 2
    105a:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
    105e:	68 c0       	rjmp	.+208    	; 0x1130 <Menu_Tick+0x628>
    1060:	89 e0       	ldi	r24, 0x09	; 9
    1062:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
    1066:	64 c0       	rjmp	.+200    	; 0x1130 <Menu_Tick+0x628>
    1068:	80 91 0b 09 	lds	r24, 0x090B	; 0x80090b <sensors_tripped>
    106c:	81 30       	cpi	r24, 0x01	; 1
    106e:	31 f4       	brne	.+12     	; 0x107c <Menu_Tick+0x574>
    1070:	82 e1       	ldi	r24, 0x12	; 18
    1072:	e3 d9       	rcall	.-3130   	; 0x43a <LCD_Cursor>
    1074:	81 e3       	ldi	r24, 0x31	; 49
    1076:	f8 d9       	rcall	.-3088   	; 0x468 <LCD_WriteData>
    1078:	81 e2       	ldi	r24, 0x21	; 33
    107a:	df d9       	rcall	.-3138   	; 0x43a <LCD_Cursor>
    107c:	80 91 0c 09 	lds	r24, 0x090C	; 0x80090c <sensors_tripped+0x1>
    1080:	81 30       	cpi	r24, 0x01	; 1
    1082:	31 f4       	brne	.+12     	; 0x1090 <Menu_Tick+0x588>
    1084:	84 e1       	ldi	r24, 0x14	; 20
    1086:	d9 d9       	rcall	.-3150   	; 0x43a <LCD_Cursor>
    1088:	82 e3       	ldi	r24, 0x32	; 50
    108a:	ee d9       	rcall	.-3108   	; 0x468 <LCD_WriteData>
    108c:	81 e2       	ldi	r24, 0x21	; 33
    108e:	d5 d9       	rcall	.-3158   	; 0x43a <LCD_Cursor>
    1090:	80 91 0d 09 	lds	r24, 0x090D	; 0x80090d <sensors_tripped+0x2>
    1094:	81 30       	cpi	r24, 0x01	; 1
    1096:	31 f4       	brne	.+12     	; 0x10a4 <Menu_Tick+0x59c>
    1098:	86 e1       	ldi	r24, 0x16	; 22
    109a:	cf d9       	rcall	.-3170   	; 0x43a <LCD_Cursor>
    109c:	83 e3       	ldi	r24, 0x33	; 51
    109e:	e4 d9       	rcall	.-3128   	; 0x468 <LCD_WriteData>
    10a0:	81 e2       	ldi	r24, 0x21	; 33
    10a2:	cb d9       	rcall	.-3178   	; 0x43a <LCD_Cursor>
    10a4:	80 91 0e 09 	lds	r24, 0x090E	; 0x80090e <sensors_tripped+0x3>
    10a8:	81 30       	cpi	r24, 0x01	; 1
    10aa:	31 f4       	brne	.+12     	; 0x10b8 <Menu_Tick+0x5b0>
    10ac:	88 e1       	ldi	r24, 0x18	; 24
    10ae:	c5 d9       	rcall	.-3190   	; 0x43a <LCD_Cursor>
    10b0:	84 e3       	ldi	r24, 0x34	; 52
    10b2:	da d9       	rcall	.-3148   	; 0x468 <LCD_WriteData>
    10b4:	81 e2       	ldi	r24, 0x21	; 33
    10b6:	c1 d9       	rcall	.-3198   	; 0x43a <LCD_Cursor>
    10b8:	80 91 0f 09 	lds	r24, 0x090F	; 0x80090f <sensors_tripped+0x4>
    10bc:	81 30       	cpi	r24, 0x01	; 1
    10be:	31 f4       	brne	.+12     	; 0x10cc <Menu_Tick+0x5c4>
    10c0:	8a e1       	ldi	r24, 0x1A	; 26
    10c2:	bb d9       	rcall	.-3210   	; 0x43a <LCD_Cursor>
    10c4:	85 e3       	ldi	r24, 0x35	; 53
    10c6:	d0 d9       	rcall	.-3168   	; 0x468 <LCD_WriteData>
    10c8:	81 e2       	ldi	r24, 0x21	; 33
    10ca:	b7 d9       	rcall	.-3218   	; 0x43a <LCD_Cursor>
    10cc:	2e d9       	rcall	.-3492   	; 0x32a <GetKeypadKey>
    10ce:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <keypad_val>
    10d2:	81 34       	cpi	r24, 0x41	; 65
    10d4:	a9 f4       	brne	.+42     	; 0x1100 <Menu_Tick+0x5f8>
    10d6:	93 e0       	ldi	r25, 0x03	; 3
    10d8:	90 93 74 09 	sts	0x0974, r25	; 0x800974 <menu_state>
    10dc:	10 92 04 09 	sts	0x0904, r1	; 0x800904 <pass_location>
    10e0:	ec e0       	ldi	r30, 0x0C	; 12
    10e2:	f2 e0       	ldi	r31, 0x02	; 2
    10e4:	10 82       	st	Z, r1
    10e6:	11 82       	std	Z+1, r1	; 0x01
    10e8:	12 82       	std	Z+2, r1	; 0x02
    10ea:	13 82       	std	Z+3, r1	; 0x03
    10ec:	e4 e3       	ldi	r30, 0x34	; 52
    10ee:	f2 e0       	ldi	r31, 0x02	; 2
    10f0:	80 e2       	ldi	r24, 0x20	; 32
    10f2:	80 8b       	std	Z+16, r24	; 0x10
    10f4:	81 8b       	std	Z+17, r24	; 0x11
    10f6:	82 8b       	std	Z+18, r24	; 0x12
    10f8:	83 8b       	std	Z+19, r24	; 0x13
    10fa:	90 93 10 09 	sts	0x0910, r25	; 0x800910 <mode>
    10fe:	18 c0       	rjmp	.+48     	; 0x1130 <Menu_Tick+0x628>
    1100:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <bluetooth_arm_disarm>
    1104:	82 30       	cpi	r24, 0x02	; 2
    1106:	21 f4       	brne	.+8      	; 0x1110 <Menu_Tick+0x608>
    1108:	8a e0       	ldi	r24, 0x0A	; 10
    110a:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
    110e:	10 c0       	rjmp	.+32     	; 0x1130 <Menu_Tick+0x628>
    1110:	81 30       	cpi	r24, 0x01	; 1
    1112:	39 f4       	brne	.+14     	; 0x1122 <Menu_Tick+0x61a>
    1114:	82 e0       	ldi	r24, 0x02	; 2
    1116:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <bluetooth_arm_disarm>
    111a:	8a e0       	ldi	r24, 0x0A	; 10
    111c:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
    1120:	07 c0       	rjmp	.+14     	; 0x1130 <Menu_Tick+0x628>
    1122:	82 e0       	ldi	r24, 0x02	; 2
    1124:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <menu_state>
    1128:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <bluetooth_arm_disarm>
    112c:	10 92 13 09 	sts	0x0913, r1	; 0x800913 <ARM_DISARM>
    1130:	df 91       	pop	r29
    1132:	cf 91       	pop	r28
    1134:	1f 91       	pop	r17
    1136:	0f 91       	pop	r16
    1138:	08 95       	ret

0000113a <MenuSecTask>:
    113a:	10 92 74 09 	sts	0x0974, r1	; 0x800974 <menu_state>
    113e:	e4 dc       	rcall	.-1592   	; 0xb08 <Menu_Tick>
    1140:	8a e0       	ldi	r24, 0x0A	; 10
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	21 d6       	rcall	.+3138   	; 0x1d88 <vTaskDelay>
    1146:	fb cf       	rjmp	.-10     	; 0x113e <MenuSecTask+0x4>

00001148 <MenuSecPulse>:
    1148:	af 92       	push	r10
    114a:	bf 92       	push	r11
    114c:	cf 92       	push	r12
    114e:	df 92       	push	r13
    1150:	ef 92       	push	r14
    1152:	ff 92       	push	r15
    1154:	0f 93       	push	r16
    1156:	a1 2c       	mov	r10, r1
    1158:	b1 2c       	mov	r11, r1
    115a:	c1 2c       	mov	r12, r1
    115c:	d1 2c       	mov	r13, r1
    115e:	e1 2c       	mov	r14, r1
    1160:	f1 2c       	mov	r15, r1
    1162:	08 2f       	mov	r16, r24
    1164:	20 e0       	ldi	r18, 0x00	; 0
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	45 e5       	ldi	r20, 0x55	; 85
    116a:	50 e0       	ldi	r21, 0x00	; 0
    116c:	66 ed       	ldi	r22, 0xD6	; 214
    116e:	72 e0       	ldi	r23, 0x02	; 2
    1170:	8d e9       	ldi	r24, 0x9D	; 157
    1172:	98 e0       	ldi	r25, 0x08	; 8
    1174:	91 d3       	rcall	.+1826   	; 0x1898 <xTaskGenericCreate>
    1176:	0f 91       	pop	r16
    1178:	ff 90       	pop	r15
    117a:	ef 90       	pop	r14
    117c:	df 90       	pop	r13
    117e:	cf 90       	pop	r12
    1180:	bf 90       	pop	r11
    1182:	af 90       	pop	r10
    1184:	08 95       	ret

00001186 <Sense_Tick>:
    1186:	80 91 76 09 	lds	r24, 0x0976	; 0x800976 <sense_state>
    118a:	88 23       	and	r24, r24
    118c:	19 f0       	breq	.+6      	; 0x1194 <Sense_Tick+0xe>
    118e:	82 30       	cpi	r24, 0x02	; 2
    1190:	21 f0       	breq	.+8      	; 0x119a <Sense_Tick+0x14>
    1192:	29 c0       	rjmp	.+82     	; 0x11e6 <Sense_Tick+0x60>
    1194:	10 92 08 09 	sts	0x0908, r1	; 0x800908 <sensor_trip>
    1198:	2d c0       	rjmp	.+90     	; 0x11f4 <Sense_Tick+0x6e>
    119a:	80 91 12 09 	lds	r24, 0x0912	; 0x800912 <received_value>
    119e:	80 ff       	sbrs	r24, 0
    11a0:	05 c0       	rjmp	.+10     	; 0x11ac <Sense_Tick+0x26>
    11a2:	91 e0       	ldi	r25, 0x01	; 1
    11a4:	90 93 0b 09 	sts	0x090B, r25	; 0x80090b <sensors_tripped>
    11a8:	90 93 08 09 	sts	0x0908, r25	; 0x800908 <sensor_trip>
    11ac:	81 ff       	sbrs	r24, 1
    11ae:	05 c0       	rjmp	.+10     	; 0x11ba <Sense_Tick+0x34>
    11b0:	21 e0       	ldi	r18, 0x01	; 1
    11b2:	20 93 0c 09 	sts	0x090C, r18	; 0x80090c <sensors_tripped+0x1>
    11b6:	20 93 08 09 	sts	0x0908, r18	; 0x800908 <sensor_trip>
    11ba:	82 ff       	sbrs	r24, 2
    11bc:	05 c0       	rjmp	.+10     	; 0x11c8 <Sense_Tick+0x42>
    11be:	21 e0       	ldi	r18, 0x01	; 1
    11c0:	20 93 0d 09 	sts	0x090D, r18	; 0x80090d <sensors_tripped+0x2>
    11c4:	20 93 08 09 	sts	0x0908, r18	; 0x800908 <sensor_trip>
    11c8:	83 ff       	sbrs	r24, 3
    11ca:	05 c0       	rjmp	.+10     	; 0x11d6 <Sense_Tick+0x50>
    11cc:	21 e0       	ldi	r18, 0x01	; 1
    11ce:	20 93 0e 09 	sts	0x090E, r18	; 0x80090e <sensors_tripped+0x3>
    11d2:	20 93 08 09 	sts	0x0908, r18	; 0x800908 <sensor_trip>
    11d6:	84 ff       	sbrs	r24, 4
    11d8:	41 c0       	rjmp	.+130    	; 0x125c <Sense_Tick+0xd6>
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	80 93 0f 09 	sts	0x090F, r24	; 0x80090f <sensors_tripped+0x4>
    11e0:	80 93 08 09 	sts	0x0908, r24	; 0x800908 <sensor_trip>
    11e4:	3b c0       	rjmp	.+118    	; 0x125c <Sense_Tick+0xd6>
    11e6:	81 30       	cpi	r24, 0x01	; 1
    11e8:	c1 f0       	breq	.+48     	; 0x121a <Sense_Tick+0x94>
    11ea:	20 f0       	brcs	.+8      	; 0x11f4 <Sense_Tick+0x6e>
    11ec:	82 30       	cpi	r24, 0x02	; 2
    11ee:	09 f0       	breq	.+2      	; 0x11f2 <Sense_Tick+0x6c>
    11f0:	40 c0       	rjmp	.+128    	; 0x1272 <Sense_Tick+0xec>
    11f2:	34 c0       	rjmp	.+104    	; 0x125c <Sense_Tick+0xd6>
    11f4:	80 91 13 09 	lds	r24, 0x0913	; 0x800913 <ARM_DISARM>
    11f8:	81 30       	cpi	r24, 0x01	; 1
    11fa:	19 f4       	brne	.+6      	; 0x1202 <Sense_Tick+0x7c>
    11fc:	80 93 76 09 	sts	0x0976, r24	; 0x800976 <sense_state>
    1200:	08 95       	ret
    1202:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <sense_state>
    1206:	eb e0       	ldi	r30, 0x0B	; 11
    1208:	f9 e0       	ldi	r31, 0x09	; 9
    120a:	10 82       	st	Z, r1
    120c:	11 82       	std	Z+1, r1	; 0x01
    120e:	12 82       	std	Z+2, r1	; 0x02
    1210:	13 82       	std	Z+3, r1	; 0x03
    1212:	14 82       	std	Z+4, r1	; 0x04
    1214:	10 92 09 09 	sts	0x0909, r1	; 0x800909 <sensor_delay_count>
    1218:	08 95       	ret
    121a:	80 91 09 09 	lds	r24, 0x0909	; 0x800909 <sensor_delay_count>
    121e:	8f 5f       	subi	r24, 0xFF	; 255
    1220:	80 93 09 09 	sts	0x0909, r24	; 0x800909 <sensor_delay_count>
    1224:	90 91 13 09 	lds	r25, 0x0913	; 0x800913 <ARM_DISARM>
    1228:	91 11       	cpse	r25, r1
    122a:	05 c0       	rjmp	.+10     	; 0x1236 <Sense_Tick+0xb0>
    122c:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <sense_state>
    1230:	10 92 09 09 	sts	0x0909, r1	; 0x800909 <sensor_delay_count>
    1234:	08 95       	ret
    1236:	8a 30       	cpi	r24, 0x0A	; 10
    1238:	20 f4       	brcc	.+8      	; 0x1242 <Sense_Tick+0xbc>
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	80 93 76 09 	sts	0x0976, r24	; 0x800976 <sense_state>
    1240:	08 95       	ret
    1242:	82 e0       	ldi	r24, 0x02	; 2
    1244:	80 93 76 09 	sts	0x0976, r24	; 0x800976 <sense_state>
    1248:	eb e0       	ldi	r30, 0x0B	; 11
    124a:	f9 e0       	ldi	r31, 0x09	; 9
    124c:	10 82       	st	Z, r1
    124e:	11 82       	std	Z+1, r1	; 0x01
    1250:	12 82       	std	Z+2, r1	; 0x02
    1252:	13 82       	std	Z+3, r1	; 0x03
    1254:	14 82       	std	Z+4, r1	; 0x04
    1256:	10 92 09 09 	sts	0x0909, r1	; 0x800909 <sensor_delay_count>
    125a:	08 95       	ret
    125c:	80 91 13 09 	lds	r24, 0x0913	; 0x800913 <ARM_DISARM>
    1260:	81 30       	cpi	r24, 0x01	; 1
    1262:	21 f4       	brne	.+8      	; 0x126c <Sense_Tick+0xe6>
    1264:	82 e0       	ldi	r24, 0x02	; 2
    1266:	80 93 76 09 	sts	0x0976, r24	; 0x800976 <sense_state>
    126a:	08 95       	ret
    126c:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <sense_state>
    1270:	08 95       	ret
    1272:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <sense_state>
    1276:	08 95       	ret

00001278 <SenseSecTask>:
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	80 93 76 09 	sts	0x0976, r24	; 0x800976 <sense_state>
    127e:	83 df       	rcall	.-250    	; 0x1186 <Sense_Tick>
    1280:	88 ec       	ldi	r24, 0xC8	; 200
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	81 d5       	rcall	.+2818   	; 0x1d88 <vTaskDelay>
    1286:	fb cf       	rjmp	.-10     	; 0x127e <SenseSecTask+0x6>

00001288 <SenseSecPulse>:
    1288:	af 92       	push	r10
    128a:	bf 92       	push	r11
    128c:	cf 92       	push	r12
    128e:	df 92       	push	r13
    1290:	ef 92       	push	r14
    1292:	ff 92       	push	r15
    1294:	0f 93       	push	r16
    1296:	a1 2c       	mov	r10, r1
    1298:	b1 2c       	mov	r11, r1
    129a:	c1 2c       	mov	r12, r1
    129c:	d1 2c       	mov	r13, r1
    129e:	e1 2c       	mov	r14, r1
    12a0:	f1 2c       	mov	r15, r1
    12a2:	08 2f       	mov	r16, r24
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	45 e5       	ldi	r20, 0x55	; 85
    12aa:	50 e0       	ldi	r21, 0x00	; 0
    12ac:	62 ee       	ldi	r22, 0xE2	; 226
    12ae:	72 e0       	ldi	r23, 0x02	; 2
    12b0:	8c e3       	ldi	r24, 0x3C	; 60
    12b2:	99 e0       	ldi	r25, 0x09	; 9
    12b4:	f1 d2       	rcall	.+1506   	; 0x1898 <xTaskGenericCreate>
    12b6:	0f 91       	pop	r16
    12b8:	ff 90       	pop	r15
    12ba:	ef 90       	pop	r14
    12bc:	df 90       	pop	r13
    12be:	cf 90       	pop	r12
    12c0:	bf 90       	pop	r11
    12c2:	af 90       	pop	r10
    12c4:	08 95       	ret

000012c6 <Matrix_Tick>:
    12c6:	80 91 72 09 	lds	r24, 0x0972	; 0x800972 <matrix_state>
    12ca:	81 11       	cpse	r24, r1
    12cc:	0b c0       	rjmp	.+22     	; 0x12e4 <Matrix_Tick+0x1e>
    12ce:	80 91 13 09 	lds	r24, 0x0913	; 0x800913 <ARM_DISARM>
    12d2:	81 30       	cpi	r24, 0x01	; 1
    12d4:	21 f4       	brne	.+8      	; 0x12de <Matrix_Tick+0x18>
    12d6:	88 e8       	ldi	r24, 0x88	; 136
    12d8:	91 e0       	ldi	r25, 0x01	; 1
    12da:	2f d9       	rcall	.-3490   	; 0x53a <print_matrix>
    12dc:	03 c0       	rjmp	.+6      	; 0x12e4 <Matrix_Tick+0x1e>
    12de:	88 e0       	ldi	r24, 0x08	; 8
    12e0:	91 e0       	ldi	r25, 0x01	; 1
    12e2:	2b d9       	rcall	.-3498   	; 0x53a <print_matrix>
    12e4:	10 92 72 09 	sts	0x0972, r1	; 0x800972 <matrix_state>
    12e8:	08 95       	ret

000012ea <MatrixSecTask>:
    12ea:	10 92 72 09 	sts	0x0972, r1	; 0x800972 <matrix_state>
    12ee:	eb df       	rcall	.-42     	; 0x12c6 <Matrix_Tick>
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	49 d5       	rcall	.+2706   	; 0x1d88 <vTaskDelay>
    12f6:	fb cf       	rjmp	.-10     	; 0x12ee <MatrixSecTask+0x4>

000012f8 <MatrixSecPulse>:
    12f8:	af 92       	push	r10
    12fa:	bf 92       	push	r11
    12fc:	cf 92       	push	r12
    12fe:	df 92       	push	r13
    1300:	ef 92       	push	r14
    1302:	ff 92       	push	r15
    1304:	0f 93       	push	r16
    1306:	a1 2c       	mov	r10, r1
    1308:	b1 2c       	mov	r11, r1
    130a:	c1 2c       	mov	r12, r1
    130c:	d1 2c       	mov	r13, r1
    130e:	e1 2c       	mov	r14, r1
    1310:	f1 2c       	mov	r15, r1
    1312:	08 2f       	mov	r16, r24
    1314:	20 e0       	ldi	r18, 0x00	; 0
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	45 e5       	ldi	r20, 0x55	; 85
    131a:	50 e0       	ldi	r21, 0x00	; 0
    131c:	6f ee       	ldi	r22, 0xEF	; 239
    131e:	72 e0       	ldi	r23, 0x02	; 2
    1320:	85 e7       	ldi	r24, 0x75	; 117
    1322:	99 e0       	ldi	r25, 0x09	; 9
    1324:	b9 d2       	rcall	.+1394   	; 0x1898 <xTaskGenericCreate>
    1326:	0f 91       	pop	r16
    1328:	ff 90       	pop	r15
    132a:	ef 90       	pop	r14
    132c:	df 90       	pop	r13
    132e:	cf 90       	pop	r12
    1330:	bf 90       	pop	r11
    1332:	af 90       	pop	r10
    1334:	08 95       	ret

00001336 <Blue_Rec_Tick>:
    1336:	80 91 71 09 	lds	r24, 0x0971	; 0x800971 <blue_rec_state>
    133a:	81 30       	cpi	r24, 0x01	; 1
    133c:	a9 f4       	brne	.+42     	; 0x1368 <Blue_Rec_Tick+0x32>
    133e:	0e 94 83 01 	call	0x306	; 0x306 <USART_Receive>
    1342:	80 93 fe 08 	sts	0x08FE, r24	; 0x8008fe <bluetooth_temp>
    1346:	8f 30       	cpi	r24, 0x0F	; 15
    1348:	21 f4       	brne	.+8      	; 0x1352 <Blue_Rec_Tick+0x1c>
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <bluetooth_arm_disarm>
    1350:	08 c0       	rjmp	.+16     	; 0x1362 <Blue_Rec_Tick+0x2c>
    1352:	80 3f       	cpi	r24, 0xF0	; 240
    1354:	19 f4       	brne	.+6      	; 0x135c <Blue_Rec_Tick+0x26>
    1356:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <bluetooth_arm_disarm>
    135a:	03 c0       	rjmp	.+6      	; 0x1362 <Blue_Rec_Tick+0x2c>
    135c:	82 e0       	ldi	r24, 0x02	; 2
    135e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <bluetooth_arm_disarm>
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	0e 94 54 01 	call	0x2a8	; 0x2a8 <USART_Flush>
    1368:	80 91 71 09 	lds	r24, 0x0971	; 0x800971 <blue_rec_state>
    136c:	88 23       	and	r24, r24
    136e:	19 f0       	breq	.+6      	; 0x1376 <Blue_Rec_Tick+0x40>
    1370:	10 92 71 09 	sts	0x0971, r1	; 0x800971 <blue_rec_state>
    1374:	08 95       	ret
    1376:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    137a:	88 23       	and	r24, r24
    137c:	1c f4       	brge	.+6      	; 0x1384 <Blue_Rec_Tick+0x4e>
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	80 93 71 09 	sts	0x0971, r24	; 0x800971 <blue_rec_state>
    1384:	08 95       	ret

00001386 <BlueRecSecTask>:
    1386:	10 92 71 09 	sts	0x0971, r1	; 0x800971 <blue_rec_state>
    138a:	d5 df       	rcall	.-86     	; 0x1336 <Blue_Rec_Tick>
    138c:	8a e0       	ldi	r24, 0x0A	; 10
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	fb d4       	rcall	.+2550   	; 0x1d88 <vTaskDelay>
    1392:	fb cf       	rjmp	.-10     	; 0x138a <BlueRecSecTask+0x4>

00001394 <BlueRecSecPulse>:
    1394:	af 92       	push	r10
    1396:	bf 92       	push	r11
    1398:	cf 92       	push	r12
    139a:	df 92       	push	r13
    139c:	ef 92       	push	r14
    139e:	ff 92       	push	r15
    13a0:	0f 93       	push	r16
    13a2:	a1 2c       	mov	r10, r1
    13a4:	b1 2c       	mov	r11, r1
    13a6:	c1 2c       	mov	r12, r1
    13a8:	d1 2c       	mov	r13, r1
    13aa:	e1 2c       	mov	r14, r1
    13ac:	f1 2c       	mov	r15, r1
    13ae:	08 2f       	mov	r16, r24
    13b0:	20 e0       	ldi	r18, 0x00	; 0
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	45 e5       	ldi	r20, 0x55	; 85
    13b6:	50 e0       	ldi	r21, 0x00	; 0
    13b8:	6d ef       	ldi	r22, 0xFD	; 253
    13ba:	72 e0       	ldi	r23, 0x02	; 2
    13bc:	83 ec       	ldi	r24, 0xC3	; 195
    13be:	99 e0       	ldi	r25, 0x09	; 9
    13c0:	6b d2       	rcall	.+1238   	; 0x1898 <xTaskGenericCreate>
    13c2:	0f 91       	pop	r16
    13c4:	ff 90       	pop	r15
    13c6:	ef 90       	pop	r14
    13c8:	df 90       	pop	r13
    13ca:	cf 90       	pop	r12
    13cc:	bf 90       	pop	r11
    13ce:	af 90       	pop	r10
    13d0:	08 95       	ret

000013d2 <Buzz_Tick>:
}

void Buzz_Tick(){
	//Actions
	switch(buzzer_state){
    13d2:	80 91 77 09 	lds	r24, 0x0977	; 0x800977 <buzzer_state>
    13d6:	82 30       	cpi	r24, 0x02	; 2
    13d8:	51 f0       	breq	.+20     	; 0x13ee <Buzz_Tick+0x1c>
    13da:	83 30       	cpi	r24, 0x03	; 3
    13dc:	79 f0       	breq	.+30     	; 0x13fc <Buzz_Tick+0x2a>
    13de:	81 30       	cpi	r24, 0x01	; 1
    13e0:	99 f4       	brne	.+38     	; 0x1408 <Buzz_Tick+0x36>
		case buzz_wait:
		break;

		case no_buzz:
			++buzzer_counter;
    13e2:	80 91 ff 08 	lds	r24, 0x08FF	; 0x8008ff <buzzer_counter>
    13e6:	8f 5f       	subi	r24, 0xFF	; 255
    13e8:	80 93 ff 08 	sts	0x08FF, r24	; 0x8008ff <buzzer_counter>
    13ec:	2f c0       	rjmp	.+94     	; 0x144c <Buzz_Tick+0x7a>
		break;

		case buzz_high:
			++buzzer_counter;
    13ee:	80 91 ff 08 	lds	r24, 0x08FF	; 0x8008ff <buzzer_counter>
    13f2:	8f 5f       	subi	r24, 0xFF	; 255
    13f4:	80 93 ff 08 	sts	0x08FF, r24	; 0x8008ff <buzzer_counter>
			PORTB = PORTB|0x10;  //set PIN B4 to 1
    13f8:	2c 9a       	sbi	0x05, 4	; 5
		break;
    13fa:	06 c0       	rjmp	.+12     	; 0x1408 <Buzz_Tick+0x36>

		case buzz_low:
			++buzzer_counter;    //set PIN B4 to 0
    13fc:	80 91 ff 08 	lds	r24, 0x08FF	; 0x8008ff <buzzer_counter>
    1400:	8f 5f       	subi	r24, 0xFF	; 255
    1402:	80 93 ff 08 	sts	0x08FF, r24	; 0x8008ff <buzzer_counter>
			PORTB = PORTB & 0xEF; 
    1406:	2c 98       	cbi	0x05, 4	; 5

		default:
		break;
	}
	//Transitions
	switch(buzzer_state){
    1408:	80 91 77 09 	lds	r24, 0x0977	; 0x800977 <buzzer_state>
    140c:	81 30       	cpi	r24, 0x01	; 1
    140e:	f1 f0       	breq	.+60     	; 0x144c <Buzz_Tick+0x7a>
    1410:	28 f0       	brcs	.+10     	; 0x141c <Buzz_Tick+0x4a>
    1412:	82 30       	cpi	r24, 0x02	; 2
    1414:	71 f1       	breq	.+92     	; 0x1472 <Buzz_Tick+0xa0>
    1416:	83 30       	cpi	r24, 0x03	; 3
    1418:	c1 f1       	breq	.+112    	; 0x148a <Buzz_Tick+0xb8>
    141a:	4a c0       	rjmp	.+148    	; 0x14b0 <Buzz_Tick+0xde>
		case buzz_wait:
		if(ARM_DISARM == 0){
    141c:	80 91 13 09 	lds	r24, 0x0913	; 0x800913 <ARM_DISARM>
    1420:	88 23       	and	r24, r24
    1422:	09 f4       	brne	.+2      	; 0x1426 <Buzz_Tick+0x54>
    1424:	47 c0       	rjmp	.+142    	; 0x14b4 <Buzz_Tick+0xe2>
			buzzer_state = buzz_wait;
		}
		else if(sensor_trip == 1 && ARM_DISARM == 1){
    1426:	90 91 08 09 	lds	r25, 0x0908	; 0x800908 <sensor_trip>
    142a:	91 30       	cpi	r25, 0x01	; 1
    142c:	41 f4       	brne	.+16     	; 0x143e <Buzz_Tick+0x6c>
    142e:	81 30       	cpi	r24, 0x01	; 1
    1430:	09 f0       	breq	.+2      	; 0x1434 <Buzz_Tick+0x62>
    1432:	40 c0       	rjmp	.+128    	; 0x14b4 <Buzz_Tick+0xe2>
			buzzer_state = no_buzz;
    1434:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <buzzer_state>
			buzzer_counter = 0; //initialize counter
    1438:	10 92 ff 08 	sts	0x08FF, r1	; 0x8008ff <buzzer_counter>
    143c:	08 95       	ret
		}
		else if(sensor_trip == 0 && ARM_DISARM == 1){
    143e:	91 11       	cpse	r25, r1
    1440:	39 c0       	rjmp	.+114    	; 0x14b4 <Buzz_Tick+0xe2>
    1442:	81 30       	cpi	r24, 0x01	; 1
    1444:	b9 f5       	brne	.+110    	; 0x14b4 <Buzz_Tick+0xe2>
			buzzer_state = buzz_wait;
			buzzer_counter = 0; //initialize counter
    1446:	10 92 ff 08 	sts	0x08FF, r1	; 0x8008ff <buzzer_counter>
    144a:	08 95       	ret
		}
		break;

		case no_buzz:            //if disarmed no buzz go back
		if(ARM_DISARM == 0){
    144c:	80 91 13 09 	lds	r24, 0x0913	; 0x800913 <ARM_DISARM>
    1450:	81 11       	cpse	r24, r1
    1452:	03 c0       	rjmp	.+6      	; 0x145a <Buzz_Tick+0x88>
			buzzer_state = buzz_wait;
    1454:	10 92 77 09 	sts	0x0977, r1	; 0x800977 <buzzer_state>
    1458:	08 95       	ret
		}						//if counter less than off period stay
		else if(buzzer_counter < buzz_off_period){
    145a:	90 91 ff 08 	lds	r25, 0x08FF	; 0x8008ff <buzzer_counter>
    145e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <buzz_off_period>
    1462:	98 17       	cp	r25, r24
    1464:	38 f1       	brcs	.+78     	; 0x14b4 <Buzz_Tick+0xe2>
			buzzer_state = no_buzz;
		}
		else{					//else go to buzzer high
			buzzer_state = buzz_high;
    1466:	82 e0       	ldi	r24, 0x02	; 2
    1468:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <buzzer_state>
			buzzer_counter = 0; //initialize counter
    146c:	10 92 ff 08 	sts	0x08FF, r1	; 0x8008ff <buzzer_counter>
    1470:	08 95       	ret
		}
		break;

		case buzz_high:
		if(buzzer_counter < buzzer_hign_period){
    1472:	90 91 ff 08 	lds	r25, 0x08FF	; 0x8008ff <buzzer_counter>
    1476:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <buzzer_hign_period>
    147a:	98 17       	cp	r25, r24
    147c:	d8 f0       	brcs	.+54     	; 0x14b4 <Buzz_Tick+0xe2>
			buzzer_state = buzz_high;
		}
		else{					//else go to buzzer high
			buzzer_state = buzz_low;
    147e:	83 e0       	ldi	r24, 0x03	; 3
    1480:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <buzzer_state>
			buzzer_counter = 0; //initialize counter
    1484:	10 92 ff 08 	sts	0x08FF, r1	; 0x8008ff <buzzer_counter>
    1488:	08 95       	ret
		}
		break;

		case buzz_low:
		if(ARM_DISARM == 0){    //if system is disarmed turn off alarm
    148a:	80 91 13 09 	lds	r24, 0x0913	; 0x800913 <ARM_DISARM>
    148e:	81 11       	cpse	r24, r1
    1490:	03 c0       	rjmp	.+6      	; 0x1498 <Buzz_Tick+0xc6>
			buzzer_state = buzz_wait;
    1492:	10 92 77 09 	sts	0x0977, r1	; 0x800977 <buzzer_state>
    1496:	08 95       	ret
		}
		else if(buzzer_counter < buzzer_low_period){
    1498:	90 91 ff 08 	lds	r25, 0x08FF	; 0x8008ff <buzzer_counter>
    149c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <buzzer_low_period>
    14a0:	98 17       	cp	r25, r24
    14a2:	40 f0       	brcs	.+16     	; 0x14b4 <Buzz_Tick+0xe2>
			buzzer_state = buzz_low;
		}
		else{					//else go to buzzer high
			buzzer_state = buzz_high;
    14a4:	82 e0       	ldi	r24, 0x02	; 2
    14a6:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <buzzer_state>
			buzzer_counter = 0; //initialize counter
    14aa:	10 92 ff 08 	sts	0x08FF, r1	; 0x8008ff <buzzer_counter>
    14ae:	08 95       	ret
		}
		break;

		default:
		buzzer_state = buzz_wait;
    14b0:	10 92 77 09 	sts	0x0977, r1	; 0x800977 <buzzer_state>
    14b4:	08 95       	ret

000014b6 <BuzzSecTask>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//buzz when sensor tripped
enum BUZZERState {buzz_wait, no_buzz, buzz_high, buzz_low} buzzer_state;

void buzz_Init(){
	buzzer_state = buzz_wait;
    14b6:	10 92 77 09 	sts	0x0977, r1	; 0x800977 <buzzer_state>
{
	buzz_Init();
	for(;;)
	{
		Buzz_Tick();
		vTaskDelay(1);
    14ba:	8b df       	rcall	.-234    	; 0x13d2 <Buzz_Tick>
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	63 d4       	rcall	.+2246   	; 0x1d88 <vTaskDelay>
    14c2:	fb cf       	rjmp	.-10     	; 0x14ba <BuzzSecTask+0x4>

000014c4 <BuzzSecPulse>:
	}
}

void BuzzSecPulse(unsigned portBASE_TYPE Priority)
{
    14c4:	af 92       	push	r10
    14c6:	bf 92       	push	r11
    14c8:	cf 92       	push	r12
    14ca:	df 92       	push	r13
    14cc:	ef 92       	push	r14
    14ce:	ff 92       	push	r15
    14d0:	0f 93       	push	r16
	xTaskCreate(BuzzSecTask, (signed portCHAR *)"BuzzSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
    14d2:	a1 2c       	mov	r10, r1
    14d4:	b1 2c       	mov	r11, r1
    14d6:	c1 2c       	mov	r12, r1
    14d8:	d1 2c       	mov	r13, r1
    14da:	e1 2c       	mov	r14, r1
    14dc:	f1 2c       	mov	r15, r1
    14de:	08 2f       	mov	r16, r24
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	45 e5       	ldi	r20, 0x55	; 85
    14e6:	50 e0       	ldi	r21, 0x00	; 0
    14e8:	6c e0       	ldi	r22, 0x0C	; 12
    14ea:	73 e0       	ldi	r23, 0x03	; 3
    14ec:	8b e5       	ldi	r24, 0x5B	; 91
    14ee:	9a e0       	ldi	r25, 0x0A	; 10
    14f0:	d3 d1       	rcall	.+934    	; 0x1898 <xTaskGenericCreate>
}
    14f2:	0f 91       	pop	r16
    14f4:	ff 90       	pop	r15
    14f6:	ef 90       	pop	r14
    14f8:	df 90       	pop	r13
    14fa:	cf 90       	pop	r12
    14fc:	bf 90       	pop	r11
    14fe:	af 90       	pop	r10
    1500:	08 95       	ret

00001502 <main>:



///////////////////////////////////////////////////////////////////////////////////////////////////////////////
int main(void) 
{ 
    1502:	cf 93       	push	r28
    1504:	df 93       	push	r29
   DDRA = 0xF0; PORTA = 0x0F; // PC7..4 outputs init 0s, PC3..0 inputs init 1s FOR KEYPAD
    1506:	80 ef       	ldi	r24, 0xF0	; 240
    1508:	81 b9       	out	0x01, r24	; 1
    150a:	8f e0       	ldi	r24, 0x0F	; 15
    150c:	82 b9       	out	0x02, r24	; 2
   DDRC = 0xFF; PORTC = 0x00; // set as output for lcd
    150e:	8f ef       	ldi	r24, 0xFF	; 255
    1510:	87 b9       	out	0x07, r24	; 7
    1512:	18 b8       	out	0x08, r1	; 8
   DDRD = 0xFF; PORTD = 0x00; // LCD control lines
    1514:	8a b9       	out	0x0a, r24	; 10
    1516:	1b b8       	out	0x0b, r1	; 11
   DDRB = 0xFF; PORTB = 0x00;
    1518:	84 b9       	out	0x04, r24	; 4
    151a:	15 b8       	out	0x05, r1	; 5
  //eeprom_write_byte(0,1);  //address 0
  //eeprom_write_byte(1,2);  //address 1
  //eeprom_write_byte(2,3);  //address 2
  //eeprom_write_byte(3,4);  //address 3

  current_pass[0] = eeprom_read_byte(0);
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	8f d5       	rcall	.+2846   	; 0x2040 <eeprom_read_byte>
    1522:	c0 e1       	ldi	r28, 0x10	; 16
    1524:	d2 e0       	ldi	r29, 0x02	; 2
    1526:	88 83       	st	Y, r24
  current_pass[1] = eeprom_read_byte(1);
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	89 d5       	rcall	.+2834   	; 0x2040 <eeprom_read_byte>
  current_pass[2] = eeprom_read_byte(2);
    152e:	89 83       	std	Y+1, r24	; 0x01
    1530:	82 e0       	ldi	r24, 0x02	; 2
    1532:	90 e0       	ldi	r25, 0x00	; 0
  current_pass[3] = eeprom_read_byte(3);
    1534:	85 d5       	rcall	.+2826   	; 0x2040 <eeprom_read_byte>
    1536:	8a 83       	std	Y+2, r24	; 0x02
    1538:	83 e0       	ldi	r24, 0x03	; 3
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	81 d5       	rcall	.+2818   	; 0x2040 <eeprom_read_byte>

  unsigned char temp = eeprom_read_byte(0);

   //LCD init
   LCD_init();
    153e:	8b 83       	std	Y+3, r24	; 0x03
    1540:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_init>
   //init USART
   initUSART(0); //used to communicate to CHIP 0
    1544:	80 e0       	ldi	r24, 0x00	; 0
   initUSART(1); //used to communicate via bluetooth  
    1546:	0e 94 32 01 	call	0x264	; 0x264 <initUSART>
  
  
   //Start Tasks  
   TransSecPulse(1);
   RecSecPulse(1);
    154a:	81 e0       	ldi	r24, 0x01	; 1
   MatrixSecPulse(1);
    154c:	0e 94 32 01 	call	0x264	; 0x264 <initUSART>
   MenuSecPulse(1);
   SenseSecPulse(1);
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	7b da       	rcall	.-2826   	; 0xa4a <TransSecPulse>
    1554:	81 e0       	ldi	r24, 0x01	; 1
   BuzzSecPulse(1);
    1556:	b9 da       	rcall	.-2702   	; 0xaca <RecSecPulse>
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	ce de       	rcall	.-612    	; 0x12f8 <MatrixSecPulse>
   BlueRecSecPulse(1);
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	f4 dd       	rcall	.-1048   	; 0x1148 <MenuSecPulse>
    1560:	81 e0       	ldi	r24, 0x01	; 1
    //RunSchedular 
   vTaskStartScheduler(); 
    1562:	92 de       	rcall	.-732    	; 0x1288 <SenseSecPulse>
    1564:	81 e0       	ldi	r24, 0x01	; 1
 
   return 0; 
    1566:	ae df       	rcall	.-164    	; 0x14c4 <BuzzSecPulse>
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	14 df       	rcall	.-472    	; 0x1394 <BlueRecSecPulse>
    156c:	96 d2       	rcall	.+1324   	; 0x1a9a <vTaskStartScheduler>
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	df 91       	pop	r29
    1574:	cf 91       	pop	r28
    1576:	08 95       	ret

00001578 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    1578:	31 e1       	ldi	r19, 0x11	; 17
    157a:	fc 01       	movw	r30, r24
    157c:	30 83       	st	Z, r19
    157e:	31 97       	sbiw	r30, 0x01	; 1
    1580:	22 e2       	ldi	r18, 0x22	; 34
    1582:	20 83       	st	Z, r18
    1584:	31 97       	sbiw	r30, 0x01	; 1
    1586:	a3 e3       	ldi	r26, 0x33	; 51
    1588:	a0 83       	st	Z, r26
    158a:	31 97       	sbiw	r30, 0x01	; 1
    158c:	60 83       	st	Z, r22
    158e:	31 97       	sbiw	r30, 0x01	; 1
    1590:	70 83       	st	Z, r23
    1592:	31 97       	sbiw	r30, 0x01	; 1
    1594:	10 82       	st	Z, r1
    1596:	31 97       	sbiw	r30, 0x01	; 1
    1598:	60 e8       	ldi	r22, 0x80	; 128
    159a:	60 83       	st	Z, r22
    159c:	31 97       	sbiw	r30, 0x01	; 1
    159e:	10 82       	st	Z, r1
    15a0:	31 97       	sbiw	r30, 0x01	; 1
    15a2:	62 e0       	ldi	r22, 0x02	; 2
    15a4:	60 83       	st	Z, r22
    15a6:	31 97       	sbiw	r30, 0x01	; 1
    15a8:	63 e0       	ldi	r22, 0x03	; 3
    15aa:	60 83       	st	Z, r22
    15ac:	31 97       	sbiw	r30, 0x01	; 1
    15ae:	64 e0       	ldi	r22, 0x04	; 4
    15b0:	60 83       	st	Z, r22
    15b2:	31 97       	sbiw	r30, 0x01	; 1
    15b4:	65 e0       	ldi	r22, 0x05	; 5
    15b6:	60 83       	st	Z, r22
    15b8:	31 97       	sbiw	r30, 0x01	; 1
    15ba:	66 e0       	ldi	r22, 0x06	; 6
    15bc:	60 83       	st	Z, r22
    15be:	31 97       	sbiw	r30, 0x01	; 1
    15c0:	67 e0       	ldi	r22, 0x07	; 7
    15c2:	60 83       	st	Z, r22
    15c4:	31 97       	sbiw	r30, 0x01	; 1
    15c6:	68 e0       	ldi	r22, 0x08	; 8
    15c8:	60 83       	st	Z, r22
    15ca:	31 97       	sbiw	r30, 0x01	; 1
    15cc:	69 e0       	ldi	r22, 0x09	; 9
    15ce:	60 83       	st	Z, r22
    15d0:	31 97       	sbiw	r30, 0x01	; 1
    15d2:	60 e1       	ldi	r22, 0x10	; 16
    15d4:	60 83       	st	Z, r22
    15d6:	31 97       	sbiw	r30, 0x01	; 1
    15d8:	30 83       	st	Z, r19
    15da:	31 97       	sbiw	r30, 0x01	; 1
    15dc:	32 e1       	ldi	r19, 0x12	; 18
    15de:	30 83       	st	Z, r19
    15e0:	31 97       	sbiw	r30, 0x01	; 1
    15e2:	33 e1       	ldi	r19, 0x13	; 19
    15e4:	30 83       	st	Z, r19
    15e6:	31 97       	sbiw	r30, 0x01	; 1
    15e8:	34 e1       	ldi	r19, 0x14	; 20
    15ea:	30 83       	st	Z, r19
    15ec:	31 97       	sbiw	r30, 0x01	; 1
    15ee:	35 e1       	ldi	r19, 0x15	; 21
    15f0:	30 83       	st	Z, r19
    15f2:	31 97       	sbiw	r30, 0x01	; 1
    15f4:	36 e1       	ldi	r19, 0x16	; 22
    15f6:	30 83       	st	Z, r19
    15f8:	31 97       	sbiw	r30, 0x01	; 1
    15fa:	37 e1       	ldi	r19, 0x17	; 23
    15fc:	30 83       	st	Z, r19
    15fe:	31 97       	sbiw	r30, 0x01	; 1
    1600:	38 e1       	ldi	r19, 0x18	; 24
    1602:	30 83       	st	Z, r19
    1604:	31 97       	sbiw	r30, 0x01	; 1
    1606:	39 e1       	ldi	r19, 0x19	; 25
    1608:	30 83       	st	Z, r19
    160a:	31 97       	sbiw	r30, 0x01	; 1
    160c:	30 e2       	ldi	r19, 0x20	; 32
    160e:	30 83       	st	Z, r19
    1610:	31 97       	sbiw	r30, 0x01	; 1
    1612:	31 e2       	ldi	r19, 0x21	; 33
    1614:	30 83       	st	Z, r19
    1616:	31 97       	sbiw	r30, 0x01	; 1
    1618:	20 83       	st	Z, r18
    161a:	31 97       	sbiw	r30, 0x01	; 1
    161c:	23 e2       	ldi	r18, 0x23	; 35
    161e:	20 83       	st	Z, r18
    1620:	31 97       	sbiw	r30, 0x01	; 1
    1622:	40 83       	st	Z, r20
    1624:	31 97       	sbiw	r30, 0x01	; 1
    1626:	50 83       	st	Z, r21
    1628:	31 97       	sbiw	r30, 0x01	; 1
    162a:	26 e2       	ldi	r18, 0x26	; 38
    162c:	20 83       	st	Z, r18
    162e:	31 97       	sbiw	r30, 0x01	; 1
    1630:	27 e2       	ldi	r18, 0x27	; 39
    1632:	20 83       	st	Z, r18
    1634:	31 97       	sbiw	r30, 0x01	; 1
    1636:	28 e2       	ldi	r18, 0x28	; 40
    1638:	20 83       	st	Z, r18
    163a:	31 97       	sbiw	r30, 0x01	; 1
    163c:	29 e2       	ldi	r18, 0x29	; 41
    163e:	20 83       	st	Z, r18
    1640:	31 97       	sbiw	r30, 0x01	; 1
    1642:	20 e3       	ldi	r18, 0x30	; 48
    1644:	20 83       	st	Z, r18
    1646:	31 97       	sbiw	r30, 0x01	; 1
    1648:	21 e3       	ldi	r18, 0x31	; 49
    164a:	20 83       	st	Z, r18
    164c:	86 97       	sbiw	r24, 0x26	; 38
    164e:	08 95       	ret

00001650 <xPortStartScheduler>:
    1650:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1654:	8c e7       	ldi	r24, 0x7C	; 124
    1656:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    165a:	8b e0       	ldi	r24, 0x0B	; 11
    165c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1660:	ef e6       	ldi	r30, 0x6F	; 111
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	82 60       	ori	r24, 0x02	; 2
    1668:	80 83       	st	Z, r24
    166a:	a0 91 6e 09 	lds	r26, 0x096E	; 0x80096e <pxCurrentTCB>
    166e:	b0 91 6f 09 	lds	r27, 0x096F	; 0x80096f <pxCurrentTCB+0x1>
    1672:	cd 91       	ld	r28, X+
    1674:	cd bf       	out	0x3d, r28	; 61
    1676:	dd 91       	ld	r29, X+
    1678:	de bf       	out	0x3e, r29	; 62
    167a:	ff 91       	pop	r31
    167c:	ef 91       	pop	r30
    167e:	df 91       	pop	r29
    1680:	cf 91       	pop	r28
    1682:	bf 91       	pop	r27
    1684:	af 91       	pop	r26
    1686:	9f 91       	pop	r25
    1688:	8f 91       	pop	r24
    168a:	7f 91       	pop	r23
    168c:	6f 91       	pop	r22
    168e:	5f 91       	pop	r21
    1690:	4f 91       	pop	r20
    1692:	3f 91       	pop	r19
    1694:	2f 91       	pop	r18
    1696:	1f 91       	pop	r17
    1698:	0f 91       	pop	r16
    169a:	ff 90       	pop	r15
    169c:	ef 90       	pop	r14
    169e:	df 90       	pop	r13
    16a0:	cf 90       	pop	r12
    16a2:	bf 90       	pop	r11
    16a4:	af 90       	pop	r10
    16a6:	9f 90       	pop	r9
    16a8:	8f 90       	pop	r8
    16aa:	7f 90       	pop	r7
    16ac:	6f 90       	pop	r6
    16ae:	5f 90       	pop	r5
    16b0:	4f 90       	pop	r4
    16b2:	3f 90       	pop	r3
    16b4:	2f 90       	pop	r2
    16b6:	1f 90       	pop	r1
    16b8:	0f 90       	pop	r0
    16ba:	0f be       	out	0x3f, r0	; 63
    16bc:	0f 90       	pop	r0
    16be:	08 95       	ret
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	08 95       	ret

000016c4 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    16c4:	0f 92       	push	r0
    16c6:	0f b6       	in	r0, 0x3f	; 63
    16c8:	f8 94       	cli
    16ca:	0f 92       	push	r0
    16cc:	1f 92       	push	r1
    16ce:	11 24       	eor	r1, r1
    16d0:	2f 92       	push	r2
    16d2:	3f 92       	push	r3
    16d4:	4f 92       	push	r4
    16d6:	5f 92       	push	r5
    16d8:	6f 92       	push	r6
    16da:	7f 92       	push	r7
    16dc:	8f 92       	push	r8
    16de:	9f 92       	push	r9
    16e0:	af 92       	push	r10
    16e2:	bf 92       	push	r11
    16e4:	cf 92       	push	r12
    16e6:	df 92       	push	r13
    16e8:	ef 92       	push	r14
    16ea:	ff 92       	push	r15
    16ec:	0f 93       	push	r16
    16ee:	1f 93       	push	r17
    16f0:	2f 93       	push	r18
    16f2:	3f 93       	push	r19
    16f4:	4f 93       	push	r20
    16f6:	5f 93       	push	r21
    16f8:	6f 93       	push	r22
    16fa:	7f 93       	push	r23
    16fc:	8f 93       	push	r24
    16fe:	9f 93       	push	r25
    1700:	af 93       	push	r26
    1702:	bf 93       	push	r27
    1704:	cf 93       	push	r28
    1706:	df 93       	push	r29
    1708:	ef 93       	push	r30
    170a:	ff 93       	push	r31
    170c:	a0 91 6e 09 	lds	r26, 0x096E	; 0x80096e <pxCurrentTCB>
    1710:	b0 91 6f 09 	lds	r27, 0x096F	; 0x80096f <pxCurrentTCB+0x1>
    1714:	0d b6       	in	r0, 0x3d	; 61
    1716:	0d 92       	st	X+, r0
    1718:	0e b6       	in	r0, 0x3e	; 62
	vTaskSwitchContext();
    171a:	0d 92       	st	X+, r0
	portRESTORE_CONTEXT();
    171c:	8a d3       	rcall	.+1812   	; 0x1e32 <vTaskSwitchContext>
    171e:	a0 91 6e 09 	lds	r26, 0x096E	; 0x80096e <pxCurrentTCB>
    1722:	b0 91 6f 09 	lds	r27, 0x096F	; 0x80096f <pxCurrentTCB+0x1>
    1726:	cd 91       	ld	r28, X+
    1728:	cd bf       	out	0x3d, r28	; 61
    172a:	dd 91       	ld	r29, X+
    172c:	de bf       	out	0x3e, r29	; 62
    172e:	ff 91       	pop	r31
    1730:	ef 91       	pop	r30
    1732:	df 91       	pop	r29
    1734:	cf 91       	pop	r28
    1736:	bf 91       	pop	r27
    1738:	af 91       	pop	r26
    173a:	9f 91       	pop	r25
    173c:	8f 91       	pop	r24
    173e:	7f 91       	pop	r23
    1740:	6f 91       	pop	r22
    1742:	5f 91       	pop	r21
    1744:	4f 91       	pop	r20
    1746:	3f 91       	pop	r19
    1748:	2f 91       	pop	r18
    174a:	1f 91       	pop	r17
    174c:	0f 91       	pop	r16
    174e:	ff 90       	pop	r15
    1750:	ef 90       	pop	r14
    1752:	df 90       	pop	r13
    1754:	cf 90       	pop	r12
    1756:	bf 90       	pop	r11
    1758:	af 90       	pop	r10
    175a:	9f 90       	pop	r9
    175c:	8f 90       	pop	r8
    175e:	7f 90       	pop	r7
    1760:	6f 90       	pop	r6
    1762:	5f 90       	pop	r5
    1764:	4f 90       	pop	r4
    1766:	3f 90       	pop	r3
    1768:	2f 90       	pop	r2
    176a:	1f 90       	pop	r1
    176c:	0f 90       	pop	r0
    176e:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
    1770:	0f 90       	pop	r0
    1772:	08 95       	ret

00001774 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    1774:	0f 92       	push	r0
    1776:	0f b6       	in	r0, 0x3f	; 63
    1778:	f8 94       	cli
    177a:	0f 92       	push	r0
    177c:	1f 92       	push	r1
    177e:	11 24       	eor	r1, r1
    1780:	2f 92       	push	r2
    1782:	3f 92       	push	r3
    1784:	4f 92       	push	r4
    1786:	5f 92       	push	r5
    1788:	6f 92       	push	r6
    178a:	7f 92       	push	r7
    178c:	8f 92       	push	r8
    178e:	9f 92       	push	r9
    1790:	af 92       	push	r10
    1792:	bf 92       	push	r11
    1794:	cf 92       	push	r12
    1796:	df 92       	push	r13
    1798:	ef 92       	push	r14
    179a:	ff 92       	push	r15
    179c:	0f 93       	push	r16
    179e:	1f 93       	push	r17
    17a0:	2f 93       	push	r18
    17a2:	3f 93       	push	r19
    17a4:	4f 93       	push	r20
    17a6:	5f 93       	push	r21
    17a8:	6f 93       	push	r22
    17aa:	7f 93       	push	r23
    17ac:	8f 93       	push	r24
    17ae:	9f 93       	push	r25
    17b0:	af 93       	push	r26
    17b2:	bf 93       	push	r27
    17b4:	cf 93       	push	r28
    17b6:	df 93       	push	r29
    17b8:	ef 93       	push	r30
    17ba:	ff 93       	push	r31
    17bc:	a0 91 6e 09 	lds	r26, 0x096E	; 0x80096e <pxCurrentTCB>
    17c0:	b0 91 6f 09 	lds	r27, 0x096F	; 0x80096f <pxCurrentTCB+0x1>
    17c4:	0d b6       	in	r0, 0x3d	; 61
    17c6:	0d 92       	st	X+, r0
    17c8:	0e b6       	in	r0, 0x3e	; 62
	vTaskIncrementTick();
	vTaskSwitchContext();
    17ca:	0d 92       	st	X+, r0
    17cc:	95 d1       	rcall	.+810    	; 0x1af8 <vTaskIncrementTick>
	portRESTORE_CONTEXT();
    17ce:	31 d3       	rcall	.+1634   	; 0x1e32 <vTaskSwitchContext>
    17d0:	a0 91 6e 09 	lds	r26, 0x096E	; 0x80096e <pxCurrentTCB>
    17d4:	b0 91 6f 09 	lds	r27, 0x096F	; 0x80096f <pxCurrentTCB+0x1>
    17d8:	cd 91       	ld	r28, X+
    17da:	cd bf       	out	0x3d, r28	; 61
    17dc:	dd 91       	ld	r29, X+
    17de:	de bf       	out	0x3e, r29	; 62
    17e0:	ff 91       	pop	r31
    17e2:	ef 91       	pop	r30
    17e4:	df 91       	pop	r29
    17e6:	cf 91       	pop	r28
    17e8:	bf 91       	pop	r27
    17ea:	af 91       	pop	r26
    17ec:	9f 91       	pop	r25
    17ee:	8f 91       	pop	r24
    17f0:	7f 91       	pop	r23
    17f2:	6f 91       	pop	r22
    17f4:	5f 91       	pop	r21
    17f6:	4f 91       	pop	r20
    17f8:	3f 91       	pop	r19
    17fa:	2f 91       	pop	r18
    17fc:	1f 91       	pop	r17
    17fe:	0f 91       	pop	r16
    1800:	ff 90       	pop	r15
    1802:	ef 90       	pop	r14
    1804:	df 90       	pop	r13
    1806:	cf 90       	pop	r12
    1808:	bf 90       	pop	r11
    180a:	af 90       	pop	r10
    180c:	9f 90       	pop	r9
    180e:	8f 90       	pop	r8
    1810:	7f 90       	pop	r7
    1812:	6f 90       	pop	r6
    1814:	5f 90       	pop	r5
    1816:	4f 90       	pop	r4
    1818:	3f 90       	pop	r3
    181a:	2f 90       	pop	r2
    181c:	1f 90       	pop	r1
    181e:	0f 90       	pop	r0
    1820:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
    1822:	0f 90       	pop	r0
    1824:	08 95       	ret

00001826 <__vector_13>:
}
    1826:	a6 df       	rcall	.-180    	; 0x1774 <vPortYieldFromTick>
    1828:	18 95       	reti

0000182a <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
    182a:	cf 93       	push	r28
    182c:	df 93       	push	r29
    182e:	ec 01       	movw	r28, r24
    1830:	e0 91 6e 09 	lds	r30, 0x096E	; 0x80096e <pxCurrentTCB>
    1834:	f0 91 6f 09 	lds	r31, 0x096F	; 0x80096f <pxCurrentTCB+0x1>
    1838:	93 83       	std	Z+3, r25	; 0x03
    183a:	82 83       	std	Z+2, r24	; 0x02
    183c:	80 91 1e 09 	lds	r24, 0x091E	; 0x80091e <xTickCount>
    1840:	90 91 1f 09 	lds	r25, 0x091F	; 0x80091f <xTickCount+0x1>
    1844:	c8 17       	cp	r28, r24
    1846:	d9 07       	cpc	r29, r25
    1848:	68 f4       	brcc	.+26     	; 0x1864 <prvAddCurrentTaskToDelayedList+0x3a>
    184a:	60 91 6e 09 	lds	r22, 0x096E	; 0x80096e <pxCurrentTCB>
    184e:	70 91 6f 09 	lds	r23, 0x096F	; 0x80096f <pxCurrentTCB+0x1>
    1852:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <pxOverflowDelayedTaskList>
    1856:	90 91 35 09 	lds	r25, 0x0935	; 0x800935 <pxOverflowDelayedTaskList+0x1>
    185a:	6e 5f       	subi	r22, 0xFE	; 254
    185c:	7f 4f       	sbci	r23, 0xFF	; 255
    185e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <vListInsert>
    1862:	17 c0       	rjmp	.+46     	; 0x1892 <prvAddCurrentTaskToDelayedList+0x68>
    1864:	60 91 6e 09 	lds	r22, 0x096E	; 0x80096e <pxCurrentTCB>
    1868:	70 91 6f 09 	lds	r23, 0x096F	; 0x80096f <pxCurrentTCB+0x1>
    186c:	80 91 36 09 	lds	r24, 0x0936	; 0x800936 <pxDelayedTaskList>
    1870:	90 91 37 09 	lds	r25, 0x0937	; 0x800937 <pxDelayedTaskList+0x1>
    1874:	6e 5f       	subi	r22, 0xFE	; 254
    1876:	7f 4f       	sbci	r23, 0xFF	; 255
    1878:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <vListInsert>
    187c:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <xNextTaskUnblockTime>
    1880:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <xNextTaskUnblockTime+0x1>
    1884:	c8 17       	cp	r28, r24
    1886:	d9 07       	cpc	r29, r25
    1888:	20 f4       	brcc	.+8      	; 0x1892 <prvAddCurrentTaskToDelayedList+0x68>
    188a:	d0 93 55 02 	sts	0x0255, r29	; 0x800255 <xNextTaskUnblockTime+0x1>
    188e:	c0 93 54 02 	sts	0x0254, r28	; 0x800254 <xNextTaskUnblockTime>
    1892:	df 91       	pop	r29
    1894:	cf 91       	pop	r28
    1896:	08 95       	ret

00001898 <xTaskGenericCreate>:
    1898:	4f 92       	push	r4
    189a:	5f 92       	push	r5
    189c:	6f 92       	push	r6
    189e:	7f 92       	push	r7
    18a0:	8f 92       	push	r8
    18a2:	9f 92       	push	r9
    18a4:	af 92       	push	r10
    18a6:	bf 92       	push	r11
    18a8:	cf 92       	push	r12
    18aa:	df 92       	push	r13
    18ac:	ef 92       	push	r14
    18ae:	ff 92       	push	r15
    18b0:	0f 93       	push	r16
    18b2:	1f 93       	push	r17
    18b4:	cf 93       	push	r28
    18b6:	df 93       	push	r29
    18b8:	5c 01       	movw	r10, r24
    18ba:	4b 01       	movw	r8, r22
    18bc:	3a 01       	movw	r6, r20
    18be:	29 01       	movw	r4, r18
    18c0:	81 e2       	ldi	r24, 0x21	; 33
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	0e 94 71 00 	call	0xe2	; 0xe2 <pvPortMalloc>
    18c8:	ec 01       	movw	r28, r24
    18ca:	89 2b       	or	r24, r25
    18cc:	09 f4       	brne	.+2      	; 0x18d0 <xTaskGenericCreate+0x38>
    18ce:	d3 c0       	rjmp	.+422    	; 0x1a76 <xTaskGenericCreate+0x1de>
    18d0:	c1 14       	cp	r12, r1
    18d2:	d1 04       	cpc	r13, r1
    18d4:	09 f0       	breq	.+2      	; 0x18d8 <xTaskGenericCreate+0x40>
    18d6:	cb c0       	rjmp	.+406    	; 0x1a6e <xTaskGenericCreate+0x1d6>
    18d8:	c3 01       	movw	r24, r6
    18da:	0e 94 71 00 	call	0xe2	; 0xe2 <pvPortMalloc>
    18de:	98 8f       	std	Y+24, r25	; 0x18
    18e0:	8f 8b       	std	Y+23, r24	; 0x17
    18e2:	00 97       	sbiw	r24, 0x00	; 0
    18e4:	21 f4       	brne	.+8      	; 0x18ee <xTaskGenericCreate+0x56>
    18e6:	ce 01       	movw	r24, r28
    18e8:	0e 94 97 00 	call	0x12e	; 0x12e <vPortFree>
    18ec:	c4 c0       	rjmp	.+392    	; 0x1a76 <xTaskGenericCreate+0x1de>
    18ee:	a3 01       	movw	r20, r6
    18f0:	65 ea       	ldi	r22, 0xA5	; 165
    18f2:	70 e0       	ldi	r23, 0x00	; 0
    18f4:	8f d3       	rcall	.+1822   	; 0x2014 <memset>
    18f6:	93 01       	movw	r18, r6
    18f8:	21 50       	subi	r18, 0x01	; 1
    18fa:	31 09       	sbc	r19, r1
    18fc:	8f 89       	ldd	r24, Y+23	; 0x17
    18fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1900:	3c 01       	movw	r6, r24
    1902:	62 0e       	add	r6, r18
    1904:	73 1e       	adc	r7, r19
    1906:	48 e0       	ldi	r20, 0x08	; 8
    1908:	50 e0       	ldi	r21, 0x00	; 0
    190a:	b4 01       	movw	r22, r8
    190c:	ce 01       	movw	r24, r28
    190e:	49 96       	adiw	r24, 0x19	; 25
    1910:	88 d3       	rcall	.+1808   	; 0x2022 <strncpy>
    1912:	18 a2       	std	Y+32, r1	; 0x20
    1914:	10 2f       	mov	r17, r16
    1916:	04 30       	cpi	r16, 0x04	; 4
    1918:	08 f0       	brcs	.+2      	; 0x191c <xTaskGenericCreate+0x84>
    191a:	13 e0       	ldi	r17, 0x03	; 3
    191c:	1e 8b       	std	Y+22, r17	; 0x16
    191e:	6e 01       	movw	r12, r28
    1920:	82 e0       	ldi	r24, 0x02	; 2
    1922:	c8 0e       	add	r12, r24
    1924:	d1 1c       	adc	r13, r1
    1926:	c6 01       	movw	r24, r12
    1928:	0e 94 a6 00 	call	0x14c	; 0x14c <vListInitialiseItem>
    192c:	ce 01       	movw	r24, r28
    192e:	0c 96       	adiw	r24, 0x0c	; 12
    1930:	0e 94 a6 00 	call	0x14c	; 0x14c <vListInitialiseItem>
    1934:	d9 87       	std	Y+9, r29	; 0x09
    1936:	c8 87       	std	Y+8, r28	; 0x08
    1938:	84 e0       	ldi	r24, 0x04	; 4
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	81 1b       	sub	r24, r17
    193e:	91 09       	sbc	r25, r1
    1940:	9d 87       	std	Y+13, r25	; 0x0d
    1942:	8c 87       	std	Y+12, r24	; 0x0c
    1944:	db 8b       	std	Y+19, r29	; 0x13
    1946:	ca 8b       	std	Y+18, r28	; 0x12
    1948:	a2 01       	movw	r20, r4
    194a:	b5 01       	movw	r22, r10
    194c:	c3 01       	movw	r24, r6
    194e:	14 de       	rcall	.-984    	; 0x1578 <pxPortInitialiseStack>
    1950:	99 83       	std	Y+1, r25	; 0x01
    1952:	88 83       	st	Y, r24
    1954:	e1 14       	cp	r14, r1
    1956:	f1 04       	cpc	r15, r1
    1958:	19 f0       	breq	.+6      	; 0x1960 <xTaskGenericCreate+0xc8>
    195a:	f7 01       	movw	r30, r14
    195c:	d1 83       	std	Z+1, r29	; 0x01
    195e:	c0 83       	st	Z, r28
    1960:	0f b6       	in	r0, 0x3f	; 63
    1962:	f8 94       	cli
    1964:	0f 92       	push	r0
    1966:	80 91 20 09 	lds	r24, 0x0920	; 0x800920 <uxCurrentNumberOfTasks>
    196a:	8f 5f       	subi	r24, 0xFF	; 255
    196c:	80 93 20 09 	sts	0x0920, r24	; 0x800920 <uxCurrentNumberOfTasks>
    1970:	80 91 6e 09 	lds	r24, 0x096E	; 0x80096e <pxCurrentTCB>
    1974:	90 91 6f 09 	lds	r25, 0x096F	; 0x80096f <pxCurrentTCB+0x1>
    1978:	89 2b       	or	r24, r25
    197a:	a9 f5       	brne	.+106    	; 0x19e6 <xTaskGenericCreate+0x14e>
    197c:	d0 93 6f 09 	sts	0x096F, r29	; 0x80096f <pxCurrentTCB+0x1>
    1980:	c0 93 6e 09 	sts	0x096E, r28	; 0x80096e <pxCurrentTCB>
    1984:	80 91 20 09 	lds	r24, 0x0920	; 0x800920 <uxCurrentNumberOfTasks>
    1988:	81 30       	cpi	r24, 0x01	; 1
    198a:	e1 f5       	brne	.+120    	; 0x1a04 <xTaskGenericCreate+0x16c>
    198c:	8a e4       	ldi	r24, 0x4A	; 74
    198e:	99 e0       	ldi	r25, 0x09	; 9
    1990:	0e 94 98 00 	call	0x130	; 0x130 <vListInitialise>
    1994:	83 e5       	ldi	r24, 0x53	; 83
    1996:	99 e0       	ldi	r25, 0x09	; 9
    1998:	0e 94 98 00 	call	0x130	; 0x130 <vListInitialise>
    199c:	8c e5       	ldi	r24, 0x5C	; 92
    199e:	99 e0       	ldi	r25, 0x09	; 9
    19a0:	0e 94 98 00 	call	0x130	; 0x130 <vListInitialise>
    19a4:	85 e6       	ldi	r24, 0x65	; 101
    19a6:	99 e0       	ldi	r25, 0x09	; 9
    19a8:	0e 94 98 00 	call	0x130	; 0x130 <vListInitialise>
    19ac:	81 e4       	ldi	r24, 0x41	; 65
    19ae:	99 e0       	ldi	r25, 0x09	; 9
    19b0:	0e 94 98 00 	call	0x130	; 0x130 <vListInitialise>
    19b4:	88 e3       	ldi	r24, 0x38	; 56
    19b6:	99 e0       	ldi	r25, 0x09	; 9
    19b8:	0e 94 98 00 	call	0x130	; 0x130 <vListInitialise>
    19bc:	8b e2       	ldi	r24, 0x2B	; 43
    19be:	99 e0       	ldi	r25, 0x09	; 9
    19c0:	0e 94 98 00 	call	0x130	; 0x130 <vListInitialise>
    19c4:	82 e2       	ldi	r24, 0x22	; 34
    19c6:	99 e0       	ldi	r25, 0x09	; 9
    19c8:	0e 94 98 00 	call	0x130	; 0x130 <vListInitialise>
    19cc:	81 e4       	ldi	r24, 0x41	; 65
    19ce:	99 e0       	ldi	r25, 0x09	; 9
    19d0:	90 93 37 09 	sts	0x0937, r25	; 0x800937 <pxDelayedTaskList+0x1>
    19d4:	80 93 36 09 	sts	0x0936, r24	; 0x800936 <pxDelayedTaskList>
    19d8:	88 e3       	ldi	r24, 0x38	; 56
    19da:	99 e0       	ldi	r25, 0x09	; 9
    19dc:	90 93 35 09 	sts	0x0935, r25	; 0x800935 <pxOverflowDelayedTaskList+0x1>
    19e0:	80 93 34 09 	sts	0x0934, r24	; 0x800934 <pxOverflowDelayedTaskList>
    19e4:	0f c0       	rjmp	.+30     	; 0x1a04 <xTaskGenericCreate+0x16c>
    19e6:	80 91 1b 09 	lds	r24, 0x091B	; 0x80091b <xSchedulerRunning>
    19ea:	81 11       	cpse	r24, r1
    19ec:	0b c0       	rjmp	.+22     	; 0x1a04 <xTaskGenericCreate+0x16c>
    19ee:	e0 91 6e 09 	lds	r30, 0x096E	; 0x80096e <pxCurrentTCB>
    19f2:	f0 91 6f 09 	lds	r31, 0x096F	; 0x80096f <pxCurrentTCB+0x1>
    19f6:	86 89       	ldd	r24, Z+22	; 0x16
    19f8:	08 17       	cp	r16, r24
    19fa:	20 f0       	brcs	.+8      	; 0x1a04 <xTaskGenericCreate+0x16c>
    19fc:	d0 93 6f 09 	sts	0x096F, r29	; 0x80096f <pxCurrentTCB+0x1>
    1a00:	c0 93 6e 09 	sts	0x096E, r28	; 0x80096e <pxCurrentTCB>
    1a04:	8e 89       	ldd	r24, Y+22	; 0x16
    1a06:	90 91 1d 09 	lds	r25, 0x091D	; 0x80091d <uxTopUsedPriority>
    1a0a:	98 17       	cp	r25, r24
    1a0c:	10 f4       	brcc	.+4      	; 0x1a12 <xTaskGenericCreate+0x17a>
    1a0e:	80 93 1d 09 	sts	0x091D, r24	; 0x80091d <uxTopUsedPriority>
    1a12:	90 91 16 09 	lds	r25, 0x0916	; 0x800916 <uxTaskNumber>
    1a16:	9f 5f       	subi	r25, 0xFF	; 255
    1a18:	90 93 16 09 	sts	0x0916, r25	; 0x800916 <uxTaskNumber>
    1a1c:	90 91 1c 09 	lds	r25, 0x091C	; 0x80091c <uxTopReadyPriority>
    1a20:	98 17       	cp	r25, r24
    1a22:	10 f4       	brcc	.+4      	; 0x1a28 <xTaskGenericCreate+0x190>
    1a24:	80 93 1c 09 	sts	0x091C, r24	; 0x80091c <uxTopReadyPriority>
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	9c 01       	movw	r18, r24
    1a2c:	22 0f       	add	r18, r18
    1a2e:	33 1f       	adc	r19, r19
    1a30:	22 0f       	add	r18, r18
    1a32:	33 1f       	adc	r19, r19
    1a34:	22 0f       	add	r18, r18
    1a36:	33 1f       	adc	r19, r19
    1a38:	82 0f       	add	r24, r18
    1a3a:	93 1f       	adc	r25, r19
    1a3c:	b6 01       	movw	r22, r12
    1a3e:	86 5b       	subi	r24, 0xB6	; 182
    1a40:	96 4f       	sbci	r25, 0xF6	; 246
    1a42:	0e 94 aa 00 	call	0x154	; 0x154 <vListInsertEnd>
    1a46:	0f 90       	pop	r0
    1a48:	0f be       	out	0x3f, r0	; 63
    1a4a:	80 91 1b 09 	lds	r24, 0x091B	; 0x80091b <xSchedulerRunning>
    1a4e:	88 23       	and	r24, r24
    1a50:	51 f0       	breq	.+20     	; 0x1a66 <xTaskGenericCreate+0x1ce>
    1a52:	e0 91 6e 09 	lds	r30, 0x096E	; 0x80096e <pxCurrentTCB>
    1a56:	f0 91 6f 09 	lds	r31, 0x096F	; 0x80096f <pxCurrentTCB+0x1>
    1a5a:	86 89       	ldd	r24, Z+22	; 0x16
    1a5c:	80 17       	cp	r24, r16
    1a5e:	28 f4       	brcc	.+10     	; 0x1a6a <xTaskGenericCreate+0x1d2>
    1a60:	31 de       	rcall	.-926    	; 0x16c4 <vPortYield>
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	09 c0       	rjmp	.+18     	; 0x1a78 <xTaskGenericCreate+0x1e0>
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	07 c0       	rjmp	.+14     	; 0x1a78 <xTaskGenericCreate+0x1e0>
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	05 c0       	rjmp	.+10     	; 0x1a78 <xTaskGenericCreate+0x1e0>
    1a6e:	d8 8e       	std	Y+24, r13	; 0x18
    1a70:	cf 8a       	std	Y+23, r12	; 0x17
    1a72:	c6 01       	movw	r24, r12
    1a74:	3c cf       	rjmp	.-392    	; 0x18ee <xTaskGenericCreate+0x56>
    1a76:	8f ef       	ldi	r24, 0xFF	; 255
    1a78:	df 91       	pop	r29
    1a7a:	cf 91       	pop	r28
    1a7c:	1f 91       	pop	r17
    1a7e:	0f 91       	pop	r16
    1a80:	ff 90       	pop	r15
    1a82:	ef 90       	pop	r14
    1a84:	df 90       	pop	r13
    1a86:	cf 90       	pop	r12
    1a88:	bf 90       	pop	r11
    1a8a:	af 90       	pop	r10
    1a8c:	9f 90       	pop	r9
    1a8e:	8f 90       	pop	r8
    1a90:	7f 90       	pop	r7
    1a92:	6f 90       	pop	r6
    1a94:	5f 90       	pop	r5
    1a96:	4f 90       	pop	r4
    1a98:	08 95       	ret

00001a9a <vTaskStartScheduler>:
    1a9a:	af 92       	push	r10
    1a9c:	bf 92       	push	r11
    1a9e:	cf 92       	push	r12
    1aa0:	df 92       	push	r13
    1aa2:	ef 92       	push	r14
    1aa4:	ff 92       	push	r15
    1aa6:	0f 93       	push	r16
    1aa8:	a1 2c       	mov	r10, r1
    1aaa:	b1 2c       	mov	r11, r1
    1aac:	c1 2c       	mov	r12, r1
    1aae:	d1 2c       	mov	r13, r1
    1ab0:	e1 2c       	mov	r14, r1
    1ab2:	f1 2c       	mov	r15, r1
    1ab4:	00 e0       	ldi	r16, 0x00	; 0
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	45 e5       	ldi	r20, 0x55	; 85
    1abc:	50 e0       	ldi	r21, 0x00	; 0
    1abe:	68 e1       	ldi	r22, 0x18	; 24
    1ac0:	73 e0       	ldi	r23, 0x03	; 3
    1ac2:	80 ee       	ldi	r24, 0xE0	; 224
    1ac4:	9e e0       	ldi	r25, 0x0E	; 14
    1ac6:	e8 de       	rcall	.-560    	; 0x1898 <xTaskGenericCreate>
    1ac8:	81 30       	cpi	r24, 0x01	; 1
    1aca:	41 f4       	brne	.+16     	; 0x1adc <vTaskStartScheduler+0x42>
    1acc:	f8 94       	cli
    1ace:	80 93 1b 09 	sts	0x091B, r24	; 0x80091b <xSchedulerRunning>
    1ad2:	10 92 1f 09 	sts	0x091F, r1	; 0x80091f <xTickCount+0x1>
    1ad6:	10 92 1e 09 	sts	0x091E, r1	; 0x80091e <xTickCount>
    1ada:	ba dd       	rcall	.-1164   	; 0x1650 <xPortStartScheduler>
    1adc:	0f 91       	pop	r16
    1ade:	ff 90       	pop	r15
    1ae0:	ef 90       	pop	r14
    1ae2:	df 90       	pop	r13
    1ae4:	cf 90       	pop	r12
    1ae6:	bf 90       	pop	r11
    1ae8:	af 90       	pop	r10
    1aea:	08 95       	ret

00001aec <vTaskSuspendAll>:
    1aec:	80 91 1a 09 	lds	r24, 0x091A	; 0x80091a <uxSchedulerSuspended>
    1af0:	8f 5f       	subi	r24, 0xFF	; 255
    1af2:	80 93 1a 09 	sts	0x091A, r24	; 0x80091a <uxSchedulerSuspended>
    1af6:	08 95       	ret

00001af8 <vTaskIncrementTick>:
    1af8:	0f 93       	push	r16
    1afa:	1f 93       	push	r17
    1afc:	cf 93       	push	r28
    1afe:	df 93       	push	r29
    1b00:	80 91 1a 09 	lds	r24, 0x091A	; 0x80091a <uxSchedulerSuspended>
    1b04:	81 11       	cpse	r24, r1
    1b06:	b2 c0       	rjmp	.+356    	; 0x1c6c <vTaskIncrementTick+0x174>
    1b08:	80 91 1e 09 	lds	r24, 0x091E	; 0x80091e <xTickCount>
    1b0c:	90 91 1f 09 	lds	r25, 0x091F	; 0x80091f <xTickCount+0x1>
    1b10:	01 96       	adiw	r24, 0x01	; 1
    1b12:	90 93 1f 09 	sts	0x091F, r25	; 0x80091f <xTickCount+0x1>
    1b16:	80 93 1e 09 	sts	0x091E, r24	; 0x80091e <xTickCount>
    1b1a:	80 91 1e 09 	lds	r24, 0x091E	; 0x80091e <xTickCount>
    1b1e:	90 91 1f 09 	lds	r25, 0x091F	; 0x80091f <xTickCount+0x1>
    1b22:	89 2b       	or	r24, r25
    1b24:	99 f5       	brne	.+102    	; 0x1b8c <vTaskIncrementTick+0x94>
    1b26:	80 91 36 09 	lds	r24, 0x0936	; 0x800936 <pxDelayedTaskList>
    1b2a:	90 91 37 09 	lds	r25, 0x0937	; 0x800937 <pxDelayedTaskList+0x1>
    1b2e:	20 91 34 09 	lds	r18, 0x0934	; 0x800934 <pxOverflowDelayedTaskList>
    1b32:	30 91 35 09 	lds	r19, 0x0935	; 0x800935 <pxOverflowDelayedTaskList+0x1>
    1b36:	30 93 37 09 	sts	0x0937, r19	; 0x800937 <pxDelayedTaskList+0x1>
    1b3a:	20 93 36 09 	sts	0x0936, r18	; 0x800936 <pxDelayedTaskList>
    1b3e:	90 93 35 09 	sts	0x0935, r25	; 0x800935 <pxOverflowDelayedTaskList+0x1>
    1b42:	80 93 34 09 	sts	0x0934, r24	; 0x800934 <pxOverflowDelayedTaskList>
    1b46:	80 91 17 09 	lds	r24, 0x0917	; 0x800917 <xNumOfOverflows>
    1b4a:	8f 5f       	subi	r24, 0xFF	; 255
    1b4c:	80 93 17 09 	sts	0x0917, r24	; 0x800917 <xNumOfOverflows>
    1b50:	e0 91 36 09 	lds	r30, 0x0936	; 0x800936 <pxDelayedTaskList>
    1b54:	f0 91 37 09 	lds	r31, 0x0937	; 0x800937 <pxDelayedTaskList+0x1>
    1b58:	80 81       	ld	r24, Z
    1b5a:	81 11       	cpse	r24, r1
    1b5c:	07 c0       	rjmp	.+14     	; 0x1b6c <vTaskIncrementTick+0x74>
    1b5e:	8f ef       	ldi	r24, 0xFF	; 255
    1b60:	9f ef       	ldi	r25, 0xFF	; 255
    1b62:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <xNextTaskUnblockTime+0x1>
    1b66:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <xNextTaskUnblockTime>
    1b6a:	10 c0       	rjmp	.+32     	; 0x1b8c <vTaskIncrementTick+0x94>
    1b6c:	e0 91 36 09 	lds	r30, 0x0936	; 0x800936 <pxDelayedTaskList>
    1b70:	f0 91 37 09 	lds	r31, 0x0937	; 0x800937 <pxDelayedTaskList+0x1>
    1b74:	05 80       	ldd	r0, Z+5	; 0x05
    1b76:	f6 81       	ldd	r31, Z+6	; 0x06
    1b78:	e0 2d       	mov	r30, r0
    1b7a:	06 80       	ldd	r0, Z+6	; 0x06
    1b7c:	f7 81       	ldd	r31, Z+7	; 0x07
    1b7e:	e0 2d       	mov	r30, r0
    1b80:	82 81       	ldd	r24, Z+2	; 0x02
    1b82:	93 81       	ldd	r25, Z+3	; 0x03
    1b84:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <xNextTaskUnblockTime+0x1>
    1b88:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <xNextTaskUnblockTime>
    1b8c:	20 91 1e 09 	lds	r18, 0x091E	; 0x80091e <xTickCount>
    1b90:	30 91 1f 09 	lds	r19, 0x091F	; 0x80091f <xTickCount+0x1>
    1b94:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <xNextTaskUnblockTime>
    1b98:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <xNextTaskUnblockTime+0x1>
    1b9c:	28 17       	cp	r18, r24
    1b9e:	39 07       	cpc	r19, r25
    1ba0:	08 f4       	brcc	.+2      	; 0x1ba4 <vTaskIncrementTick+0xac>
    1ba2:	69 c0       	rjmp	.+210    	; 0x1c76 <vTaskIncrementTick+0x17e>
    1ba4:	e0 91 36 09 	lds	r30, 0x0936	; 0x800936 <pxDelayedTaskList>
    1ba8:	f0 91 37 09 	lds	r31, 0x0937	; 0x800937 <pxDelayedTaskList+0x1>
    1bac:	80 81       	ld	r24, Z
    1bae:	88 23       	and	r24, r24
    1bb0:	99 f0       	breq	.+38     	; 0x1bd8 <vTaskIncrementTick+0xe0>
    1bb2:	e0 91 36 09 	lds	r30, 0x0936	; 0x800936 <pxDelayedTaskList>
    1bb6:	f0 91 37 09 	lds	r31, 0x0937	; 0x800937 <pxDelayedTaskList+0x1>
    1bba:	05 80       	ldd	r0, Z+5	; 0x05
    1bbc:	f6 81       	ldd	r31, Z+6	; 0x06
    1bbe:	e0 2d       	mov	r30, r0
    1bc0:	c6 81       	ldd	r28, Z+6	; 0x06
    1bc2:	d7 81       	ldd	r29, Z+7	; 0x07
    1bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc6:	9b 81       	ldd	r25, Y+3	; 0x03
    1bc8:	20 91 1e 09 	lds	r18, 0x091E	; 0x80091e <xTickCount>
    1bcc:	30 91 1f 09 	lds	r19, 0x091F	; 0x80091f <xTickCount+0x1>
    1bd0:	28 17       	cp	r18, r24
    1bd2:	39 07       	cpc	r19, r25
    1bd4:	f8 f4       	brcc	.+62     	; 0x1c14 <vTaskIncrementTick+0x11c>
    1bd6:	19 c0       	rjmp	.+50     	; 0x1c0a <vTaskIncrementTick+0x112>
    1bd8:	8f ef       	ldi	r24, 0xFF	; 255
    1bda:	9f ef       	ldi	r25, 0xFF	; 255
    1bdc:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <xNextTaskUnblockTime+0x1>
    1be0:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <xNextTaskUnblockTime>
    1be4:	48 c0       	rjmp	.+144    	; 0x1c76 <vTaskIncrementTick+0x17e>
    1be6:	e0 91 36 09 	lds	r30, 0x0936	; 0x800936 <pxDelayedTaskList>
    1bea:	f0 91 37 09 	lds	r31, 0x0937	; 0x800937 <pxDelayedTaskList+0x1>
    1bee:	05 80       	ldd	r0, Z+5	; 0x05
    1bf0:	f6 81       	ldd	r31, Z+6	; 0x06
    1bf2:	e0 2d       	mov	r30, r0
    1bf4:	c6 81       	ldd	r28, Z+6	; 0x06
    1bf6:	d7 81       	ldd	r29, Z+7	; 0x07
    1bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfa:	9b 81       	ldd	r25, Y+3	; 0x03
    1bfc:	20 91 1e 09 	lds	r18, 0x091E	; 0x80091e <xTickCount>
    1c00:	30 91 1f 09 	lds	r19, 0x091F	; 0x80091f <xTickCount+0x1>
    1c04:	28 17       	cp	r18, r24
    1c06:	39 07       	cpc	r19, r25
    1c08:	28 f4       	brcc	.+10     	; 0x1c14 <vTaskIncrementTick+0x11c>
    1c0a:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <xNextTaskUnblockTime+0x1>
    1c0e:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <xNextTaskUnblockTime>
    1c12:	31 c0       	rjmp	.+98     	; 0x1c76 <vTaskIncrementTick+0x17e>
    1c14:	8e 01       	movw	r16, r28
    1c16:	0e 5f       	subi	r16, 0xFE	; 254
    1c18:	1f 4f       	sbci	r17, 0xFF	; 255
    1c1a:	c8 01       	movw	r24, r16
    1c1c:	0e 94 0c 01 	call	0x218	; 0x218 <vListRemove>
    1c20:	8c 89       	ldd	r24, Y+20	; 0x14
    1c22:	9d 89       	ldd	r25, Y+21	; 0x15
    1c24:	89 2b       	or	r24, r25
    1c26:	21 f0       	breq	.+8      	; 0x1c30 <vTaskIncrementTick+0x138>
    1c28:	ce 01       	movw	r24, r28
    1c2a:	0c 96       	adiw	r24, 0x0c	; 12
    1c2c:	0e 94 0c 01 	call	0x218	; 0x218 <vListRemove>
    1c30:	8e 89       	ldd	r24, Y+22	; 0x16
    1c32:	90 91 1c 09 	lds	r25, 0x091C	; 0x80091c <uxTopReadyPriority>
    1c36:	98 17       	cp	r25, r24
    1c38:	10 f4       	brcc	.+4      	; 0x1c3e <vTaskIncrementTick+0x146>
    1c3a:	80 93 1c 09 	sts	0x091C, r24	; 0x80091c <uxTopReadyPriority>
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	9c 01       	movw	r18, r24
    1c42:	22 0f       	add	r18, r18
    1c44:	33 1f       	adc	r19, r19
    1c46:	22 0f       	add	r18, r18
    1c48:	33 1f       	adc	r19, r19
    1c4a:	22 0f       	add	r18, r18
    1c4c:	33 1f       	adc	r19, r19
    1c4e:	82 0f       	add	r24, r18
    1c50:	93 1f       	adc	r25, r19
    1c52:	b8 01       	movw	r22, r16
    1c54:	86 5b       	subi	r24, 0xB6	; 182
    1c56:	96 4f       	sbci	r25, 0xF6	; 246
    1c58:	0e 94 aa 00 	call	0x154	; 0x154 <vListInsertEnd>
    1c5c:	e0 91 36 09 	lds	r30, 0x0936	; 0x800936 <pxDelayedTaskList>
    1c60:	f0 91 37 09 	lds	r31, 0x0937	; 0x800937 <pxDelayedTaskList+0x1>
    1c64:	80 81       	ld	r24, Z
    1c66:	81 11       	cpse	r24, r1
    1c68:	be cf       	rjmp	.-132    	; 0x1be6 <vTaskIncrementTick+0xee>
    1c6a:	b6 cf       	rjmp	.-148    	; 0x1bd8 <vTaskIncrementTick+0xe0>
    1c6c:	80 91 19 09 	lds	r24, 0x0919	; 0x800919 <uxMissedTicks>
    1c70:	8f 5f       	subi	r24, 0xFF	; 255
    1c72:	80 93 19 09 	sts	0x0919, r24	; 0x800919 <uxMissedTicks>
    1c76:	df 91       	pop	r29
    1c78:	cf 91       	pop	r28
    1c7a:	1f 91       	pop	r17
    1c7c:	0f 91       	pop	r16
    1c7e:	08 95       	ret

00001c80 <xTaskResumeAll>:
    1c80:	cf 92       	push	r12
    1c82:	df 92       	push	r13
    1c84:	ef 92       	push	r14
    1c86:	ff 92       	push	r15
    1c88:	0f 93       	push	r16
    1c8a:	1f 93       	push	r17
    1c8c:	cf 93       	push	r28
    1c8e:	df 93       	push	r29
    1c90:	0f b6       	in	r0, 0x3f	; 63
    1c92:	f8 94       	cli
    1c94:	0f 92       	push	r0
    1c96:	80 91 1a 09 	lds	r24, 0x091A	; 0x80091a <uxSchedulerSuspended>
    1c9a:	81 50       	subi	r24, 0x01	; 1
    1c9c:	80 93 1a 09 	sts	0x091A, r24	; 0x80091a <uxSchedulerSuspended>
    1ca0:	80 91 1a 09 	lds	r24, 0x091A	; 0x80091a <uxSchedulerSuspended>
    1ca4:	81 11       	cpse	r24, r1
    1ca6:	62 c0       	rjmp	.+196    	; 0x1d6c <xTaskResumeAll+0xec>
    1ca8:	80 91 20 09 	lds	r24, 0x0920	; 0x800920 <uxCurrentNumberOfTasks>
    1cac:	81 11       	cpse	r24, r1
    1cae:	32 c0       	rjmp	.+100    	; 0x1d14 <xTaskResumeAll+0x94>
    1cb0:	60 c0       	rjmp	.+192    	; 0x1d72 <xTaskResumeAll+0xf2>
    1cb2:	d7 01       	movw	r26, r14
    1cb4:	15 96       	adiw	r26, 0x05	; 5
    1cb6:	ed 91       	ld	r30, X+
    1cb8:	fc 91       	ld	r31, X
    1cba:	16 97       	sbiw	r26, 0x06	; 6
    1cbc:	c6 81       	ldd	r28, Z+6	; 0x06
    1cbe:	d7 81       	ldd	r29, Z+7	; 0x07
    1cc0:	ce 01       	movw	r24, r28
    1cc2:	0c 96       	adiw	r24, 0x0c	; 12
    1cc4:	0e 94 0c 01 	call	0x218	; 0x218 <vListRemove>
    1cc8:	8e 01       	movw	r16, r28
    1cca:	0e 5f       	subi	r16, 0xFE	; 254
    1ccc:	1f 4f       	sbci	r17, 0xFF	; 255
    1cce:	c8 01       	movw	r24, r16
    1cd0:	0e 94 0c 01 	call	0x218	; 0x218 <vListRemove>
    1cd4:	8e 89       	ldd	r24, Y+22	; 0x16
    1cd6:	90 91 1c 09 	lds	r25, 0x091C	; 0x80091c <uxTopReadyPriority>
    1cda:	98 17       	cp	r25, r24
    1cdc:	10 f4       	brcc	.+4      	; 0x1ce2 <xTaskResumeAll+0x62>
    1cde:	80 93 1c 09 	sts	0x091C, r24	; 0x80091c <uxTopReadyPriority>
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	9c 01       	movw	r18, r24
    1ce6:	22 0f       	add	r18, r18
    1ce8:	33 1f       	adc	r19, r19
    1cea:	22 0f       	add	r18, r18
    1cec:	33 1f       	adc	r19, r19
    1cee:	22 0f       	add	r18, r18
    1cf0:	33 1f       	adc	r19, r19
    1cf2:	82 0f       	add	r24, r18
    1cf4:	93 1f       	adc	r25, r19
    1cf6:	b8 01       	movw	r22, r16
    1cf8:	86 5b       	subi	r24, 0xB6	; 182
    1cfa:	96 4f       	sbci	r25, 0xF6	; 246
    1cfc:	0e 94 aa 00 	call	0x154	; 0x154 <vListInsertEnd>
    1d00:	e0 91 6e 09 	lds	r30, 0x096E	; 0x80096e <pxCurrentTCB>
    1d04:	f0 91 6f 09 	lds	r31, 0x096F	; 0x80096f <pxCurrentTCB+0x1>
    1d08:	9e 89       	ldd	r25, Y+22	; 0x16
    1d0a:	86 89       	ldd	r24, Z+22	; 0x16
    1d0c:	98 17       	cp	r25, r24
    1d0e:	58 f0       	brcs	.+22     	; 0x1d26 <xTaskResumeAll+0xa6>
    1d10:	dc 2c       	mov	r13, r12
    1d12:	09 c0       	rjmp	.+18     	; 0x1d26 <xTaskResumeAll+0xa6>
    1d14:	d1 2c       	mov	r13, r1
    1d16:	0f 2e       	mov	r0, r31
    1d18:	fb e2       	ldi	r31, 0x2B	; 43
    1d1a:	ef 2e       	mov	r14, r31
    1d1c:	f9 e0       	ldi	r31, 0x09	; 9
    1d1e:	ff 2e       	mov	r15, r31
    1d20:	f0 2d       	mov	r31, r0
    1d22:	cc 24       	eor	r12, r12
    1d24:	c3 94       	inc	r12
    1d26:	f7 01       	movw	r30, r14
    1d28:	80 81       	ld	r24, Z
    1d2a:	81 11       	cpse	r24, r1
    1d2c:	c2 cf       	rjmp	.-124    	; 0x1cb2 <xTaskResumeAll+0x32>
    1d2e:	80 91 19 09 	lds	r24, 0x0919	; 0x800919 <uxMissedTicks>
    1d32:	88 23       	and	r24, r24
    1d34:	79 f0       	breq	.+30     	; 0x1d54 <xTaskResumeAll+0xd4>
    1d36:	80 91 19 09 	lds	r24, 0x0919	; 0x800919 <uxMissedTicks>
    1d3a:	88 23       	and	r24, r24
    1d3c:	91 f0       	breq	.+36     	; 0x1d62 <xTaskResumeAll+0xe2>
    1d3e:	dc de       	rcall	.-584    	; 0x1af8 <vTaskIncrementTick>
    1d40:	80 91 19 09 	lds	r24, 0x0919	; 0x800919 <uxMissedTicks>
    1d44:	81 50       	subi	r24, 0x01	; 1
    1d46:	80 93 19 09 	sts	0x0919, r24	; 0x800919 <uxMissedTicks>
    1d4a:	80 91 19 09 	lds	r24, 0x0919	; 0x800919 <uxMissedTicks>
    1d4e:	81 11       	cpse	r24, r1
    1d50:	f6 cf       	rjmp	.-20     	; 0x1d3e <xTaskResumeAll+0xbe>
    1d52:	07 c0       	rjmp	.+14     	; 0x1d62 <xTaskResumeAll+0xe2>
    1d54:	f1 e0       	ldi	r31, 0x01	; 1
    1d56:	df 16       	cp	r13, r31
    1d58:	21 f0       	breq	.+8      	; 0x1d62 <xTaskResumeAll+0xe2>
    1d5a:	80 91 18 09 	lds	r24, 0x0918	; 0x800918 <xMissedYield>
    1d5e:	81 30       	cpi	r24, 0x01	; 1
    1d60:	39 f4       	brne	.+14     	; 0x1d70 <xTaskResumeAll+0xf0>
    1d62:	10 92 18 09 	sts	0x0918, r1	; 0x800918 <xMissedYield>
    1d66:	ae dc       	rcall	.-1700   	; 0x16c4 <vPortYield>
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	03 c0       	rjmp	.+6      	; 0x1d72 <xTaskResumeAll+0xf2>
    1d6c:	80 e0       	ldi	r24, 0x00	; 0
    1d6e:	01 c0       	rjmp	.+2      	; 0x1d72 <xTaskResumeAll+0xf2>
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	0f 90       	pop	r0
    1d74:	0f be       	out	0x3f, r0	; 63
    1d76:	df 91       	pop	r29
    1d78:	cf 91       	pop	r28
    1d7a:	1f 91       	pop	r17
    1d7c:	0f 91       	pop	r16
    1d7e:	ff 90       	pop	r15
    1d80:	ef 90       	pop	r14
    1d82:	df 90       	pop	r13
    1d84:	cf 90       	pop	r12
    1d86:	08 95       	ret

00001d88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    1d88:	cf 93       	push	r28
    1d8a:	df 93       	push	r29
    1d8c:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    1d8e:	89 2b       	or	r24, r25
		{
			vTaskSuspendAll();
    1d90:	99 f0       	breq	.+38     	; 0x1db8 <vTaskDelay+0x30>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    1d92:	ac de       	rcall	.-680    	; 0x1aec <vTaskSuspendAll>
    1d94:	80 91 1e 09 	lds	r24, 0x091E	; 0x80091e <xTickCount>
    1d98:	90 91 1f 09 	lds	r25, 0x091F	; 0x80091f <xTickCount+0x1>
    1d9c:	c8 0f       	add	r28, r24

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    1d9e:	d9 1f       	adc	r29, r25
    1da0:	80 91 6e 09 	lds	r24, 0x096E	; 0x80096e <pxCurrentTCB>
    1da4:	90 91 6f 09 	lds	r25, 0x096F	; 0x80096f <pxCurrentTCB+0x1>
    1da8:	02 96       	adiw	r24, 0x02	; 2
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    1daa:	0e 94 0c 01 	call	0x218	; 0x218 <vListRemove>
			xAlreadyYielded = xTaskResumeAll();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1dae:	ce 01       	movw	r24, r28
    1db0:	3c dd       	rcall	.-1416   	; 0x182a <prvAddCurrentTaskToDelayedList>
		{
			portYIELD_WITHIN_API();
    1db2:	66 df       	rcall	.-308    	; 0x1c80 <xTaskResumeAll>
    1db4:	81 11       	cpse	r24, r1
		}
	}
    1db6:	01 c0       	rjmp	.+2      	; 0x1dba <vTaskDelay+0x32>
    1db8:	85 dc       	rcall	.-1782   	; 0x16c4 <vPortYield>
    1dba:	df 91       	pop	r29
    1dbc:	cf 91       	pop	r28
    1dbe:	08 95       	ret

00001dc0 <prvIdleTask>:
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1dc0:	0f 2e       	mov	r0, r31
    1dc2:	f2 e2       	ldi	r31, 0x22	; 34
    1dc4:	ef 2e       	mov	r14, r31
    1dc6:	f9 e0       	ldi	r31, 0x09	; 9
    1dc8:	ff 2e       	mov	r15, r31
    1dca:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    1dcc:	ca e4       	ldi	r28, 0x4A	; 74
    1dce:	d9 e0       	ldi	r29, 0x09	; 9
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    1dd0:	80 91 21 09 	lds	r24, 0x0921	; 0x800921 <uxTasksDeleted>
    1dd4:	88 23       	and	r24, r24
		{
			vTaskSuspendAll();
    1dd6:	41 f1       	breq	.+80     	; 0x1e28 <prvIdleTask+0x68>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1dd8:	89 de       	rcall	.-750    	; 0x1aec <vTaskSuspendAll>
			xTaskResumeAll();
    1dda:	d7 01       	movw	r26, r14
    1ddc:	1c 91       	ld	r17, X

			if( xListIsEmpty == pdFALSE )
    1dde:	50 df       	rcall	.-352    	; 0x1c80 <xTaskResumeAll>
    1de0:	11 23       	and	r17, r17
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    1de2:	11 f1       	breq	.+68     	; 0x1e28 <prvIdleTask+0x68>
    1de4:	0f b6       	in	r0, 0x3f	; 63
    1de6:	f8 94       	cli
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    1de8:	0f 92       	push	r0
    1dea:	d7 01       	movw	r26, r14
    1dec:	15 96       	adiw	r26, 0x05	; 5
    1dee:	ed 91       	ld	r30, X+
    1df0:	fc 91       	ld	r31, X
    1df2:	16 97       	sbiw	r26, 0x06	; 6
    1df4:	06 81       	ldd	r16, Z+6	; 0x06
					vListRemove( &( pxTCB->xGenericListItem ) );
    1df6:	17 81       	ldd	r17, Z+7	; 0x07
    1df8:	c8 01       	movw	r24, r16
    1dfa:	02 96       	adiw	r24, 0x02	; 2
    1dfc:	0e 94 0c 01 	call	0x218	; 0x218 <vListRemove>
					--uxCurrentNumberOfTasks;
    1e00:	80 91 20 09 	lds	r24, 0x0920	; 0x800920 <uxCurrentNumberOfTasks>
    1e04:	81 50       	subi	r24, 0x01	; 1
    1e06:	80 93 20 09 	sts	0x0920, r24	; 0x800920 <uxCurrentNumberOfTasks>
					--uxTasksDeleted;
    1e0a:	80 91 21 09 	lds	r24, 0x0921	; 0x800921 <uxTasksDeleted>
    1e0e:	81 50       	subi	r24, 0x01	; 1
    1e10:	80 93 21 09 	sts	0x0921, r24	; 0x800921 <uxTasksDeleted>
				}
				taskEXIT_CRITICAL();
    1e14:	0f 90       	pop	r0
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    1e16:	0f be       	out	0x3f, r0	; 63
    1e18:	f8 01       	movw	r30, r16
    1e1a:	87 89       	ldd	r24, Z+23	; 0x17
    1e1c:	90 8d       	ldd	r25, Z+24	; 0x18
    1e1e:	0e 94 97 00 	call	0x12e	; 0x12e <vPortFree>
		vPortFree( pxTCB );
    1e22:	c8 01       	movw	r24, r16
    1e24:	0e 94 97 00 	call	0x12e	; 0x12e <vPortFree>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    1e28:	88 81       	ld	r24, Y
			{
				taskYIELD();
    1e2a:	82 30       	cpi	r24, 0x02	; 2
    1e2c:	88 f2       	brcs	.-94     	; 0x1dd0 <prvIdleTask+0x10>
    1e2e:	4a dc       	rcall	.-1900   	; 0x16c4 <vPortYield>
    1e30:	cf cf       	rjmp	.-98     	; 0x1dd0 <prvIdleTask+0x10>

00001e32 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    1e32:	80 91 1a 09 	lds	r24, 0x091A	; 0x80091a <uxSchedulerSuspended>
    1e36:	81 11       	cpse	r24, r1
    1e38:	13 c0       	rjmp	.+38     	; 0x1e60 <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    1e3a:	80 91 1c 09 	lds	r24, 0x091C	; 0x80091c <uxTopReadyPriority>
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	fc 01       	movw	r30, r24
    1e42:	ee 0f       	add	r30, r30
    1e44:	ff 1f       	adc	r31, r31
    1e46:	ee 0f       	add	r30, r30
    1e48:	ff 1f       	adc	r31, r31
    1e4a:	ee 0f       	add	r30, r30
    1e4c:	ff 1f       	adc	r31, r31
    1e4e:	8e 0f       	add	r24, r30
    1e50:	9f 1f       	adc	r25, r31
    1e52:	fc 01       	movw	r30, r24
    1e54:	e6 5b       	subi	r30, 0xB6	; 182
    1e56:	f6 4f       	sbci	r31, 0xF6	; 246
    1e58:	80 81       	ld	r24, Z
    1e5a:	88 23       	and	r24, r24
    1e5c:	29 f0       	breq	.+10     	; 0x1e68 <vTaskSwitchContext+0x36>
    1e5e:	1b c0       	rjmp	.+54     	; 0x1e96 <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	80 93 18 09 	sts	0x0918, r24	; 0x800918 <xMissedYield>
    1e66:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    1e68:	80 91 1c 09 	lds	r24, 0x091C	; 0x80091c <uxTopReadyPriority>
    1e6c:	81 50       	subi	r24, 0x01	; 1
    1e6e:	80 93 1c 09 	sts	0x091C, r24	; 0x80091c <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    1e72:	80 91 1c 09 	lds	r24, 0x091C	; 0x80091c <uxTopReadyPriority>
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	fc 01       	movw	r30, r24
    1e7a:	ee 0f       	add	r30, r30
    1e7c:	ff 1f       	adc	r31, r31
    1e7e:	ee 0f       	add	r30, r30
    1e80:	ff 1f       	adc	r31, r31
    1e82:	ee 0f       	add	r30, r30
    1e84:	ff 1f       	adc	r31, r31
    1e86:	8e 0f       	add	r24, r30
    1e88:	9f 1f       	adc	r25, r31
    1e8a:	fc 01       	movw	r30, r24
    1e8c:	e6 5b       	subi	r30, 0xB6	; 182
    1e8e:	f6 4f       	sbci	r31, 0xF6	; 246
    1e90:	80 81       	ld	r24, Z
    1e92:	88 23       	and	r24, r24
    1e94:	49 f3       	breq	.-46     	; 0x1e68 <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    1e96:	80 91 1c 09 	lds	r24, 0x091C	; 0x80091c <uxTopReadyPriority>
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	9c 01       	movw	r18, r24
    1e9e:	22 0f       	add	r18, r18
    1ea0:	33 1f       	adc	r19, r19
    1ea2:	22 0f       	add	r18, r18
    1ea4:	33 1f       	adc	r19, r19
    1ea6:	22 0f       	add	r18, r18
    1ea8:	33 1f       	adc	r19, r19
    1eaa:	28 0f       	add	r18, r24
    1eac:	39 1f       	adc	r19, r25
    1eae:	d9 01       	movw	r26, r18
    1eb0:	a6 5b       	subi	r26, 0xB6	; 182
    1eb2:	b6 4f       	sbci	r27, 0xF6	; 246
    1eb4:	11 96       	adiw	r26, 0x01	; 1
    1eb6:	ed 91       	ld	r30, X+
    1eb8:	fc 91       	ld	r31, X
    1eba:	12 97       	sbiw	r26, 0x02	; 2
    1ebc:	02 80       	ldd	r0, Z+2	; 0x02
    1ebe:	f3 81       	ldd	r31, Z+3	; 0x03
    1ec0:	e0 2d       	mov	r30, r0
    1ec2:	12 96       	adiw	r26, 0x02	; 2
    1ec4:	fc 93       	st	X, r31
    1ec6:	ee 93       	st	-X, r30
    1ec8:	11 97       	sbiw	r26, 0x01	; 1
    1eca:	23 5b       	subi	r18, 0xB3	; 179
    1ecc:	36 4f       	sbci	r19, 0xF6	; 246
    1ece:	e2 17       	cp	r30, r18
    1ed0:	f3 07       	cpc	r31, r19
    1ed2:	29 f4       	brne	.+10     	; 0x1ede <vTaskSwitchContext+0xac>
    1ed4:	22 81       	ldd	r18, Z+2	; 0x02
    1ed6:	33 81       	ldd	r19, Z+3	; 0x03
    1ed8:	fd 01       	movw	r30, r26
    1eda:	32 83       	std	Z+2, r19	; 0x02
    1edc:	21 83       	std	Z+1, r18	; 0x01
    1ede:	fc 01       	movw	r30, r24
    1ee0:	ee 0f       	add	r30, r30
    1ee2:	ff 1f       	adc	r31, r31
    1ee4:	ee 0f       	add	r30, r30
    1ee6:	ff 1f       	adc	r31, r31
    1ee8:	ee 0f       	add	r30, r30
    1eea:	ff 1f       	adc	r31, r31
    1eec:	8e 0f       	add	r24, r30
    1eee:	9f 1f       	adc	r25, r31
    1ef0:	fc 01       	movw	r30, r24
    1ef2:	e6 5b       	subi	r30, 0xB6	; 182
    1ef4:	f6 4f       	sbci	r31, 0xF6	; 246
    1ef6:	01 80       	ldd	r0, Z+1	; 0x01
    1ef8:	f2 81       	ldd	r31, Z+2	; 0x02
    1efa:	e0 2d       	mov	r30, r0
    1efc:	86 81       	ldd	r24, Z+6	; 0x06
    1efe:	97 81       	ldd	r25, Z+7	; 0x07
    1f00:	90 93 6f 09 	sts	0x096F, r25	; 0x80096f <pxCurrentTCB+0x1>
    1f04:	80 93 6e 09 	sts	0x096E, r24	; 0x80096e <pxCurrentTCB>
    1f08:	08 95       	ret

00001f0a <__divmodhi4>:
    1f0a:	97 fb       	bst	r25, 7
    1f0c:	07 2e       	mov	r0, r23
    1f0e:	16 f4       	brtc	.+4      	; 0x1f14 <__divmodhi4+0xa>
    1f10:	00 94       	com	r0
    1f12:	06 d0       	rcall	.+12     	; 0x1f20 <__divmodhi4_neg1>
    1f14:	77 fd       	sbrc	r23, 7
    1f16:	08 d0       	rcall	.+16     	; 0x1f28 <__divmodhi4_neg2>
    1f18:	14 d0       	rcall	.+40     	; 0x1f42 <__udivmodhi4>
    1f1a:	07 fc       	sbrc	r0, 7
    1f1c:	05 d0       	rcall	.+10     	; 0x1f28 <__divmodhi4_neg2>
    1f1e:	3e f4       	brtc	.+14     	; 0x1f2e <__divmodhi4_exit>

00001f20 <__divmodhi4_neg1>:
    1f20:	90 95       	com	r25
    1f22:	81 95       	neg	r24
    1f24:	9f 4f       	sbci	r25, 0xFF	; 255
    1f26:	08 95       	ret

00001f28 <__divmodhi4_neg2>:
    1f28:	70 95       	com	r23
    1f2a:	61 95       	neg	r22
    1f2c:	7f 4f       	sbci	r23, 0xFF	; 255

00001f2e <__divmodhi4_exit>:
    1f2e:	08 95       	ret

00001f30 <__tablejump2__>:
    1f30:	ee 0f       	add	r30, r30
    1f32:	ff 1f       	adc	r31, r31
    1f34:	00 24       	eor	r0, r0
    1f36:	00 1c       	adc	r0, r0
    1f38:	0b be       	out	0x3b, r0	; 59
    1f3a:	07 90       	elpm	r0, Z+
    1f3c:	f6 91       	elpm	r31, Z
    1f3e:	e0 2d       	mov	r30, r0
    1f40:	09 94       	ijmp

00001f42 <__udivmodhi4>:
    1f42:	aa 1b       	sub	r26, r26
    1f44:	bb 1b       	sub	r27, r27
    1f46:	51 e1       	ldi	r21, 0x11	; 17
    1f48:	07 c0       	rjmp	.+14     	; 0x1f58 <__udivmodhi4_ep>

00001f4a <__udivmodhi4_loop>:
    1f4a:	aa 1f       	adc	r26, r26
    1f4c:	bb 1f       	adc	r27, r27
    1f4e:	a6 17       	cp	r26, r22
    1f50:	b7 07       	cpc	r27, r23
    1f52:	10 f0       	brcs	.+4      	; 0x1f58 <__udivmodhi4_ep>
    1f54:	a6 1b       	sub	r26, r22
    1f56:	b7 0b       	sbc	r27, r23

00001f58 <__udivmodhi4_ep>:
    1f58:	88 1f       	adc	r24, r24
    1f5a:	99 1f       	adc	r25, r25
    1f5c:	5a 95       	dec	r21
    1f5e:	a9 f7       	brne	.-22     	; 0x1f4a <__udivmodhi4_loop>
    1f60:	80 95       	com	r24
    1f62:	90 95       	com	r25
    1f64:	bc 01       	movw	r22, r24
    1f66:	cd 01       	movw	r24, r26
    1f68:	08 95       	ret

00001f6a <do_rand>:
    1f6a:	8f 92       	push	r8
    1f6c:	9f 92       	push	r9
    1f6e:	af 92       	push	r10
    1f70:	bf 92       	push	r11
    1f72:	cf 92       	push	r12
    1f74:	df 92       	push	r13
    1f76:	ef 92       	push	r14
    1f78:	ff 92       	push	r15
    1f7a:	cf 93       	push	r28
    1f7c:	df 93       	push	r29
    1f7e:	ec 01       	movw	r28, r24
    1f80:	68 81       	ld	r22, Y
    1f82:	79 81       	ldd	r23, Y+1	; 0x01
    1f84:	8a 81       	ldd	r24, Y+2	; 0x02
    1f86:	9b 81       	ldd	r25, Y+3	; 0x03
    1f88:	61 15       	cp	r22, r1
    1f8a:	71 05       	cpc	r23, r1
    1f8c:	81 05       	cpc	r24, r1
    1f8e:	91 05       	cpc	r25, r1
    1f90:	21 f4       	brne	.+8      	; 0x1f9a <do_rand+0x30>
    1f92:	64 e2       	ldi	r22, 0x24	; 36
    1f94:	79 ed       	ldi	r23, 0xD9	; 217
    1f96:	8b e5       	ldi	r24, 0x5B	; 91
    1f98:	97 e0       	ldi	r25, 0x07	; 7
    1f9a:	2d e1       	ldi	r18, 0x1D	; 29
    1f9c:	33 ef       	ldi	r19, 0xF3	; 243
    1f9e:	41 e0       	ldi	r20, 0x01	; 1
    1fa0:	50 e0       	ldi	r21, 0x00	; 0
    1fa2:	68 d0       	rcall	.+208    	; 0x2074 <__divmodsi4>
    1fa4:	49 01       	movw	r8, r18
    1fa6:	5a 01       	movw	r10, r20
    1fa8:	9b 01       	movw	r18, r22
    1faa:	ac 01       	movw	r20, r24
    1fac:	a7 ea       	ldi	r26, 0xA7	; 167
    1fae:	b1 e4       	ldi	r27, 0x41	; 65
    1fb0:	7d d0       	rcall	.+250    	; 0x20ac <__muluhisi3>
    1fb2:	6b 01       	movw	r12, r22
    1fb4:	7c 01       	movw	r14, r24
    1fb6:	ac ee       	ldi	r26, 0xEC	; 236
    1fb8:	b4 ef       	ldi	r27, 0xF4	; 244
    1fba:	a5 01       	movw	r20, r10
    1fbc:	94 01       	movw	r18, r8
    1fbe:	82 d0       	rcall	.+260    	; 0x20c4 <__mulohisi3>
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	8c 0d       	add	r24, r12
    1fc6:	9d 1d       	adc	r25, r13
    1fc8:	ae 1d       	adc	r26, r14
    1fca:	bf 1d       	adc	r27, r15
    1fcc:	b7 ff       	sbrs	r27, 7
    1fce:	03 c0       	rjmp	.+6      	; 0x1fd6 <do_rand+0x6c>
    1fd0:	01 97       	sbiw	r24, 0x01	; 1
    1fd2:	a1 09       	sbc	r26, r1
    1fd4:	b0 48       	sbci	r27, 0x80	; 128
    1fd6:	88 83       	st	Y, r24
    1fd8:	99 83       	std	Y+1, r25	; 0x01
    1fda:	aa 83       	std	Y+2, r26	; 0x02
    1fdc:	bb 83       	std	Y+3, r27	; 0x03
    1fde:	9f 77       	andi	r25, 0x7F	; 127
    1fe0:	df 91       	pop	r29
    1fe2:	cf 91       	pop	r28
    1fe4:	ff 90       	pop	r15
    1fe6:	ef 90       	pop	r14
    1fe8:	df 90       	pop	r13
    1fea:	cf 90       	pop	r12
    1fec:	bf 90       	pop	r11
    1fee:	af 90       	pop	r10
    1ff0:	9f 90       	pop	r9
    1ff2:	8f 90       	pop	r8
    1ff4:	08 95       	ret

00001ff6 <rand_r>:
    1ff6:	b9 cf       	rjmp	.-142    	; 0x1f6a <do_rand>

00001ff8 <rand>:
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	91 e0       	ldi	r25, 0x01	; 1
    1ffc:	b6 cf       	rjmp	.-148    	; 0x1f6a <do_rand>

00001ffe <srand>:
    1ffe:	a0 e0       	ldi	r26, 0x00	; 0
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    2006:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    200a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    200e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    2012:	08 95       	ret

00002014 <memset>:
    2014:	dc 01       	movw	r26, r24
    2016:	01 c0       	rjmp	.+2      	; 0x201a <memset+0x6>
    2018:	6d 93       	st	X+, r22
    201a:	41 50       	subi	r20, 0x01	; 1
    201c:	50 40       	sbci	r21, 0x00	; 0
    201e:	e0 f7       	brcc	.-8      	; 0x2018 <memset+0x4>
    2020:	08 95       	ret

00002022 <strncpy>:
    2022:	fb 01       	movw	r30, r22
    2024:	dc 01       	movw	r26, r24
    2026:	41 50       	subi	r20, 0x01	; 1
    2028:	50 40       	sbci	r21, 0x00	; 0
    202a:	48 f0       	brcs	.+18     	; 0x203e <strncpy+0x1c>
    202c:	01 90       	ld	r0, Z+
    202e:	0d 92       	st	X+, r0
    2030:	00 20       	and	r0, r0
    2032:	c9 f7       	brne	.-14     	; 0x2026 <strncpy+0x4>
    2034:	01 c0       	rjmp	.+2      	; 0x2038 <strncpy+0x16>
    2036:	1d 92       	st	X+, r1
    2038:	41 50       	subi	r20, 0x01	; 1
    203a:	50 40       	sbci	r21, 0x00	; 0
    203c:	e0 f7       	brcc	.-8      	; 0x2036 <strncpy+0x14>
    203e:	08 95       	ret

00002040 <eeprom_read_byte>:
    2040:	f9 99       	sbic	0x1f, 1	; 31
    2042:	fe cf       	rjmp	.-4      	; 0x2040 <eeprom_read_byte>
    2044:	92 bd       	out	0x22, r25	; 34
    2046:	81 bd       	out	0x21, r24	; 33
    2048:	f8 9a       	sbi	0x1f, 0	; 31
    204a:	99 27       	eor	r25, r25
    204c:	80 b5       	in	r24, 0x20	; 32
    204e:	08 95       	ret

00002050 <eeprom_update_byte>:
    2050:	26 2f       	mov	r18, r22

00002052 <eeprom_update_r18>:
    2052:	f9 99       	sbic	0x1f, 1	; 31
    2054:	fe cf       	rjmp	.-4      	; 0x2052 <eeprom_update_r18>
    2056:	92 bd       	out	0x22, r25	; 34
    2058:	81 bd       	out	0x21, r24	; 33
    205a:	f8 9a       	sbi	0x1f, 0	; 31
    205c:	01 97       	sbiw	r24, 0x01	; 1
    205e:	00 b4       	in	r0, 0x20	; 32
    2060:	02 16       	cp	r0, r18
    2062:	39 f0       	breq	.+14     	; 0x2072 <eeprom_update_r18+0x20>
    2064:	1f ba       	out	0x1f, r1	; 31
    2066:	20 bd       	out	0x20, r18	; 32
    2068:	0f b6       	in	r0, 0x3f	; 63
    206a:	f8 94       	cli
    206c:	fa 9a       	sbi	0x1f, 2	; 31
    206e:	f9 9a       	sbi	0x1f, 1	; 31
    2070:	0f be       	out	0x3f, r0	; 63
    2072:	08 95       	ret

00002074 <__divmodsi4>:
    2074:	05 2e       	mov	r0, r21
    2076:	97 fb       	bst	r25, 7
    2078:	16 f4       	brtc	.+4      	; 0x207e <__divmodsi4+0xa>
    207a:	00 94       	com	r0
    207c:	0f d0       	rcall	.+30     	; 0x209c <__negsi2>
    207e:	57 fd       	sbrc	r21, 7
    2080:	05 d0       	rcall	.+10     	; 0x208c <__divmodsi4_neg2>
    2082:	24 d0       	rcall	.+72     	; 0x20cc <__udivmodsi4>
    2084:	07 fc       	sbrc	r0, 7
    2086:	02 d0       	rcall	.+4      	; 0x208c <__divmodsi4_neg2>
    2088:	46 f4       	brtc	.+16     	; 0x209a <__divmodsi4_exit>
    208a:	08 c0       	rjmp	.+16     	; 0x209c <__negsi2>

0000208c <__divmodsi4_neg2>:
    208c:	50 95       	com	r21
    208e:	40 95       	com	r20
    2090:	30 95       	com	r19
    2092:	21 95       	neg	r18
    2094:	3f 4f       	sbci	r19, 0xFF	; 255
    2096:	4f 4f       	sbci	r20, 0xFF	; 255
    2098:	5f 4f       	sbci	r21, 0xFF	; 255

0000209a <__divmodsi4_exit>:
    209a:	08 95       	ret

0000209c <__negsi2>:
    209c:	90 95       	com	r25
    209e:	80 95       	com	r24
    20a0:	70 95       	com	r23
    20a2:	61 95       	neg	r22
    20a4:	7f 4f       	sbci	r23, 0xFF	; 255
    20a6:	8f 4f       	sbci	r24, 0xFF	; 255
    20a8:	9f 4f       	sbci	r25, 0xFF	; 255
    20aa:	08 95       	ret

000020ac <__muluhisi3>:
    20ac:	31 d0       	rcall	.+98     	; 0x2110 <__umulhisi3>
    20ae:	a5 9f       	mul	r26, r21
    20b0:	90 0d       	add	r25, r0
    20b2:	b4 9f       	mul	r27, r20
    20b4:	90 0d       	add	r25, r0
    20b6:	a4 9f       	mul	r26, r20
    20b8:	80 0d       	add	r24, r0
    20ba:	91 1d       	adc	r25, r1
    20bc:	11 24       	eor	r1, r1
    20be:	08 95       	ret

000020c0 <__mulshisi3>:
    20c0:	b7 ff       	sbrs	r27, 7
    20c2:	f4 cf       	rjmp	.-24     	; 0x20ac <__muluhisi3>

000020c4 <__mulohisi3>:
    20c4:	f3 df       	rcall	.-26     	; 0x20ac <__muluhisi3>
    20c6:	82 1b       	sub	r24, r18
    20c8:	93 0b       	sbc	r25, r19
    20ca:	08 95       	ret

000020cc <__udivmodsi4>:
    20cc:	a1 e2       	ldi	r26, 0x21	; 33
    20ce:	1a 2e       	mov	r1, r26
    20d0:	aa 1b       	sub	r26, r26
    20d2:	bb 1b       	sub	r27, r27
    20d4:	fd 01       	movw	r30, r26
    20d6:	0d c0       	rjmp	.+26     	; 0x20f2 <__udivmodsi4_ep>

000020d8 <__udivmodsi4_loop>:
    20d8:	aa 1f       	adc	r26, r26
    20da:	bb 1f       	adc	r27, r27
    20dc:	ee 1f       	adc	r30, r30
    20de:	ff 1f       	adc	r31, r31
    20e0:	a2 17       	cp	r26, r18
    20e2:	b3 07       	cpc	r27, r19
    20e4:	e4 07       	cpc	r30, r20
    20e6:	f5 07       	cpc	r31, r21
    20e8:	20 f0       	brcs	.+8      	; 0x20f2 <__udivmodsi4_ep>
    20ea:	a2 1b       	sub	r26, r18
    20ec:	b3 0b       	sbc	r27, r19
    20ee:	e4 0b       	sbc	r30, r20
    20f0:	f5 0b       	sbc	r31, r21

000020f2 <__udivmodsi4_ep>:
    20f2:	66 1f       	adc	r22, r22
    20f4:	77 1f       	adc	r23, r23
    20f6:	88 1f       	adc	r24, r24
    20f8:	99 1f       	adc	r25, r25
    20fa:	1a 94       	dec	r1
    20fc:	69 f7       	brne	.-38     	; 0x20d8 <__udivmodsi4_loop>
    20fe:	60 95       	com	r22
    2100:	70 95       	com	r23
    2102:	80 95       	com	r24
    2104:	90 95       	com	r25
    2106:	9b 01       	movw	r18, r22
    2108:	ac 01       	movw	r20, r24
    210a:	bd 01       	movw	r22, r26
    210c:	cf 01       	movw	r24, r30
    210e:	08 95       	ret

00002110 <__umulhisi3>:
    2110:	a2 9f       	mul	r26, r18
    2112:	b0 01       	movw	r22, r0
    2114:	b3 9f       	mul	r27, r19
    2116:	c0 01       	movw	r24, r0
    2118:	a3 9f       	mul	r26, r19
    211a:	70 0d       	add	r23, r0
    211c:	81 1d       	adc	r24, r1
    211e:	11 24       	eor	r1, r1
    2120:	91 1d       	adc	r25, r1
    2122:	b2 9f       	mul	r27, r18
    2124:	70 0d       	add	r23, r0
    2126:	81 1d       	adc	r24, r1
    2128:	11 24       	eor	r1, r1
    212a:	91 1d       	adc	r25, r1
    212c:	08 95       	ret

0000212e <_exit>:
    212e:	f8 94       	cli

00002130 <__stop_program>:
    2130:	ff cf       	rjmp	.-2      	; 0x2130 <__stop_program>
