
CHIP_1_Control_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ac  00800100  00000d16  00000daa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000063f  008001ac  008001ac  00000e56  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e56  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f0  00000000  00000000  00000ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000034cb  00000000  00000000  000011b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001014  00000000  00000000  00004683  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000024b9  00000000  00000000  00005697  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000784  00000000  00000000  00007b50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000116b  00000000  00000000  000082d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001de5  00000000  00000000  0000943f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e8  00000000  00000000  0000b224  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	00 c3       	rjmp	.+1536   	; 0x636 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e1       	ldi	r30, 0x16	; 22
  a0:	fd e0       	ldi	r31, 0x0D	; 13
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 3a       	cpi	r26, 0xAC	; 172
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	27 e0       	ldi	r18, 0x07	; 7
  b4:	ac ea       	ldi	r26, 0xAC	; 172
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 3e       	cpi	r26, 0xEB	; 235
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	50 d1       	rcall	.+672    	; 0x364 <main>
  c4:	26 c6       	rjmp	.+3148   	; 0xd12 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
  cc:	ec 01       	movw	r28, r24
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
  ce:	06 d4       	rcall	.+2060   	; 0x8dc <vTaskSuspendAll>
  d0:	20 91 ac 01 	lds	r18, 0x01AC	; 0x8001ac <__data_end>
  d4:	30 91 ad 01 	lds	r19, 0x01AD	; 0x8001ad <__data_end+0x1>
  d8:	c9 01       	movw	r24, r18
  da:	8c 0f       	add	r24, r28
  dc:	9d 1f       	adc	r25, r29
  de:	8c 3d       	cpi	r24, 0xDC	; 220
  e0:	45 e0       	ldi	r20, 0x05	; 5
  e2:	94 07       	cpc	r25, r20
  e4:	58 f4       	brcc	.+22     	; 0xfc <pvPortMalloc+0x34>
  e6:	28 17       	cp	r18, r24
  e8:	39 07       	cpc	r19, r25
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
  ea:	58 f4       	brcc	.+22     	; 0x102 <pvPortMalloc+0x3a>
  ec:	e9 01       	movw	r28, r18
  ee:	c2 55       	subi	r28, 0x52	; 82
			xNextFreeByte += xWantedSize;			
  f0:	de 4f       	sbci	r29, 0xFE	; 254
  f2:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <__data_end+0x1>
  f6:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <__data_end>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
  fa:	05 c0       	rjmp	.+10     	; 0x106 <pvPortMalloc+0x3e>
  fc:	c0 e0       	ldi	r28, 0x00	; 0
  fe:	d0 e0       	ldi	r29, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <pvPortMalloc+0x3e>
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
 102:	c0 e0       	ldi	r28, 0x00	; 0
 104:	d0 e0       	ldi	r29, 0x00	; 0
		}
	}
	#endif	

	return pvReturn;
}
 106:	b1 d4       	rcall	.+2402   	; 0xa6a <xTaskResumeAll>
 108:	ce 01       	movw	r24, r28
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 110:	08 95       	ret

00000112 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 112:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 114:	03 96       	adiw	r24, 0x03	; 3
 116:	92 83       	std	Z+2, r25	; 0x02
 118:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	3f ef       	ldi	r19, 0xFF	; 255
 11e:	34 83       	std	Z+4, r19	; 0x04
 120:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 122:	96 83       	std	Z+6, r25	; 0x06
 124:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 126:	90 87       	std	Z+8, r25	; 0x08
 128:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 12a:	10 82       	st	Z, r1
 12c:	08 95       	ret

0000012e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 12e:	fc 01       	movw	r30, r24
 130:	11 86       	std	Z+9, r1	; 0x09
 132:	10 86       	std	Z+8, r1	; 0x08
 134:	08 95       	ret

00000136 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	fc 01       	movw	r30, r24
 13c:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 13e:	21 81       	ldd	r18, Z+1	; 0x01
 140:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
 142:	e9 01       	movw	r28, r18
 144:	8a 81       	ldd	r24, Y+2	; 0x02
 146:	9b 81       	ldd	r25, Y+3	; 0x03
 148:	13 96       	adiw	r26, 0x03	; 3
 14a:	9c 93       	st	X, r25
 14c:	8e 93       	st	-X, r24
 14e:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
 150:	81 81       	ldd	r24, Z+1	; 0x01
 152:	92 81       	ldd	r25, Z+2	; 0x02
 154:	15 96       	adiw	r26, 0x05	; 5
 156:	9c 93       	st	X, r25
 158:	8e 93       	st	-X, r24
 15a:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 15c:	8a 81       	ldd	r24, Y+2	; 0x02
 15e:	9b 81       	ldd	r25, Y+3	; 0x03
 160:	ec 01       	movw	r28, r24
 162:	7d 83       	std	Y+5, r23	; 0x05
 164:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 166:	e9 01       	movw	r28, r18
 168:	7b 83       	std	Y+3, r23	; 0x03
 16a:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 16c:	72 83       	std	Z+2, r23	; 0x02
 16e:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 170:	19 96       	adiw	r26, 0x09	; 9
 172:	fc 93       	st	X, r31
 174:	ee 93       	st	-X, r30
 176:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
 178:	80 81       	ld	r24, Z
 17a:	8f 5f       	subi	r24, 0xFF	; 255
 17c:	80 83       	st	Z, r24
}
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 18a:	48 81       	ld	r20, Y
 18c:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 18e:	4f 3f       	cpi	r20, 0xFF	; 255
 190:	2f ef       	ldi	r18, 0xFF	; 255
 192:	52 07       	cpc	r21, r18
 194:	31 f4       	brne	.+12     	; 0x1a2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 196:	dc 01       	movw	r26, r24
 198:	17 96       	adiw	r26, 0x07	; 7
 19a:	ed 91       	ld	r30, X+
 19c:	fc 91       	ld	r31, X
 19e:	18 97       	sbiw	r26, 0x08	; 8
 1a0:	17 c0       	rjmp	.+46     	; 0x1d0 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 1a2:	fc 01       	movw	r30, r24
 1a4:	33 96       	adiw	r30, 0x03	; 3
 1a6:	dc 01       	movw	r26, r24
 1a8:	15 96       	adiw	r26, 0x05	; 5
 1aa:	2d 91       	ld	r18, X+
 1ac:	3c 91       	ld	r19, X
 1ae:	16 97       	sbiw	r26, 0x06	; 6
 1b0:	d9 01       	movw	r26, r18
 1b2:	2d 91       	ld	r18, X+
 1b4:	3c 91       	ld	r19, X
 1b6:	42 17       	cp	r20, r18
 1b8:	53 07       	cpc	r21, r19
 1ba:	50 f0       	brcs	.+20     	; 0x1d0 <vListInsert+0x4c>
 1bc:	02 80       	ldd	r0, Z+2	; 0x02
 1be:	f3 81       	ldd	r31, Z+3	; 0x03
 1c0:	e0 2d       	mov	r30, r0
 1c2:	a2 81       	ldd	r26, Z+2	; 0x02
 1c4:	b3 81       	ldd	r27, Z+3	; 0x03
 1c6:	2d 91       	ld	r18, X+
 1c8:	3c 91       	ld	r19, X
 1ca:	42 17       	cp	r20, r18
 1cc:	53 07       	cpc	r21, r19
 1ce:	b0 f7       	brcc	.-20     	; 0x1bc <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 1d0:	a2 81       	ldd	r26, Z+2	; 0x02
 1d2:	b3 81       	ldd	r27, Z+3	; 0x03
 1d4:	bb 83       	std	Y+3, r27	; 0x03
 1d6:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 1d8:	15 96       	adiw	r26, 0x05	; 5
 1da:	dc 93       	st	X, r29
 1dc:	ce 93       	st	-X, r28
 1de:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
 1e0:	fd 83       	std	Y+5, r31	; 0x05
 1e2:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 1e4:	d3 83       	std	Z+3, r29	; 0x03
 1e6:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 1e8:	99 87       	std	Y+9, r25	; 0x09
 1ea:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
 1ec:	fc 01       	movw	r30, r24
 1ee:	20 81       	ld	r18, Z
 1f0:	2f 5f       	subi	r18, 0xFF	; 255
 1f2:	20 83       	st	Z, r18
}
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 1fa:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 1fc:	a2 81       	ldd	r26, Z+2	; 0x02
 1fe:	b3 81       	ldd	r27, Z+3	; 0x03
 200:	84 81       	ldd	r24, Z+4	; 0x04
 202:	95 81       	ldd	r25, Z+5	; 0x05
 204:	15 96       	adiw	r26, 0x05	; 5
 206:	9c 93       	st	X, r25
 208:	8e 93       	st	-X, r24
 20a:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 20c:	a4 81       	ldd	r26, Z+4	; 0x04
 20e:	b5 81       	ldd	r27, Z+5	; 0x05
 210:	82 81       	ldd	r24, Z+2	; 0x02
 212:	93 81       	ldd	r25, Z+3	; 0x03
 214:	13 96       	adiw	r26, 0x03	; 3
 216:	9c 93       	st	X, r25
 218:	8e 93       	st	-X, r24
 21a:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 21c:	a0 85       	ldd	r26, Z+8	; 0x08
 21e:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 220:	11 96       	adiw	r26, 0x01	; 1
 222:	8d 91       	ld	r24, X+
 224:	9c 91       	ld	r25, X
 226:	12 97       	sbiw	r26, 0x02	; 2
 228:	e8 17       	cp	r30, r24
 22a:	f9 07       	cpc	r31, r25
 22c:	31 f4       	brne	.+12     	; 0x23a <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 22e:	84 81       	ldd	r24, Z+4	; 0x04
 230:	95 81       	ldd	r25, Z+5	; 0x05
 232:	12 96       	adiw	r26, 0x02	; 2
 234:	9c 93       	st	X, r25
 236:	8e 93       	st	-X, r24
 238:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
 23a:	11 86       	std	Z+9, r1	; 0x09
 23c:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 23e:	8c 91       	ld	r24, X
 240:	81 50       	subi	r24, 0x01	; 1
 242:	8c 93       	st	X, r24
 244:	08 95       	ret

00000246 <USART_Send>:
}

void SenseSecPulse(unsigned portBASE_TYPE Priority)
{
	xTaskCreate(SenseSecTask, (signed portCHAR *)"SenseSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
}
 246:	61 30       	cpi	r22, 0x01	; 1
 248:	41 f0       	breq	.+16     	; 0x25a <USART_Send+0x14>
 24a:	e0 ec       	ldi	r30, 0xC0	; 192
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	90 81       	ld	r25, Z
 250:	95 ff       	sbrs	r25, 5
 252:	fd cf       	rjmp	.-6      	; 0x24e <USART_Send+0x8>
 254:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 258:	08 95       	ret
 25a:	e8 ec       	ldi	r30, 0xC8	; 200
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	90 81       	ld	r25, Z
 260:	95 ff       	sbrs	r25, 5
 262:	fd cf       	rjmp	.-6      	; 0x25e <USART_Send+0x18>
 264:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 268:	08 95       	ret

0000026a <delay_ms>:
 26a:	18 16       	cp	r1, r24
 26c:	19 06       	cpc	r1, r25
 26e:	5c f0       	brlt	.+22     	; 0x286 <delay_ms+0x1c>
 270:	08 95       	ret
 272:	00 00       	nop
 274:	21 50       	subi	r18, 0x01	; 1
 276:	31 09       	sbc	r19, r1
 278:	e1 f7       	brne	.-8      	; 0x272 <delay_ms+0x8>
 27a:	4f 5f       	subi	r20, 0xFF	; 255
 27c:	5f 4f       	sbci	r21, 0xFF	; 255
 27e:	84 17       	cp	r24, r20
 280:	95 07       	cpc	r25, r21
 282:	19 f4       	brne	.+6      	; 0x28a <delay_ms+0x20>
 284:	08 95       	ret
 286:	40 e0       	ldi	r20, 0x00	; 0
 288:	50 e0       	ldi	r21, 0x00	; 0
 28a:	27 e0       	ldi	r18, 0x07	; 7
 28c:	33 e0       	ldi	r19, 0x03	; 3
 28e:	f1 cf       	rjmp	.-30     	; 0x272 <delay_ms+0x8>

00000290 <LCD_WriteCommand>:
 290:	5e 98       	cbi	0x0b, 6	; 11
 292:	88 b9       	out	0x08, r24	; 8
 294:	5f 9a       	sbi	0x0b, 7	; 11
 296:	00 00       	nop
 298:	5f 98       	cbi	0x0b, 7	; 11
 29a:	82 e0       	ldi	r24, 0x02	; 2
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	e5 cf       	rjmp	.-54     	; 0x26a <delay_ms>
 2a0:	08 95       	ret

000002a2 <LCD_init>:
 2a2:	84 e6       	ldi	r24, 0x64	; 100
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	e1 df       	rcall	.-62     	; 0x26a <delay_ms>
 2a8:	88 e3       	ldi	r24, 0x38	; 56
 2aa:	f2 df       	rcall	.-28     	; 0x290 <LCD_WriteCommand>
 2ac:	86 e0       	ldi	r24, 0x06	; 6
 2ae:	f0 df       	rcall	.-32     	; 0x290 <LCD_WriteCommand>
 2b0:	8f e0       	ldi	r24, 0x0F	; 15
 2b2:	ee df       	rcall	.-36     	; 0x290 <LCD_WriteCommand>
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	ec df       	rcall	.-40     	; 0x290 <LCD_WriteCommand>
 2b8:	8a e0       	ldi	r24, 0x0A	; 10
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	d6 cf       	rjmp	.-84     	; 0x26a <delay_ms>
 2be:	08 95       	ret

000002c0 <Trans_Tick>:
 2c0:	80 91 e7 07 	lds	r24, 0x07E7	; 0x8007e7 <trans_state>
 2c4:	81 30       	cpi	r24, 0x01	; 1
 2c6:	21 f4       	brne	.+8      	; 0x2d0 <Trans_Tick+0x10>
 2c8:	60 e0       	ldi	r22, 0x00	; 0
 2ca:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <data_to_send>
 2ce:	bb df       	rcall	.-138    	; 0x246 <USART_Send>
 2d0:	80 91 e7 07 	lds	r24, 0x07E7	; 0x8007e7 <trans_state>
 2d4:	88 23       	and	r24, r24
 2d6:	19 f0       	breq	.+6      	; 0x2de <Trans_Tick+0x1e>
 2d8:	81 30       	cpi	r24, 0x01	; 1
 2da:	a1 f0       	breq	.+40     	; 0x304 <Trans_Tick+0x44>
 2dc:	1a c0       	rjmp	.+52     	; 0x312 <Trans_Tick+0x52>
 2de:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 2e2:	85 ff       	sbrs	r24, 5
 2e4:	18 c0       	rjmp	.+48     	; 0x316 <Trans_Tick+0x56>
 2e6:	80 91 8b 07 	lds	r24, 0x078B	; 0x80078b <ARM_DISARM>
 2ea:	81 30       	cpi	r24, 0x01	; 1
 2ec:	21 f4       	brne	.+8      	; 0x2f6 <Trans_Tick+0x36>
 2ee:	8f ef       	ldi	r24, 0xFF	; 255
 2f0:	80 93 8a 07 	sts	0x078A, r24	; 0x80078a <data_to_send>
 2f4:	03 c0       	rjmp	.+6      	; 0x2fc <Trans_Tick+0x3c>
 2f6:	8f ef       	ldi	r24, 0xFF	; 255
 2f8:	80 93 8a 07 	sts	0x078A, r24	; 0x80078a <data_to_send>
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	80 93 e7 07 	sts	0x07E7, r24	; 0x8007e7 <trans_state>
 302:	08 95       	ret
 304:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 308:	86 ff       	sbrs	r24, 6
 30a:	05 c0       	rjmp	.+10     	; 0x316 <Trans_Tick+0x56>
 30c:	10 92 e7 07 	sts	0x07E7, r1	; 0x8007e7 <trans_state>
 310:	08 95       	ret
 312:	10 92 e7 07 	sts	0x07E7, r1	; 0x8007e7 <trans_state>
 316:	08 95       	ret

00000318 <TransSecTask>:
 318:	10 92 e7 07 	sts	0x07E7, r1	; 0x8007e7 <trans_state>
 31c:	d1 df       	rcall	.-94     	; 0x2c0 <Trans_Tick>
 31e:	8a e0       	ldi	r24, 0x0A	; 10
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	24 d4       	rcall	.+2120   	; 0xb6c <vTaskDelay>
 324:	fb cf       	rjmp	.-10     	; 0x31c <TransSecTask+0x4>

00000326 <TransSecPulse>:
 326:	af 92       	push	r10
 328:	bf 92       	push	r11
 32a:	cf 92       	push	r12
 32c:	df 92       	push	r13
 32e:	ef 92       	push	r14
 330:	ff 92       	push	r15
 332:	0f 93       	push	r16
 334:	a1 2c       	mov	r10, r1
 336:	b1 2c       	mov	r11, r1
 338:	c1 2c       	mov	r12, r1
 33a:	d1 2c       	mov	r13, r1
 33c:	e1 2c       	mov	r14, r1
 33e:	f1 2c       	mov	r15, r1
 340:	08 2f       	mov	r16, r24
 342:	20 e0       	ldi	r18, 0x00	; 0
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	45 e5       	ldi	r20, 0x55	; 85
 348:	50 e0       	ldi	r21, 0x00	; 0
 34a:	62 e0       	ldi	r22, 0x02	; 2
 34c:	71 e0       	ldi	r23, 0x01	; 1
 34e:	8c e8       	ldi	r24, 0x8C	; 140
 350:	91 e0       	ldi	r25, 0x01	; 1
 352:	a8 d1       	rcall	.+848    	; 0x6a4 <xTaskGenericCreate>
 354:	0f 91       	pop	r16
 356:	ff 90       	pop	r15
 358:	ef 90       	pop	r14
 35a:	df 90       	pop	r13
 35c:	cf 90       	pop	r12
 35e:	bf 90       	pop	r11
 360:	af 90       	pop	r10
 362:	08 95       	ret

00000364 <main>:


///////////////////////////////////////////////////////////////////////////////////////////////////////////////
int main(void) 
{ 
   DDRA = 0xF0; PORTA = 0x0F; // PC7..4 outputs init 0s, PC3..0 inputs init 1s FOR KEYPAD
 364:	80 ef       	ldi	r24, 0xF0	; 240
 366:	81 b9       	out	0x01, r24	; 1
 368:	8f e0       	ldi	r24, 0x0F	; 15
 36a:	82 b9       	out	0x02, r24	; 2
   DDRC = 0xFF; PORTC = 0x00; // set as output for lcd
 36c:	8f ef       	ldi	r24, 0xFF	; 255
 36e:	87 b9       	out	0x07, r24	; 7
 370:	18 b8       	out	0x08, r1	; 8
   DDRD = 0xFF; PORTD = 0x00; // LCD control lines
 372:	8a b9       	out	0x0a, r24	; 10
 374:	1b b8       	out	0x0b, r1	; 11
   DDRB = 0xFF; PORTB = 0x00;
 376:	84 b9       	out	0x04, r24	; 4
   //LCD init
   LCD_init();
   //LCD_DisplayString(1, Disarmed_LCD_data);
  
   //Start Tasks  
   TransSecPulse(1);
 378:	15 b8       	out	0x05, r1	; 5
   //RecSecPulse(1);

   //MenuSecPulse(1);
   //SenseSecPulse(1);
    //RunSchedular 
   vTaskStartScheduler(); 
 37a:	93 df       	rcall	.-218    	; 0x2a2 <LCD_init>
 37c:	81 e0       	ldi	r24, 0x01	; 1
 
   return 0; 
 37e:	d3 df       	rcall	.-90     	; 0x326 <TransSecPulse>
 380:	84 d2       	rcall	.+1288   	; 0x88a <vTaskStartScheduler>
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	08 95       	ret

00000388 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 388:	31 e1       	ldi	r19, 0x11	; 17
 38a:	fc 01       	movw	r30, r24
 38c:	30 83       	st	Z, r19
 38e:	31 97       	sbiw	r30, 0x01	; 1
 390:	22 e2       	ldi	r18, 0x22	; 34
 392:	20 83       	st	Z, r18
 394:	31 97       	sbiw	r30, 0x01	; 1
 396:	a3 e3       	ldi	r26, 0x33	; 51
 398:	a0 83       	st	Z, r26
 39a:	31 97       	sbiw	r30, 0x01	; 1
 39c:	60 83       	st	Z, r22
 39e:	31 97       	sbiw	r30, 0x01	; 1
 3a0:	70 83       	st	Z, r23
 3a2:	31 97       	sbiw	r30, 0x01	; 1
 3a4:	10 82       	st	Z, r1
 3a6:	31 97       	sbiw	r30, 0x01	; 1
 3a8:	60 e8       	ldi	r22, 0x80	; 128
 3aa:	60 83       	st	Z, r22
 3ac:	31 97       	sbiw	r30, 0x01	; 1
 3ae:	10 82       	st	Z, r1
 3b0:	31 97       	sbiw	r30, 0x01	; 1
 3b2:	62 e0       	ldi	r22, 0x02	; 2
 3b4:	60 83       	st	Z, r22
 3b6:	31 97       	sbiw	r30, 0x01	; 1
 3b8:	63 e0       	ldi	r22, 0x03	; 3
 3ba:	60 83       	st	Z, r22
 3bc:	31 97       	sbiw	r30, 0x01	; 1
 3be:	64 e0       	ldi	r22, 0x04	; 4
 3c0:	60 83       	st	Z, r22
 3c2:	31 97       	sbiw	r30, 0x01	; 1
 3c4:	65 e0       	ldi	r22, 0x05	; 5
 3c6:	60 83       	st	Z, r22
 3c8:	31 97       	sbiw	r30, 0x01	; 1
 3ca:	66 e0       	ldi	r22, 0x06	; 6
 3cc:	60 83       	st	Z, r22
 3ce:	31 97       	sbiw	r30, 0x01	; 1
 3d0:	67 e0       	ldi	r22, 0x07	; 7
 3d2:	60 83       	st	Z, r22
 3d4:	31 97       	sbiw	r30, 0x01	; 1
 3d6:	68 e0       	ldi	r22, 0x08	; 8
 3d8:	60 83       	st	Z, r22
 3da:	31 97       	sbiw	r30, 0x01	; 1
 3dc:	69 e0       	ldi	r22, 0x09	; 9
 3de:	60 83       	st	Z, r22
 3e0:	31 97       	sbiw	r30, 0x01	; 1
 3e2:	60 e1       	ldi	r22, 0x10	; 16
 3e4:	60 83       	st	Z, r22
 3e6:	31 97       	sbiw	r30, 0x01	; 1
 3e8:	30 83       	st	Z, r19
 3ea:	31 97       	sbiw	r30, 0x01	; 1
 3ec:	32 e1       	ldi	r19, 0x12	; 18
 3ee:	30 83       	st	Z, r19
 3f0:	31 97       	sbiw	r30, 0x01	; 1
 3f2:	33 e1       	ldi	r19, 0x13	; 19
 3f4:	30 83       	st	Z, r19
 3f6:	31 97       	sbiw	r30, 0x01	; 1
 3f8:	34 e1       	ldi	r19, 0x14	; 20
 3fa:	30 83       	st	Z, r19
 3fc:	31 97       	sbiw	r30, 0x01	; 1
 3fe:	35 e1       	ldi	r19, 0x15	; 21
 400:	30 83       	st	Z, r19
 402:	31 97       	sbiw	r30, 0x01	; 1
 404:	36 e1       	ldi	r19, 0x16	; 22
 406:	30 83       	st	Z, r19
 408:	31 97       	sbiw	r30, 0x01	; 1
 40a:	37 e1       	ldi	r19, 0x17	; 23
 40c:	30 83       	st	Z, r19
 40e:	31 97       	sbiw	r30, 0x01	; 1
 410:	38 e1       	ldi	r19, 0x18	; 24
 412:	30 83       	st	Z, r19
 414:	31 97       	sbiw	r30, 0x01	; 1
 416:	39 e1       	ldi	r19, 0x19	; 25
 418:	30 83       	st	Z, r19
 41a:	31 97       	sbiw	r30, 0x01	; 1
 41c:	30 e2       	ldi	r19, 0x20	; 32
 41e:	30 83       	st	Z, r19
 420:	31 97       	sbiw	r30, 0x01	; 1
 422:	31 e2       	ldi	r19, 0x21	; 33
 424:	30 83       	st	Z, r19
 426:	31 97       	sbiw	r30, 0x01	; 1
 428:	20 83       	st	Z, r18
 42a:	31 97       	sbiw	r30, 0x01	; 1
 42c:	23 e2       	ldi	r18, 0x23	; 35
 42e:	20 83       	st	Z, r18
 430:	31 97       	sbiw	r30, 0x01	; 1
 432:	40 83       	st	Z, r20
 434:	31 97       	sbiw	r30, 0x01	; 1
 436:	50 83       	st	Z, r21
 438:	31 97       	sbiw	r30, 0x01	; 1
 43a:	26 e2       	ldi	r18, 0x26	; 38
 43c:	20 83       	st	Z, r18
 43e:	31 97       	sbiw	r30, 0x01	; 1
 440:	27 e2       	ldi	r18, 0x27	; 39
 442:	20 83       	st	Z, r18
 444:	31 97       	sbiw	r30, 0x01	; 1
 446:	28 e2       	ldi	r18, 0x28	; 40
 448:	20 83       	st	Z, r18
 44a:	31 97       	sbiw	r30, 0x01	; 1
 44c:	29 e2       	ldi	r18, 0x29	; 41
 44e:	20 83       	st	Z, r18
 450:	31 97       	sbiw	r30, 0x01	; 1
 452:	20 e3       	ldi	r18, 0x30	; 48
 454:	20 83       	st	Z, r18
 456:	31 97       	sbiw	r30, 0x01	; 1
 458:	21 e3       	ldi	r18, 0x31	; 49
 45a:	20 83       	st	Z, r18
 45c:	86 97       	sbiw	r24, 0x26	; 38
 45e:	08 95       	ret

00000460 <xPortStartScheduler>:
 460:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 464:	8c e7       	ldi	r24, 0x7C	; 124
 466:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 46a:	8b e0       	ldi	r24, 0x0B	; 11
 46c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 470:	ef e6       	ldi	r30, 0x6F	; 111
 472:	f0 e0       	ldi	r31, 0x00	; 0
 474:	80 81       	ld	r24, Z
 476:	82 60       	ori	r24, 0x02	; 2
 478:	80 83       	st	Z, r24
 47a:	a0 91 e4 07 	lds	r26, 0x07E4	; 0x8007e4 <pxCurrentTCB>
 47e:	b0 91 e5 07 	lds	r27, 0x07E5	; 0x8007e5 <pxCurrentTCB+0x1>
 482:	cd 91       	ld	r28, X+
 484:	cd bf       	out	0x3d, r28	; 61
 486:	dd 91       	ld	r29, X+
 488:	de bf       	out	0x3e, r29	; 62
 48a:	ff 91       	pop	r31
 48c:	ef 91       	pop	r30
 48e:	df 91       	pop	r29
 490:	cf 91       	pop	r28
 492:	bf 91       	pop	r27
 494:	af 91       	pop	r26
 496:	9f 91       	pop	r25
 498:	8f 91       	pop	r24
 49a:	7f 91       	pop	r23
 49c:	6f 91       	pop	r22
 49e:	5f 91       	pop	r21
 4a0:	4f 91       	pop	r20
 4a2:	3f 91       	pop	r19
 4a4:	2f 91       	pop	r18
 4a6:	1f 91       	pop	r17
 4a8:	0f 91       	pop	r16
 4aa:	ff 90       	pop	r15
 4ac:	ef 90       	pop	r14
 4ae:	df 90       	pop	r13
 4b0:	cf 90       	pop	r12
 4b2:	bf 90       	pop	r11
 4b4:	af 90       	pop	r10
 4b6:	9f 90       	pop	r9
 4b8:	8f 90       	pop	r8
 4ba:	7f 90       	pop	r7
 4bc:	6f 90       	pop	r6
 4be:	5f 90       	pop	r5
 4c0:	4f 90       	pop	r4
 4c2:	3f 90       	pop	r3
 4c4:	2f 90       	pop	r2
 4c6:	1f 90       	pop	r1
 4c8:	0f 90       	pop	r0
 4ca:	0f be       	out	0x3f, r0	; 63
 4cc:	0f 90       	pop	r0
 4ce:	08 95       	ret
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	08 95       	ret

000004d4 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 4d4:	0f 92       	push	r0
 4d6:	0f b6       	in	r0, 0x3f	; 63
 4d8:	f8 94       	cli
 4da:	0f 92       	push	r0
 4dc:	1f 92       	push	r1
 4de:	11 24       	eor	r1, r1
 4e0:	2f 92       	push	r2
 4e2:	3f 92       	push	r3
 4e4:	4f 92       	push	r4
 4e6:	5f 92       	push	r5
 4e8:	6f 92       	push	r6
 4ea:	7f 92       	push	r7
 4ec:	8f 92       	push	r8
 4ee:	9f 92       	push	r9
 4f0:	af 92       	push	r10
 4f2:	bf 92       	push	r11
 4f4:	cf 92       	push	r12
 4f6:	df 92       	push	r13
 4f8:	ef 92       	push	r14
 4fa:	ff 92       	push	r15
 4fc:	0f 93       	push	r16
 4fe:	1f 93       	push	r17
 500:	2f 93       	push	r18
 502:	3f 93       	push	r19
 504:	4f 93       	push	r20
 506:	5f 93       	push	r21
 508:	6f 93       	push	r22
 50a:	7f 93       	push	r23
 50c:	8f 93       	push	r24
 50e:	9f 93       	push	r25
 510:	af 93       	push	r26
 512:	bf 93       	push	r27
 514:	cf 93       	push	r28
 516:	df 93       	push	r29
 518:	ef 93       	push	r30
 51a:	ff 93       	push	r31
 51c:	a0 91 e4 07 	lds	r26, 0x07E4	; 0x8007e4 <pxCurrentTCB>
 520:	b0 91 e5 07 	lds	r27, 0x07E5	; 0x8007e5 <pxCurrentTCB+0x1>
 524:	0d b6       	in	r0, 0x3d	; 61
 526:	0d 92       	st	X+, r0
 528:	0e b6       	in	r0, 0x3e	; 62
	vTaskSwitchContext();
 52a:	0d 92       	st	X+, r0
	portRESTORE_CONTEXT();
 52c:	70 d3       	rcall	.+1760   	; 0xc0e <vTaskSwitchContext>
 52e:	a0 91 e4 07 	lds	r26, 0x07E4	; 0x8007e4 <pxCurrentTCB>
 532:	b0 91 e5 07 	lds	r27, 0x07E5	; 0x8007e5 <pxCurrentTCB+0x1>
 536:	cd 91       	ld	r28, X+
 538:	cd bf       	out	0x3d, r28	; 61
 53a:	dd 91       	ld	r29, X+
 53c:	de bf       	out	0x3e, r29	; 62
 53e:	ff 91       	pop	r31
 540:	ef 91       	pop	r30
 542:	df 91       	pop	r29
 544:	cf 91       	pop	r28
 546:	bf 91       	pop	r27
 548:	af 91       	pop	r26
 54a:	9f 91       	pop	r25
 54c:	8f 91       	pop	r24
 54e:	7f 91       	pop	r23
 550:	6f 91       	pop	r22
 552:	5f 91       	pop	r21
 554:	4f 91       	pop	r20
 556:	3f 91       	pop	r19
 558:	2f 91       	pop	r18
 55a:	1f 91       	pop	r17
 55c:	0f 91       	pop	r16
 55e:	ff 90       	pop	r15
 560:	ef 90       	pop	r14
 562:	df 90       	pop	r13
 564:	cf 90       	pop	r12
 566:	bf 90       	pop	r11
 568:	af 90       	pop	r10
 56a:	9f 90       	pop	r9
 56c:	8f 90       	pop	r8
 56e:	7f 90       	pop	r7
 570:	6f 90       	pop	r6
 572:	5f 90       	pop	r5
 574:	4f 90       	pop	r4
 576:	3f 90       	pop	r3
 578:	2f 90       	pop	r2
 57a:	1f 90       	pop	r1
 57c:	0f 90       	pop	r0
 57e:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
 580:	0f 90       	pop	r0
 582:	08 95       	ret

00000584 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 584:	0f 92       	push	r0
 586:	0f b6       	in	r0, 0x3f	; 63
 588:	f8 94       	cli
 58a:	0f 92       	push	r0
 58c:	1f 92       	push	r1
 58e:	11 24       	eor	r1, r1
 590:	2f 92       	push	r2
 592:	3f 92       	push	r3
 594:	4f 92       	push	r4
 596:	5f 92       	push	r5
 598:	6f 92       	push	r6
 59a:	7f 92       	push	r7
 59c:	8f 92       	push	r8
 59e:	9f 92       	push	r9
 5a0:	af 92       	push	r10
 5a2:	bf 92       	push	r11
 5a4:	cf 92       	push	r12
 5a6:	df 92       	push	r13
 5a8:	ef 92       	push	r14
 5aa:	ff 92       	push	r15
 5ac:	0f 93       	push	r16
 5ae:	1f 93       	push	r17
 5b0:	2f 93       	push	r18
 5b2:	3f 93       	push	r19
 5b4:	4f 93       	push	r20
 5b6:	5f 93       	push	r21
 5b8:	6f 93       	push	r22
 5ba:	7f 93       	push	r23
 5bc:	8f 93       	push	r24
 5be:	9f 93       	push	r25
 5c0:	af 93       	push	r26
 5c2:	bf 93       	push	r27
 5c4:	cf 93       	push	r28
 5c6:	df 93       	push	r29
 5c8:	ef 93       	push	r30
 5ca:	ff 93       	push	r31
 5cc:	a0 91 e4 07 	lds	r26, 0x07E4	; 0x8007e4 <pxCurrentTCB>
 5d0:	b0 91 e5 07 	lds	r27, 0x07E5	; 0x8007e5 <pxCurrentTCB+0x1>
 5d4:	0d b6       	in	r0, 0x3d	; 61
 5d6:	0d 92       	st	X+, r0
 5d8:	0e b6       	in	r0, 0x3e	; 62
	vTaskIncrementTick();
	vTaskSwitchContext();
 5da:	0d 92       	st	X+, r0
 5dc:	85 d1       	rcall	.+778    	; 0x8e8 <vTaskIncrementTick>
	portRESTORE_CONTEXT();
 5de:	17 d3       	rcall	.+1582   	; 0xc0e <vTaskSwitchContext>
 5e0:	a0 91 e4 07 	lds	r26, 0x07E4	; 0x8007e4 <pxCurrentTCB>
 5e4:	b0 91 e5 07 	lds	r27, 0x07E5	; 0x8007e5 <pxCurrentTCB+0x1>
 5e8:	cd 91       	ld	r28, X+
 5ea:	cd bf       	out	0x3d, r28	; 61
 5ec:	dd 91       	ld	r29, X+
 5ee:	de bf       	out	0x3e, r29	; 62
 5f0:	ff 91       	pop	r31
 5f2:	ef 91       	pop	r30
 5f4:	df 91       	pop	r29
 5f6:	cf 91       	pop	r28
 5f8:	bf 91       	pop	r27
 5fa:	af 91       	pop	r26
 5fc:	9f 91       	pop	r25
 5fe:	8f 91       	pop	r24
 600:	7f 91       	pop	r23
 602:	6f 91       	pop	r22
 604:	5f 91       	pop	r21
 606:	4f 91       	pop	r20
 608:	3f 91       	pop	r19
 60a:	2f 91       	pop	r18
 60c:	1f 91       	pop	r17
 60e:	0f 91       	pop	r16
 610:	ff 90       	pop	r15
 612:	ef 90       	pop	r14
 614:	df 90       	pop	r13
 616:	cf 90       	pop	r12
 618:	bf 90       	pop	r11
 61a:	af 90       	pop	r10
 61c:	9f 90       	pop	r9
 61e:	8f 90       	pop	r8
 620:	7f 90       	pop	r7
 622:	6f 90       	pop	r6
 624:	5f 90       	pop	r5
 626:	4f 90       	pop	r4
 628:	3f 90       	pop	r3
 62a:	2f 90       	pop	r2
 62c:	1f 90       	pop	r1
 62e:	0f 90       	pop	r0
 630:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
 632:	0f 90       	pop	r0
 634:	08 95       	ret

00000636 <__vector_13>:
}
 636:	a6 df       	rcall	.-180    	; 0x584 <vPortYieldFromTick>
 638:	18 95       	reti

0000063a <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
 63a:	cf 93       	push	r28
 63c:	df 93       	push	r29
 63e:	ec 01       	movw	r28, r24
 640:	e0 91 e4 07 	lds	r30, 0x07E4	; 0x8007e4 <pxCurrentTCB>
 644:	f0 91 e5 07 	lds	r31, 0x07E5	; 0x8007e5 <pxCurrentTCB+0x1>
 648:	93 83       	std	Z+3, r25	; 0x03
 64a:	82 83       	std	Z+2, r24	; 0x02
 64c:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <xTickCount>
 650:	90 91 95 07 	lds	r25, 0x0795	; 0x800795 <xTickCount+0x1>
 654:	c8 17       	cp	r28, r24
 656:	d9 07       	cpc	r29, r25
 658:	60 f4       	brcc	.+24     	; 0x672 <prvAddCurrentTaskToDelayedList+0x38>
 65a:	60 91 e4 07 	lds	r22, 0x07E4	; 0x8007e4 <pxCurrentTCB>
 65e:	70 91 e5 07 	lds	r23, 0x07E5	; 0x8007e5 <pxCurrentTCB+0x1>
 662:	80 91 aa 07 	lds	r24, 0x07AA	; 0x8007aa <pxOverflowDelayedTaskList>
 666:	90 91 ab 07 	lds	r25, 0x07AB	; 0x8007ab <pxOverflowDelayedTaskList+0x1>
 66a:	6e 5f       	subi	r22, 0xFE	; 254
 66c:	7f 4f       	sbci	r23, 0xFF	; 255
 66e:	8a dd       	rcall	.-1260   	; 0x184 <vListInsert>
 670:	16 c0       	rjmp	.+44     	; 0x69e <prvAddCurrentTaskToDelayedList+0x64>
 672:	60 91 e4 07 	lds	r22, 0x07E4	; 0x8007e4 <pxCurrentTCB>
 676:	70 91 e5 07 	lds	r23, 0x07E5	; 0x8007e5 <pxCurrentTCB+0x1>
 67a:	80 91 ac 07 	lds	r24, 0x07AC	; 0x8007ac <pxDelayedTaskList>
 67e:	90 91 ad 07 	lds	r25, 0x07AD	; 0x8007ad <pxDelayedTaskList+0x1>
 682:	6e 5f       	subi	r22, 0xFE	; 254
 684:	7f 4f       	sbci	r23, 0xFF	; 255
 686:	7e dd       	rcall	.-1284   	; 0x184 <vListInsert>
 688:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 68c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 690:	c8 17       	cp	r28, r24
 692:	d9 07       	cpc	r29, r25
 694:	20 f4       	brcc	.+8      	; 0x69e <prvAddCurrentTaskToDelayedList+0x64>
 696:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_start+0x1>
 69a:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
 69e:	df 91       	pop	r29
 6a0:	cf 91       	pop	r28
 6a2:	08 95       	ret

000006a4 <xTaskGenericCreate>:
 6a4:	4f 92       	push	r4
 6a6:	5f 92       	push	r5
 6a8:	6f 92       	push	r6
 6aa:	7f 92       	push	r7
 6ac:	8f 92       	push	r8
 6ae:	9f 92       	push	r9
 6b0:	af 92       	push	r10
 6b2:	bf 92       	push	r11
 6b4:	cf 92       	push	r12
 6b6:	df 92       	push	r13
 6b8:	ef 92       	push	r14
 6ba:	ff 92       	push	r15
 6bc:	0f 93       	push	r16
 6be:	1f 93       	push	r17
 6c0:	cf 93       	push	r28
 6c2:	df 93       	push	r29
 6c4:	5c 01       	movw	r10, r24
 6c6:	4b 01       	movw	r8, r22
 6c8:	3a 01       	movw	r6, r20
 6ca:	29 01       	movw	r4, r18
 6cc:	81 e2       	ldi	r24, 0x21	; 33
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	fb dc       	rcall	.-1546   	; 0xc8 <pvPortMalloc>
 6d2:	ec 01       	movw	r28, r24
 6d4:	89 2b       	or	r24, r25
 6d6:	09 f4       	brne	.+2      	; 0x6da <xTaskGenericCreate+0x36>
 6d8:	c6 c0       	rjmp	.+396    	; 0x866 <xTaskGenericCreate+0x1c2>
 6da:	c1 14       	cp	r12, r1
 6dc:	d1 04       	cpc	r13, r1
 6de:	09 f0       	breq	.+2      	; 0x6e2 <xTaskGenericCreate+0x3e>
 6e0:	be c0       	rjmp	.+380    	; 0x85e <xTaskGenericCreate+0x1ba>
 6e2:	c3 01       	movw	r24, r6
 6e4:	f1 dc       	rcall	.-1566   	; 0xc8 <pvPortMalloc>
 6e6:	98 8f       	std	Y+24, r25	; 0x18
 6e8:	8f 8b       	std	Y+23, r24	; 0x17
 6ea:	00 97       	sbiw	r24, 0x00	; 0
 6ec:	19 f4       	brne	.+6      	; 0x6f4 <xTaskGenericCreate+0x50>
 6ee:	ce 01       	movw	r24, r28
 6f0:	0f dd       	rcall	.-1506   	; 0x110 <vPortFree>
 6f2:	b9 c0       	rjmp	.+370    	; 0x866 <xTaskGenericCreate+0x1c2>
 6f4:	a3 01       	movw	r20, r6
 6f6:	65 ea       	ldi	r22, 0xA5	; 165
 6f8:	70 e0       	ldi	r23, 0x00	; 0
 6fa:	f5 d2       	rcall	.+1514   	; 0xce6 <memset>
 6fc:	93 01       	movw	r18, r6
 6fe:	21 50       	subi	r18, 0x01	; 1
 700:	31 09       	sbc	r19, r1
 702:	8f 89       	ldd	r24, Y+23	; 0x17
 704:	98 8d       	ldd	r25, Y+24	; 0x18
 706:	3c 01       	movw	r6, r24
 708:	62 0e       	add	r6, r18
 70a:	73 1e       	adc	r7, r19
 70c:	48 e0       	ldi	r20, 0x08	; 8
 70e:	50 e0       	ldi	r21, 0x00	; 0
 710:	b4 01       	movw	r22, r8
 712:	ce 01       	movw	r24, r28
 714:	49 96       	adiw	r24, 0x19	; 25
 716:	ee d2       	rcall	.+1500   	; 0xcf4 <strncpy>
 718:	18 a2       	std	Y+32, r1	; 0x20
 71a:	10 2f       	mov	r17, r16
 71c:	04 30       	cpi	r16, 0x04	; 4
 71e:	08 f0       	brcs	.+2      	; 0x722 <xTaskGenericCreate+0x7e>
 720:	13 e0       	ldi	r17, 0x03	; 3
 722:	1e 8b       	std	Y+22, r17	; 0x16
 724:	6e 01       	movw	r12, r28
 726:	82 e0       	ldi	r24, 0x02	; 2
 728:	c8 0e       	add	r12, r24
 72a:	d1 1c       	adc	r13, r1
 72c:	c6 01       	movw	r24, r12
 72e:	ff dc       	rcall	.-1538   	; 0x12e <vListInitialiseItem>
 730:	ce 01       	movw	r24, r28
 732:	0c 96       	adiw	r24, 0x0c	; 12
 734:	fc dc       	rcall	.-1544   	; 0x12e <vListInitialiseItem>
 736:	d9 87       	std	Y+9, r29	; 0x09
 738:	c8 87       	std	Y+8, r28	; 0x08
 73a:	84 e0       	ldi	r24, 0x04	; 4
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	81 1b       	sub	r24, r17
 740:	91 09       	sbc	r25, r1
 742:	9d 87       	std	Y+13, r25	; 0x0d
 744:	8c 87       	std	Y+12, r24	; 0x0c
 746:	db 8b       	std	Y+19, r29	; 0x13
 748:	ca 8b       	std	Y+18, r28	; 0x12
 74a:	a2 01       	movw	r20, r4
 74c:	b5 01       	movw	r22, r10
 74e:	c3 01       	movw	r24, r6
 750:	1b de       	rcall	.-970    	; 0x388 <pxPortInitialiseStack>
 752:	99 83       	std	Y+1, r25	; 0x01
 754:	88 83       	st	Y, r24
 756:	e1 14       	cp	r14, r1
 758:	f1 04       	cpc	r15, r1
 75a:	19 f0       	breq	.+6      	; 0x762 <xTaskGenericCreate+0xbe>
 75c:	f7 01       	movw	r30, r14
 75e:	d1 83       	std	Z+1, r29	; 0x01
 760:	c0 83       	st	Z, r28
 762:	0f b6       	in	r0, 0x3f	; 63
 764:	f8 94       	cli
 766:	0f 92       	push	r0
 768:	80 91 96 07 	lds	r24, 0x0796	; 0x800796 <uxCurrentNumberOfTasks>
 76c:	8f 5f       	subi	r24, 0xFF	; 255
 76e:	80 93 96 07 	sts	0x0796, r24	; 0x800796 <uxCurrentNumberOfTasks>
 772:	80 91 e4 07 	lds	r24, 0x07E4	; 0x8007e4 <pxCurrentTCB>
 776:	90 91 e5 07 	lds	r25, 0x07E5	; 0x8007e5 <pxCurrentTCB+0x1>
 77a:	89 2b       	or	r24, r25
 77c:	69 f5       	brne	.+90     	; 0x7d8 <xTaskGenericCreate+0x134>
 77e:	d0 93 e5 07 	sts	0x07E5, r29	; 0x8007e5 <pxCurrentTCB+0x1>
 782:	c0 93 e4 07 	sts	0x07E4, r28	; 0x8007e4 <pxCurrentTCB>
 786:	80 91 96 07 	lds	r24, 0x0796	; 0x800796 <uxCurrentNumberOfTasks>
 78a:	81 30       	cpi	r24, 0x01	; 1
 78c:	a1 f5       	brne	.+104    	; 0x7f6 <xTaskGenericCreate+0x152>
 78e:	80 ec       	ldi	r24, 0xC0	; 192
 790:	97 e0       	ldi	r25, 0x07	; 7
 792:	bf dc       	rcall	.-1666   	; 0x112 <vListInitialise>
 794:	89 ec       	ldi	r24, 0xC9	; 201
 796:	97 e0       	ldi	r25, 0x07	; 7
 798:	bc dc       	rcall	.-1672   	; 0x112 <vListInitialise>
 79a:	82 ed       	ldi	r24, 0xD2	; 210
 79c:	97 e0       	ldi	r25, 0x07	; 7
 79e:	b9 dc       	rcall	.-1678   	; 0x112 <vListInitialise>
 7a0:	8b ed       	ldi	r24, 0xDB	; 219
 7a2:	97 e0       	ldi	r25, 0x07	; 7
 7a4:	b6 dc       	rcall	.-1684   	; 0x112 <vListInitialise>
 7a6:	87 eb       	ldi	r24, 0xB7	; 183
 7a8:	97 e0       	ldi	r25, 0x07	; 7
 7aa:	b3 dc       	rcall	.-1690   	; 0x112 <vListInitialise>
 7ac:	8e ea       	ldi	r24, 0xAE	; 174
 7ae:	97 e0       	ldi	r25, 0x07	; 7
 7b0:	b0 dc       	rcall	.-1696   	; 0x112 <vListInitialise>
 7b2:	81 ea       	ldi	r24, 0xA1	; 161
 7b4:	97 e0       	ldi	r25, 0x07	; 7
 7b6:	ad dc       	rcall	.-1702   	; 0x112 <vListInitialise>
 7b8:	88 e9       	ldi	r24, 0x98	; 152
 7ba:	97 e0       	ldi	r25, 0x07	; 7
 7bc:	aa dc       	rcall	.-1708   	; 0x112 <vListInitialise>
 7be:	87 eb       	ldi	r24, 0xB7	; 183
 7c0:	97 e0       	ldi	r25, 0x07	; 7
 7c2:	90 93 ad 07 	sts	0x07AD, r25	; 0x8007ad <pxDelayedTaskList+0x1>
 7c6:	80 93 ac 07 	sts	0x07AC, r24	; 0x8007ac <pxDelayedTaskList>
 7ca:	8e ea       	ldi	r24, 0xAE	; 174
 7cc:	97 e0       	ldi	r25, 0x07	; 7
 7ce:	90 93 ab 07 	sts	0x07AB, r25	; 0x8007ab <pxOverflowDelayedTaskList+0x1>
 7d2:	80 93 aa 07 	sts	0x07AA, r24	; 0x8007aa <pxOverflowDelayedTaskList>
 7d6:	0f c0       	rjmp	.+30     	; 0x7f6 <xTaskGenericCreate+0x152>
 7d8:	80 91 91 07 	lds	r24, 0x0791	; 0x800791 <xSchedulerRunning>
 7dc:	81 11       	cpse	r24, r1
 7de:	0b c0       	rjmp	.+22     	; 0x7f6 <xTaskGenericCreate+0x152>
 7e0:	e0 91 e4 07 	lds	r30, 0x07E4	; 0x8007e4 <pxCurrentTCB>
 7e4:	f0 91 e5 07 	lds	r31, 0x07E5	; 0x8007e5 <pxCurrentTCB+0x1>
 7e8:	86 89       	ldd	r24, Z+22	; 0x16
 7ea:	08 17       	cp	r16, r24
 7ec:	20 f0       	brcs	.+8      	; 0x7f6 <xTaskGenericCreate+0x152>
 7ee:	d0 93 e5 07 	sts	0x07E5, r29	; 0x8007e5 <pxCurrentTCB+0x1>
 7f2:	c0 93 e4 07 	sts	0x07E4, r28	; 0x8007e4 <pxCurrentTCB>
 7f6:	8e 89       	ldd	r24, Y+22	; 0x16
 7f8:	90 91 93 07 	lds	r25, 0x0793	; 0x800793 <uxTopUsedPriority>
 7fc:	98 17       	cp	r25, r24
 7fe:	10 f4       	brcc	.+4      	; 0x804 <xTaskGenericCreate+0x160>
 800:	80 93 93 07 	sts	0x0793, r24	; 0x800793 <uxTopUsedPriority>
 804:	90 91 8c 07 	lds	r25, 0x078C	; 0x80078c <uxTaskNumber>
 808:	9f 5f       	subi	r25, 0xFF	; 255
 80a:	90 93 8c 07 	sts	0x078C, r25	; 0x80078c <uxTaskNumber>
 80e:	90 91 92 07 	lds	r25, 0x0792	; 0x800792 <uxTopReadyPriority>
 812:	98 17       	cp	r25, r24
 814:	10 f4       	brcc	.+4      	; 0x81a <xTaskGenericCreate+0x176>
 816:	80 93 92 07 	sts	0x0792, r24	; 0x800792 <uxTopReadyPriority>
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	9c 01       	movw	r18, r24
 81e:	22 0f       	add	r18, r18
 820:	33 1f       	adc	r19, r19
 822:	22 0f       	add	r18, r18
 824:	33 1f       	adc	r19, r19
 826:	22 0f       	add	r18, r18
 828:	33 1f       	adc	r19, r19
 82a:	82 0f       	add	r24, r18
 82c:	93 1f       	adc	r25, r19
 82e:	b6 01       	movw	r22, r12
 830:	80 54       	subi	r24, 0x40	; 64
 832:	98 4f       	sbci	r25, 0xF8	; 248
 834:	80 dc       	rcall	.-1792   	; 0x136 <vListInsertEnd>
 836:	0f 90       	pop	r0
 838:	0f be       	out	0x3f, r0	; 63
 83a:	80 91 91 07 	lds	r24, 0x0791	; 0x800791 <xSchedulerRunning>
 83e:	88 23       	and	r24, r24
 840:	51 f0       	breq	.+20     	; 0x856 <xTaskGenericCreate+0x1b2>
 842:	e0 91 e4 07 	lds	r30, 0x07E4	; 0x8007e4 <pxCurrentTCB>
 846:	f0 91 e5 07 	lds	r31, 0x07E5	; 0x8007e5 <pxCurrentTCB+0x1>
 84a:	86 89       	ldd	r24, Z+22	; 0x16
 84c:	80 17       	cp	r24, r16
 84e:	28 f4       	brcc	.+10     	; 0x85a <xTaskGenericCreate+0x1b6>
 850:	41 de       	rcall	.-894    	; 0x4d4 <vPortYield>
 852:	81 e0       	ldi	r24, 0x01	; 1
 854:	09 c0       	rjmp	.+18     	; 0x868 <xTaskGenericCreate+0x1c4>
 856:	81 e0       	ldi	r24, 0x01	; 1
 858:	07 c0       	rjmp	.+14     	; 0x868 <xTaskGenericCreate+0x1c4>
 85a:	81 e0       	ldi	r24, 0x01	; 1
 85c:	05 c0       	rjmp	.+10     	; 0x868 <xTaskGenericCreate+0x1c4>
 85e:	d8 8e       	std	Y+24, r13	; 0x18
 860:	cf 8a       	std	Y+23, r12	; 0x17
 862:	c6 01       	movw	r24, r12
 864:	47 cf       	rjmp	.-370    	; 0x6f4 <xTaskGenericCreate+0x50>
 866:	8f ef       	ldi	r24, 0xFF	; 255
 868:	df 91       	pop	r29
 86a:	cf 91       	pop	r28
 86c:	1f 91       	pop	r17
 86e:	0f 91       	pop	r16
 870:	ff 90       	pop	r15
 872:	ef 90       	pop	r14
 874:	df 90       	pop	r13
 876:	cf 90       	pop	r12
 878:	bf 90       	pop	r11
 87a:	af 90       	pop	r10
 87c:	9f 90       	pop	r9
 87e:	8f 90       	pop	r8
 880:	7f 90       	pop	r7
 882:	6f 90       	pop	r6
 884:	5f 90       	pop	r5
 886:	4f 90       	pop	r4
 888:	08 95       	ret

0000088a <vTaskStartScheduler>:
 88a:	af 92       	push	r10
 88c:	bf 92       	push	r11
 88e:	cf 92       	push	r12
 890:	df 92       	push	r13
 892:	ef 92       	push	r14
 894:	ff 92       	push	r15
 896:	0f 93       	push	r16
 898:	a1 2c       	mov	r10, r1
 89a:	b1 2c       	mov	r11, r1
 89c:	c1 2c       	mov	r12, r1
 89e:	d1 2c       	mov	r13, r1
 8a0:	e1 2c       	mov	r14, r1
 8a2:	f1 2c       	mov	r15, r1
 8a4:	00 e0       	ldi	r16, 0x00	; 0
 8a6:	20 e0       	ldi	r18, 0x00	; 0
 8a8:	30 e0       	ldi	r19, 0x00	; 0
 8aa:	45 e5       	ldi	r20, 0x55	; 85
 8ac:	50 e0       	ldi	r21, 0x00	; 0
 8ae:	66 ea       	ldi	r22, 0xA6	; 166
 8b0:	71 e0       	ldi	r23, 0x01	; 1
 8b2:	81 ed       	ldi	r24, 0xD1	; 209
 8b4:	95 e0       	ldi	r25, 0x05	; 5
 8b6:	f6 de       	rcall	.-532    	; 0x6a4 <xTaskGenericCreate>
 8b8:	81 30       	cpi	r24, 0x01	; 1
 8ba:	41 f4       	brne	.+16     	; 0x8cc <vTaskStartScheduler+0x42>
 8bc:	f8 94       	cli
 8be:	80 93 91 07 	sts	0x0791, r24	; 0x800791 <xSchedulerRunning>
 8c2:	10 92 95 07 	sts	0x0795, r1	; 0x800795 <xTickCount+0x1>
 8c6:	10 92 94 07 	sts	0x0794, r1	; 0x800794 <xTickCount>
 8ca:	ca dd       	rcall	.-1132   	; 0x460 <xPortStartScheduler>
 8cc:	0f 91       	pop	r16
 8ce:	ff 90       	pop	r15
 8d0:	ef 90       	pop	r14
 8d2:	df 90       	pop	r13
 8d4:	cf 90       	pop	r12
 8d6:	bf 90       	pop	r11
 8d8:	af 90       	pop	r10
 8da:	08 95       	ret

000008dc <vTaskSuspendAll>:
 8dc:	80 91 90 07 	lds	r24, 0x0790	; 0x800790 <uxSchedulerSuspended>
 8e0:	8f 5f       	subi	r24, 0xFF	; 255
 8e2:	80 93 90 07 	sts	0x0790, r24	; 0x800790 <uxSchedulerSuspended>
 8e6:	08 95       	ret

000008e8 <vTaskIncrementTick>:
 8e8:	0f 93       	push	r16
 8ea:	1f 93       	push	r17
 8ec:	cf 93       	push	r28
 8ee:	df 93       	push	r29
 8f0:	80 91 90 07 	lds	r24, 0x0790	; 0x800790 <uxSchedulerSuspended>
 8f4:	81 11       	cpse	r24, r1
 8f6:	af c0       	rjmp	.+350    	; 0xa56 <vTaskIncrementTick+0x16e>
 8f8:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <xTickCount>
 8fc:	90 91 95 07 	lds	r25, 0x0795	; 0x800795 <xTickCount+0x1>
 900:	01 96       	adiw	r24, 0x01	; 1
 902:	90 93 95 07 	sts	0x0795, r25	; 0x800795 <xTickCount+0x1>
 906:	80 93 94 07 	sts	0x0794, r24	; 0x800794 <xTickCount>
 90a:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <xTickCount>
 90e:	90 91 95 07 	lds	r25, 0x0795	; 0x800795 <xTickCount+0x1>
 912:	89 2b       	or	r24, r25
 914:	99 f5       	brne	.+102    	; 0x97c <vTaskIncrementTick+0x94>
 916:	80 91 ac 07 	lds	r24, 0x07AC	; 0x8007ac <pxDelayedTaskList>
 91a:	90 91 ad 07 	lds	r25, 0x07AD	; 0x8007ad <pxDelayedTaskList+0x1>
 91e:	20 91 aa 07 	lds	r18, 0x07AA	; 0x8007aa <pxOverflowDelayedTaskList>
 922:	30 91 ab 07 	lds	r19, 0x07AB	; 0x8007ab <pxOverflowDelayedTaskList+0x1>
 926:	30 93 ad 07 	sts	0x07AD, r19	; 0x8007ad <pxDelayedTaskList+0x1>
 92a:	20 93 ac 07 	sts	0x07AC, r18	; 0x8007ac <pxDelayedTaskList>
 92e:	90 93 ab 07 	sts	0x07AB, r25	; 0x8007ab <pxOverflowDelayedTaskList+0x1>
 932:	80 93 aa 07 	sts	0x07AA, r24	; 0x8007aa <pxOverflowDelayedTaskList>
 936:	80 91 8d 07 	lds	r24, 0x078D	; 0x80078d <xNumOfOverflows>
 93a:	8f 5f       	subi	r24, 0xFF	; 255
 93c:	80 93 8d 07 	sts	0x078D, r24	; 0x80078d <xNumOfOverflows>
 940:	e0 91 ac 07 	lds	r30, 0x07AC	; 0x8007ac <pxDelayedTaskList>
 944:	f0 91 ad 07 	lds	r31, 0x07AD	; 0x8007ad <pxDelayedTaskList+0x1>
 948:	80 81       	ld	r24, Z
 94a:	81 11       	cpse	r24, r1
 94c:	07 c0       	rjmp	.+14     	; 0x95c <vTaskIncrementTick+0x74>
 94e:	8f ef       	ldi	r24, 0xFF	; 255
 950:	9f ef       	ldi	r25, 0xFF	; 255
 952:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 956:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 95a:	10 c0       	rjmp	.+32     	; 0x97c <vTaskIncrementTick+0x94>
 95c:	e0 91 ac 07 	lds	r30, 0x07AC	; 0x8007ac <pxDelayedTaskList>
 960:	f0 91 ad 07 	lds	r31, 0x07AD	; 0x8007ad <pxDelayedTaskList+0x1>
 964:	05 80       	ldd	r0, Z+5	; 0x05
 966:	f6 81       	ldd	r31, Z+6	; 0x06
 968:	e0 2d       	mov	r30, r0
 96a:	06 80       	ldd	r0, Z+6	; 0x06
 96c:	f7 81       	ldd	r31, Z+7	; 0x07
 96e:	e0 2d       	mov	r30, r0
 970:	82 81       	ldd	r24, Z+2	; 0x02
 972:	93 81       	ldd	r25, Z+3	; 0x03
 974:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 978:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 97c:	20 91 94 07 	lds	r18, 0x0794	; 0x800794 <xTickCount>
 980:	30 91 95 07 	lds	r19, 0x0795	; 0x800795 <xTickCount+0x1>
 984:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 988:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 98c:	28 17       	cp	r18, r24
 98e:	39 07       	cpc	r19, r25
 990:	08 f4       	brcc	.+2      	; 0x994 <vTaskIncrementTick+0xac>
 992:	66 c0       	rjmp	.+204    	; 0xa60 <vTaskIncrementTick+0x178>
 994:	e0 91 ac 07 	lds	r30, 0x07AC	; 0x8007ac <pxDelayedTaskList>
 998:	f0 91 ad 07 	lds	r31, 0x07AD	; 0x8007ad <pxDelayedTaskList+0x1>
 99c:	80 81       	ld	r24, Z
 99e:	88 23       	and	r24, r24
 9a0:	99 f0       	breq	.+38     	; 0x9c8 <vTaskIncrementTick+0xe0>
 9a2:	e0 91 ac 07 	lds	r30, 0x07AC	; 0x8007ac <pxDelayedTaskList>
 9a6:	f0 91 ad 07 	lds	r31, 0x07AD	; 0x8007ad <pxDelayedTaskList+0x1>
 9aa:	05 80       	ldd	r0, Z+5	; 0x05
 9ac:	f6 81       	ldd	r31, Z+6	; 0x06
 9ae:	e0 2d       	mov	r30, r0
 9b0:	c6 81       	ldd	r28, Z+6	; 0x06
 9b2:	d7 81       	ldd	r29, Z+7	; 0x07
 9b4:	8a 81       	ldd	r24, Y+2	; 0x02
 9b6:	9b 81       	ldd	r25, Y+3	; 0x03
 9b8:	20 91 94 07 	lds	r18, 0x0794	; 0x800794 <xTickCount>
 9bc:	30 91 95 07 	lds	r19, 0x0795	; 0x800795 <xTickCount+0x1>
 9c0:	28 17       	cp	r18, r24
 9c2:	39 07       	cpc	r19, r25
 9c4:	f8 f4       	brcc	.+62     	; 0xa04 <vTaskIncrementTick+0x11c>
 9c6:	19 c0       	rjmp	.+50     	; 0x9fa <vTaskIncrementTick+0x112>
 9c8:	8f ef       	ldi	r24, 0xFF	; 255
 9ca:	9f ef       	ldi	r25, 0xFF	; 255
 9cc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 9d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 9d4:	45 c0       	rjmp	.+138    	; 0xa60 <vTaskIncrementTick+0x178>
 9d6:	e0 91 ac 07 	lds	r30, 0x07AC	; 0x8007ac <pxDelayedTaskList>
 9da:	f0 91 ad 07 	lds	r31, 0x07AD	; 0x8007ad <pxDelayedTaskList+0x1>
 9de:	05 80       	ldd	r0, Z+5	; 0x05
 9e0:	f6 81       	ldd	r31, Z+6	; 0x06
 9e2:	e0 2d       	mov	r30, r0
 9e4:	c6 81       	ldd	r28, Z+6	; 0x06
 9e6:	d7 81       	ldd	r29, Z+7	; 0x07
 9e8:	8a 81       	ldd	r24, Y+2	; 0x02
 9ea:	9b 81       	ldd	r25, Y+3	; 0x03
 9ec:	20 91 94 07 	lds	r18, 0x0794	; 0x800794 <xTickCount>
 9f0:	30 91 95 07 	lds	r19, 0x0795	; 0x800795 <xTickCount+0x1>
 9f4:	28 17       	cp	r18, r24
 9f6:	39 07       	cpc	r19, r25
 9f8:	28 f4       	brcc	.+10     	; 0xa04 <vTaskIncrementTick+0x11c>
 9fa:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 9fe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 a02:	2e c0       	rjmp	.+92     	; 0xa60 <vTaskIncrementTick+0x178>
 a04:	8e 01       	movw	r16, r28
 a06:	0e 5f       	subi	r16, 0xFE	; 254
 a08:	1f 4f       	sbci	r17, 0xFF	; 255
 a0a:	c8 01       	movw	r24, r16
 a0c:	f6 db       	rcall	.-2068   	; 0x1fa <vListRemove>
 a0e:	8c 89       	ldd	r24, Y+20	; 0x14
 a10:	9d 89       	ldd	r25, Y+21	; 0x15
 a12:	89 2b       	or	r24, r25
 a14:	19 f0       	breq	.+6      	; 0xa1c <vTaskIncrementTick+0x134>
 a16:	ce 01       	movw	r24, r28
 a18:	0c 96       	adiw	r24, 0x0c	; 12
 a1a:	ef db       	rcall	.-2082   	; 0x1fa <vListRemove>
 a1c:	8e 89       	ldd	r24, Y+22	; 0x16
 a1e:	90 91 92 07 	lds	r25, 0x0792	; 0x800792 <uxTopReadyPriority>
 a22:	98 17       	cp	r25, r24
 a24:	10 f4       	brcc	.+4      	; 0xa2a <vTaskIncrementTick+0x142>
 a26:	80 93 92 07 	sts	0x0792, r24	; 0x800792 <uxTopReadyPriority>
 a2a:	90 e0       	ldi	r25, 0x00	; 0
 a2c:	9c 01       	movw	r18, r24
 a2e:	22 0f       	add	r18, r18
 a30:	33 1f       	adc	r19, r19
 a32:	22 0f       	add	r18, r18
 a34:	33 1f       	adc	r19, r19
 a36:	22 0f       	add	r18, r18
 a38:	33 1f       	adc	r19, r19
 a3a:	82 0f       	add	r24, r18
 a3c:	93 1f       	adc	r25, r19
 a3e:	b8 01       	movw	r22, r16
 a40:	80 54       	subi	r24, 0x40	; 64
 a42:	98 4f       	sbci	r25, 0xF8	; 248
 a44:	78 db       	rcall	.-2320   	; 0x136 <vListInsertEnd>
 a46:	e0 91 ac 07 	lds	r30, 0x07AC	; 0x8007ac <pxDelayedTaskList>
 a4a:	f0 91 ad 07 	lds	r31, 0x07AD	; 0x8007ad <pxDelayedTaskList+0x1>
 a4e:	80 81       	ld	r24, Z
 a50:	81 11       	cpse	r24, r1
 a52:	c1 cf       	rjmp	.-126    	; 0x9d6 <vTaskIncrementTick+0xee>
 a54:	b9 cf       	rjmp	.-142    	; 0x9c8 <vTaskIncrementTick+0xe0>
 a56:	80 91 8f 07 	lds	r24, 0x078F	; 0x80078f <uxMissedTicks>
 a5a:	8f 5f       	subi	r24, 0xFF	; 255
 a5c:	80 93 8f 07 	sts	0x078F, r24	; 0x80078f <uxMissedTicks>
 a60:	df 91       	pop	r29
 a62:	cf 91       	pop	r28
 a64:	1f 91       	pop	r17
 a66:	0f 91       	pop	r16
 a68:	08 95       	ret

00000a6a <xTaskResumeAll>:
 a6a:	cf 92       	push	r12
 a6c:	df 92       	push	r13
 a6e:	ef 92       	push	r14
 a70:	ff 92       	push	r15
 a72:	0f 93       	push	r16
 a74:	1f 93       	push	r17
 a76:	cf 93       	push	r28
 a78:	df 93       	push	r29
 a7a:	0f b6       	in	r0, 0x3f	; 63
 a7c:	f8 94       	cli
 a7e:	0f 92       	push	r0
 a80:	80 91 90 07 	lds	r24, 0x0790	; 0x800790 <uxSchedulerSuspended>
 a84:	81 50       	subi	r24, 0x01	; 1
 a86:	80 93 90 07 	sts	0x0790, r24	; 0x800790 <uxSchedulerSuspended>
 a8a:	80 91 90 07 	lds	r24, 0x0790	; 0x800790 <uxSchedulerSuspended>
 a8e:	81 11       	cpse	r24, r1
 a90:	5f c0       	rjmp	.+190    	; 0xb50 <xTaskResumeAll+0xe6>
 a92:	80 91 96 07 	lds	r24, 0x0796	; 0x800796 <uxCurrentNumberOfTasks>
 a96:	81 11       	cpse	r24, r1
 a98:	2f c0       	rjmp	.+94     	; 0xaf8 <xTaskResumeAll+0x8e>
 a9a:	5d c0       	rjmp	.+186    	; 0xb56 <xTaskResumeAll+0xec>
 a9c:	d7 01       	movw	r26, r14
 a9e:	15 96       	adiw	r26, 0x05	; 5
 aa0:	ed 91       	ld	r30, X+
 aa2:	fc 91       	ld	r31, X
 aa4:	16 97       	sbiw	r26, 0x06	; 6
 aa6:	c6 81       	ldd	r28, Z+6	; 0x06
 aa8:	d7 81       	ldd	r29, Z+7	; 0x07
 aaa:	ce 01       	movw	r24, r28
 aac:	0c 96       	adiw	r24, 0x0c	; 12
 aae:	a5 db       	rcall	.-2230   	; 0x1fa <vListRemove>
 ab0:	8e 01       	movw	r16, r28
 ab2:	0e 5f       	subi	r16, 0xFE	; 254
 ab4:	1f 4f       	sbci	r17, 0xFF	; 255
 ab6:	c8 01       	movw	r24, r16
 ab8:	a0 db       	rcall	.-2240   	; 0x1fa <vListRemove>
 aba:	8e 89       	ldd	r24, Y+22	; 0x16
 abc:	90 91 92 07 	lds	r25, 0x0792	; 0x800792 <uxTopReadyPriority>
 ac0:	98 17       	cp	r25, r24
 ac2:	10 f4       	brcc	.+4      	; 0xac8 <xTaskResumeAll+0x5e>
 ac4:	80 93 92 07 	sts	0x0792, r24	; 0x800792 <uxTopReadyPriority>
 ac8:	90 e0       	ldi	r25, 0x00	; 0
 aca:	9c 01       	movw	r18, r24
 acc:	22 0f       	add	r18, r18
 ace:	33 1f       	adc	r19, r19
 ad0:	22 0f       	add	r18, r18
 ad2:	33 1f       	adc	r19, r19
 ad4:	22 0f       	add	r18, r18
 ad6:	33 1f       	adc	r19, r19
 ad8:	82 0f       	add	r24, r18
 ada:	93 1f       	adc	r25, r19
 adc:	b8 01       	movw	r22, r16
 ade:	80 54       	subi	r24, 0x40	; 64
 ae0:	98 4f       	sbci	r25, 0xF8	; 248
 ae2:	29 db       	rcall	.-2478   	; 0x136 <vListInsertEnd>
 ae4:	e0 91 e4 07 	lds	r30, 0x07E4	; 0x8007e4 <pxCurrentTCB>
 ae8:	f0 91 e5 07 	lds	r31, 0x07E5	; 0x8007e5 <pxCurrentTCB+0x1>
 aec:	9e 89       	ldd	r25, Y+22	; 0x16
 aee:	86 89       	ldd	r24, Z+22	; 0x16
 af0:	98 17       	cp	r25, r24
 af2:	58 f0       	brcs	.+22     	; 0xb0a <xTaskResumeAll+0xa0>
 af4:	dc 2c       	mov	r13, r12
 af6:	09 c0       	rjmp	.+18     	; 0xb0a <xTaskResumeAll+0xa0>
 af8:	d1 2c       	mov	r13, r1
 afa:	0f 2e       	mov	r0, r31
 afc:	f1 ea       	ldi	r31, 0xA1	; 161
 afe:	ef 2e       	mov	r14, r31
 b00:	f7 e0       	ldi	r31, 0x07	; 7
 b02:	ff 2e       	mov	r15, r31
 b04:	f0 2d       	mov	r31, r0
 b06:	cc 24       	eor	r12, r12
 b08:	c3 94       	inc	r12
 b0a:	f7 01       	movw	r30, r14
 b0c:	80 81       	ld	r24, Z
 b0e:	81 11       	cpse	r24, r1
 b10:	c5 cf       	rjmp	.-118    	; 0xa9c <xTaskResumeAll+0x32>
 b12:	80 91 8f 07 	lds	r24, 0x078F	; 0x80078f <uxMissedTicks>
 b16:	88 23       	and	r24, r24
 b18:	79 f0       	breq	.+30     	; 0xb38 <xTaskResumeAll+0xce>
 b1a:	80 91 8f 07 	lds	r24, 0x078F	; 0x80078f <uxMissedTicks>
 b1e:	88 23       	and	r24, r24
 b20:	91 f0       	breq	.+36     	; 0xb46 <xTaskResumeAll+0xdc>
 b22:	e2 de       	rcall	.-572    	; 0x8e8 <vTaskIncrementTick>
 b24:	80 91 8f 07 	lds	r24, 0x078F	; 0x80078f <uxMissedTicks>
 b28:	81 50       	subi	r24, 0x01	; 1
 b2a:	80 93 8f 07 	sts	0x078F, r24	; 0x80078f <uxMissedTicks>
 b2e:	80 91 8f 07 	lds	r24, 0x078F	; 0x80078f <uxMissedTicks>
 b32:	81 11       	cpse	r24, r1
 b34:	f6 cf       	rjmp	.-20     	; 0xb22 <xTaskResumeAll+0xb8>
 b36:	07 c0       	rjmp	.+14     	; 0xb46 <xTaskResumeAll+0xdc>
 b38:	f1 e0       	ldi	r31, 0x01	; 1
 b3a:	df 16       	cp	r13, r31
 b3c:	21 f0       	breq	.+8      	; 0xb46 <xTaskResumeAll+0xdc>
 b3e:	80 91 8e 07 	lds	r24, 0x078E	; 0x80078e <xMissedYield>
 b42:	81 30       	cpi	r24, 0x01	; 1
 b44:	39 f4       	brne	.+14     	; 0xb54 <xTaskResumeAll+0xea>
 b46:	10 92 8e 07 	sts	0x078E, r1	; 0x80078e <xMissedYield>
 b4a:	c4 dc       	rcall	.-1656   	; 0x4d4 <vPortYield>
 b4c:	81 e0       	ldi	r24, 0x01	; 1
 b4e:	03 c0       	rjmp	.+6      	; 0xb56 <xTaskResumeAll+0xec>
 b50:	80 e0       	ldi	r24, 0x00	; 0
 b52:	01 c0       	rjmp	.+2      	; 0xb56 <xTaskResumeAll+0xec>
 b54:	80 e0       	ldi	r24, 0x00	; 0
 b56:	0f 90       	pop	r0
 b58:	0f be       	out	0x3f, r0	; 63
 b5a:	df 91       	pop	r29
 b5c:	cf 91       	pop	r28
 b5e:	1f 91       	pop	r17
 b60:	0f 91       	pop	r16
 b62:	ff 90       	pop	r15
 b64:	ef 90       	pop	r14
 b66:	df 90       	pop	r13
 b68:	cf 90       	pop	r12
 b6a:	08 95       	ret

00000b6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 b6c:	cf 93       	push	r28
 b6e:	df 93       	push	r29
 b70:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 b72:	89 2b       	or	r24, r25
		{
			vTaskSuspendAll();
 b74:	91 f0       	breq	.+36     	; 0xb9a <vTaskDelay+0x2e>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 b76:	b2 de       	rcall	.-668    	; 0x8dc <vTaskSuspendAll>
 b78:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <xTickCount>
 b7c:	90 91 95 07 	lds	r25, 0x0795	; 0x800795 <xTickCount+0x1>
 b80:	c8 0f       	add	r28, r24

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 b82:	d9 1f       	adc	r29, r25
 b84:	80 91 e4 07 	lds	r24, 0x07E4	; 0x8007e4 <pxCurrentTCB>
 b88:	90 91 e5 07 	lds	r25, 0x07E5	; 0x8007e5 <pxCurrentTCB+0x1>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
			}
			xAlreadyYielded = xTaskResumeAll();
 b8c:	02 96       	adiw	r24, 0x02	; 2
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 b8e:	35 db       	rcall	.-2454   	; 0x1fa <vListRemove>
 b90:	ce 01       	movw	r24, r28
		{
			portYIELD_WITHIN_API();
 b92:	53 dd       	rcall	.-1370   	; 0x63a <prvAddCurrentTaskToDelayedList>
 b94:	6a df       	rcall	.-300    	; 0xa6a <xTaskResumeAll>
		}
	}
 b96:	81 11       	cpse	r24, r1
 b98:	01 c0       	rjmp	.+2      	; 0xb9c <vTaskDelay+0x30>
 b9a:	9c dc       	rcall	.-1736   	; 0x4d4 <vPortYield>
 b9c:	df 91       	pop	r29
 b9e:	cf 91       	pop	r28
 ba0:	08 95       	ret

00000ba2 <prvIdleTask>:
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 ba2:	0f 2e       	mov	r0, r31
 ba4:	f8 e9       	ldi	r31, 0x98	; 152
 ba6:	ef 2e       	mov	r14, r31
 ba8:	f7 e0       	ldi	r31, 0x07	; 7
 baa:	ff 2e       	mov	r15, r31
 bac:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 bae:	c0 ec       	ldi	r28, 0xC0	; 192
 bb0:	d7 e0       	ldi	r29, 0x07	; 7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 bb2:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <uxTasksDeleted>
 bb6:	88 23       	and	r24, r24
		{
			vTaskSuspendAll();
 bb8:	29 f1       	breq	.+74     	; 0xc04 <prvIdleTask+0x62>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 bba:	90 de       	rcall	.-736    	; 0x8dc <vTaskSuspendAll>
			xTaskResumeAll();
 bbc:	d7 01       	movw	r26, r14
 bbe:	1c 91       	ld	r17, X

			if( xListIsEmpty == pdFALSE )
 bc0:	54 df       	rcall	.-344    	; 0xa6a <xTaskResumeAll>
 bc2:	11 23       	and	r17, r17
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 bc4:	f9 f0       	breq	.+62     	; 0xc04 <prvIdleTask+0x62>
 bc6:	0f b6       	in	r0, 0x3f	; 63
 bc8:	f8 94       	cli
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 bca:	0f 92       	push	r0
 bcc:	d7 01       	movw	r26, r14
 bce:	15 96       	adiw	r26, 0x05	; 5
 bd0:	ed 91       	ld	r30, X+
 bd2:	fc 91       	ld	r31, X
 bd4:	16 97       	sbiw	r26, 0x06	; 6
					vListRemove( &( pxTCB->xGenericListItem ) );
 bd6:	06 81       	ldd	r16, Z+6	; 0x06
 bd8:	17 81       	ldd	r17, Z+7	; 0x07
 bda:	c8 01       	movw	r24, r16
					--uxCurrentNumberOfTasks;
 bdc:	02 96       	adiw	r24, 0x02	; 2
 bde:	0d db       	rcall	.-2534   	; 0x1fa <vListRemove>
 be0:	80 91 96 07 	lds	r24, 0x0796	; 0x800796 <uxCurrentNumberOfTasks>
 be4:	81 50       	subi	r24, 0x01	; 1
					--uxTasksDeleted;
 be6:	80 93 96 07 	sts	0x0796, r24	; 0x800796 <uxCurrentNumberOfTasks>
 bea:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <uxTasksDeleted>
 bee:	81 50       	subi	r24, 0x01	; 1
				}
				taskEXIT_CRITICAL();
 bf0:	80 93 97 07 	sts	0x0797, r24	; 0x800797 <uxTasksDeleted>
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 bf4:	0f 90       	pop	r0
 bf6:	0f be       	out	0x3f, r0	; 63
		vPortFree( pxTCB );
 bf8:	f8 01       	movw	r30, r16
 bfa:	87 89       	ldd	r24, Z+23	; 0x17

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 bfc:	90 8d       	ldd	r25, Z+24	; 0x18
 bfe:	88 da       	rcall	.-2800   	; 0x110 <vPortFree>
 c00:	c8 01       	movw	r24, r16
			{
				taskYIELD();
 c02:	86 da       	rcall	.-2804   	; 0x110 <vPortFree>
 c04:	88 81       	ld	r24, Y
 c06:	82 30       	cpi	r24, 0x02	; 2
 c08:	a0 f2       	brcs	.-88     	; 0xbb2 <prvIdleTask+0x10>
 c0a:	64 dc       	rcall	.-1848   	; 0x4d4 <vPortYield>
 c0c:	d2 cf       	rjmp	.-92     	; 0xbb2 <prvIdleTask+0x10>

00000c0e <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 c0e:	80 91 90 07 	lds	r24, 0x0790	; 0x800790 <uxSchedulerSuspended>
 c12:	81 11       	cpse	r24, r1
 c14:	13 c0       	rjmp	.+38     	; 0xc3c <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 c16:	80 91 92 07 	lds	r24, 0x0792	; 0x800792 <uxTopReadyPriority>
 c1a:	90 e0       	ldi	r25, 0x00	; 0
 c1c:	fc 01       	movw	r30, r24
 c1e:	ee 0f       	add	r30, r30
 c20:	ff 1f       	adc	r31, r31
 c22:	ee 0f       	add	r30, r30
 c24:	ff 1f       	adc	r31, r31
 c26:	ee 0f       	add	r30, r30
 c28:	ff 1f       	adc	r31, r31
 c2a:	8e 0f       	add	r24, r30
 c2c:	9f 1f       	adc	r25, r31
 c2e:	fc 01       	movw	r30, r24
 c30:	e0 54       	subi	r30, 0x40	; 64
 c32:	f8 4f       	sbci	r31, 0xF8	; 248
 c34:	80 81       	ld	r24, Z
 c36:	88 23       	and	r24, r24
 c38:	29 f0       	breq	.+10     	; 0xc44 <vTaskSwitchContext+0x36>
 c3a:	1b c0       	rjmp	.+54     	; 0xc72 <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 c3c:	81 e0       	ldi	r24, 0x01	; 1
 c3e:	80 93 8e 07 	sts	0x078E, r24	; 0x80078e <xMissedYield>
 c42:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
 c44:	80 91 92 07 	lds	r24, 0x0792	; 0x800792 <uxTopReadyPriority>
 c48:	81 50       	subi	r24, 0x01	; 1
 c4a:	80 93 92 07 	sts	0x0792, r24	; 0x800792 <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 c4e:	80 91 92 07 	lds	r24, 0x0792	; 0x800792 <uxTopReadyPriority>
 c52:	90 e0       	ldi	r25, 0x00	; 0
 c54:	fc 01       	movw	r30, r24
 c56:	ee 0f       	add	r30, r30
 c58:	ff 1f       	adc	r31, r31
 c5a:	ee 0f       	add	r30, r30
 c5c:	ff 1f       	adc	r31, r31
 c5e:	ee 0f       	add	r30, r30
 c60:	ff 1f       	adc	r31, r31
 c62:	8e 0f       	add	r24, r30
 c64:	9f 1f       	adc	r25, r31
 c66:	fc 01       	movw	r30, r24
 c68:	e0 54       	subi	r30, 0x40	; 64
 c6a:	f8 4f       	sbci	r31, 0xF8	; 248
 c6c:	80 81       	ld	r24, Z
 c6e:	88 23       	and	r24, r24
 c70:	49 f3       	breq	.-46     	; 0xc44 <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 c72:	80 91 92 07 	lds	r24, 0x0792	; 0x800792 <uxTopReadyPriority>
 c76:	90 e0       	ldi	r25, 0x00	; 0
 c78:	9c 01       	movw	r18, r24
 c7a:	22 0f       	add	r18, r18
 c7c:	33 1f       	adc	r19, r19
 c7e:	22 0f       	add	r18, r18
 c80:	33 1f       	adc	r19, r19
 c82:	22 0f       	add	r18, r18
 c84:	33 1f       	adc	r19, r19
 c86:	28 0f       	add	r18, r24
 c88:	39 1f       	adc	r19, r25
 c8a:	d9 01       	movw	r26, r18
 c8c:	a0 54       	subi	r26, 0x40	; 64
 c8e:	b8 4f       	sbci	r27, 0xF8	; 248
 c90:	11 96       	adiw	r26, 0x01	; 1
 c92:	ed 91       	ld	r30, X+
 c94:	fc 91       	ld	r31, X
 c96:	12 97       	sbiw	r26, 0x02	; 2
 c98:	02 80       	ldd	r0, Z+2	; 0x02
 c9a:	f3 81       	ldd	r31, Z+3	; 0x03
 c9c:	e0 2d       	mov	r30, r0
 c9e:	12 96       	adiw	r26, 0x02	; 2
 ca0:	fc 93       	st	X, r31
 ca2:	ee 93       	st	-X, r30
 ca4:	11 97       	sbiw	r26, 0x01	; 1
 ca6:	2d 53       	subi	r18, 0x3D	; 61
 ca8:	38 4f       	sbci	r19, 0xF8	; 248
 caa:	e2 17       	cp	r30, r18
 cac:	f3 07       	cpc	r31, r19
 cae:	29 f4       	brne	.+10     	; 0xcba <vTaskSwitchContext+0xac>
 cb0:	22 81       	ldd	r18, Z+2	; 0x02
 cb2:	33 81       	ldd	r19, Z+3	; 0x03
 cb4:	fd 01       	movw	r30, r26
 cb6:	32 83       	std	Z+2, r19	; 0x02
 cb8:	21 83       	std	Z+1, r18	; 0x01
 cba:	fc 01       	movw	r30, r24
 cbc:	ee 0f       	add	r30, r30
 cbe:	ff 1f       	adc	r31, r31
 cc0:	ee 0f       	add	r30, r30
 cc2:	ff 1f       	adc	r31, r31
 cc4:	ee 0f       	add	r30, r30
 cc6:	ff 1f       	adc	r31, r31
 cc8:	8e 0f       	add	r24, r30
 cca:	9f 1f       	adc	r25, r31
 ccc:	fc 01       	movw	r30, r24
 cce:	e0 54       	subi	r30, 0x40	; 64
 cd0:	f8 4f       	sbci	r31, 0xF8	; 248
 cd2:	01 80       	ldd	r0, Z+1	; 0x01
 cd4:	f2 81       	ldd	r31, Z+2	; 0x02
 cd6:	e0 2d       	mov	r30, r0
 cd8:	86 81       	ldd	r24, Z+6	; 0x06
 cda:	97 81       	ldd	r25, Z+7	; 0x07
 cdc:	90 93 e5 07 	sts	0x07E5, r25	; 0x8007e5 <pxCurrentTCB+0x1>
 ce0:	80 93 e4 07 	sts	0x07E4, r24	; 0x8007e4 <pxCurrentTCB>
 ce4:	08 95       	ret

00000ce6 <memset>:
 ce6:	dc 01       	movw	r26, r24
 ce8:	01 c0       	rjmp	.+2      	; 0xcec <memset+0x6>
 cea:	6d 93       	st	X+, r22
 cec:	41 50       	subi	r20, 0x01	; 1
 cee:	50 40       	sbci	r21, 0x00	; 0
 cf0:	e0 f7       	brcc	.-8      	; 0xcea <memset+0x4>
 cf2:	08 95       	ret

00000cf4 <strncpy>:
 cf4:	fb 01       	movw	r30, r22
 cf6:	dc 01       	movw	r26, r24
 cf8:	41 50       	subi	r20, 0x01	; 1
 cfa:	50 40       	sbci	r21, 0x00	; 0
 cfc:	48 f0       	brcs	.+18     	; 0xd10 <strncpy+0x1c>
 cfe:	01 90       	ld	r0, Z+
 d00:	0d 92       	st	X+, r0
 d02:	00 20       	and	r0, r0
 d04:	c9 f7       	brne	.-14     	; 0xcf8 <strncpy+0x4>
 d06:	01 c0       	rjmp	.+2      	; 0xd0a <strncpy+0x16>
 d08:	1d 92       	st	X+, r1
 d0a:	41 50       	subi	r20, 0x01	; 1
 d0c:	50 40       	sbci	r21, 0x00	; 0
 d0e:	e0 f7       	brcc	.-8      	; 0xd08 <strncpy+0x14>
 d10:	08 95       	ret

00000d12 <_exit>:
 d12:	f8 94       	cli

00000d14 <__stop_program>:
 d14:	ff cf       	rjmp	.-2      	; 0xd14 <__stop_program>
