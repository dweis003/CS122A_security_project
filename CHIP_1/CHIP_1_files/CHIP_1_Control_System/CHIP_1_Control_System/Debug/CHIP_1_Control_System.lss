
CHIP_1_Control_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000021e  00800100  00002116  000021aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002116  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000656  0080031e  0080031e  000023c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000023c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000023f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a8  00000000  00000000  00002438  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003f41  00000000  00000000  000027e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000109a  00000000  00000000  00006721  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002b83  00000000  00000000  000077bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008fc  00000000  00000000  0000a340  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001371  00000000  00000000  0000ac3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000218f  00000000  00000000  0000bfad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000360  00000000  00000000  0000e13c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	50 c0       	rjmp	.+160    	; 0xa2 <__ctors_end>
       2:	00 00       	nop
       4:	6d c0       	rjmp	.+218    	; 0xe0 <__bad_interrupt>
       6:	00 00       	nop
       8:	6b c0       	rjmp	.+214    	; 0xe0 <__bad_interrupt>
       a:	00 00       	nop
       c:	69 c0       	rjmp	.+210    	; 0xe0 <__bad_interrupt>
       e:	00 00       	nop
      10:	67 c0       	rjmp	.+206    	; 0xe0 <__bad_interrupt>
      12:	00 00       	nop
      14:	65 c0       	rjmp	.+202    	; 0xe0 <__bad_interrupt>
      16:	00 00       	nop
      18:	63 c0       	rjmp	.+198    	; 0xe0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	61 c0       	rjmp	.+194    	; 0xe0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5f c0       	rjmp	.+190    	; 0xe0 <__bad_interrupt>
      22:	00 00       	nop
      24:	5d c0       	rjmp	.+186    	; 0xe0 <__bad_interrupt>
      26:	00 00       	nop
      28:	5b c0       	rjmp	.+182    	; 0xe0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	59 c0       	rjmp	.+178    	; 0xe0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	57 c0       	rjmp	.+174    	; 0xe0 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 09 0c 	jmp	0x1812	; 0x1812 <__vector_13>
      38:	53 c0       	rjmp	.+166    	; 0xe0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	51 c0       	rjmp	.+162    	; 0xe0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4f c0       	rjmp	.+158    	; 0xe0 <__bad_interrupt>
      42:	00 00       	nop
      44:	4d c0       	rjmp	.+154    	; 0xe0 <__bad_interrupt>
      46:	00 00       	nop
      48:	4b c0       	rjmp	.+150    	; 0xe0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	49 c0       	rjmp	.+146    	; 0xe0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	47 c0       	rjmp	.+142    	; 0xe0 <__bad_interrupt>
      52:	00 00       	nop
      54:	45 c0       	rjmp	.+138    	; 0xe0 <__bad_interrupt>
      56:	00 00       	nop
      58:	43 c0       	rjmp	.+134    	; 0xe0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	41 c0       	rjmp	.+130    	; 0xe0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3f c0       	rjmp	.+126    	; 0xe0 <__bad_interrupt>
      62:	00 00       	nop
      64:	3d c0       	rjmp	.+122    	; 0xe0 <__bad_interrupt>
      66:	00 00       	nop
      68:	3b c0       	rjmp	.+118    	; 0xe0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	39 c0       	rjmp	.+114    	; 0xe0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	37 c0       	rjmp	.+110    	; 0xe0 <__bad_interrupt>
      72:	00 00       	nop
      74:	35 c0       	rjmp	.+106    	; 0xe0 <__bad_interrupt>
      76:	00 00       	nop
      78:	33 c0       	rjmp	.+102    	; 0xe0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	31 c0       	rjmp	.+98     	; 0xe0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2f c0       	rjmp	.+94     	; 0xe0 <__bad_interrupt>
      82:	00 00       	nop
      84:	2d c0       	rjmp	.+90     	; 0xe0 <__bad_interrupt>
      86:	00 00       	nop
      88:	2b c0       	rjmp	.+86     	; 0xe0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	bb 05       	cpc	r27, r11
      8e:	15 06       	cpc	r1, r21
      90:	c2 05       	cpc	r28, r2
      92:	7a 06       	cpc	r7, r26
      94:	52 07       	cpc	r21, r18
      96:	5f 07       	cpc	r21, r31
      98:	90 08       	sbc	r9, r0
      9a:	ba 07       	cpc	r27, r26
      9c:	e7 07       	cpc	r30, r23
      9e:	f4 07       	cpc	r31, r20
      a0:	2c 08       	sbc	r2, r12

000000a2 <__ctors_end>:
      a2:	11 24       	eor	r1, r1
      a4:	1f be       	out	0x3f, r1	; 63
      a6:	cf ef       	ldi	r28, 0xFF	; 255
      a8:	d0 e4       	ldi	r29, 0x40	; 64
      aa:	de bf       	out	0x3e, r29	; 62
      ac:	cd bf       	out	0x3d, r28	; 61

000000ae <__do_copy_data>:
      ae:	13 e0       	ldi	r17, 0x03	; 3
      b0:	a0 e0       	ldi	r26, 0x00	; 0
      b2:	b1 e0       	ldi	r27, 0x01	; 1
      b4:	e6 e1       	ldi	r30, 0x16	; 22
      b6:	f1 e2       	ldi	r31, 0x21	; 33
      b8:	00 e0       	ldi	r16, 0x00	; 0
      ba:	0b bf       	out	0x3b, r16	; 59
      bc:	02 c0       	rjmp	.+4      	; 0xc2 <__do_copy_data+0x14>
      be:	07 90       	elpm	r0, Z+
      c0:	0d 92       	st	X+, r0
      c2:	ae 31       	cpi	r26, 0x1E	; 30
      c4:	b1 07       	cpc	r27, r17
      c6:	d9 f7       	brne	.-10     	; 0xbe <__do_copy_data+0x10>

000000c8 <__do_clear_bss>:
      c8:	29 e0       	ldi	r18, 0x09	; 9
      ca:	ae e1       	ldi	r26, 0x1E	; 30
      cc:	b3 e0       	ldi	r27, 0x03	; 3
      ce:	01 c0       	rjmp	.+2      	; 0xd2 <.do_clear_bss_start>

000000d0 <.do_clear_bss_loop>:
      d0:	1d 92       	st	X+, r1

000000d2 <.do_clear_bss_start>:
      d2:	a4 37       	cpi	r26, 0x74	; 116
      d4:	b2 07       	cpc	r27, r18
      d6:	e1 f7       	brne	.-8      	; 0xd0 <.do_clear_bss_loop>
      d8:	0e 94 77 0a 	call	0x14ee	; 0x14ee <main>
      dc:	0c 94 89 10 	jmp	0x2112	; 0x2112 <_exit>

000000e0 <__bad_interrupt>:
      e0:	8f cf       	rjmp	.-226    	; 0x0 <__vectors>

000000e2 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
      e2:	cf 93       	push	r28
      e4:	df 93       	push	r29
      e6:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
      e8:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
      ec:	20 91 1e 03 	lds	r18, 0x031E	; 0x80031e <__data_end>
      f0:	30 91 1f 03 	lds	r19, 0x031F	; 0x80031f <__data_end+0x1>
      f4:	c9 01       	movw	r24, r18
      f6:	8c 0f       	add	r24, r28
      f8:	9d 1f       	adc	r25, r29
      fa:	8c 3d       	cpi	r24, 0xDC	; 220
      fc:	45 e0       	ldi	r20, 0x05	; 5
      fe:	94 07       	cpc	r25, r20
     100:	58 f4       	brcc	.+22     	; 0x118 <pvPortMalloc+0x36>
     102:	28 17       	cp	r18, r24
     104:	39 07       	cpc	r19, r25
     106:	58 f4       	brcc	.+22     	; 0x11e <pvPortMalloc+0x3c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     108:	e9 01       	movw	r28, r18
     10a:	c0 5e       	subi	r28, 0xE0	; 224
     10c:	dc 4f       	sbci	r29, 0xFC	; 252
			xNextFreeByte += xWantedSize;			
     10e:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <__data_end+0x1>
     112:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <__data_end>
     116:	05 c0       	rjmp	.+10     	; 0x122 <pvPortMalloc+0x40>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
     118:	c0 e0       	ldi	r28, 0x00	; 0
     11a:	d0 e0       	ldi	r29, 0x00	; 0
     11c:	02 c0       	rjmp	.+4      	; 0x122 <pvPortMalloc+0x40>
     11e:	c0 e0       	ldi	r28, 0x00	; 0
     120:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     122:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     126:	ce 01       	movw	r24, r28
     128:	df 91       	pop	r29
     12a:	cf 91       	pop	r28
     12c:	08 95       	ret

0000012e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     12e:	08 95       	ret

00000130 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     130:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     132:	03 96       	adiw	r24, 0x03	; 3
     134:	92 83       	std	Z+2, r25	; 0x02
     136:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     138:	2f ef       	ldi	r18, 0xFF	; 255
     13a:	3f ef       	ldi	r19, 0xFF	; 255
     13c:	34 83       	std	Z+4, r19	; 0x04
     13e:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     140:	96 83       	std	Z+6, r25	; 0x06
     142:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     144:	90 87       	std	Z+8, r25	; 0x08
     146:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     148:	10 82       	st	Z, r1
     14a:	08 95       	ret

0000014c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     14c:	fc 01       	movw	r30, r24
     14e:	11 86       	std	Z+9, r1	; 0x09
     150:	10 86       	std	Z+8, r1	; 0x08
     152:	08 95       	ret

00000154 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     154:	cf 93       	push	r28
     156:	df 93       	push	r29
     158:	fc 01       	movw	r30, r24
     15a:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     15c:	21 81       	ldd	r18, Z+1	; 0x01
     15e:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
     160:	e9 01       	movw	r28, r18
     162:	8a 81       	ldd	r24, Y+2	; 0x02
     164:	9b 81       	ldd	r25, Y+3	; 0x03
     166:	13 96       	adiw	r26, 0x03	; 3
     168:	9c 93       	st	X, r25
     16a:	8e 93       	st	-X, r24
     16c:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
     16e:	81 81       	ldd	r24, Z+1	; 0x01
     170:	92 81       	ldd	r25, Z+2	; 0x02
     172:	15 96       	adiw	r26, 0x05	; 5
     174:	9c 93       	st	X, r25
     176:	8e 93       	st	-X, r24
     178:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     17a:	8a 81       	ldd	r24, Y+2	; 0x02
     17c:	9b 81       	ldd	r25, Y+3	; 0x03
     17e:	ec 01       	movw	r28, r24
     180:	7d 83       	std	Y+5, r23	; 0x05
     182:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     184:	e9 01       	movw	r28, r18
     186:	7b 83       	std	Y+3, r23	; 0x03
     188:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     18a:	72 83       	std	Z+2, r23	; 0x02
     18c:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     18e:	19 96       	adiw	r26, 0x09	; 9
     190:	fc 93       	st	X, r31
     192:	ee 93       	st	-X, r30
     194:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
     196:	80 81       	ld	r24, Z
     198:	8f 5f       	subi	r24, 0xFF	; 255
     19a:	80 83       	st	Z, r24
}
     19c:	df 91       	pop	r29
     19e:	cf 91       	pop	r28
     1a0:	08 95       	ret

000001a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     1a2:	cf 93       	push	r28
     1a4:	df 93       	push	r29
     1a6:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     1a8:	48 81       	ld	r20, Y
     1aa:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     1ac:	4f 3f       	cpi	r20, 0xFF	; 255
     1ae:	2f ef       	ldi	r18, 0xFF	; 255
     1b0:	52 07       	cpc	r21, r18
     1b2:	31 f4       	brne	.+12     	; 0x1c0 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     1b4:	dc 01       	movw	r26, r24
     1b6:	17 96       	adiw	r26, 0x07	; 7
     1b8:	ed 91       	ld	r30, X+
     1ba:	fc 91       	ld	r31, X
     1bc:	18 97       	sbiw	r26, 0x08	; 8
     1be:	17 c0       	rjmp	.+46     	; 0x1ee <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     1c0:	fc 01       	movw	r30, r24
     1c2:	33 96       	adiw	r30, 0x03	; 3
     1c4:	dc 01       	movw	r26, r24
     1c6:	15 96       	adiw	r26, 0x05	; 5
     1c8:	2d 91       	ld	r18, X+
     1ca:	3c 91       	ld	r19, X
     1cc:	16 97       	sbiw	r26, 0x06	; 6
     1ce:	d9 01       	movw	r26, r18
     1d0:	2d 91       	ld	r18, X+
     1d2:	3c 91       	ld	r19, X
     1d4:	42 17       	cp	r20, r18
     1d6:	53 07       	cpc	r21, r19
     1d8:	50 f0       	brcs	.+20     	; 0x1ee <vListInsert+0x4c>
     1da:	02 80       	ldd	r0, Z+2	; 0x02
     1dc:	f3 81       	ldd	r31, Z+3	; 0x03
     1de:	e0 2d       	mov	r30, r0
     1e0:	a2 81       	ldd	r26, Z+2	; 0x02
     1e2:	b3 81       	ldd	r27, Z+3	; 0x03
     1e4:	2d 91       	ld	r18, X+
     1e6:	3c 91       	ld	r19, X
     1e8:	42 17       	cp	r20, r18
     1ea:	53 07       	cpc	r21, r19
     1ec:	b0 f7       	brcc	.-20     	; 0x1da <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     1ee:	a2 81       	ldd	r26, Z+2	; 0x02
     1f0:	b3 81       	ldd	r27, Z+3	; 0x03
     1f2:	bb 83       	std	Y+3, r27	; 0x03
     1f4:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     1f6:	15 96       	adiw	r26, 0x05	; 5
     1f8:	dc 93       	st	X, r29
     1fa:	ce 93       	st	-X, r28
     1fc:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
     1fe:	fd 83       	std	Y+5, r31	; 0x05
     200:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     202:	d3 83       	std	Z+3, r29	; 0x03
     204:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     206:	99 87       	std	Y+9, r25	; 0x09
     208:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     20a:	fc 01       	movw	r30, r24
     20c:	20 81       	ld	r18, Z
     20e:	2f 5f       	subi	r18, 0xFF	; 255
     210:	20 83       	st	Z, r18
}
     212:	df 91       	pop	r29
     214:	cf 91       	pop	r28
     216:	08 95       	ret

00000218 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     218:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     21a:	a2 81       	ldd	r26, Z+2	; 0x02
     21c:	b3 81       	ldd	r27, Z+3	; 0x03
     21e:	84 81       	ldd	r24, Z+4	; 0x04
     220:	95 81       	ldd	r25, Z+5	; 0x05
     222:	15 96       	adiw	r26, 0x05	; 5
     224:	9c 93       	st	X, r25
     226:	8e 93       	st	-X, r24
     228:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     22a:	a4 81       	ldd	r26, Z+4	; 0x04
     22c:	b5 81       	ldd	r27, Z+5	; 0x05
     22e:	82 81       	ldd	r24, Z+2	; 0x02
     230:	93 81       	ldd	r25, Z+3	; 0x03
     232:	13 96       	adiw	r26, 0x03	; 3
     234:	9c 93       	st	X, r25
     236:	8e 93       	st	-X, r24
     238:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     23a:	a0 85       	ldd	r26, Z+8	; 0x08
     23c:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     23e:	11 96       	adiw	r26, 0x01	; 1
     240:	8d 91       	ld	r24, X+
     242:	9c 91       	ld	r25, X
     244:	12 97       	sbiw	r26, 0x02	; 2
     246:	e8 17       	cp	r30, r24
     248:	f9 07       	cpc	r31, r25
     24a:	31 f4       	brne	.+12     	; 0x258 <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     24c:	84 81       	ldd	r24, Z+4	; 0x04
     24e:	95 81       	ldd	r25, Z+5	; 0x05
     250:	12 96       	adiw	r26, 0x02	; 2
     252:	9c 93       	st	X, r25
     254:	8e 93       	st	-X, r24
     256:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
     258:	11 86       	std	Z+9, r1	; 0x09
     25a:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     25c:	8c 91       	ld	r24, X
     25e:	81 50       	subi	r24, 0x01	; 1
     260:	8c 93       	st	X, r24
     262:	08 95       	ret

00000264 <initUSART>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//buzz when sensor tripped
enum BUZZERState {buzz_wait, no_buzz, buzz_high, buzz_low} buzzer_state;

void buzz_Init(){
	buzzer_state = buzz_wait;
     264:	81 30       	cpi	r24, 0x01	; 1
     266:	81 f0       	breq	.+32     	; 0x288 <initUSART+0x24>
     268:	e1 ec       	ldi	r30, 0xC1	; 193
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	88 61       	ori	r24, 0x18	; 24
     270:	80 83       	st	Z, r24
     272:	e2 ec       	ldi	r30, 0xC2	; 194
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	80 81       	ld	r24, Z
     278:	86 60       	ori	r24, 0x06	; 6
     27a:	80 83       	st	Z, r24
     27c:	83 e3       	ldi	r24, 0x33	; 51
     27e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     282:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     286:	08 95       	ret
     288:	e9 ec       	ldi	r30, 0xC9	; 201
     28a:	f0 e0       	ldi	r31, 0x00	; 0
     28c:	80 81       	ld	r24, Z
     28e:	88 61       	ori	r24, 0x18	; 24
     290:	80 83       	st	Z, r24
     292:	ea ec       	ldi	r30, 0xCA	; 202
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	80 81       	ld	r24, Z
     298:	86 60       	ori	r24, 0x06	; 6
     29a:	80 83       	st	Z, r24
     29c:	83 e3       	ldi	r24, 0x33	; 51
     29e:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     2a2:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     2a6:	08 95       	ret

000002a8 <USART_Flush>:
     2a8:	81 30       	cpi	r24, 0x01	; 1
     2aa:	29 f4       	brne	.+10     	; 0x2b6 <USART_Flush+0xe>
     2ac:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     2b0:	88 23       	and	r24, r24
     2b2:	74 f0       	brlt	.+28     	; 0x2d0 <USART_Flush+0x28>
     2b4:	08 95       	ret
     2b6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     2ba:	88 23       	and	r24, r24
     2bc:	8c f4       	brge	.+34     	; 0x2e0 <USART_Flush+0x38>
     2be:	a6 ec       	ldi	r26, 0xC6	; 198
     2c0:	b0 e0       	ldi	r27, 0x00	; 0
     2c2:	e0 ec       	ldi	r30, 0xC0	; 192
     2c4:	f0 e0       	ldi	r31, 0x00	; 0
     2c6:	8c 91       	ld	r24, X
     2c8:	80 81       	ld	r24, Z
     2ca:	88 23       	and	r24, r24
     2cc:	e4 f3       	brlt	.-8      	; 0x2c6 <USART_Flush+0x1e>
     2ce:	08 95       	ret
     2d0:	ae ec       	ldi	r26, 0xCE	; 206
     2d2:	b0 e0       	ldi	r27, 0x00	; 0
     2d4:	e8 ec       	ldi	r30, 0xC8	; 200
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	8c 91       	ld	r24, X
     2da:	80 81       	ld	r24, Z
     2dc:	88 23       	and	r24, r24
     2de:	e4 f3       	brlt	.-8      	; 0x2d8 <USART_Flush+0x30>
     2e0:	08 95       	ret

000002e2 <USART_Send>:
     2e2:	61 30       	cpi	r22, 0x01	; 1
     2e4:	41 f0       	breq	.+16     	; 0x2f6 <USART_Send+0x14>
     2e6:	e0 ec       	ldi	r30, 0xC0	; 192
     2e8:	f0 e0       	ldi	r31, 0x00	; 0
     2ea:	90 81       	ld	r25, Z
     2ec:	95 ff       	sbrs	r25, 5
     2ee:	fd cf       	rjmp	.-6      	; 0x2ea <USART_Send+0x8>
     2f0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     2f4:	08 95       	ret
     2f6:	e8 ec       	ldi	r30, 0xC8	; 200
     2f8:	f0 e0       	ldi	r31, 0x00	; 0
     2fa:	90 81       	ld	r25, Z
     2fc:	95 ff       	sbrs	r25, 5
     2fe:	fd cf       	rjmp	.-6      	; 0x2fa <USART_Send+0x18>
     300:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     304:	08 95       	ret

00000306 <USART_Receive>:
     306:	81 30       	cpi	r24, 0x01	; 1
     308:	41 f0       	breq	.+16     	; 0x31a <USART_Receive+0x14>
     30a:	e0 ec       	ldi	r30, 0xC0	; 192
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	80 81       	ld	r24, Z
     310:	88 23       	and	r24, r24
     312:	ec f7       	brge	.-6      	; 0x30e <USART_Receive+0x8>
     314:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     318:	08 95       	ret
     31a:	e8 ec       	ldi	r30, 0xC8	; 200
     31c:	f0 e0       	ldi	r31, 0x00	; 0
     31e:	80 81       	ld	r24, Z
     320:	88 23       	and	r24, r24
     322:	ec f7       	brge	.-6      	; 0x31e <USART_Receive+0x18>
     324:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     328:	08 95       	ret

0000032a <GetKeypadKey>:
     32a:	8f ee       	ldi	r24, 0xEF	; 239
     32c:	82 b9       	out	0x02, r24	; 2
     32e:	00 00       	nop
     330:	00 9b       	sbis	0x00, 0	; 0
     332:	44 c0       	rjmp	.+136    	; 0x3bc <GetKeypadKey+0x92>
     334:	80 b1       	in	r24, 0x00	; 0
     336:	80 95       	com	r24
     338:	81 fd       	sbrc	r24, 1
     33a:	42 c0       	rjmp	.+132    	; 0x3c0 <GetKeypadKey+0x96>
     33c:	80 b1       	in	r24, 0x00	; 0
     33e:	80 95       	com	r24
     340:	82 fd       	sbrc	r24, 2
     342:	40 c0       	rjmp	.+128    	; 0x3c4 <GetKeypadKey+0x9a>
     344:	80 b1       	in	r24, 0x00	; 0
     346:	80 95       	com	r24
     348:	83 fd       	sbrc	r24, 3
     34a:	3e c0       	rjmp	.+124    	; 0x3c8 <GetKeypadKey+0x9e>
     34c:	8f ed       	ldi	r24, 0xDF	; 223
     34e:	82 b9       	out	0x02, r24	; 2
     350:	00 00       	nop
     352:	00 9b       	sbis	0x00, 0	; 0
     354:	3b c0       	rjmp	.+118    	; 0x3cc <GetKeypadKey+0xa2>
     356:	80 b1       	in	r24, 0x00	; 0
     358:	80 95       	com	r24
     35a:	81 fd       	sbrc	r24, 1
     35c:	39 c0       	rjmp	.+114    	; 0x3d0 <GetKeypadKey+0xa6>
     35e:	80 b1       	in	r24, 0x00	; 0
     360:	80 95       	com	r24
     362:	82 fd       	sbrc	r24, 2
     364:	37 c0       	rjmp	.+110    	; 0x3d4 <GetKeypadKey+0xaa>
     366:	80 b1       	in	r24, 0x00	; 0
     368:	80 95       	com	r24
     36a:	83 fd       	sbrc	r24, 3
     36c:	35 c0       	rjmp	.+106    	; 0x3d8 <GetKeypadKey+0xae>
     36e:	8f eb       	ldi	r24, 0xBF	; 191
     370:	82 b9       	out	0x02, r24	; 2
     372:	00 00       	nop
     374:	00 9b       	sbis	0x00, 0	; 0
     376:	32 c0       	rjmp	.+100    	; 0x3dc <GetKeypadKey+0xb2>
     378:	80 b1       	in	r24, 0x00	; 0
     37a:	80 95       	com	r24
     37c:	81 fd       	sbrc	r24, 1
     37e:	30 c0       	rjmp	.+96     	; 0x3e0 <GetKeypadKey+0xb6>
     380:	80 b1       	in	r24, 0x00	; 0
     382:	80 95       	com	r24
     384:	82 fd       	sbrc	r24, 2
     386:	2e c0       	rjmp	.+92     	; 0x3e4 <GetKeypadKey+0xba>
     388:	80 b1       	in	r24, 0x00	; 0
     38a:	80 95       	com	r24
     38c:	83 fd       	sbrc	r24, 3
     38e:	2c c0       	rjmp	.+88     	; 0x3e8 <GetKeypadKey+0xbe>
     390:	8f e7       	ldi	r24, 0x7F	; 127
     392:	82 b9       	out	0x02, r24	; 2
     394:	00 00       	nop
     396:	90 b1       	in	r25, 0x00	; 0
     398:	90 95       	com	r25
     39a:	89 2f       	mov	r24, r25
     39c:	81 70       	andi	r24, 0x01	; 1
     39e:	90 fd       	sbrc	r25, 0
     3a0:	25 c0       	rjmp	.+74     	; 0x3ec <GetKeypadKey+0xc2>
     3a2:	90 b1       	in	r25, 0x00	; 0
     3a4:	90 95       	com	r25
     3a6:	91 fd       	sbrc	r25, 1
     3a8:	23 c0       	rjmp	.+70     	; 0x3f0 <GetKeypadKey+0xc6>
     3aa:	90 b1       	in	r25, 0x00	; 0
     3ac:	90 95       	com	r25
     3ae:	92 fd       	sbrc	r25, 2
     3b0:	21 c0       	rjmp	.+66     	; 0x3f4 <GetKeypadKey+0xca>
     3b2:	90 b1       	in	r25, 0x00	; 0
     3b4:	90 95       	com	r25
     3b6:	93 fd       	sbrc	r25, 3
     3b8:	1f c0       	rjmp	.+62     	; 0x3f8 <GetKeypadKey+0xce>
     3ba:	08 95       	ret
     3bc:	81 e3       	ldi	r24, 0x31	; 49
     3be:	08 95       	ret
     3c0:	84 e3       	ldi	r24, 0x34	; 52
     3c2:	08 95       	ret
     3c4:	87 e3       	ldi	r24, 0x37	; 55
     3c6:	08 95       	ret
     3c8:	8a e2       	ldi	r24, 0x2A	; 42
     3ca:	08 95       	ret
     3cc:	82 e3       	ldi	r24, 0x32	; 50
     3ce:	08 95       	ret
     3d0:	85 e3       	ldi	r24, 0x35	; 53
     3d2:	08 95       	ret
     3d4:	88 e3       	ldi	r24, 0x38	; 56
     3d6:	08 95       	ret
     3d8:	80 e3       	ldi	r24, 0x30	; 48
     3da:	08 95       	ret
     3dc:	83 e3       	ldi	r24, 0x33	; 51
     3de:	08 95       	ret
     3e0:	86 e3       	ldi	r24, 0x36	; 54
     3e2:	08 95       	ret
     3e4:	89 e3       	ldi	r24, 0x39	; 57
     3e6:	08 95       	ret
     3e8:	83 e2       	ldi	r24, 0x23	; 35
     3ea:	08 95       	ret
     3ec:	81 e4       	ldi	r24, 0x41	; 65
     3ee:	08 95       	ret
     3f0:	82 e4       	ldi	r24, 0x42	; 66
     3f2:	08 95       	ret
     3f4:	83 e4       	ldi	r24, 0x43	; 67
     3f6:	08 95       	ret
     3f8:	84 e4       	ldi	r24, 0x44	; 68
     3fa:	08 95       	ret

000003fc <delay_ms>:
     3fc:	18 16       	cp	r1, r24
     3fe:	19 06       	cpc	r1, r25
     400:	5c f0       	brlt	.+22     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     402:	08 95       	ret
     404:	00 00       	nop
     406:	21 50       	subi	r18, 0x01	; 1
     408:	31 09       	sbc	r19, r1
     40a:	e1 f7       	brne	.-8      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     40c:	4f 5f       	subi	r20, 0xFF	; 255
     40e:	5f 4f       	sbci	r21, 0xFF	; 255
     410:	84 17       	cp	r24, r20
     412:	95 07       	cpc	r25, r21
     414:	19 f4       	brne	.+6      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     416:	08 95       	ret
     418:	40 e0       	ldi	r20, 0x00	; 0
     41a:	50 e0       	ldi	r21, 0x00	; 0
     41c:	27 e0       	ldi	r18, 0x07	; 7
     41e:	33 e0       	ldi	r19, 0x03	; 3
     420:	f1 cf       	rjmp	.-30     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>

00000422 <LCD_WriteCommand>:
     422:	5e 98       	cbi	0x0b, 6	; 11
     424:	88 b9       	out	0x08, r24	; 8
     426:	5f 9a       	sbi	0x0b, 7	; 11
     428:	00 00       	nop
     42a:	5f 98       	cbi	0x0b, 7	; 11
     42c:	82 e0       	ldi	r24, 0x02	; 2
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	e5 cf       	rjmp	.-54     	; 0x3fc <delay_ms>
     432:	08 95       	ret

00000434 <LCD_ClearScreen>:
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	f5 cf       	rjmp	.-22     	; 0x422 <LCD_WriteCommand>
     438:	08 95       	ret

0000043a <LCD_Cursor>:
     43a:	81 31       	cpi	r24, 0x11	; 17
     43c:	18 f4       	brcc	.+6      	; 0x444 <LCD_Cursor+0xa>
     43e:	81 58       	subi	r24, 0x81	; 129
     440:	f0 cf       	rjmp	.-32     	; 0x422 <LCD_WriteCommand>
     442:	08 95       	ret
     444:	81 55       	subi	r24, 0x51	; 81
     446:	ed cf       	rjmp	.-38     	; 0x422 <LCD_WriteCommand>
     448:	08 95       	ret

0000044a <LCD_init>:
     44a:	84 e6       	ldi	r24, 0x64	; 100
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	d6 df       	rcall	.-84     	; 0x3fc <delay_ms>
     450:	88 e3       	ldi	r24, 0x38	; 56
     452:	e7 df       	rcall	.-50     	; 0x422 <LCD_WriteCommand>
     454:	86 e0       	ldi	r24, 0x06	; 6
     456:	e5 df       	rcall	.-54     	; 0x422 <LCD_WriteCommand>
     458:	8f e0       	ldi	r24, 0x0F	; 15
     45a:	e3 df       	rcall	.-58     	; 0x422 <LCD_WriteCommand>
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	e1 df       	rcall	.-62     	; 0x422 <LCD_WriteCommand>
     460:	8a e0       	ldi	r24, 0x0A	; 10
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	cb cf       	rjmp	.-106    	; 0x3fc <delay_ms>
     466:	08 95       	ret

00000468 <LCD_WriteData>:
     468:	5e 9a       	sbi	0x0b, 6	; 11
     46a:	88 b9       	out	0x08, r24	; 8
     46c:	5f 9a       	sbi	0x0b, 7	; 11
     46e:	00 00       	nop
     470:	5f 98       	cbi	0x0b, 7	; 11
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	c2 cf       	rjmp	.-124    	; 0x3fc <delay_ms>
     478:	08 95       	ret

0000047a <LCD_DisplayString>:
     47a:	0f 93       	push	r16
     47c:	1f 93       	push	r17
     47e:	cf 93       	push	r28
     480:	df 93       	push	r29
     482:	18 2f       	mov	r17, r24
     484:	eb 01       	movw	r28, r22
     486:	d6 df       	rcall	.-84     	; 0x434 <LCD_ClearScreen>
     488:	88 81       	ld	r24, Y
     48a:	88 23       	and	r24, r24
     48c:	51 f0       	breq	.+20     	; 0x4a2 <LCD_DisplayString+0x28>
     48e:	01 e0       	ldi	r16, 0x01	; 1
     490:	01 0f       	add	r16, r17
     492:	81 2f       	mov	r24, r17
     494:	d2 df       	rcall	.-92     	; 0x43a <LCD_Cursor>
     496:	89 91       	ld	r24, Y+
     498:	e7 df       	rcall	.-50     	; 0x468 <LCD_WriteData>
     49a:	10 2f       	mov	r17, r16
     49c:	88 81       	ld	r24, Y
     49e:	81 11       	cpse	r24, r1
     4a0:	f6 cf       	rjmp	.-20     	; 0x48e <LCD_DisplayString+0x14>
     4a2:	df 91       	pop	r29
     4a4:	cf 91       	pop	r28
     4a6:	1f 91       	pop	r17
     4a8:	0f 91       	pop	r16
     4aa:	08 95       	ret

000004ac <transmit_data>:
     4ac:	fc 01       	movw	r30, r24
     4ae:	20 e0       	ldi	r18, 0x00	; 0
     4b0:	30 e0       	ldi	r19, 0x00	; 0
     4b2:	58 e0       	ldi	r21, 0x08	; 8
     4b4:	55 b9       	out	0x05, r21	; 5
     4b6:	45 b1       	in	r20, 0x05	; 5
     4b8:	bf 01       	movw	r22, r30
     4ba:	02 2e       	mov	r0, r18
     4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <transmit_data+0x16>
     4be:	76 95       	lsr	r23
     4c0:	67 95       	ror	r22
     4c2:	0a 94       	dec	r0
     4c4:	e2 f7       	brpl	.-8      	; 0x4be <transmit_data+0x12>
     4c6:	96 2f       	mov	r25, r22
     4c8:	91 70       	andi	r25, 0x01	; 1
     4ca:	94 2b       	or	r25, r20
     4cc:	95 b9       	out	0x05, r25	; 5
     4ce:	29 9a       	sbi	0x05, 1	; 5
     4d0:	2f 5f       	subi	r18, 0xFF	; 255
     4d2:	3f 4f       	sbci	r19, 0xFF	; 255
     4d4:	20 31       	cpi	r18, 0x10	; 16
     4d6:	31 05       	cpc	r19, r1
     4d8:	69 f7       	brne	.-38     	; 0x4b4 <transmit_data+0x8>
     4da:	2a 9a       	sbi	0x05, 2	; 5
     4dc:	15 b8       	out	0x05, r1	; 5
     4de:	08 95       	ret

000004e0 <matrix_print>:
     4e0:	fb 01       	movw	r30, r22
     4e2:	da 01       	movw	r26, r20
     4e4:	10 82       	st	Z, r1
     4e6:	1c 92       	st	X, r1
     4e8:	41 e0       	ldi	r20, 0x01	; 1
     4ea:	50 e0       	ldi	r21, 0x00	; 0
     4ec:	02 2e       	mov	r0, r18
     4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <matrix_print+0x14>
     4f0:	44 0f       	add	r20, r20
     4f2:	55 1f       	adc	r21, r21
     4f4:	0a 94       	dec	r0
     4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <matrix_print+0x10>
     4f8:	30 81       	ld	r19, Z
     4fa:	43 2b       	or	r20, r19
     4fc:	40 83       	st	Z, r20
     4fe:	fc 01       	movw	r30, r24
     500:	30 e1       	ldi	r19, 0x10	; 16
     502:	23 9f       	mul	r18, r19
     504:	e0 0d       	add	r30, r0
     506:	f1 1d       	adc	r31, r1
     508:	11 24       	eor	r1, r1
     50a:	20 e0       	ldi	r18, 0x00	; 0
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	41 e0       	ldi	r20, 0x01	; 1
     510:	50 e0       	ldi	r21, 0x00	; 0
     512:	81 91       	ld	r24, Z+
     514:	91 91       	ld	r25, Z+
     516:	89 2b       	or	r24, r25
     518:	51 f4       	brne	.+20     	; 0x52e <matrix_print+0x4e>
     51a:	8c 91       	ld	r24, X
     51c:	ba 01       	movw	r22, r20
     51e:	02 2e       	mov	r0, r18
     520:	02 c0       	rjmp	.+4      	; 0x526 <matrix_print+0x46>
     522:	66 0f       	add	r22, r22
     524:	77 1f       	adc	r23, r23
     526:	0a 94       	dec	r0
     528:	e2 f7       	brpl	.-8      	; 0x522 <matrix_print+0x42>
     52a:	68 2b       	or	r22, r24
     52c:	6c 93       	st	X, r22
     52e:	2f 5f       	subi	r18, 0xFF	; 255
     530:	3f 4f       	sbci	r19, 0xFF	; 255
     532:	28 30       	cpi	r18, 0x08	; 8
     534:	31 05       	cpc	r19, r1
     536:	69 f7       	brne	.-38     	; 0x512 <matrix_print+0x32>
     538:	08 95       	ret

0000053a <print_matrix>:
     53a:	0f 93       	push	r16
     53c:	1f 93       	push	r17
     53e:	cf 93       	push	r28
     540:	8c 01       	movw	r16, r24
     542:	c0 e0       	ldi	r28, 0x00	; 0
     544:	2c 2f       	mov	r18, r28
     546:	40 e1       	ldi	r20, 0x10	; 16
     548:	59 e0       	ldi	r21, 0x09	; 9
     54a:	61 e1       	ldi	r22, 0x11	; 17
     54c:	79 e0       	ldi	r23, 0x09	; 9
     54e:	c8 01       	movw	r24, r16
     550:	c7 df       	rcall	.-114    	; 0x4e0 <matrix_print>
     552:	80 91 10 09 	lds	r24, 0x0910	; 0x800910 <tmpD>
     556:	20 91 11 09 	lds	r18, 0x0911	; 0x800911 <tmpB>
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	92 2b       	or	r25, r18
     55e:	a6 df       	rcall	.-180    	; 0x4ac <transmit_data>
     560:	cf 5f       	subi	r28, 0xFF	; 255
     562:	c8 30       	cpi	r28, 0x08	; 8
     564:	79 f7       	brne	.-34     	; 0x544 <print_matrix+0xa>
     566:	cf 91       	pop	r28
     568:	1f 91       	pop	r17
     56a:	0f 91       	pop	r16
     56c:	08 95       	ret

0000056e <alter_c_string>:
     56e:	81 11       	cpse	r24, r1
     570:	06 c0       	rjmp	.+12     	; 0x57e <alter_c_string+0x10>
     572:	fb 01       	movw	r30, r22
     574:	ec 5e       	subi	r30, 0xEC	; 236
     576:	fd 4f       	sbci	r31, 0xFD	; 253
     578:	80 e3       	ldi	r24, 0x30	; 48
     57a:	80 83       	st	Z, r24
     57c:	08 95       	ret
     57e:	81 30       	cpi	r24, 0x01	; 1
     580:	31 f4       	brne	.+12     	; 0x58e <alter_c_string+0x20>
     582:	fb 01       	movw	r30, r22
     584:	ec 5e       	subi	r30, 0xEC	; 236
     586:	fd 4f       	sbci	r31, 0xFD	; 253
     588:	81 e3       	ldi	r24, 0x31	; 49
     58a:	80 83       	st	Z, r24
     58c:	08 95       	ret
     58e:	82 30       	cpi	r24, 0x02	; 2
     590:	31 f4       	brne	.+12     	; 0x59e <alter_c_string+0x30>
     592:	fb 01       	movw	r30, r22
     594:	ec 5e       	subi	r30, 0xEC	; 236
     596:	fd 4f       	sbci	r31, 0xFD	; 253
     598:	82 e3       	ldi	r24, 0x32	; 50
     59a:	80 83       	st	Z, r24
     59c:	08 95       	ret
     59e:	83 30       	cpi	r24, 0x03	; 3
     5a0:	31 f4       	brne	.+12     	; 0x5ae <alter_c_string+0x40>
     5a2:	fb 01       	movw	r30, r22
     5a4:	ec 5e       	subi	r30, 0xEC	; 236
     5a6:	fd 4f       	sbci	r31, 0xFD	; 253
     5a8:	83 e3       	ldi	r24, 0x33	; 51
     5aa:	80 83       	st	Z, r24
     5ac:	08 95       	ret
     5ae:	84 30       	cpi	r24, 0x04	; 4
     5b0:	31 f4       	brne	.+12     	; 0x5be <alter_c_string+0x50>
     5b2:	fb 01       	movw	r30, r22
     5b4:	ec 5e       	subi	r30, 0xEC	; 236
     5b6:	fd 4f       	sbci	r31, 0xFD	; 253
     5b8:	84 e3       	ldi	r24, 0x34	; 52
     5ba:	80 83       	st	Z, r24
     5bc:	08 95       	ret
     5be:	85 30       	cpi	r24, 0x05	; 5
     5c0:	31 f4       	brne	.+12     	; 0x5ce <alter_c_string+0x60>
     5c2:	fb 01       	movw	r30, r22
     5c4:	ec 5e       	subi	r30, 0xEC	; 236
     5c6:	fd 4f       	sbci	r31, 0xFD	; 253
     5c8:	85 e3       	ldi	r24, 0x35	; 53
     5ca:	80 83       	st	Z, r24
     5cc:	08 95       	ret
     5ce:	86 30       	cpi	r24, 0x06	; 6
     5d0:	31 f4       	brne	.+12     	; 0x5de <alter_c_string+0x70>
     5d2:	fb 01       	movw	r30, r22
     5d4:	ec 5e       	subi	r30, 0xEC	; 236
     5d6:	fd 4f       	sbci	r31, 0xFD	; 253
     5d8:	86 e3       	ldi	r24, 0x36	; 54
     5da:	80 83       	st	Z, r24
     5dc:	08 95       	ret
     5de:	87 30       	cpi	r24, 0x07	; 7
     5e0:	31 f4       	brne	.+12     	; 0x5ee <alter_c_string+0x80>
     5e2:	fb 01       	movw	r30, r22
     5e4:	ec 5e       	subi	r30, 0xEC	; 236
     5e6:	fd 4f       	sbci	r31, 0xFD	; 253
     5e8:	87 e3       	ldi	r24, 0x37	; 55
     5ea:	80 83       	st	Z, r24
     5ec:	08 95       	ret
     5ee:	88 30       	cpi	r24, 0x08	; 8
     5f0:	31 f4       	brne	.+12     	; 0x5fe <alter_c_string+0x90>
     5f2:	fb 01       	movw	r30, r22
     5f4:	ec 5e       	subi	r30, 0xEC	; 236
     5f6:	fd 4f       	sbci	r31, 0xFD	; 253
     5f8:	88 e3       	ldi	r24, 0x38	; 56
     5fa:	80 83       	st	Z, r24
     5fc:	08 95       	ret
     5fe:	fb 01       	movw	r30, r22
     600:	ec 5e       	subi	r30, 0xEC	; 236
     602:	fd 4f       	sbci	r31, 0xFD	; 253
     604:	89 e3       	ldi	r24, 0x39	; 57
     606:	80 83       	st	Z, r24
     608:	08 95       	ret

0000060a <output_temp>:
     60a:	9d ec       	ldi	r25, 0xCD	; 205
     60c:	89 9f       	mul	r24, r25
     60e:	91 2d       	mov	r25, r1
     610:	11 24       	eor	r1, r1
     612:	96 95       	lsr	r25
     614:	96 95       	lsr	r25
     616:	96 95       	lsr	r25
     618:	90 93 fd 08 	sts	0x08FD, r25	; 0x8008fd <tens_place>
     61c:	39 2f       	mov	r19, r25
     61e:	33 0f       	add	r19, r19
     620:	23 2f       	mov	r18, r19
     622:	22 0f       	add	r18, r18
     624:	22 0f       	add	r18, r18
     626:	23 0f       	add	r18, r19
     628:	82 1b       	sub	r24, r18
     62a:	80 93 fc 08 	sts	0x08FC, r24	; 0x8008fc <ones_place>
     62e:	65 e1       	ldi	r22, 0x15	; 21
     630:	70 e0       	ldi	r23, 0x00	; 0
     632:	89 2f       	mov	r24, r25
     634:	9c df       	rcall	.-200    	; 0x56e <alter_c_string>
     636:	66 e1       	ldi	r22, 0x16	; 22
     638:	70 e0       	ldi	r23, 0x00	; 0
     63a:	80 91 fc 08 	lds	r24, 0x08FC	; 0x8008fc <ones_place>
     63e:	97 df       	rcall	.-210    	; 0x56e <alter_c_string>
     640:	64 e1       	ldi	r22, 0x14	; 20
     642:	72 e0       	ldi	r23, 0x02	; 2
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	19 cf       	rjmp	.-462    	; 0x47a <LCD_DisplayString>
     648:	08 95       	ret

0000064a <enter_c_string>:
     64a:	80 33       	cpi	r24, 0x30	; 48
     64c:	a1 f4       	brne	.+40     	; 0x676 <enter_c_string+0x2c>
     64e:	61 15       	cp	r22, r1
     650:	71 05       	cpc	r23, r1
     652:	29 f4       	brne	.+10     	; 0x65e <enter_c_string+0x14>
     654:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <user_input>
     658:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <PassKey_LCD_data+0x10>
     65c:	08 95       	ret
     65e:	fb 01       	movw	r30, r22
     660:	e4 5f       	subi	r30, 0xF4	; 244
     662:	fd 4f       	sbci	r31, 0xFD	; 253
     664:	10 82       	st	Z, r1
     666:	fb 01       	movw	r30, r22
     668:	ec 5c       	subi	r30, 0xCC	; 204
     66a:	fd 4f       	sbci	r31, 0xFD	; 253
     66c:	80 e3       	ldi	r24, 0x30	; 48
     66e:	80 8b       	std	Z+16, r24	; 0x10
     670:	8a e2       	ldi	r24, 0x2A	; 42
     672:	87 87       	std	Z+15, r24	; 0x0f
     674:	08 95       	ret
     676:	81 33       	cpi	r24, 0x31	; 49
     678:	b9 f4       	brne	.+46     	; 0x6a8 <enter_c_string+0x5e>
     67a:	61 15       	cp	r22, r1
     67c:	71 05       	cpc	r23, r1
     67e:	39 f4       	brne	.+14     	; 0x68e <enter_c_string+0x44>
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <user_input>
     686:	81 e3       	ldi	r24, 0x31	; 49
     688:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <PassKey_LCD_data+0x10>
     68c:	08 95       	ret
     68e:	fb 01       	movw	r30, r22
     690:	e4 5f       	subi	r30, 0xF4	; 244
     692:	fd 4f       	sbci	r31, 0xFD	; 253
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	80 83       	st	Z, r24
     698:	fb 01       	movw	r30, r22
     69a:	ec 5c       	subi	r30, 0xCC	; 204
     69c:	fd 4f       	sbci	r31, 0xFD	; 253
     69e:	81 e3       	ldi	r24, 0x31	; 49
     6a0:	80 8b       	std	Z+16, r24	; 0x10
     6a2:	8a e2       	ldi	r24, 0x2A	; 42
     6a4:	87 87       	std	Z+15, r24	; 0x0f
     6a6:	08 95       	ret
     6a8:	82 33       	cpi	r24, 0x32	; 50
     6aa:	b9 f4       	brne	.+46     	; 0x6da <enter_c_string+0x90>
     6ac:	61 15       	cp	r22, r1
     6ae:	71 05       	cpc	r23, r1
     6b0:	39 f4       	brne	.+14     	; 0x6c0 <enter_c_string+0x76>
     6b2:	82 e0       	ldi	r24, 0x02	; 2
     6b4:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <user_input>
     6b8:	82 e3       	ldi	r24, 0x32	; 50
     6ba:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <PassKey_LCD_data+0x10>
     6be:	08 95       	ret
     6c0:	fb 01       	movw	r30, r22
     6c2:	e4 5f       	subi	r30, 0xF4	; 244
     6c4:	fd 4f       	sbci	r31, 0xFD	; 253
     6c6:	82 e0       	ldi	r24, 0x02	; 2
     6c8:	80 83       	st	Z, r24
     6ca:	fb 01       	movw	r30, r22
     6cc:	ec 5c       	subi	r30, 0xCC	; 204
     6ce:	fd 4f       	sbci	r31, 0xFD	; 253
     6d0:	82 e3       	ldi	r24, 0x32	; 50
     6d2:	80 8b       	std	Z+16, r24	; 0x10
     6d4:	8a e2       	ldi	r24, 0x2A	; 42
     6d6:	87 87       	std	Z+15, r24	; 0x0f
     6d8:	08 95       	ret
     6da:	83 33       	cpi	r24, 0x33	; 51
     6dc:	b9 f4       	brne	.+46     	; 0x70c <enter_c_string+0xc2>
     6de:	61 15       	cp	r22, r1
     6e0:	71 05       	cpc	r23, r1
     6e2:	39 f4       	brne	.+14     	; 0x6f2 <enter_c_string+0xa8>
     6e4:	83 e0       	ldi	r24, 0x03	; 3
     6e6:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <user_input>
     6ea:	83 e3       	ldi	r24, 0x33	; 51
     6ec:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <PassKey_LCD_data+0x10>
     6f0:	08 95       	ret
     6f2:	fb 01       	movw	r30, r22
     6f4:	e4 5f       	subi	r30, 0xF4	; 244
     6f6:	fd 4f       	sbci	r31, 0xFD	; 253
     6f8:	83 e0       	ldi	r24, 0x03	; 3
     6fa:	80 83       	st	Z, r24
     6fc:	fb 01       	movw	r30, r22
     6fe:	ec 5c       	subi	r30, 0xCC	; 204
     700:	fd 4f       	sbci	r31, 0xFD	; 253
     702:	83 e3       	ldi	r24, 0x33	; 51
     704:	80 8b       	std	Z+16, r24	; 0x10
     706:	8a e2       	ldi	r24, 0x2A	; 42
     708:	87 87       	std	Z+15, r24	; 0x0f
     70a:	08 95       	ret
     70c:	84 33       	cpi	r24, 0x34	; 52
     70e:	b9 f4       	brne	.+46     	; 0x73e <enter_c_string+0xf4>
     710:	61 15       	cp	r22, r1
     712:	71 05       	cpc	r23, r1
     714:	39 f4       	brne	.+14     	; 0x724 <enter_c_string+0xda>
     716:	84 e0       	ldi	r24, 0x04	; 4
     718:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <user_input>
     71c:	84 e3       	ldi	r24, 0x34	; 52
     71e:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <PassKey_LCD_data+0x10>
     722:	08 95       	ret
     724:	fb 01       	movw	r30, r22
     726:	e4 5f       	subi	r30, 0xF4	; 244
     728:	fd 4f       	sbci	r31, 0xFD	; 253
     72a:	84 e0       	ldi	r24, 0x04	; 4
     72c:	80 83       	st	Z, r24
     72e:	fb 01       	movw	r30, r22
     730:	ec 5c       	subi	r30, 0xCC	; 204
     732:	fd 4f       	sbci	r31, 0xFD	; 253
     734:	84 e3       	ldi	r24, 0x34	; 52
     736:	80 8b       	std	Z+16, r24	; 0x10
     738:	8a e2       	ldi	r24, 0x2A	; 42
     73a:	87 87       	std	Z+15, r24	; 0x0f
     73c:	08 95       	ret
     73e:	85 33       	cpi	r24, 0x35	; 53
     740:	b9 f4       	brne	.+46     	; 0x770 <enter_c_string+0x126>
     742:	61 15       	cp	r22, r1
     744:	71 05       	cpc	r23, r1
     746:	39 f4       	brne	.+14     	; 0x756 <enter_c_string+0x10c>
     748:	85 e0       	ldi	r24, 0x05	; 5
     74a:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <user_input>
     74e:	85 e3       	ldi	r24, 0x35	; 53
     750:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <PassKey_LCD_data+0x10>
     754:	08 95       	ret
     756:	fb 01       	movw	r30, r22
     758:	e4 5f       	subi	r30, 0xF4	; 244
     75a:	fd 4f       	sbci	r31, 0xFD	; 253
     75c:	85 e0       	ldi	r24, 0x05	; 5
     75e:	80 83       	st	Z, r24
     760:	fb 01       	movw	r30, r22
     762:	ec 5c       	subi	r30, 0xCC	; 204
     764:	fd 4f       	sbci	r31, 0xFD	; 253
     766:	85 e3       	ldi	r24, 0x35	; 53
     768:	80 8b       	std	Z+16, r24	; 0x10
     76a:	8a e2       	ldi	r24, 0x2A	; 42
     76c:	87 87       	std	Z+15, r24	; 0x0f
     76e:	08 95       	ret
     770:	86 33       	cpi	r24, 0x36	; 54
     772:	b9 f4       	brne	.+46     	; 0x7a2 <enter_c_string+0x158>
     774:	61 15       	cp	r22, r1
     776:	71 05       	cpc	r23, r1
     778:	39 f4       	brne	.+14     	; 0x788 <enter_c_string+0x13e>
     77a:	86 e0       	ldi	r24, 0x06	; 6
     77c:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <user_input>
     780:	86 e3       	ldi	r24, 0x36	; 54
     782:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <PassKey_LCD_data+0x10>
     786:	08 95       	ret
     788:	fb 01       	movw	r30, r22
     78a:	e4 5f       	subi	r30, 0xF4	; 244
     78c:	fd 4f       	sbci	r31, 0xFD	; 253
     78e:	86 e0       	ldi	r24, 0x06	; 6
     790:	80 83       	st	Z, r24
     792:	fb 01       	movw	r30, r22
     794:	ec 5c       	subi	r30, 0xCC	; 204
     796:	fd 4f       	sbci	r31, 0xFD	; 253
     798:	86 e3       	ldi	r24, 0x36	; 54
     79a:	80 8b       	std	Z+16, r24	; 0x10
     79c:	8a e2       	ldi	r24, 0x2A	; 42
     79e:	87 87       	std	Z+15, r24	; 0x0f
     7a0:	08 95       	ret
     7a2:	87 33       	cpi	r24, 0x37	; 55
     7a4:	b9 f4       	brne	.+46     	; 0x7d4 <enter_c_string+0x18a>
     7a6:	61 15       	cp	r22, r1
     7a8:	71 05       	cpc	r23, r1
     7aa:	39 f4       	brne	.+14     	; 0x7ba <enter_c_string+0x170>
     7ac:	87 e0       	ldi	r24, 0x07	; 7
     7ae:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <user_input>
     7b2:	87 e3       	ldi	r24, 0x37	; 55
     7b4:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <PassKey_LCD_data+0x10>
     7b8:	08 95       	ret
     7ba:	fb 01       	movw	r30, r22
     7bc:	e4 5f       	subi	r30, 0xF4	; 244
     7be:	fd 4f       	sbci	r31, 0xFD	; 253
     7c0:	87 e0       	ldi	r24, 0x07	; 7
     7c2:	80 83       	st	Z, r24
     7c4:	fb 01       	movw	r30, r22
     7c6:	ec 5c       	subi	r30, 0xCC	; 204
     7c8:	fd 4f       	sbci	r31, 0xFD	; 253
     7ca:	87 e3       	ldi	r24, 0x37	; 55
     7cc:	80 8b       	std	Z+16, r24	; 0x10
     7ce:	8a e2       	ldi	r24, 0x2A	; 42
     7d0:	87 87       	std	Z+15, r24	; 0x0f
     7d2:	08 95       	ret
     7d4:	88 33       	cpi	r24, 0x38	; 56
     7d6:	b9 f4       	brne	.+46     	; 0x806 <enter_c_string+0x1bc>
     7d8:	61 15       	cp	r22, r1
     7da:	71 05       	cpc	r23, r1
     7dc:	39 f4       	brne	.+14     	; 0x7ec <enter_c_string+0x1a2>
     7de:	88 e0       	ldi	r24, 0x08	; 8
     7e0:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <user_input>
     7e4:	88 e3       	ldi	r24, 0x38	; 56
     7e6:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <PassKey_LCD_data+0x10>
     7ea:	08 95       	ret
     7ec:	fb 01       	movw	r30, r22
     7ee:	e4 5f       	subi	r30, 0xF4	; 244
     7f0:	fd 4f       	sbci	r31, 0xFD	; 253
     7f2:	88 e0       	ldi	r24, 0x08	; 8
     7f4:	80 83       	st	Z, r24
     7f6:	fb 01       	movw	r30, r22
     7f8:	ec 5c       	subi	r30, 0xCC	; 204
     7fa:	fd 4f       	sbci	r31, 0xFD	; 253
     7fc:	88 e3       	ldi	r24, 0x38	; 56
     7fe:	80 8b       	std	Z+16, r24	; 0x10
     800:	8a e2       	ldi	r24, 0x2A	; 42
     802:	87 87       	std	Z+15, r24	; 0x0f
     804:	08 95       	ret
     806:	61 15       	cp	r22, r1
     808:	71 05       	cpc	r23, r1
     80a:	39 f4       	brne	.+14     	; 0x81a <enter_c_string+0x1d0>
     80c:	89 e0       	ldi	r24, 0x09	; 9
     80e:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <user_input>
     812:	89 e3       	ldi	r24, 0x39	; 57
     814:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <PassKey_LCD_data+0x10>
     818:	08 95       	ret
     81a:	fb 01       	movw	r30, r22
     81c:	e4 5f       	subi	r30, 0xF4	; 244
     81e:	fd 4f       	sbci	r31, 0xFD	; 253
     820:	89 e0       	ldi	r24, 0x09	; 9
     822:	80 83       	st	Z, r24
     824:	fb 01       	movw	r30, r22
     826:	ec 5c       	subi	r30, 0xCC	; 204
     828:	fd 4f       	sbci	r31, 0xFD	; 253
     82a:	89 e3       	ldi	r24, 0x39	; 57
     82c:	80 8b       	std	Z+16, r24	; 0x10
     82e:	8a e2       	ldi	r24, 0x2A	; 42
     830:	87 87       	std	Z+15, r24	; 0x0f
     832:	08 95       	ret

00000834 <check_password>:
     834:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <current_pass>
     838:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <user_input>
     83c:	98 13       	cpse	r25, r24
     83e:	16 c0       	rjmp	.+44     	; 0x86c <check_password+0x38>
     840:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <current_pass+0x1>
     844:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <user_input+0x1>
     848:	98 13       	cpse	r25, r24
     84a:	13 c0       	rjmp	.+38     	; 0x872 <check_password+0x3e>
     84c:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <current_pass+0x2>
     850:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <user_input+0x2>
     854:	98 13       	cpse	r25, r24
     856:	10 c0       	rjmp	.+32     	; 0x878 <check_password+0x44>
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <current_pass+0x3>
     860:	20 91 0f 02 	lds	r18, 0x020F	; 0x80020f <user_input+0x3>
     864:	32 17       	cp	r19, r18
     866:	51 f0       	breq	.+20     	; 0x87c <check_password+0x48>
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	08 95       	ret
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	08 95       	ret
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	08 95       	ret
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	08 95       	ret

0000087e <output_for_user_pass_reset>:
     87e:	cf 93       	push	r28
     880:	c6 2f       	mov	r28, r22
     882:	80 33       	cpi	r24, 0x30	; 48
     884:	79 f4       	brne	.+30     	; 0x8a4 <output_for_user_pass_reset+0x26>
     886:	81 e1       	ldi	r24, 0x11	; 17
     888:	86 0f       	add	r24, r22
     88a:	d7 dd       	rcall	.-1106   	; 0x43a <LCD_Cursor>
     88c:	80 e3       	ldi	r24, 0x30	; 48
     88e:	ec dd       	rcall	.-1064   	; 0x468 <LCD_WriteData>
     890:	8c 2f       	mov	r24, r28
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	fc 01       	movw	r30, r24
     896:	e0 5f       	subi	r30, 0xF0	; 240
     898:	fd 4f       	sbci	r31, 0xFD	; 253
     89a:	10 82       	st	Z, r1
     89c:	60 e0       	ldi	r22, 0x00	; 0
     89e:	0e 94 1e 10 	call	0x203c	; 0x203c <eeprom_write_byte>
     8a2:	9f c0       	rjmp	.+318    	; 0x9e2 <output_for_user_pass_reset+0x164>
     8a4:	81 33       	cpi	r24, 0x31	; 49
     8a6:	81 f4       	brne	.+32     	; 0x8c8 <output_for_user_pass_reset+0x4a>
     8a8:	81 e1       	ldi	r24, 0x11	; 17
     8aa:	86 0f       	add	r24, r22
     8ac:	c6 dd       	rcall	.-1140   	; 0x43a <LCD_Cursor>
     8ae:	81 e3       	ldi	r24, 0x31	; 49
     8b0:	db dd       	rcall	.-1098   	; 0x468 <LCD_WriteData>
     8b2:	8c 2f       	mov	r24, r28
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	fc 01       	movw	r30, r24
     8b8:	e0 5f       	subi	r30, 0xF0	; 240
     8ba:	fd 4f       	sbci	r31, 0xFD	; 253
     8bc:	21 e0       	ldi	r18, 0x01	; 1
     8be:	20 83       	st	Z, r18
     8c0:	61 e0       	ldi	r22, 0x01	; 1
     8c2:	0e 94 1e 10 	call	0x203c	; 0x203c <eeprom_write_byte>
     8c6:	8d c0       	rjmp	.+282    	; 0x9e2 <output_for_user_pass_reset+0x164>
     8c8:	82 33       	cpi	r24, 0x32	; 50
     8ca:	81 f4       	brne	.+32     	; 0x8ec <output_for_user_pass_reset+0x6e>
     8cc:	81 e1       	ldi	r24, 0x11	; 17
     8ce:	86 0f       	add	r24, r22
     8d0:	b4 dd       	rcall	.-1176   	; 0x43a <LCD_Cursor>
     8d2:	82 e3       	ldi	r24, 0x32	; 50
     8d4:	c9 dd       	rcall	.-1134   	; 0x468 <LCD_WriteData>
     8d6:	8c 2f       	mov	r24, r28
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	fc 01       	movw	r30, r24
     8dc:	e0 5f       	subi	r30, 0xF0	; 240
     8de:	fd 4f       	sbci	r31, 0xFD	; 253
     8e0:	22 e0       	ldi	r18, 0x02	; 2
     8e2:	20 83       	st	Z, r18
     8e4:	62 e0       	ldi	r22, 0x02	; 2
     8e6:	0e 94 1e 10 	call	0x203c	; 0x203c <eeprom_write_byte>
     8ea:	7b c0       	rjmp	.+246    	; 0x9e2 <output_for_user_pass_reset+0x164>
     8ec:	83 33       	cpi	r24, 0x33	; 51
     8ee:	81 f4       	brne	.+32     	; 0x910 <output_for_user_pass_reset+0x92>
     8f0:	81 e1       	ldi	r24, 0x11	; 17
     8f2:	86 0f       	add	r24, r22
     8f4:	a2 dd       	rcall	.-1212   	; 0x43a <LCD_Cursor>
     8f6:	83 e3       	ldi	r24, 0x33	; 51
     8f8:	b7 dd       	rcall	.-1170   	; 0x468 <LCD_WriteData>
     8fa:	8c 2f       	mov	r24, r28
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	fc 01       	movw	r30, r24
     900:	e0 5f       	subi	r30, 0xF0	; 240
     902:	fd 4f       	sbci	r31, 0xFD	; 253
     904:	23 e0       	ldi	r18, 0x03	; 3
     906:	20 83       	st	Z, r18
     908:	63 e0       	ldi	r22, 0x03	; 3
     90a:	0e 94 1e 10 	call	0x203c	; 0x203c <eeprom_write_byte>
     90e:	69 c0       	rjmp	.+210    	; 0x9e2 <output_for_user_pass_reset+0x164>
     910:	84 33       	cpi	r24, 0x34	; 52
     912:	81 f4       	brne	.+32     	; 0x934 <output_for_user_pass_reset+0xb6>
     914:	81 e1       	ldi	r24, 0x11	; 17
     916:	86 0f       	add	r24, r22
     918:	90 dd       	rcall	.-1248   	; 0x43a <LCD_Cursor>
     91a:	84 e3       	ldi	r24, 0x34	; 52
     91c:	a5 dd       	rcall	.-1206   	; 0x468 <LCD_WriteData>
     91e:	8c 2f       	mov	r24, r28
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	fc 01       	movw	r30, r24
     924:	e0 5f       	subi	r30, 0xF0	; 240
     926:	fd 4f       	sbci	r31, 0xFD	; 253
     928:	24 e0       	ldi	r18, 0x04	; 4
     92a:	20 83       	st	Z, r18
     92c:	64 e0       	ldi	r22, 0x04	; 4
     92e:	0e 94 1e 10 	call	0x203c	; 0x203c <eeprom_write_byte>
     932:	57 c0       	rjmp	.+174    	; 0x9e2 <output_for_user_pass_reset+0x164>
     934:	85 33       	cpi	r24, 0x35	; 53
     936:	81 f4       	brne	.+32     	; 0x958 <output_for_user_pass_reset+0xda>
     938:	81 e1       	ldi	r24, 0x11	; 17
     93a:	86 0f       	add	r24, r22
     93c:	7e dd       	rcall	.-1284   	; 0x43a <LCD_Cursor>
     93e:	85 e3       	ldi	r24, 0x35	; 53
     940:	93 dd       	rcall	.-1242   	; 0x468 <LCD_WriteData>
     942:	8c 2f       	mov	r24, r28
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	fc 01       	movw	r30, r24
     948:	e0 5f       	subi	r30, 0xF0	; 240
     94a:	fd 4f       	sbci	r31, 0xFD	; 253
     94c:	25 e0       	ldi	r18, 0x05	; 5
     94e:	20 83       	st	Z, r18
     950:	65 e0       	ldi	r22, 0x05	; 5
     952:	0e 94 1e 10 	call	0x203c	; 0x203c <eeprom_write_byte>
     956:	45 c0       	rjmp	.+138    	; 0x9e2 <output_for_user_pass_reset+0x164>
     958:	86 33       	cpi	r24, 0x36	; 54
     95a:	81 f4       	brne	.+32     	; 0x97c <output_for_user_pass_reset+0xfe>
     95c:	81 e1       	ldi	r24, 0x11	; 17
     95e:	86 0f       	add	r24, r22
     960:	6c dd       	rcall	.-1320   	; 0x43a <LCD_Cursor>
     962:	86 e3       	ldi	r24, 0x36	; 54
     964:	81 dd       	rcall	.-1278   	; 0x468 <LCD_WriteData>
     966:	8c 2f       	mov	r24, r28
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	fc 01       	movw	r30, r24
     96c:	e0 5f       	subi	r30, 0xF0	; 240
     96e:	fd 4f       	sbci	r31, 0xFD	; 253
     970:	26 e0       	ldi	r18, 0x06	; 6
     972:	20 83       	st	Z, r18
     974:	66 e0       	ldi	r22, 0x06	; 6
     976:	0e 94 1e 10 	call	0x203c	; 0x203c <eeprom_write_byte>
     97a:	33 c0       	rjmp	.+102    	; 0x9e2 <output_for_user_pass_reset+0x164>
     97c:	87 33       	cpi	r24, 0x37	; 55
     97e:	81 f4       	brne	.+32     	; 0x9a0 <output_for_user_pass_reset+0x122>
     980:	81 e1       	ldi	r24, 0x11	; 17
     982:	86 0f       	add	r24, r22
     984:	5a dd       	rcall	.-1356   	; 0x43a <LCD_Cursor>
     986:	87 e3       	ldi	r24, 0x37	; 55
     988:	6f dd       	rcall	.-1314   	; 0x468 <LCD_WriteData>
     98a:	8c 2f       	mov	r24, r28
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	fc 01       	movw	r30, r24
     990:	e0 5f       	subi	r30, 0xF0	; 240
     992:	fd 4f       	sbci	r31, 0xFD	; 253
     994:	27 e0       	ldi	r18, 0x07	; 7
     996:	20 83       	st	Z, r18
     998:	67 e0       	ldi	r22, 0x07	; 7
     99a:	0e 94 1e 10 	call	0x203c	; 0x203c <eeprom_write_byte>
     99e:	21 c0       	rjmp	.+66     	; 0x9e2 <output_for_user_pass_reset+0x164>
     9a0:	88 33       	cpi	r24, 0x38	; 56
     9a2:	81 f4       	brne	.+32     	; 0x9c4 <output_for_user_pass_reset+0x146>
     9a4:	81 e1       	ldi	r24, 0x11	; 17
     9a6:	86 0f       	add	r24, r22
     9a8:	48 dd       	rcall	.-1392   	; 0x43a <LCD_Cursor>
     9aa:	88 e3       	ldi	r24, 0x38	; 56
     9ac:	5d dd       	rcall	.-1350   	; 0x468 <LCD_WriteData>
     9ae:	8c 2f       	mov	r24, r28
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	fc 01       	movw	r30, r24
     9b4:	e0 5f       	subi	r30, 0xF0	; 240
     9b6:	fd 4f       	sbci	r31, 0xFD	; 253
     9b8:	28 e0       	ldi	r18, 0x08	; 8
     9ba:	20 83       	st	Z, r18
     9bc:	68 e0       	ldi	r22, 0x08	; 8
     9be:	0e 94 1e 10 	call	0x203c	; 0x203c <eeprom_write_byte>
     9c2:	0f c0       	rjmp	.+30     	; 0x9e2 <output_for_user_pass_reset+0x164>
     9c4:	81 e1       	ldi	r24, 0x11	; 17
     9c6:	86 0f       	add	r24, r22
     9c8:	38 dd       	rcall	.-1424   	; 0x43a <LCD_Cursor>
     9ca:	89 e3       	ldi	r24, 0x39	; 57
     9cc:	4d dd       	rcall	.-1382   	; 0x468 <LCD_WriteData>
     9ce:	8c 2f       	mov	r24, r28
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	fc 01       	movw	r30, r24
     9d4:	e0 5f       	subi	r30, 0xF0	; 240
     9d6:	fd 4f       	sbci	r31, 0xFD	; 253
     9d8:	29 e0       	ldi	r18, 0x09	; 9
     9da:	20 83       	st	Z, r18
     9dc:	69 e0       	ldi	r22, 0x09	; 9
     9de:	0e 94 1e 10 	call	0x203c	; 0x203c <eeprom_write_byte>
     9e2:	cf 91       	pop	r28
     9e4:	08 95       	ret

000009e6 <generate_random_pass>:
     9e6:	0f 93       	push	r16
     9e8:	1f 93       	push	r17
     9ea:	cf 93       	push	r28
     9ec:	df 93       	push	r29
     9ee:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <srand>
     9f2:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <rand>
     9f6:	c8 e0       	ldi	r28, 0x08	; 8
     9f8:	d2 e0       	ldi	r29, 0x02	; 2
     9fa:	0a e0       	ldi	r16, 0x0A	; 10
     9fc:	10 e0       	ldi	r17, 0x00	; 0
     9fe:	b8 01       	movw	r22, r16
     a00:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__divmodhi4>
     a04:	88 83       	st	Y, r24
     a06:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <rand>
     a0a:	b8 01       	movw	r22, r16
     a0c:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__divmodhi4>
     a10:	89 83       	std	Y+1, r24	; 0x01
     a12:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <rand>
     a16:	b8 01       	movw	r22, r16
     a18:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__divmodhi4>
     a1c:	8a 83       	std	Y+2, r24	; 0x02
     a1e:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <rand>
     a22:	b8 01       	movw	r22, r16
     a24:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__divmodhi4>
     a28:	8b 83       	std	Y+3, r24	; 0x03
     a2a:	df 91       	pop	r29
     a2c:	cf 91       	pop	r28
     a2e:	1f 91       	pop	r17
     a30:	0f 91       	pop	r16
     a32:	08 95       	ret

00000a34 <Trans_Tick>:
     a34:	80 91 6f 09 	lds	r24, 0x096F	; 0x80096f <trans_state>
     a38:	81 30       	cpi	r24, 0x01	; 1
     a3a:	21 f4       	brne	.+8      	; 0xa44 <Trans_Tick+0x10>
     a3c:	60 e0       	ldi	r22, 0x00	; 0
     a3e:	80 91 0d 09 	lds	r24, 0x090D	; 0x80090d <data_to_send>
     a42:	4f dc       	rcall	.-1890   	; 0x2e2 <USART_Send>
     a44:	80 91 6f 09 	lds	r24, 0x096F	; 0x80096f <trans_state>
     a48:	88 23       	and	r24, r24
     a4a:	19 f0       	breq	.+6      	; 0xa52 <Trans_Tick+0x1e>
     a4c:	81 30       	cpi	r24, 0x01	; 1
     a4e:	99 f0       	breq	.+38     	; 0xa76 <Trans_Tick+0x42>
     a50:	19 c0       	rjmp	.+50     	; 0xa84 <Trans_Tick+0x50>
     a52:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     a56:	85 ff       	sbrs	r24, 5
     a58:	17 c0       	rjmp	.+46     	; 0xa88 <Trans_Tick+0x54>
     a5a:	80 91 0f 09 	lds	r24, 0x090F	; 0x80090f <ARM_DISARM>
     a5e:	81 30       	cpi	r24, 0x01	; 1
     a60:	21 f4       	brne	.+8      	; 0xa6a <Trans_Tick+0x36>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	80 93 0d 09 	sts	0x090D, r24	; 0x80090d <data_to_send>
     a68:	02 c0       	rjmp	.+4      	; 0xa6e <Trans_Tick+0x3a>
     a6a:	10 92 0d 09 	sts	0x090D, r1	; 0x80090d <data_to_send>
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	80 93 6f 09 	sts	0x096F, r24	; 0x80096f <trans_state>
     a74:	08 95       	ret
     a76:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     a7a:	86 ff       	sbrs	r24, 6
     a7c:	05 c0       	rjmp	.+10     	; 0xa88 <Trans_Tick+0x54>
     a7e:	10 92 6f 09 	sts	0x096F, r1	; 0x80096f <trans_state>
     a82:	08 95       	ret
     a84:	10 92 6f 09 	sts	0x096F, r1	; 0x80096f <trans_state>
     a88:	08 95       	ret

00000a8a <TransSecTask>:
     a8a:	10 92 6f 09 	sts	0x096F, r1	; 0x80096f <trans_state>
     a8e:	d2 df       	rcall	.-92     	; 0xa34 <Trans_Tick>
     a90:	8a e0       	ldi	r24, 0x0A	; 10
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <vTaskDelay>
     a98:	fa cf       	rjmp	.-12     	; 0xa8e <TransSecTask+0x4>

00000a9a <TransSecPulse>:
     a9a:	af 92       	push	r10
     a9c:	bf 92       	push	r11
     a9e:	cf 92       	push	r12
     aa0:	df 92       	push	r13
     aa2:	ef 92       	push	r14
     aa4:	ff 92       	push	r15
     aa6:	0f 93       	push	r16
     aa8:	a1 2c       	mov	r10, r1
     aaa:	b1 2c       	mov	r11, r1
     aac:	c1 2c       	mov	r12, r1
     aae:	d1 2c       	mov	r13, r1
     ab0:	e1 2c       	mov	r14, r1
     ab2:	f1 2c       	mov	r15, r1
     ab4:	08 2f       	mov	r16, r24
     ab6:	20 e0       	ldi	r18, 0x00	; 0
     ab8:	30 e0       	ldi	r19, 0x00	; 0
     aba:	45 e5       	ldi	r20, 0x55	; 85
     abc:	50 e0       	ldi	r21, 0x00	; 0
     abe:	66 e5       	ldi	r22, 0x56	; 86
     ac0:	72 e0       	ldi	r23, 0x02	; 2
     ac2:	85 e4       	ldi	r24, 0x45	; 69
     ac4:	95 e0       	ldi	r25, 0x05	; 5
     ac6:	de d6       	rcall	.+3516   	; 0x1884 <xTaskGenericCreate>
     ac8:	0f 91       	pop	r16
     aca:	ff 90       	pop	r15
     acc:	ef 90       	pop	r14
     ace:	df 90       	pop	r13
     ad0:	cf 90       	pop	r12
     ad2:	bf 90       	pop	r11
     ad4:	af 90       	pop	r10
     ad6:	08 95       	ret

00000ad8 <Rec_Tick>:
     ad8:	80 91 6c 09 	lds	r24, 0x096C	; 0x80096c <rec_state>
     adc:	81 30       	cpi	r24, 0x01	; 1
     ade:	31 f4       	brne	.+12     	; 0xaec <Rec_Tick+0x14>
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	11 dc       	rcall	.-2014   	; 0x306 <USART_Receive>
     ae4:	80 93 0e 09 	sts	0x090E, r24	; 0x80090e <received_value>
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	de db       	rcall	.-2116   	; 0x2a8 <USART_Flush>
     aec:	80 91 6c 09 	lds	r24, 0x096C	; 0x80096c <rec_state>
     af0:	88 23       	and	r24, r24
     af2:	19 f0       	breq	.+6      	; 0xafa <Rec_Tick+0x22>
     af4:	10 92 6c 09 	sts	0x096C, r1	; 0x80096c <rec_state>
     af8:	08 95       	ret
     afa:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     afe:	88 23       	and	r24, r24
     b00:	1c f4       	brge	.+6      	; 0xb08 <Rec_Tick+0x30>
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <rec_state>
     b08:	08 95       	ret

00000b0a <RecSecTask>:
     b0a:	10 92 6c 09 	sts	0x096C, r1	; 0x80096c <rec_state>
     b0e:	e4 df       	rcall	.-56     	; 0xad8 <Rec_Tick>
     b10:	8a e0       	ldi	r24, 0x0A	; 10
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <vTaskDelay>
     b18:	fa cf       	rjmp	.-12     	; 0xb0e <RecSecTask+0x4>

00000b1a <RecSecPulse>:
     b1a:	af 92       	push	r10
     b1c:	bf 92       	push	r11
     b1e:	cf 92       	push	r12
     b20:	df 92       	push	r13
     b22:	ef 92       	push	r14
     b24:	ff 92       	push	r15
     b26:	0f 93       	push	r16
     b28:	a1 2c       	mov	r10, r1
     b2a:	b1 2c       	mov	r11, r1
     b2c:	c1 2c       	mov	r12, r1
     b2e:	d1 2c       	mov	r13, r1
     b30:	e1 2c       	mov	r14, r1
     b32:	f1 2c       	mov	r15, r1
     b34:	08 2f       	mov	r16, r24
     b36:	20 e0       	ldi	r18, 0x00	; 0
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	45 e5       	ldi	r20, 0x55	; 85
     b3c:	50 e0       	ldi	r21, 0x00	; 0
     b3e:	61 e0       	ldi	r22, 0x01	; 1
     b40:	73 e0       	ldi	r23, 0x03	; 3
     b42:	85 e8       	ldi	r24, 0x85	; 133
     b44:	95 e0       	ldi	r25, 0x05	; 5
     b46:	9e d6       	rcall	.+3388   	; 0x1884 <xTaskGenericCreate>
     b48:	0f 91       	pop	r16
     b4a:	ff 90       	pop	r15
     b4c:	ef 90       	pop	r14
     b4e:	df 90       	pop	r13
     b50:	cf 90       	pop	r12
     b52:	bf 90       	pop	r11
     b54:	af 90       	pop	r10
     b56:	08 95       	ret

00000b58 <Menu_Tick>:
     b58:	cf 93       	push	r28
     b5a:	df 93       	push	r29
     b5c:	e0 91 70 09 	lds	r30, 0x0970	; 0x800970 <menu_state>
     b60:	8e 2f       	mov	r24, r30
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	8b 30       	cpi	r24, 0x0B	; 11
     b66:	91 05       	cpc	r25, r1
     b68:	08 f0       	brcs	.+2      	; 0xb6c <Menu_Tick+0x14>
     b6a:	da c2       	rjmp	.+1460   	; 0x1120 <Menu_Tick+0x5c8>
     b6c:	fc 01       	movw	r30, r24
     b6e:	ea 5b       	subi	r30, 0xBA	; 186
     b70:	ff 4f       	sbci	r31, 0xFF	; 255
     b72:	0c 94 8e 0f 	jmp	0x1f1c	; 0x1f1c <__tablejump2__>
     b76:	80 91 0e 09 	lds	r24, 0x090E	; 0x80090e <received_value>
     b7a:	47 dd       	rcall	.-1394   	; 0x60a <output_temp>
     b7c:	82 e0       	ldi	r24, 0x02	; 2
     b7e:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <menu_state>
     b82:	ce c2       	rjmp	.+1436   	; 0x1120 <Menu_Tick+0x5c8>
     b84:	d2 db       	rcall	.-2140   	; 0x32a <GetKeypadKey>
     b86:	80 93 03 09 	sts	0x0903, r24	; 0x800903 <keypad_val>
     b8a:	81 11       	cpse	r24, r1
     b8c:	21 c0       	rjmp	.+66     	; 0xbd0 <Menu_Tick+0x78>
     b8e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <bluetooth_arm_disarm>
     b92:	82 30       	cpi	r24, 0x02	; 2
     b94:	31 f4       	brne	.+12     	; 0xba2 <Menu_Tick+0x4a>
     b96:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <menu_state>
     b9a:	80 91 0e 09 	lds	r24, 0x090E	; 0x80090e <received_value>
     b9e:	35 dd       	rcall	.-1430   	; 0x60a <output_temp>
     ba0:	bf c2       	rjmp	.+1406   	; 0x1120 <Menu_Tick+0x5c8>
     ba2:	81 11       	cpse	r24, r1
     ba4:	09 c0       	rjmp	.+18     	; 0xbb8 <Menu_Tick+0x60>
     ba6:	82 e0       	ldi	r24, 0x02	; 2
     ba8:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <menu_state>
     bac:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <bluetooth_arm_disarm>
     bb0:	80 91 0e 09 	lds	r24, 0x090E	; 0x80090e <received_value>
     bb4:	2a dd       	rcall	.-1452   	; 0x60a <output_temp>
     bb6:	b4 c2       	rjmp	.+1384   	; 0x1120 <Menu_Tick+0x5c8>
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <menu_state>
     bbe:	92 e0       	ldi	r25, 0x02	; 2
     bc0:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <bluetooth_arm_disarm>
     bc4:	80 93 0f 09 	sts	0x090F, r24	; 0x80090f <ARM_DISARM>
     bc8:	6f e6       	ldi	r22, 0x6F	; 111
     bca:	72 e0       	ldi	r23, 0x02	; 2
     bcc:	56 dc       	rcall	.-1876   	; 0x47a <LCD_DisplayString>
     bce:	a8 c2       	rjmp	.+1360   	; 0x1120 <Menu_Tick+0x5c8>
     bd0:	81 34       	cpi	r24, 0x41	; 65
     bd2:	c9 f4       	brne	.+50     	; 0xc06 <Menu_Tick+0xae>
     bd4:	83 e0       	ldi	r24, 0x03	; 3
     bd6:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <menu_state>
     bda:	64 e3       	ldi	r22, 0x34	; 52
     bdc:	72 e0       	ldi	r23, 0x02	; 2
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	4c dc       	rcall	.-1896   	; 0x47a <LCD_DisplayString>
     be2:	10 92 0c 09 	sts	0x090C, r1	; 0x80090c <mode>
     be6:	10 92 00 09 	sts	0x0900, r1	; 0x800900 <pass_location>
     bea:	ec e0       	ldi	r30, 0x0C	; 12
     bec:	f2 e0       	ldi	r31, 0x02	; 2
     bee:	10 82       	st	Z, r1
     bf0:	11 82       	std	Z+1, r1	; 0x01
     bf2:	12 82       	std	Z+2, r1	; 0x02
     bf4:	13 82       	std	Z+3, r1	; 0x03
     bf6:	e4 e3       	ldi	r30, 0x34	; 52
     bf8:	f2 e0       	ldi	r31, 0x02	; 2
     bfa:	80 e2       	ldi	r24, 0x20	; 32
     bfc:	80 8b       	std	Z+16, r24	; 0x10
     bfe:	81 8b       	std	Z+17, r24	; 0x11
     c00:	82 8b       	std	Z+18, r24	; 0x12
     c02:	83 8b       	std	Z+19, r24	; 0x13
     c04:	8d c2       	rjmp	.+1306   	; 0x1120 <Menu_Tick+0x5c8>
     c06:	82 34       	cpi	r24, 0x42	; 66
     c08:	61 f4       	brne	.+24     	; 0xc22 <Menu_Tick+0xca>
     c0a:	85 e0       	ldi	r24, 0x05	; 5
     c0c:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <menu_state>
     c10:	60 e8       	ldi	r22, 0x80	; 128
     c12:	72 e0       	ldi	r23, 0x02	; 2
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	31 dc       	rcall	.-1950   	; 0x47a <LCD_DisplayString>
     c18:	10 92 02 09 	sts	0x0902, r1	; 0x800902 <random_count+0x1>
     c1c:	10 92 01 09 	sts	0x0901, r1	; 0x800901 <random_count>
     c20:	7f c2       	rjmp	.+1278   	; 0x1120 <Menu_Tick+0x5c8>
     c22:	82 e0       	ldi	r24, 0x02	; 2
     c24:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <menu_state>
     c28:	7b c2       	rjmp	.+1270   	; 0x1120 <Menu_Tick+0x5c8>
     c2a:	7f db       	rcall	.-2306   	; 0x32a <GetKeypadKey>
     c2c:	80 93 03 09 	sts	0x0903, r24	; 0x800903 <keypad_val>
     c30:	91 e0       	ldi	r25, 0x01	; 1
     c32:	90 93 70 09 	sts	0x0970, r25	; 0x800970 <menu_state>
     c36:	90 91 07 09 	lds	r25, 0x0907	; 0x800907 <sensors_tripped>
     c3a:	91 30       	cpi	r25, 0x01	; 1
     c3c:	81 f0       	breq	.+32     	; 0xc5e <Menu_Tick+0x106>
     c3e:	90 91 08 09 	lds	r25, 0x0908	; 0x800908 <sensors_tripped+0x1>
     c42:	91 30       	cpi	r25, 0x01	; 1
     c44:	61 f0       	breq	.+24     	; 0xc5e <Menu_Tick+0x106>
     c46:	90 91 09 09 	lds	r25, 0x0909	; 0x800909 <sensors_tripped+0x2>
     c4a:	91 30       	cpi	r25, 0x01	; 1
     c4c:	41 f0       	breq	.+16     	; 0xc5e <Menu_Tick+0x106>
     c4e:	90 91 0a 09 	lds	r25, 0x090A	; 0x80090a <sensors_tripped+0x3>
     c52:	91 30       	cpi	r25, 0x01	; 1
     c54:	21 f0       	breq	.+8      	; 0xc5e <Menu_Tick+0x106>
     c56:	90 91 0b 09 	lds	r25, 0x090B	; 0x80090b <sensors_tripped+0x4>
     c5a:	91 30       	cpi	r25, 0x01	; 1
     c5c:	41 f4       	brne	.+16     	; 0xc6e <Menu_Tick+0x116>
     c5e:	8a e0       	ldi	r24, 0x0A	; 10
     c60:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <menu_state>
     c64:	65 ea       	ldi	r22, 0xA5	; 165
     c66:	72 e0       	ldi	r23, 0x02	; 2
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	07 dc       	rcall	.-2034   	; 0x47a <LCD_DisplayString>
     c6c:	59 c2       	rjmp	.+1202   	; 0x1120 <Menu_Tick+0x5c8>
     c6e:	88 23       	and	r24, r24
     c70:	21 f0       	breq	.+8      	; 0xc7a <Menu_Tick+0x122>
     c72:	9e eb       	ldi	r25, 0xBE	; 190
     c74:	98 0f       	add	r25, r24
     c76:	93 30       	cpi	r25, 0x03	; 3
     c78:	d8 f4       	brcc	.+54     	; 0xcb0 <Menu_Tick+0x158>
     c7a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <bluetooth_arm_disarm>
     c7e:	82 30       	cpi	r24, 0x02	; 2
     c80:	29 f4       	brne	.+10     	; 0xc8c <Menu_Tick+0x134>
     c82:	6f e6       	ldi	r22, 0x6F	; 111
     c84:	72 e0       	ldi	r23, 0x02	; 2
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	f8 db       	rcall	.-2064   	; 0x47a <LCD_DisplayString>
     c8a:	4a c2       	rjmp	.+1172   	; 0x1120 <Menu_Tick+0x5c8>
     c8c:	81 30       	cpi	r24, 0x01	; 1
     c8e:	41 f4       	brne	.+16     	; 0xca0 <Menu_Tick+0x148>
     c90:	82 e0       	ldi	r24, 0x02	; 2
     c92:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <bluetooth_arm_disarm>
     c96:	6f e6       	ldi	r22, 0x6F	; 111
     c98:	72 e0       	ldi	r23, 0x02	; 2
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	ee db       	rcall	.-2084   	; 0x47a <LCD_DisplayString>
     c9e:	40 c2       	rjmp	.+1152   	; 0x1120 <Menu_Tick+0x5c8>
     ca0:	82 e0       	ldi	r24, 0x02	; 2
     ca2:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <menu_state>
     ca6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <bluetooth_arm_disarm>
     caa:	10 92 0f 09 	sts	0x090F, r1	; 0x80090f <ARM_DISARM>
     cae:	38 c2       	rjmp	.+1136   	; 0x1120 <Menu_Tick+0x5c8>
     cb0:	81 34       	cpi	r24, 0x41	; 65
     cb2:	c9 f4       	brne	.+50     	; 0xce6 <Menu_Tick+0x18e>
     cb4:	83 e0       	ldi	r24, 0x03	; 3
     cb6:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <menu_state>
     cba:	64 e3       	ldi	r22, 0x34	; 52
     cbc:	72 e0       	ldi	r23, 0x02	; 2
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	dc db       	rcall	.-2120   	; 0x47a <LCD_DisplayString>
     cc2:	10 92 0c 09 	sts	0x090C, r1	; 0x80090c <mode>
     cc6:	10 92 00 09 	sts	0x0900, r1	; 0x800900 <pass_location>
     cca:	ec e0       	ldi	r30, 0x0C	; 12
     ccc:	f2 e0       	ldi	r31, 0x02	; 2
     cce:	10 82       	st	Z, r1
     cd0:	11 82       	std	Z+1, r1	; 0x01
     cd2:	12 82       	std	Z+2, r1	; 0x02
     cd4:	13 82       	std	Z+3, r1	; 0x03
     cd6:	e4 e3       	ldi	r30, 0x34	; 52
     cd8:	f2 e0       	ldi	r31, 0x02	; 2
     cda:	80 e2       	ldi	r24, 0x20	; 32
     cdc:	80 8b       	std	Z+16, r24	; 0x10
     cde:	81 8b       	std	Z+17, r24	; 0x11
     ce0:	82 8b       	std	Z+18, r24	; 0x12
     ce2:	83 8b       	std	Z+19, r24	; 0x13
     ce4:	1d c2       	rjmp	.+1082   	; 0x1120 <Menu_Tick+0x5c8>
     ce6:	6f e6       	ldi	r22, 0x6F	; 111
     ce8:	72 e0       	ldi	r23, 0x02	; 2
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	c6 db       	rcall	.-2164   	; 0x47a <LCD_DisplayString>
     cee:	10 92 06 09 	sts	0x0906, r1	; 0x800906 <trip_location>
     cf2:	16 c2       	rjmp	.+1068   	; 0x1120 <Menu_Tick+0x5c8>
     cf4:	1a db       	rcall	.-2508   	; 0x32a <GetKeypadKey>
     cf6:	80 93 03 09 	sts	0x0903, r24	; 0x800903 <keypad_val>
     cfa:	92 e0       	ldi	r25, 0x02	; 2
     cfc:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <bluetooth_arm_disarm>
     d00:	88 23       	and	r24, r24
     d02:	41 f0       	breq	.+16     	; 0xd14 <Menu_Tick+0x1bc>
     d04:	9f eb       	ldi	r25, 0xBF	; 191
     d06:	98 0f       	add	r25, r24
     d08:	92 30       	cpi	r25, 0x02	; 2
     d0a:	20 f0       	brcs	.+8      	; 0xd14 <Menu_Tick+0x1bc>
     d0c:	8a 32       	cpi	r24, 0x2A	; 42
     d0e:	11 f0       	breq	.+4      	; 0xd14 <Menu_Tick+0x1bc>
     d10:	83 32       	cpi	r24, 0x23	; 35
     d12:	41 f4       	brne	.+16     	; 0xd24 <Menu_Tick+0x1cc>
     d14:	83 e0       	ldi	r24, 0x03	; 3
     d16:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <menu_state>
     d1a:	64 e3       	ldi	r22, 0x34	; 52
     d1c:	72 e0       	ldi	r23, 0x02	; 2
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	ac db       	rcall	.-2216   	; 0x47a <LCD_DisplayString>
     d22:	fe c1       	rjmp	.+1020   	; 0x1120 <Menu_Tick+0x5c8>
     d24:	83 34       	cpi	r24, 0x43	; 67
     d26:	61 f4       	brne	.+24     	; 0xd40 <Menu_Tick+0x1e8>
     d28:	80 91 0f 09 	lds	r24, 0x090F	; 0x80090f <ARM_DISARM>
     d2c:	81 11       	cpse	r24, r1
     d2e:	04 c0       	rjmp	.+8      	; 0xd38 <Menu_Tick+0x1e0>
     d30:	82 e0       	ldi	r24, 0x02	; 2
     d32:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <menu_state>
     d36:	f4 c1       	rjmp	.+1000   	; 0x1120 <Menu_Tick+0x5c8>
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <menu_state>
     d3e:	f0 c1       	rjmp	.+992    	; 0x1120 <Menu_Tick+0x5c8>
     d40:	84 34       	cpi	r24, 0x44	; 68
     d42:	09 f0       	breq	.+2      	; 0xd46 <Menu_Tick+0x1ee>
     d44:	9f c0       	rjmp	.+318    	; 0xe84 <Menu_Tick+0x32c>
     d46:	76 dd       	rcall	.-1300   	; 0x834 <check_password>
     d48:	81 30       	cpi	r24, 0x01	; 1
     d4a:	91 05       	cpc	r25, r1
     d4c:	a1 f4       	brne	.+40     	; 0xd76 <Menu_Tick+0x21e>
     d4e:	80 91 0c 09 	lds	r24, 0x090C	; 0x80090c <mode>
     d52:	81 11       	cpse	r24, r1
     d54:	23 c0       	rjmp	.+70     	; 0xd9c <Menu_Tick+0x244>
     d56:	80 91 0f 09 	lds	r24, 0x090F	; 0x80090f <ARM_DISARM>
     d5a:	81 11       	cpse	r24, r1
     d5c:	06 c0       	rjmp	.+12     	; 0xd6a <Menu_Tick+0x212>
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	80 93 0f 09 	sts	0x090F, r24	; 0x80090f <ARM_DISARM>
     d64:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <menu_state>
     d68:	db c1       	rjmp	.+950    	; 0x1120 <Menu_Tick+0x5c8>
     d6a:	10 92 0f 09 	sts	0x090F, r1	; 0x80090f <ARM_DISARM>
     d6e:	82 e0       	ldi	r24, 0x02	; 2
     d70:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <menu_state>
     d74:	d5 c1       	rjmp	.+938    	; 0x1120 <Menu_Tick+0x5c8>
     d76:	89 2b       	or	r24, r25
     d78:	09 f0       	breq	.+2      	; 0xd7c <Menu_Tick+0x224>
     d7a:	d2 c1       	rjmp	.+932    	; 0x1120 <Menu_Tick+0x5c8>
     d7c:	80 91 0c 09 	lds	r24, 0x090C	; 0x80090c <mode>
     d80:	81 11       	cpse	r24, r1
     d82:	21 c0       	rjmp	.+66     	; 0xdc6 <Menu_Tick+0x26e>
     d84:	80 91 0f 09 	lds	r24, 0x090F	; 0x80090f <ARM_DISARM>
     d88:	81 11       	cpse	r24, r1
     d8a:	04 c0       	rjmp	.+8      	; 0xd94 <Menu_Tick+0x23c>
     d8c:	82 e0       	ldi	r24, 0x02	; 2
     d8e:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <menu_state>
     d92:	c6 c1       	rjmp	.+908    	; 0x1120 <Menu_Tick+0x5c8>
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <menu_state>
     d9a:	c2 c1       	rjmp	.+900    	; 0x1120 <Menu_Tick+0x5c8>
     d9c:	80 91 0c 09 	lds	r24, 0x090C	; 0x80090c <mode>
     da0:	81 30       	cpi	r24, 0x01	; 1
     da2:	e9 f4       	brne	.+58     	; 0xdde <Menu_Tick+0x286>
     da4:	67 eb       	ldi	r22, 0xB7	; 183
     da6:	72 e0       	ldi	r23, 0x02	; 2
     da8:	68 db       	rcall	.-2352   	; 0x47a <LCD_DisplayString>
     daa:	81 e2       	ldi	r24, 0x21	; 33
     dac:	46 db       	rcall	.-2420   	; 0x43a <LCD_Cursor>
     dae:	87 e0       	ldi	r24, 0x07	; 7
     db0:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <menu_state>
     db4:	10 92 00 09 	sts	0x0900, r1	; 0x800900 <pass_location>
     db8:	ec e0       	ldi	r30, 0x0C	; 12
     dba:	f2 e0       	ldi	r31, 0x02	; 2
     dbc:	10 82       	st	Z, r1
     dbe:	11 82       	std	Z+1, r1	; 0x01
     dc0:	12 82       	std	Z+2, r1	; 0x02
     dc2:	13 82       	std	Z+3, r1	; 0x03
     dc4:	ad c1       	rjmp	.+858    	; 0x1120 <Menu_Tick+0x5c8>
     dc6:	80 91 0c 09 	lds	r24, 0x090C	; 0x80090c <mode>
     dca:	81 30       	cpi	r24, 0x01	; 1
     dcc:	79 f5       	brne	.+94     	; 0xe2c <Menu_Tick+0x2d4>
     dce:	85 e0       	ldi	r24, 0x05	; 5
     dd0:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <menu_state>
     dd4:	60 e8       	ldi	r22, 0x80	; 128
     dd6:	72 e0       	ldi	r23, 0x02	; 2
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	4f db       	rcall	.-2402   	; 0x47a <LCD_DisplayString>
     ddc:	a1 c1       	rjmp	.+834    	; 0x1120 <Menu_Tick+0x5c8>
     dde:	82 30       	cpi	r24, 0x02	; 2
     de0:	89 f5       	brne	.+98     	; 0xe44 <Menu_Tick+0x2ec>
     de2:	89 e0       	ldi	r24, 0x09	; 9
     de4:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <menu_state>
     de8:	80 91 01 09 	lds	r24, 0x0901	; 0x800901 <random_count>
     dec:	90 91 02 09 	lds	r25, 0x0902	; 0x800902 <random_count+0x1>
     df0:	fa dd       	rcall	.-1036   	; 0x9e6 <generate_random_pass>
     df2:	67 ec       	ldi	r22, 0xC7	; 199
     df4:	72 e0       	ldi	r23, 0x02	; 2
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	40 db       	rcall	.-2432   	; 0x47a <LCD_DisplayString>
     dfa:	81 e1       	ldi	r24, 0x11	; 17
     dfc:	1e db       	rcall	.-2500   	; 0x43a <LCD_Cursor>
     dfe:	c8 e0       	ldi	r28, 0x08	; 8
     e00:	d2 e0       	ldi	r29, 0x02	; 2
     e02:	88 81       	ld	r24, Y
     e04:	80 5d       	subi	r24, 0xD0	; 208
     e06:	30 db       	rcall	.-2464   	; 0x468 <LCD_WriteData>
     e08:	82 e1       	ldi	r24, 0x12	; 18
     e0a:	17 db       	rcall	.-2514   	; 0x43a <LCD_Cursor>
     e0c:	89 81       	ldd	r24, Y+1	; 0x01
     e0e:	80 5d       	subi	r24, 0xD0	; 208
     e10:	2b db       	rcall	.-2474   	; 0x468 <LCD_WriteData>
     e12:	83 e1       	ldi	r24, 0x13	; 19
     e14:	12 db       	rcall	.-2524   	; 0x43a <LCD_Cursor>
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	80 5d       	subi	r24, 0xD0	; 208
     e1a:	26 db       	rcall	.-2484   	; 0x468 <LCD_WriteData>
     e1c:	84 e1       	ldi	r24, 0x14	; 20
     e1e:	0d db       	rcall	.-2534   	; 0x43a <LCD_Cursor>
     e20:	8b 81       	ldd	r24, Y+3	; 0x03
     e22:	80 5d       	subi	r24, 0xD0	; 208
     e24:	21 db       	rcall	.-2494   	; 0x468 <LCD_WriteData>
     e26:	81 e2       	ldi	r24, 0x21	; 33
     e28:	08 db       	rcall	.-2544   	; 0x43a <LCD_Cursor>
     e2a:	7a c1       	rjmp	.+756    	; 0x1120 <Menu_Tick+0x5c8>
     e2c:	80 91 0c 09 	lds	r24, 0x090C	; 0x80090c <mode>
     e30:	82 30       	cpi	r24, 0x02	; 2
     e32:	99 f4       	brne	.+38     	; 0xe5a <Menu_Tick+0x302>
     e34:	85 e0       	ldi	r24, 0x05	; 5
     e36:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <menu_state>
     e3a:	60 e8       	ldi	r22, 0x80	; 128
     e3c:	72 e0       	ldi	r23, 0x02	; 2
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	1c db       	rcall	.-2504   	; 0x47a <LCD_DisplayString>
     e42:	6e c1       	rjmp	.+732    	; 0x1120 <Menu_Tick+0x5c8>
     e44:	80 91 0c 09 	lds	r24, 0x090C	; 0x80090c <mode>
     e48:	83 30       	cpi	r24, 0x03	; 3
     e4a:	09 f0       	breq	.+2      	; 0xe4e <Menu_Tick+0x2f6>
     e4c:	69 c1       	rjmp	.+722    	; 0x1120 <Menu_Tick+0x5c8>
     e4e:	82 e0       	ldi	r24, 0x02	; 2
     e50:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <menu_state>
     e54:	10 92 0f 09 	sts	0x090F, r1	; 0x80090f <ARM_DISARM>
     e58:	63 c1       	rjmp	.+710    	; 0x1120 <Menu_Tick+0x5c8>
     e5a:	83 30       	cpi	r24, 0x03	; 3
     e5c:	09 f0       	breq	.+2      	; 0xe60 <Menu_Tick+0x308>
     e5e:	60 c1       	rjmp	.+704    	; 0x1120 <Menu_Tick+0x5c8>
     e60:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <menu_state>
     e64:	10 92 00 09 	sts	0x0900, r1	; 0x800900 <pass_location>
     e68:	ec e0       	ldi	r30, 0x0C	; 12
     e6a:	f2 e0       	ldi	r31, 0x02	; 2
     e6c:	10 82       	st	Z, r1
     e6e:	11 82       	std	Z+1, r1	; 0x01
     e70:	12 82       	std	Z+2, r1	; 0x02
     e72:	13 82       	std	Z+3, r1	; 0x03
     e74:	e4 e3       	ldi	r30, 0x34	; 52
     e76:	f2 e0       	ldi	r31, 0x02	; 2
     e78:	80 e2       	ldi	r24, 0x20	; 32
     e7a:	80 8b       	std	Z+16, r24	; 0x10
     e7c:	81 8b       	std	Z+17, r24	; 0x11
     e7e:	82 8b       	std	Z+18, r24	; 0x12
     e80:	83 8b       	std	Z+19, r24	; 0x13
     e82:	4e c1       	rjmp	.+668    	; 0x1120 <Menu_Tick+0x5c8>
     e84:	94 e0       	ldi	r25, 0x04	; 4
     e86:	90 93 70 09 	sts	0x0970, r25	; 0x800970 <menu_state>
     e8a:	60 91 00 09 	lds	r22, 0x0900	; 0x800900 <pass_location>
     e8e:	64 30       	cpi	r22, 0x04	; 4
     e90:	08 f0       	brcs	.+2      	; 0xe94 <Menu_Tick+0x33c>
     e92:	46 c1       	rjmp	.+652    	; 0x1120 <Menu_Tick+0x5c8>
     e94:	70 e0       	ldi	r23, 0x00	; 0
     e96:	d9 db       	rcall	.-2126   	; 0x64a <enter_c_string>
     e98:	80 91 00 09 	lds	r24, 0x0900	; 0x800900 <pass_location>
     e9c:	8f 5f       	subi	r24, 0xFF	; 255
     e9e:	80 93 00 09 	sts	0x0900, r24	; 0x800900 <pass_location>
     ea2:	3e c1       	rjmp	.+636    	; 0x1120 <Menu_Tick+0x5c8>
     ea4:	42 da       	rcall	.-2940   	; 0x32a <GetKeypadKey>
     ea6:	80 93 03 09 	sts	0x0903, r24	; 0x800903 <keypad_val>
     eaa:	81 11       	cpse	r24, r1
     eac:	04 c0       	rjmp	.+8      	; 0xeb6 <Menu_Tick+0x35e>
     eae:	83 e0       	ldi	r24, 0x03	; 3
     eb0:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <menu_state>
     eb4:	35 c1       	rjmp	.+618    	; 0x1120 <Menu_Tick+0x5c8>
     eb6:	84 e0       	ldi	r24, 0x04	; 4
     eb8:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <menu_state>
     ebc:	31 c1       	rjmp	.+610    	; 0x1120 <Menu_Tick+0x5c8>
     ebe:	35 da       	rcall	.-2966   	; 0x32a <GetKeypadKey>
     ec0:	80 93 03 09 	sts	0x0903, r24	; 0x800903 <keypad_val>
     ec4:	20 91 01 09 	lds	r18, 0x0901	; 0x800901 <random_count>
     ec8:	30 91 02 09 	lds	r19, 0x0902	; 0x800902 <random_count+0x1>
     ecc:	2f 5f       	subi	r18, 0xFF	; 255
     ece:	3f 4f       	sbci	r19, 0xFF	; 255
     ed0:	30 93 02 09 	sts	0x0902, r19	; 0x800902 <random_count+0x1>
     ed4:	20 93 01 09 	sts	0x0901, r18	; 0x800901 <random_count>
     ed8:	88 23       	and	r24, r24
     eda:	31 f0       	breq	.+12     	; 0xee8 <Menu_Tick+0x390>
     edc:	9f eb       	ldi	r25, 0xBF	; 191
     ede:	98 0f       	add	r25, r24
     ee0:	92 30       	cpi	r25, 0x02	; 2
     ee2:	10 f0       	brcs	.+4      	; 0xee8 <Menu_Tick+0x390>
     ee4:	84 34       	cpi	r24, 0x44	; 68
     ee6:	21 f4       	brne	.+8      	; 0xef0 <Menu_Tick+0x398>
     ee8:	85 e0       	ldi	r24, 0x05	; 5
     eea:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <menu_state>
     eee:	18 c1       	rjmp	.+560    	; 0x1120 <Menu_Tick+0x5c8>
     ef0:	83 34       	cpi	r24, 0x43	; 67
     ef2:	61 f4       	brne	.+24     	; 0xf0c <Menu_Tick+0x3b4>
     ef4:	80 91 0f 09 	lds	r24, 0x090F	; 0x80090f <ARM_DISARM>
     ef8:	81 11       	cpse	r24, r1
     efa:	04 c0       	rjmp	.+8      	; 0xf04 <Menu_Tick+0x3ac>
     efc:	82 e0       	ldi	r24, 0x02	; 2
     efe:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <menu_state>
     f02:	0e c1       	rjmp	.+540    	; 0x1120 <Menu_Tick+0x5c8>
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <menu_state>
     f0a:	0a c1       	rjmp	.+532    	; 0x1120 <Menu_Tick+0x5c8>
     f0c:	8a 32       	cpi	r24, 0x2A	; 42
     f0e:	b1 f4       	brne	.+44     	; 0xf3c <Menu_Tick+0x3e4>
     f10:	83 e0       	ldi	r24, 0x03	; 3
     f12:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <menu_state>
     f16:	10 92 00 09 	sts	0x0900, r1	; 0x800900 <pass_location>
     f1a:	ec e0       	ldi	r30, 0x0C	; 12
     f1c:	f2 e0       	ldi	r31, 0x02	; 2
     f1e:	10 82       	st	Z, r1
     f20:	11 82       	std	Z+1, r1	; 0x01
     f22:	12 82       	std	Z+2, r1	; 0x02
     f24:	13 82       	std	Z+3, r1	; 0x03
     f26:	e4 e3       	ldi	r30, 0x34	; 52
     f28:	f2 e0       	ldi	r31, 0x02	; 2
     f2a:	80 e2       	ldi	r24, 0x20	; 32
     f2c:	80 8b       	std	Z+16, r24	; 0x10
     f2e:	81 8b       	std	Z+17, r24	; 0x11
     f30:	82 8b       	std	Z+18, r24	; 0x12
     f32:	83 8b       	std	Z+19, r24	; 0x13
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	80 93 0c 09 	sts	0x090C, r24	; 0x80090c <mode>
     f3a:	f2 c0       	rjmp	.+484    	; 0x1120 <Menu_Tick+0x5c8>
     f3c:	83 32       	cpi	r24, 0x23	; 35
     f3e:	b1 f4       	brne	.+44     	; 0xf6c <Menu_Tick+0x414>
     f40:	83 e0       	ldi	r24, 0x03	; 3
     f42:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <menu_state>
     f46:	10 92 00 09 	sts	0x0900, r1	; 0x800900 <pass_location>
     f4a:	ec e0       	ldi	r30, 0x0C	; 12
     f4c:	f2 e0       	ldi	r31, 0x02	; 2
     f4e:	10 82       	st	Z, r1
     f50:	11 82       	std	Z+1, r1	; 0x01
     f52:	12 82       	std	Z+2, r1	; 0x02
     f54:	13 82       	std	Z+3, r1	; 0x03
     f56:	e4 e3       	ldi	r30, 0x34	; 52
     f58:	f2 e0       	ldi	r31, 0x02	; 2
     f5a:	80 e2       	ldi	r24, 0x20	; 32
     f5c:	80 8b       	std	Z+16, r24	; 0x10
     f5e:	81 8b       	std	Z+17, r24	; 0x11
     f60:	82 8b       	std	Z+18, r24	; 0x12
     f62:	83 8b       	std	Z+19, r24	; 0x13
     f64:	82 e0       	ldi	r24, 0x02	; 2
     f66:	80 93 0c 09 	sts	0x090C, r24	; 0x80090c <mode>
     f6a:	da c0       	rjmp	.+436    	; 0x1120 <Menu_Tick+0x5c8>
     f6c:	85 e0       	ldi	r24, 0x05	; 5
     f6e:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <menu_state>
     f72:	d6 c0       	rjmp	.+428    	; 0x1120 <Menu_Tick+0x5c8>
     f74:	da d9       	rcall	.-3148   	; 0x32a <GetKeypadKey>
     f76:	80 93 03 09 	sts	0x0903, r24	; 0x800903 <keypad_val>
     f7a:	88 23       	and	r24, r24
     f7c:	51 f0       	breq	.+20     	; 0xf92 <Menu_Tick+0x43a>
     f7e:	9f eb       	ldi	r25, 0xBF	; 191
     f80:	98 0f       	add	r25, r24
     f82:	92 30       	cpi	r25, 0x02	; 2
     f84:	30 f0       	brcs	.+12     	; 0xf92 <Menu_Tick+0x43a>
     f86:	84 34       	cpi	r24, 0x44	; 68
     f88:	21 f0       	breq	.+8      	; 0xf92 <Menu_Tick+0x43a>
     f8a:	8a 32       	cpi	r24, 0x2A	; 42
     f8c:	11 f0       	breq	.+4      	; 0xf92 <Menu_Tick+0x43a>
     f8e:	83 32       	cpi	r24, 0x23	; 35
     f90:	21 f4       	brne	.+8      	; 0xf9a <Menu_Tick+0x442>
     f92:	87 e0       	ldi	r24, 0x07	; 7
     f94:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <menu_state>
     f98:	c3 c0       	rjmp	.+390    	; 0x1120 <Menu_Tick+0x5c8>
     f9a:	83 34       	cpi	r24, 0x43	; 67
     f9c:	21 f4       	brne	.+8      	; 0xfa6 <Menu_Tick+0x44e>
     f9e:	82 e0       	ldi	r24, 0x02	; 2
     fa0:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <menu_state>
     fa4:	bd c0       	rjmp	.+378    	; 0x1120 <Menu_Tick+0x5c8>
     fa6:	60 91 00 09 	lds	r22, 0x0900	; 0x800900 <pass_location>
     faa:	64 30       	cpi	r22, 0x04	; 4
     fac:	31 f4       	brne	.+12     	; 0xfba <Menu_Tick+0x462>
     fae:	82 e0       	ldi	r24, 0x02	; 2
     fb0:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <menu_state>
     fb4:	10 92 00 09 	sts	0x0900, r1	; 0x800900 <pass_location>
     fb8:	b3 c0       	rjmp	.+358    	; 0x1120 <Menu_Tick+0x5c8>
     fba:	98 e0       	ldi	r25, 0x08	; 8
     fbc:	90 93 70 09 	sts	0x0970, r25	; 0x800970 <menu_state>
     fc0:	5e dc       	rcall	.-1860   	; 0x87e <output_for_user_pass_reset>
     fc2:	80 91 00 09 	lds	r24, 0x0900	; 0x800900 <pass_location>
     fc6:	8f 5f       	subi	r24, 0xFF	; 255
     fc8:	80 93 00 09 	sts	0x0900, r24	; 0x800900 <pass_location>
     fcc:	a9 c0       	rjmp	.+338    	; 0x1120 <Menu_Tick+0x5c8>
     fce:	ad d9       	rcall	.-3238   	; 0x32a <GetKeypadKey>
     fd0:	80 93 03 09 	sts	0x0903, r24	; 0x800903 <keypad_val>
     fd4:	81 11       	cpse	r24, r1
     fd6:	04 c0       	rjmp	.+8      	; 0xfe0 <Menu_Tick+0x488>
     fd8:	87 e0       	ldi	r24, 0x07	; 7
     fda:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <menu_state>
     fde:	a0 c0       	rjmp	.+320    	; 0x1120 <Menu_Tick+0x5c8>
     fe0:	88 e0       	ldi	r24, 0x08	; 8
     fe2:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <menu_state>
     fe6:	9c c0       	rjmp	.+312    	; 0x1120 <Menu_Tick+0x5c8>
     fe8:	a0 d9       	rcall	.-3264   	; 0x32a <GetKeypadKey>
     fea:	80 93 03 09 	sts	0x0903, r24	; 0x800903 <keypad_val>
     fee:	81 11       	cpse	r24, r1
     ff0:	04 c0       	rjmp	.+8      	; 0xffa <Menu_Tick+0x4a2>
     ff2:	89 e0       	ldi	r24, 0x09	; 9
     ff4:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <menu_state>
     ff8:	93 c0       	rjmp	.+294    	; 0x1120 <Menu_Tick+0x5c8>
     ffa:	83 32       	cpi	r24, 0x23	; 35
     ffc:	19 f5       	brne	.+70     	; 0x1044 <Menu_Tick+0x4ec>
     ffe:	e8 e0       	ldi	r30, 0x08	; 8
    1000:	f2 e0       	ldi	r31, 0x02	; 2
    1002:	60 81       	ld	r22, Z
    1004:	c0 e1       	ldi	r28, 0x10	; 16
    1006:	d2 e0       	ldi	r29, 0x02	; 2
    1008:	68 83       	st	Y, r22
    100a:	81 81       	ldd	r24, Z+1	; 0x01
    100c:	89 83       	std	Y+1, r24	; 0x01
    100e:	82 81       	ldd	r24, Z+2	; 0x02
    1010:	8a 83       	std	Y+2, r24	; 0x02
    1012:	83 81       	ldd	r24, Z+3	; 0x03
    1014:	8b 83       	std	Y+3, r24	; 0x03
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	0e 94 1e 10 	call	0x203c	; 0x203c <eeprom_write_byte>
    101e:	69 81       	ldd	r22, Y+1	; 0x01
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	0e 94 1e 10 	call	0x203c	; 0x203c <eeprom_write_byte>
    1028:	6a 81       	ldd	r22, Y+2	; 0x02
    102a:	82 e0       	ldi	r24, 0x02	; 2
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	0e 94 1e 10 	call	0x203c	; 0x203c <eeprom_write_byte>
    1032:	6b 81       	ldd	r22, Y+3	; 0x03
    1034:	83 e0       	ldi	r24, 0x03	; 3
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	0e 94 1e 10 	call	0x203c	; 0x203c <eeprom_write_byte>
    103c:	82 e0       	ldi	r24, 0x02	; 2
    103e:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <menu_state>
    1042:	6e c0       	rjmp	.+220    	; 0x1120 <Menu_Tick+0x5c8>
    1044:	83 34       	cpi	r24, 0x43	; 67
    1046:	21 f4       	brne	.+8      	; 0x1050 <Menu_Tick+0x4f8>
    1048:	82 e0       	ldi	r24, 0x02	; 2
    104a:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <menu_state>
    104e:	68 c0       	rjmp	.+208    	; 0x1120 <Menu_Tick+0x5c8>
    1050:	89 e0       	ldi	r24, 0x09	; 9
    1052:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <menu_state>
    1056:	64 c0       	rjmp	.+200    	; 0x1120 <Menu_Tick+0x5c8>
    1058:	80 91 07 09 	lds	r24, 0x0907	; 0x800907 <sensors_tripped>
    105c:	81 30       	cpi	r24, 0x01	; 1
    105e:	31 f4       	brne	.+12     	; 0x106c <Menu_Tick+0x514>
    1060:	82 e1       	ldi	r24, 0x12	; 18
    1062:	eb d9       	rcall	.-3114   	; 0x43a <LCD_Cursor>
    1064:	81 e3       	ldi	r24, 0x31	; 49
    1066:	00 da       	rcall	.-3072   	; 0x468 <LCD_WriteData>
    1068:	81 e2       	ldi	r24, 0x21	; 33
    106a:	e7 d9       	rcall	.-3122   	; 0x43a <LCD_Cursor>
    106c:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <sensors_tripped+0x1>
    1070:	81 30       	cpi	r24, 0x01	; 1
    1072:	31 f4       	brne	.+12     	; 0x1080 <Menu_Tick+0x528>
    1074:	84 e1       	ldi	r24, 0x14	; 20
    1076:	e1 d9       	rcall	.-3134   	; 0x43a <LCD_Cursor>
    1078:	82 e3       	ldi	r24, 0x32	; 50
    107a:	f6 d9       	rcall	.-3092   	; 0x468 <LCD_WriteData>
    107c:	81 e2       	ldi	r24, 0x21	; 33
    107e:	dd d9       	rcall	.-3142   	; 0x43a <LCD_Cursor>
    1080:	80 91 09 09 	lds	r24, 0x0909	; 0x800909 <sensors_tripped+0x2>
    1084:	81 30       	cpi	r24, 0x01	; 1
    1086:	31 f4       	brne	.+12     	; 0x1094 <Menu_Tick+0x53c>
    1088:	86 e1       	ldi	r24, 0x16	; 22
    108a:	d7 d9       	rcall	.-3154   	; 0x43a <LCD_Cursor>
    108c:	83 e3       	ldi	r24, 0x33	; 51
    108e:	ec d9       	rcall	.-3112   	; 0x468 <LCD_WriteData>
    1090:	81 e2       	ldi	r24, 0x21	; 33
    1092:	d3 d9       	rcall	.-3162   	; 0x43a <LCD_Cursor>
    1094:	80 91 0a 09 	lds	r24, 0x090A	; 0x80090a <sensors_tripped+0x3>
    1098:	81 30       	cpi	r24, 0x01	; 1
    109a:	31 f4       	brne	.+12     	; 0x10a8 <Menu_Tick+0x550>
    109c:	88 e1       	ldi	r24, 0x18	; 24
    109e:	cd d9       	rcall	.-3174   	; 0x43a <LCD_Cursor>
    10a0:	84 e3       	ldi	r24, 0x34	; 52
    10a2:	e2 d9       	rcall	.-3132   	; 0x468 <LCD_WriteData>
    10a4:	81 e2       	ldi	r24, 0x21	; 33
    10a6:	c9 d9       	rcall	.-3182   	; 0x43a <LCD_Cursor>
    10a8:	80 91 0b 09 	lds	r24, 0x090B	; 0x80090b <sensors_tripped+0x4>
    10ac:	81 30       	cpi	r24, 0x01	; 1
    10ae:	31 f4       	brne	.+12     	; 0x10bc <Menu_Tick+0x564>
    10b0:	8a e1       	ldi	r24, 0x1A	; 26
    10b2:	c3 d9       	rcall	.-3194   	; 0x43a <LCD_Cursor>
    10b4:	85 e3       	ldi	r24, 0x35	; 53
    10b6:	d8 d9       	rcall	.-3152   	; 0x468 <LCD_WriteData>
    10b8:	81 e2       	ldi	r24, 0x21	; 33
    10ba:	bf d9       	rcall	.-3202   	; 0x43a <LCD_Cursor>
    10bc:	36 d9       	rcall	.-3476   	; 0x32a <GetKeypadKey>
    10be:	80 93 03 09 	sts	0x0903, r24	; 0x800903 <keypad_val>
    10c2:	81 34       	cpi	r24, 0x41	; 65
    10c4:	a9 f4       	brne	.+42     	; 0x10f0 <Menu_Tick+0x598>
    10c6:	93 e0       	ldi	r25, 0x03	; 3
    10c8:	90 93 70 09 	sts	0x0970, r25	; 0x800970 <menu_state>
    10cc:	10 92 00 09 	sts	0x0900, r1	; 0x800900 <pass_location>
    10d0:	ec e0       	ldi	r30, 0x0C	; 12
    10d2:	f2 e0       	ldi	r31, 0x02	; 2
    10d4:	10 82       	st	Z, r1
    10d6:	11 82       	std	Z+1, r1	; 0x01
    10d8:	12 82       	std	Z+2, r1	; 0x02
    10da:	13 82       	std	Z+3, r1	; 0x03
    10dc:	e4 e3       	ldi	r30, 0x34	; 52
    10de:	f2 e0       	ldi	r31, 0x02	; 2
    10e0:	80 e2       	ldi	r24, 0x20	; 32
    10e2:	80 8b       	std	Z+16, r24	; 0x10
    10e4:	81 8b       	std	Z+17, r24	; 0x11
    10e6:	82 8b       	std	Z+18, r24	; 0x12
    10e8:	83 8b       	std	Z+19, r24	; 0x13
    10ea:	90 93 0c 09 	sts	0x090C, r25	; 0x80090c <mode>
    10ee:	18 c0       	rjmp	.+48     	; 0x1120 <Menu_Tick+0x5c8>
    10f0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <bluetooth_arm_disarm>
    10f4:	82 30       	cpi	r24, 0x02	; 2
    10f6:	21 f4       	brne	.+8      	; 0x1100 <Menu_Tick+0x5a8>
    10f8:	8a e0       	ldi	r24, 0x0A	; 10
    10fa:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <menu_state>
    10fe:	10 c0       	rjmp	.+32     	; 0x1120 <Menu_Tick+0x5c8>
    1100:	81 30       	cpi	r24, 0x01	; 1
    1102:	39 f4       	brne	.+14     	; 0x1112 <Menu_Tick+0x5ba>
    1104:	82 e0       	ldi	r24, 0x02	; 2
    1106:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <bluetooth_arm_disarm>
    110a:	8a e0       	ldi	r24, 0x0A	; 10
    110c:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <menu_state>
    1110:	07 c0       	rjmp	.+14     	; 0x1120 <Menu_Tick+0x5c8>
    1112:	82 e0       	ldi	r24, 0x02	; 2
    1114:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <menu_state>
    1118:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <bluetooth_arm_disarm>
    111c:	10 92 0f 09 	sts	0x090F, r1	; 0x80090f <ARM_DISARM>
    1120:	df 91       	pop	r29
    1122:	cf 91       	pop	r28
    1124:	08 95       	ret

00001126 <MenuSecTask>:
    1126:	10 92 70 09 	sts	0x0970, r1	; 0x800970 <menu_state>
    112a:	16 dd       	rcall	.-1492   	; 0xb58 <Menu_Tick>
    112c:	8a e0       	ldi	r24, 0x0A	; 10
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	21 d6       	rcall	.+3138   	; 0x1d74 <vTaskDelay>
    1132:	fb cf       	rjmp	.-10     	; 0x112a <MenuSecTask+0x4>

00001134 <MenuSecPulse>:
    1134:	af 92       	push	r10
    1136:	bf 92       	push	r11
    1138:	cf 92       	push	r12
    113a:	df 92       	push	r13
    113c:	ef 92       	push	r14
    113e:	ff 92       	push	r15
    1140:	0f 93       	push	r16
    1142:	a1 2c       	mov	r10, r1
    1144:	b1 2c       	mov	r11, r1
    1146:	c1 2c       	mov	r12, r1
    1148:	d1 2c       	mov	r13, r1
    114a:	e1 2c       	mov	r14, r1
    114c:	f1 2c       	mov	r15, r1
    114e:	08 2f       	mov	r16, r24
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	45 e5       	ldi	r20, 0x55	; 85
    1156:	50 e0       	ldi	r21, 0x00	; 0
    1158:	66 ed       	ldi	r22, 0xD6	; 214
    115a:	72 e0       	ldi	r23, 0x02	; 2
    115c:	83 e9       	ldi	r24, 0x93	; 147
    115e:	98 e0       	ldi	r25, 0x08	; 8
    1160:	91 d3       	rcall	.+1826   	; 0x1884 <xTaskGenericCreate>
    1162:	0f 91       	pop	r16
    1164:	ff 90       	pop	r15
    1166:	ef 90       	pop	r14
    1168:	df 90       	pop	r13
    116a:	cf 90       	pop	r12
    116c:	bf 90       	pop	r11
    116e:	af 90       	pop	r10
    1170:	08 95       	ret

00001172 <Sense_Tick>:
    1172:	80 91 72 09 	lds	r24, 0x0972	; 0x800972 <sense_state>
    1176:	88 23       	and	r24, r24
    1178:	19 f0       	breq	.+6      	; 0x1180 <Sense_Tick+0xe>
    117a:	82 30       	cpi	r24, 0x02	; 2
    117c:	21 f0       	breq	.+8      	; 0x1186 <Sense_Tick+0x14>
    117e:	29 c0       	rjmp	.+82     	; 0x11d2 <Sense_Tick+0x60>
    1180:	10 92 04 09 	sts	0x0904, r1	; 0x800904 <sensor_trip>
    1184:	2d c0       	rjmp	.+90     	; 0x11e0 <Sense_Tick+0x6e>
    1186:	80 91 0e 09 	lds	r24, 0x090E	; 0x80090e <received_value>
    118a:	80 ff       	sbrs	r24, 0
    118c:	05 c0       	rjmp	.+10     	; 0x1198 <Sense_Tick+0x26>
    118e:	91 e0       	ldi	r25, 0x01	; 1
    1190:	90 93 07 09 	sts	0x0907, r25	; 0x800907 <sensors_tripped>
    1194:	90 93 04 09 	sts	0x0904, r25	; 0x800904 <sensor_trip>
    1198:	81 ff       	sbrs	r24, 1
    119a:	05 c0       	rjmp	.+10     	; 0x11a6 <Sense_Tick+0x34>
    119c:	21 e0       	ldi	r18, 0x01	; 1
    119e:	20 93 08 09 	sts	0x0908, r18	; 0x800908 <sensors_tripped+0x1>
    11a2:	20 93 04 09 	sts	0x0904, r18	; 0x800904 <sensor_trip>
    11a6:	82 ff       	sbrs	r24, 2
    11a8:	05 c0       	rjmp	.+10     	; 0x11b4 <Sense_Tick+0x42>
    11aa:	21 e0       	ldi	r18, 0x01	; 1
    11ac:	20 93 09 09 	sts	0x0909, r18	; 0x800909 <sensors_tripped+0x2>
    11b0:	20 93 04 09 	sts	0x0904, r18	; 0x800904 <sensor_trip>
    11b4:	83 ff       	sbrs	r24, 3
    11b6:	05 c0       	rjmp	.+10     	; 0x11c2 <Sense_Tick+0x50>
    11b8:	21 e0       	ldi	r18, 0x01	; 1
    11ba:	20 93 0a 09 	sts	0x090A, r18	; 0x80090a <sensors_tripped+0x3>
    11be:	20 93 04 09 	sts	0x0904, r18	; 0x800904 <sensor_trip>
    11c2:	84 ff       	sbrs	r24, 4
    11c4:	41 c0       	rjmp	.+130    	; 0x1248 <Sense_Tick+0xd6>
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	80 93 0b 09 	sts	0x090B, r24	; 0x80090b <sensors_tripped+0x4>
    11cc:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <sensor_trip>
    11d0:	3b c0       	rjmp	.+118    	; 0x1248 <Sense_Tick+0xd6>
    11d2:	81 30       	cpi	r24, 0x01	; 1
    11d4:	c1 f0       	breq	.+48     	; 0x1206 <Sense_Tick+0x94>
    11d6:	20 f0       	brcs	.+8      	; 0x11e0 <Sense_Tick+0x6e>
    11d8:	82 30       	cpi	r24, 0x02	; 2
    11da:	09 f0       	breq	.+2      	; 0x11de <Sense_Tick+0x6c>
    11dc:	40 c0       	rjmp	.+128    	; 0x125e <Sense_Tick+0xec>
    11de:	34 c0       	rjmp	.+104    	; 0x1248 <Sense_Tick+0xd6>
    11e0:	80 91 0f 09 	lds	r24, 0x090F	; 0x80090f <ARM_DISARM>
    11e4:	81 30       	cpi	r24, 0x01	; 1
    11e6:	19 f4       	brne	.+6      	; 0x11ee <Sense_Tick+0x7c>
    11e8:	80 93 72 09 	sts	0x0972, r24	; 0x800972 <sense_state>
    11ec:	08 95       	ret
    11ee:	10 92 72 09 	sts	0x0972, r1	; 0x800972 <sense_state>
    11f2:	e7 e0       	ldi	r30, 0x07	; 7
    11f4:	f9 e0       	ldi	r31, 0x09	; 9
    11f6:	10 82       	st	Z, r1
    11f8:	11 82       	std	Z+1, r1	; 0x01
    11fa:	12 82       	std	Z+2, r1	; 0x02
    11fc:	13 82       	std	Z+3, r1	; 0x03
    11fe:	14 82       	std	Z+4, r1	; 0x04
    1200:	10 92 05 09 	sts	0x0905, r1	; 0x800905 <sensor_delay_count>
    1204:	08 95       	ret
    1206:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <sensor_delay_count>
    120a:	8f 5f       	subi	r24, 0xFF	; 255
    120c:	80 93 05 09 	sts	0x0905, r24	; 0x800905 <sensor_delay_count>
    1210:	90 91 0f 09 	lds	r25, 0x090F	; 0x80090f <ARM_DISARM>
    1214:	91 11       	cpse	r25, r1
    1216:	05 c0       	rjmp	.+10     	; 0x1222 <Sense_Tick+0xb0>
    1218:	10 92 72 09 	sts	0x0972, r1	; 0x800972 <sense_state>
    121c:	10 92 05 09 	sts	0x0905, r1	; 0x800905 <sensor_delay_count>
    1220:	08 95       	ret
    1222:	8a 30       	cpi	r24, 0x0A	; 10
    1224:	20 f4       	brcc	.+8      	; 0x122e <Sense_Tick+0xbc>
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	80 93 72 09 	sts	0x0972, r24	; 0x800972 <sense_state>
    122c:	08 95       	ret
    122e:	82 e0       	ldi	r24, 0x02	; 2
    1230:	80 93 72 09 	sts	0x0972, r24	; 0x800972 <sense_state>
    1234:	e7 e0       	ldi	r30, 0x07	; 7
    1236:	f9 e0       	ldi	r31, 0x09	; 9
    1238:	10 82       	st	Z, r1
    123a:	11 82       	std	Z+1, r1	; 0x01
    123c:	12 82       	std	Z+2, r1	; 0x02
    123e:	13 82       	std	Z+3, r1	; 0x03
    1240:	14 82       	std	Z+4, r1	; 0x04
    1242:	10 92 05 09 	sts	0x0905, r1	; 0x800905 <sensor_delay_count>
    1246:	08 95       	ret
    1248:	80 91 0f 09 	lds	r24, 0x090F	; 0x80090f <ARM_DISARM>
    124c:	81 30       	cpi	r24, 0x01	; 1
    124e:	21 f4       	brne	.+8      	; 0x1258 <Sense_Tick+0xe6>
    1250:	82 e0       	ldi	r24, 0x02	; 2
    1252:	80 93 72 09 	sts	0x0972, r24	; 0x800972 <sense_state>
    1256:	08 95       	ret
    1258:	10 92 72 09 	sts	0x0972, r1	; 0x800972 <sense_state>
    125c:	08 95       	ret
    125e:	10 92 72 09 	sts	0x0972, r1	; 0x800972 <sense_state>
    1262:	08 95       	ret

00001264 <SenseSecTask>:
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	80 93 72 09 	sts	0x0972, r24	; 0x800972 <sense_state>
    126a:	83 df       	rcall	.-250    	; 0x1172 <Sense_Tick>
    126c:	88 ec       	ldi	r24, 0xC8	; 200
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	81 d5       	rcall	.+2818   	; 0x1d74 <vTaskDelay>
    1272:	fb cf       	rjmp	.-10     	; 0x126a <SenseSecTask+0x6>

00001274 <SenseSecPulse>:
    1274:	af 92       	push	r10
    1276:	bf 92       	push	r11
    1278:	cf 92       	push	r12
    127a:	df 92       	push	r13
    127c:	ef 92       	push	r14
    127e:	ff 92       	push	r15
    1280:	0f 93       	push	r16
    1282:	a1 2c       	mov	r10, r1
    1284:	b1 2c       	mov	r11, r1
    1286:	c1 2c       	mov	r12, r1
    1288:	d1 2c       	mov	r13, r1
    128a:	e1 2c       	mov	r14, r1
    128c:	f1 2c       	mov	r15, r1
    128e:	08 2f       	mov	r16, r24
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	45 e5       	ldi	r20, 0x55	; 85
    1296:	50 e0       	ldi	r21, 0x00	; 0
    1298:	62 ee       	ldi	r22, 0xE2	; 226
    129a:	72 e0       	ldi	r23, 0x02	; 2
    129c:	82 e3       	ldi	r24, 0x32	; 50
    129e:	99 e0       	ldi	r25, 0x09	; 9
    12a0:	f1 d2       	rcall	.+1506   	; 0x1884 <xTaskGenericCreate>
    12a2:	0f 91       	pop	r16
    12a4:	ff 90       	pop	r15
    12a6:	ef 90       	pop	r14
    12a8:	df 90       	pop	r13
    12aa:	cf 90       	pop	r12
    12ac:	bf 90       	pop	r11
    12ae:	af 90       	pop	r10
    12b0:	08 95       	ret

000012b2 <Matrix_Tick>:
    12b2:	80 91 6e 09 	lds	r24, 0x096E	; 0x80096e <matrix_state>
    12b6:	81 11       	cpse	r24, r1
    12b8:	0b c0       	rjmp	.+22     	; 0x12d0 <Matrix_Tick+0x1e>
    12ba:	80 91 0f 09 	lds	r24, 0x090F	; 0x80090f <ARM_DISARM>
    12be:	81 30       	cpi	r24, 0x01	; 1
    12c0:	21 f4       	brne	.+8      	; 0x12ca <Matrix_Tick+0x18>
    12c2:	88 e8       	ldi	r24, 0x88	; 136
    12c4:	91 e0       	ldi	r25, 0x01	; 1
    12c6:	39 d9       	rcall	.-3470   	; 0x53a <print_matrix>
    12c8:	03 c0       	rjmp	.+6      	; 0x12d0 <Matrix_Tick+0x1e>
    12ca:	88 e0       	ldi	r24, 0x08	; 8
    12cc:	91 e0       	ldi	r25, 0x01	; 1
    12ce:	35 d9       	rcall	.-3478   	; 0x53a <print_matrix>
    12d0:	10 92 6e 09 	sts	0x096E, r1	; 0x80096e <matrix_state>
    12d4:	08 95       	ret

000012d6 <MatrixSecTask>:
    12d6:	10 92 6e 09 	sts	0x096E, r1	; 0x80096e <matrix_state>
    12da:	eb df       	rcall	.-42     	; 0x12b2 <Matrix_Tick>
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	49 d5       	rcall	.+2706   	; 0x1d74 <vTaskDelay>
    12e2:	fb cf       	rjmp	.-10     	; 0x12da <MatrixSecTask+0x4>

000012e4 <MatrixSecPulse>:
    12e4:	af 92       	push	r10
    12e6:	bf 92       	push	r11
    12e8:	cf 92       	push	r12
    12ea:	df 92       	push	r13
    12ec:	ef 92       	push	r14
    12ee:	ff 92       	push	r15
    12f0:	0f 93       	push	r16
    12f2:	a1 2c       	mov	r10, r1
    12f4:	b1 2c       	mov	r11, r1
    12f6:	c1 2c       	mov	r12, r1
    12f8:	d1 2c       	mov	r13, r1
    12fa:	e1 2c       	mov	r14, r1
    12fc:	f1 2c       	mov	r15, r1
    12fe:	08 2f       	mov	r16, r24
    1300:	20 e0       	ldi	r18, 0x00	; 0
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	45 e5       	ldi	r20, 0x55	; 85
    1306:	50 e0       	ldi	r21, 0x00	; 0
    1308:	6f ee       	ldi	r22, 0xEF	; 239
    130a:	72 e0       	ldi	r23, 0x02	; 2
    130c:	8b e6       	ldi	r24, 0x6B	; 107
    130e:	99 e0       	ldi	r25, 0x09	; 9
    1310:	b9 d2       	rcall	.+1394   	; 0x1884 <xTaskGenericCreate>
    1312:	0f 91       	pop	r16
    1314:	ff 90       	pop	r15
    1316:	ef 90       	pop	r14
    1318:	df 90       	pop	r13
    131a:	cf 90       	pop	r12
    131c:	bf 90       	pop	r11
    131e:	af 90       	pop	r10
    1320:	08 95       	ret

00001322 <Blue_Rec_Tick>:
    1322:	80 91 6d 09 	lds	r24, 0x096D	; 0x80096d <blue_rec_state>
    1326:	81 30       	cpi	r24, 0x01	; 1
    1328:	a9 f4       	brne	.+42     	; 0x1354 <Blue_Rec_Tick+0x32>
    132a:	0e 94 83 01 	call	0x306	; 0x306 <USART_Receive>
    132e:	80 93 fe 08 	sts	0x08FE, r24	; 0x8008fe <bluetooth_temp>
    1332:	8f 30       	cpi	r24, 0x0F	; 15
    1334:	21 f4       	brne	.+8      	; 0x133e <Blue_Rec_Tick+0x1c>
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <bluetooth_arm_disarm>
    133c:	08 c0       	rjmp	.+16     	; 0x134e <Blue_Rec_Tick+0x2c>
    133e:	80 3f       	cpi	r24, 0xF0	; 240
    1340:	19 f4       	brne	.+6      	; 0x1348 <Blue_Rec_Tick+0x26>
    1342:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <bluetooth_arm_disarm>
    1346:	03 c0       	rjmp	.+6      	; 0x134e <Blue_Rec_Tick+0x2c>
    1348:	82 e0       	ldi	r24, 0x02	; 2
    134a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <bluetooth_arm_disarm>
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	0e 94 54 01 	call	0x2a8	; 0x2a8 <USART_Flush>
    1354:	80 91 6d 09 	lds	r24, 0x096D	; 0x80096d <blue_rec_state>
    1358:	88 23       	and	r24, r24
    135a:	19 f0       	breq	.+6      	; 0x1362 <Blue_Rec_Tick+0x40>
    135c:	10 92 6d 09 	sts	0x096D, r1	; 0x80096d <blue_rec_state>
    1360:	08 95       	ret
    1362:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    1366:	88 23       	and	r24, r24
    1368:	1c f4       	brge	.+6      	; 0x1370 <Blue_Rec_Tick+0x4e>
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	80 93 6d 09 	sts	0x096D, r24	; 0x80096d <blue_rec_state>
    1370:	08 95       	ret

00001372 <BlueRecSecTask>:
    1372:	10 92 6d 09 	sts	0x096D, r1	; 0x80096d <blue_rec_state>
    1376:	d5 df       	rcall	.-86     	; 0x1322 <Blue_Rec_Tick>
    1378:	8a e0       	ldi	r24, 0x0A	; 10
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	fb d4       	rcall	.+2550   	; 0x1d74 <vTaskDelay>
    137e:	fb cf       	rjmp	.-10     	; 0x1376 <BlueRecSecTask+0x4>

00001380 <BlueRecSecPulse>:
    1380:	af 92       	push	r10
    1382:	bf 92       	push	r11
    1384:	cf 92       	push	r12
    1386:	df 92       	push	r13
    1388:	ef 92       	push	r14
    138a:	ff 92       	push	r15
    138c:	0f 93       	push	r16
    138e:	a1 2c       	mov	r10, r1
    1390:	b1 2c       	mov	r11, r1
    1392:	c1 2c       	mov	r12, r1
    1394:	d1 2c       	mov	r13, r1
    1396:	e1 2c       	mov	r14, r1
    1398:	f1 2c       	mov	r15, r1
    139a:	08 2f       	mov	r16, r24
    139c:	20 e0       	ldi	r18, 0x00	; 0
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	45 e5       	ldi	r20, 0x55	; 85
    13a2:	50 e0       	ldi	r21, 0x00	; 0
    13a4:	6d ef       	ldi	r22, 0xFD	; 253
    13a6:	72 e0       	ldi	r23, 0x02	; 2
    13a8:	89 eb       	ldi	r24, 0xB9	; 185
    13aa:	99 e0       	ldi	r25, 0x09	; 9
    13ac:	6b d2       	rcall	.+1238   	; 0x1884 <xTaskGenericCreate>
    13ae:	0f 91       	pop	r16
    13b0:	ff 90       	pop	r15
    13b2:	ef 90       	pop	r14
    13b4:	df 90       	pop	r13
    13b6:	cf 90       	pop	r12
    13b8:	bf 90       	pop	r11
    13ba:	af 90       	pop	r10
    13bc:	08 95       	ret

000013be <Buzz_Tick>:
}

void Buzz_Tick(){
	//Actions
	switch(buzzer_state){
    13be:	80 91 73 09 	lds	r24, 0x0973	; 0x800973 <buzzer_state>
    13c2:	82 30       	cpi	r24, 0x02	; 2
    13c4:	51 f0       	breq	.+20     	; 0x13da <Buzz_Tick+0x1c>
    13c6:	83 30       	cpi	r24, 0x03	; 3
    13c8:	79 f0       	breq	.+30     	; 0x13e8 <Buzz_Tick+0x2a>
    13ca:	81 30       	cpi	r24, 0x01	; 1
    13cc:	99 f4       	brne	.+38     	; 0x13f4 <Buzz_Tick+0x36>
		case buzz_wait:
		break;

		case no_buzz:
			++buzzer_counter;
    13ce:	80 91 ff 08 	lds	r24, 0x08FF	; 0x8008ff <buzzer_counter>
    13d2:	8f 5f       	subi	r24, 0xFF	; 255
    13d4:	80 93 ff 08 	sts	0x08FF, r24	; 0x8008ff <buzzer_counter>
    13d8:	2f c0       	rjmp	.+94     	; 0x1438 <Buzz_Tick+0x7a>
		break;

		case buzz_high:
			++buzzer_counter;
    13da:	80 91 ff 08 	lds	r24, 0x08FF	; 0x8008ff <buzzer_counter>
    13de:	8f 5f       	subi	r24, 0xFF	; 255
    13e0:	80 93 ff 08 	sts	0x08FF, r24	; 0x8008ff <buzzer_counter>
			PORTB = PORTB|0x10;  //set PIN B4 to 1
    13e4:	2c 9a       	sbi	0x05, 4	; 5
		break;
    13e6:	06 c0       	rjmp	.+12     	; 0x13f4 <Buzz_Tick+0x36>

		case buzz_low:
			++buzzer_counter;    //set PIN B4 to 0
    13e8:	80 91 ff 08 	lds	r24, 0x08FF	; 0x8008ff <buzzer_counter>
    13ec:	8f 5f       	subi	r24, 0xFF	; 255
    13ee:	80 93 ff 08 	sts	0x08FF, r24	; 0x8008ff <buzzer_counter>
			PORTB = PORTB & 0xEF; 
    13f2:	2c 98       	cbi	0x05, 4	; 5

		default:
		break;
	}
	//Transitions
	switch(buzzer_state){
    13f4:	80 91 73 09 	lds	r24, 0x0973	; 0x800973 <buzzer_state>
    13f8:	81 30       	cpi	r24, 0x01	; 1
    13fa:	f1 f0       	breq	.+60     	; 0x1438 <Buzz_Tick+0x7a>
    13fc:	28 f0       	brcs	.+10     	; 0x1408 <Buzz_Tick+0x4a>
    13fe:	82 30       	cpi	r24, 0x02	; 2
    1400:	71 f1       	breq	.+92     	; 0x145e <Buzz_Tick+0xa0>
    1402:	83 30       	cpi	r24, 0x03	; 3
    1404:	c1 f1       	breq	.+112    	; 0x1476 <Buzz_Tick+0xb8>
    1406:	4a c0       	rjmp	.+148    	; 0x149c <Buzz_Tick+0xde>
		case buzz_wait:
		if(ARM_DISARM == 0){
    1408:	80 91 0f 09 	lds	r24, 0x090F	; 0x80090f <ARM_DISARM>
    140c:	88 23       	and	r24, r24
    140e:	09 f4       	brne	.+2      	; 0x1412 <Buzz_Tick+0x54>
    1410:	47 c0       	rjmp	.+142    	; 0x14a0 <Buzz_Tick+0xe2>
			buzzer_state = buzz_wait;
		}
		else if(sensor_trip == 1 && ARM_DISARM == 1){
    1412:	90 91 04 09 	lds	r25, 0x0904	; 0x800904 <sensor_trip>
    1416:	91 30       	cpi	r25, 0x01	; 1
    1418:	41 f4       	brne	.+16     	; 0x142a <Buzz_Tick+0x6c>
    141a:	81 30       	cpi	r24, 0x01	; 1
    141c:	09 f0       	breq	.+2      	; 0x1420 <Buzz_Tick+0x62>
    141e:	40 c0       	rjmp	.+128    	; 0x14a0 <Buzz_Tick+0xe2>
			buzzer_state = no_buzz;
    1420:	80 93 73 09 	sts	0x0973, r24	; 0x800973 <buzzer_state>
			buzzer_counter = 0; //initialize counter
    1424:	10 92 ff 08 	sts	0x08FF, r1	; 0x8008ff <buzzer_counter>
    1428:	08 95       	ret
		}
		else if(sensor_trip == 0 && ARM_DISARM == 1){
    142a:	91 11       	cpse	r25, r1
    142c:	39 c0       	rjmp	.+114    	; 0x14a0 <Buzz_Tick+0xe2>
    142e:	81 30       	cpi	r24, 0x01	; 1
    1430:	b9 f5       	brne	.+110    	; 0x14a0 <Buzz_Tick+0xe2>
			buzzer_state = buzz_wait;
			buzzer_counter = 0; //initialize counter
    1432:	10 92 ff 08 	sts	0x08FF, r1	; 0x8008ff <buzzer_counter>
    1436:	08 95       	ret
		}
		break;

		case no_buzz:            //if disarmed no buzz go back
		if(ARM_DISARM == 0){
    1438:	80 91 0f 09 	lds	r24, 0x090F	; 0x80090f <ARM_DISARM>
    143c:	81 11       	cpse	r24, r1
    143e:	03 c0       	rjmp	.+6      	; 0x1446 <Buzz_Tick+0x88>
			buzzer_state = buzz_wait;
    1440:	10 92 73 09 	sts	0x0973, r1	; 0x800973 <buzzer_state>
    1444:	08 95       	ret
		}						//if counter less than off period stay
		else if(buzzer_counter < buzz_off_period){
    1446:	90 91 ff 08 	lds	r25, 0x08FF	; 0x8008ff <buzzer_counter>
    144a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <buzz_off_period>
    144e:	98 17       	cp	r25, r24
    1450:	38 f1       	brcs	.+78     	; 0x14a0 <Buzz_Tick+0xe2>
			buzzer_state = no_buzz;
		}
		else{					//else go to buzzer high
			buzzer_state = buzz_high;
    1452:	82 e0       	ldi	r24, 0x02	; 2
    1454:	80 93 73 09 	sts	0x0973, r24	; 0x800973 <buzzer_state>
			buzzer_counter = 0; //initialize counter
    1458:	10 92 ff 08 	sts	0x08FF, r1	; 0x8008ff <buzzer_counter>
    145c:	08 95       	ret
		}
		break;

		case buzz_high:
		if(buzzer_counter < buzzer_hign_period){
    145e:	90 91 ff 08 	lds	r25, 0x08FF	; 0x8008ff <buzzer_counter>
    1462:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <buzzer_hign_period>
    1466:	98 17       	cp	r25, r24
    1468:	d8 f0       	brcs	.+54     	; 0x14a0 <Buzz_Tick+0xe2>
			buzzer_state = buzz_high;
		}
		else{					//else go to buzzer high
			buzzer_state = buzz_low;
    146a:	83 e0       	ldi	r24, 0x03	; 3
    146c:	80 93 73 09 	sts	0x0973, r24	; 0x800973 <buzzer_state>
			buzzer_counter = 0; //initialize counter
    1470:	10 92 ff 08 	sts	0x08FF, r1	; 0x8008ff <buzzer_counter>
    1474:	08 95       	ret
		}
		break;

		case buzz_low:
		if(ARM_DISARM == 0){    //if system is disarmed turn off alarm
    1476:	80 91 0f 09 	lds	r24, 0x090F	; 0x80090f <ARM_DISARM>
    147a:	81 11       	cpse	r24, r1
    147c:	03 c0       	rjmp	.+6      	; 0x1484 <Buzz_Tick+0xc6>
			buzzer_state = buzz_wait;
    147e:	10 92 73 09 	sts	0x0973, r1	; 0x800973 <buzzer_state>
    1482:	08 95       	ret
		}
		else if(buzzer_counter < buzzer_low_period){
    1484:	90 91 ff 08 	lds	r25, 0x08FF	; 0x8008ff <buzzer_counter>
    1488:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <buzzer_low_period>
    148c:	98 17       	cp	r25, r24
    148e:	40 f0       	brcs	.+16     	; 0x14a0 <Buzz_Tick+0xe2>
			buzzer_state = buzz_low;
		}
		else{					//else go to buzzer high
			buzzer_state = buzz_high;
    1490:	82 e0       	ldi	r24, 0x02	; 2
    1492:	80 93 73 09 	sts	0x0973, r24	; 0x800973 <buzzer_state>
			buzzer_counter = 0; //initialize counter
    1496:	10 92 ff 08 	sts	0x08FF, r1	; 0x8008ff <buzzer_counter>
    149a:	08 95       	ret
		}
		break;

		default:
		buzzer_state = buzz_wait;
    149c:	10 92 73 09 	sts	0x0973, r1	; 0x800973 <buzzer_state>
    14a0:	08 95       	ret

000014a2 <BuzzSecTask>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//buzz when sensor tripped
enum BUZZERState {buzz_wait, no_buzz, buzz_high, buzz_low} buzzer_state;

void buzz_Init(){
	buzzer_state = buzz_wait;
    14a2:	10 92 73 09 	sts	0x0973, r1	; 0x800973 <buzzer_state>
{
	buzz_Init();
	for(;;)
	{
		Buzz_Tick();
		vTaskDelay(1);
    14a6:	8b df       	rcall	.-234    	; 0x13be <Buzz_Tick>
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	63 d4       	rcall	.+2246   	; 0x1d74 <vTaskDelay>
    14ae:	fb cf       	rjmp	.-10     	; 0x14a6 <BuzzSecTask+0x4>

000014b0 <BuzzSecPulse>:
	}
}

void BuzzSecPulse(unsigned portBASE_TYPE Priority)
{
    14b0:	af 92       	push	r10
    14b2:	bf 92       	push	r11
    14b4:	cf 92       	push	r12
    14b6:	df 92       	push	r13
    14b8:	ef 92       	push	r14
    14ba:	ff 92       	push	r15
    14bc:	0f 93       	push	r16
	xTaskCreate(BuzzSecTask, (signed portCHAR *)"BuzzSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
    14be:	a1 2c       	mov	r10, r1
    14c0:	b1 2c       	mov	r11, r1
    14c2:	c1 2c       	mov	r12, r1
    14c4:	d1 2c       	mov	r13, r1
    14c6:	e1 2c       	mov	r14, r1
    14c8:	f1 2c       	mov	r15, r1
    14ca:	08 2f       	mov	r16, r24
    14cc:	20 e0       	ldi	r18, 0x00	; 0
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	45 e5       	ldi	r20, 0x55	; 85
    14d2:	50 e0       	ldi	r21, 0x00	; 0
    14d4:	6c e0       	ldi	r22, 0x0C	; 12
    14d6:	73 e0       	ldi	r23, 0x03	; 3
    14d8:	81 e5       	ldi	r24, 0x51	; 81
    14da:	9a e0       	ldi	r25, 0x0A	; 10
    14dc:	d3 d1       	rcall	.+934    	; 0x1884 <xTaskGenericCreate>
}
    14de:	0f 91       	pop	r16
    14e0:	ff 90       	pop	r15
    14e2:	ef 90       	pop	r14
    14e4:	df 90       	pop	r13
    14e6:	cf 90       	pop	r12
    14e8:	bf 90       	pop	r11
    14ea:	af 90       	pop	r10
    14ec:	08 95       	ret

000014ee <main>:



///////////////////////////////////////////////////////////////////////////////////////////////////////////////
int main(void) 
{ 
    14ee:	cf 93       	push	r28
    14f0:	df 93       	push	r29
   DDRA = 0xF0; PORTA = 0x0F; // PC7..4 outputs init 0s, PC3..0 inputs init 1s FOR KEYPAD
    14f2:	80 ef       	ldi	r24, 0xF0	; 240
    14f4:	81 b9       	out	0x01, r24	; 1
    14f6:	8f e0       	ldi	r24, 0x0F	; 15
    14f8:	82 b9       	out	0x02, r24	; 2
   DDRC = 0xFF; PORTC = 0x00; // set as output for lcd
    14fa:	8f ef       	ldi	r24, 0xFF	; 255
    14fc:	87 b9       	out	0x07, r24	; 7
    14fe:	18 b8       	out	0x08, r1	; 8
   DDRD = 0xFF; PORTD = 0x00; // LCD control lines
    1500:	8a b9       	out	0x0a, r24	; 10
    1502:	1b b8       	out	0x0b, r1	; 11
   DDRB = 0xFF; PORTB = 0x00;
    1504:	84 b9       	out	0x04, r24	; 4
    1506:	15 b8       	out	0x05, r1	; 5
  //eeprom_write_byte(0,1);  //address 0
  //eeprom_write_byte(1,2);  //address 1
  //eeprom_write_byte(2,3);  //address 2
  //eeprom_write_byte(3,4);  //address 3

  current_pass[0] = eeprom_read_byte(0);
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	8f d5       	rcall	.+2846   	; 0x202c <eeprom_read_byte>
    150e:	c0 e1       	ldi	r28, 0x10	; 16
    1510:	d2 e0       	ldi	r29, 0x02	; 2
    1512:	88 83       	st	Y, r24
  current_pass[1] = eeprom_read_byte(1);
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	89 d5       	rcall	.+2834   	; 0x202c <eeprom_read_byte>
  current_pass[2] = eeprom_read_byte(2);
    151a:	89 83       	std	Y+1, r24	; 0x01
    151c:	82 e0       	ldi	r24, 0x02	; 2
    151e:	90 e0       	ldi	r25, 0x00	; 0
  current_pass[3] = eeprom_read_byte(3);
    1520:	85 d5       	rcall	.+2826   	; 0x202c <eeprom_read_byte>
    1522:	8a 83       	std	Y+2, r24	; 0x02
    1524:	83 e0       	ldi	r24, 0x03	; 3
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	81 d5       	rcall	.+2818   	; 0x202c <eeprom_read_byte>

  unsigned char temp = eeprom_read_byte(0);

   //LCD init
   LCD_init();
    152a:	8b 83       	std	Y+3, r24	; 0x03
    152c:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_init>
   //init USART
   initUSART(0); //used to communicate to CHIP 0
    1530:	80 e0       	ldi	r24, 0x00	; 0
   initUSART(1); //used to communicate via bluetooth  
    1532:	0e 94 32 01 	call	0x264	; 0x264 <initUSART>
  
  
   //Start Tasks  
   TransSecPulse(1);
   RecSecPulse(1);
    1536:	81 e0       	ldi	r24, 0x01	; 1
   MatrixSecPulse(1);
    1538:	0e 94 32 01 	call	0x264	; 0x264 <initUSART>
   MenuSecPulse(1);
   SenseSecPulse(1);
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	ad da       	rcall	.-2726   	; 0xa9a <TransSecPulse>
    1540:	81 e0       	ldi	r24, 0x01	; 1
   BuzzSecPulse(1);
    1542:	eb da       	rcall	.-2602   	; 0xb1a <RecSecPulse>
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	ce de       	rcall	.-612    	; 0x12e4 <MatrixSecPulse>
   BlueRecSecPulse(1);
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	f4 dd       	rcall	.-1048   	; 0x1134 <MenuSecPulse>
    154c:	81 e0       	ldi	r24, 0x01	; 1
    //RunSchedular 
   vTaskStartScheduler(); 
    154e:	92 de       	rcall	.-732    	; 0x1274 <SenseSecPulse>
    1550:	81 e0       	ldi	r24, 0x01	; 1
 
   return 0; 
    1552:	ae df       	rcall	.-164    	; 0x14b0 <BuzzSecPulse>
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	14 df       	rcall	.-472    	; 0x1380 <BlueRecSecPulse>
    1558:	96 d2       	rcall	.+1324   	; 0x1a86 <vTaskStartScheduler>
    155a:	80 e0       	ldi	r24, 0x00	; 0
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	df 91       	pop	r29
    1560:	cf 91       	pop	r28
    1562:	08 95       	ret

00001564 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    1564:	31 e1       	ldi	r19, 0x11	; 17
    1566:	fc 01       	movw	r30, r24
    1568:	30 83       	st	Z, r19
    156a:	31 97       	sbiw	r30, 0x01	; 1
    156c:	22 e2       	ldi	r18, 0x22	; 34
    156e:	20 83       	st	Z, r18
    1570:	31 97       	sbiw	r30, 0x01	; 1
    1572:	a3 e3       	ldi	r26, 0x33	; 51
    1574:	a0 83       	st	Z, r26
    1576:	31 97       	sbiw	r30, 0x01	; 1
    1578:	60 83       	st	Z, r22
    157a:	31 97       	sbiw	r30, 0x01	; 1
    157c:	70 83       	st	Z, r23
    157e:	31 97       	sbiw	r30, 0x01	; 1
    1580:	10 82       	st	Z, r1
    1582:	31 97       	sbiw	r30, 0x01	; 1
    1584:	60 e8       	ldi	r22, 0x80	; 128
    1586:	60 83       	st	Z, r22
    1588:	31 97       	sbiw	r30, 0x01	; 1
    158a:	10 82       	st	Z, r1
    158c:	31 97       	sbiw	r30, 0x01	; 1
    158e:	62 e0       	ldi	r22, 0x02	; 2
    1590:	60 83       	st	Z, r22
    1592:	31 97       	sbiw	r30, 0x01	; 1
    1594:	63 e0       	ldi	r22, 0x03	; 3
    1596:	60 83       	st	Z, r22
    1598:	31 97       	sbiw	r30, 0x01	; 1
    159a:	64 e0       	ldi	r22, 0x04	; 4
    159c:	60 83       	st	Z, r22
    159e:	31 97       	sbiw	r30, 0x01	; 1
    15a0:	65 e0       	ldi	r22, 0x05	; 5
    15a2:	60 83       	st	Z, r22
    15a4:	31 97       	sbiw	r30, 0x01	; 1
    15a6:	66 e0       	ldi	r22, 0x06	; 6
    15a8:	60 83       	st	Z, r22
    15aa:	31 97       	sbiw	r30, 0x01	; 1
    15ac:	67 e0       	ldi	r22, 0x07	; 7
    15ae:	60 83       	st	Z, r22
    15b0:	31 97       	sbiw	r30, 0x01	; 1
    15b2:	68 e0       	ldi	r22, 0x08	; 8
    15b4:	60 83       	st	Z, r22
    15b6:	31 97       	sbiw	r30, 0x01	; 1
    15b8:	69 e0       	ldi	r22, 0x09	; 9
    15ba:	60 83       	st	Z, r22
    15bc:	31 97       	sbiw	r30, 0x01	; 1
    15be:	60 e1       	ldi	r22, 0x10	; 16
    15c0:	60 83       	st	Z, r22
    15c2:	31 97       	sbiw	r30, 0x01	; 1
    15c4:	30 83       	st	Z, r19
    15c6:	31 97       	sbiw	r30, 0x01	; 1
    15c8:	32 e1       	ldi	r19, 0x12	; 18
    15ca:	30 83       	st	Z, r19
    15cc:	31 97       	sbiw	r30, 0x01	; 1
    15ce:	33 e1       	ldi	r19, 0x13	; 19
    15d0:	30 83       	st	Z, r19
    15d2:	31 97       	sbiw	r30, 0x01	; 1
    15d4:	34 e1       	ldi	r19, 0x14	; 20
    15d6:	30 83       	st	Z, r19
    15d8:	31 97       	sbiw	r30, 0x01	; 1
    15da:	35 e1       	ldi	r19, 0x15	; 21
    15dc:	30 83       	st	Z, r19
    15de:	31 97       	sbiw	r30, 0x01	; 1
    15e0:	36 e1       	ldi	r19, 0x16	; 22
    15e2:	30 83       	st	Z, r19
    15e4:	31 97       	sbiw	r30, 0x01	; 1
    15e6:	37 e1       	ldi	r19, 0x17	; 23
    15e8:	30 83       	st	Z, r19
    15ea:	31 97       	sbiw	r30, 0x01	; 1
    15ec:	38 e1       	ldi	r19, 0x18	; 24
    15ee:	30 83       	st	Z, r19
    15f0:	31 97       	sbiw	r30, 0x01	; 1
    15f2:	39 e1       	ldi	r19, 0x19	; 25
    15f4:	30 83       	st	Z, r19
    15f6:	31 97       	sbiw	r30, 0x01	; 1
    15f8:	30 e2       	ldi	r19, 0x20	; 32
    15fa:	30 83       	st	Z, r19
    15fc:	31 97       	sbiw	r30, 0x01	; 1
    15fe:	31 e2       	ldi	r19, 0x21	; 33
    1600:	30 83       	st	Z, r19
    1602:	31 97       	sbiw	r30, 0x01	; 1
    1604:	20 83       	st	Z, r18
    1606:	31 97       	sbiw	r30, 0x01	; 1
    1608:	23 e2       	ldi	r18, 0x23	; 35
    160a:	20 83       	st	Z, r18
    160c:	31 97       	sbiw	r30, 0x01	; 1
    160e:	40 83       	st	Z, r20
    1610:	31 97       	sbiw	r30, 0x01	; 1
    1612:	50 83       	st	Z, r21
    1614:	31 97       	sbiw	r30, 0x01	; 1
    1616:	26 e2       	ldi	r18, 0x26	; 38
    1618:	20 83       	st	Z, r18
    161a:	31 97       	sbiw	r30, 0x01	; 1
    161c:	27 e2       	ldi	r18, 0x27	; 39
    161e:	20 83       	st	Z, r18
    1620:	31 97       	sbiw	r30, 0x01	; 1
    1622:	28 e2       	ldi	r18, 0x28	; 40
    1624:	20 83       	st	Z, r18
    1626:	31 97       	sbiw	r30, 0x01	; 1
    1628:	29 e2       	ldi	r18, 0x29	; 41
    162a:	20 83       	st	Z, r18
    162c:	31 97       	sbiw	r30, 0x01	; 1
    162e:	20 e3       	ldi	r18, 0x30	; 48
    1630:	20 83       	st	Z, r18
    1632:	31 97       	sbiw	r30, 0x01	; 1
    1634:	21 e3       	ldi	r18, 0x31	; 49
    1636:	20 83       	st	Z, r18
    1638:	86 97       	sbiw	r24, 0x26	; 38
    163a:	08 95       	ret

0000163c <xPortStartScheduler>:
    163c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1640:	8c e7       	ldi	r24, 0x7C	; 124
    1642:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1646:	8b e0       	ldi	r24, 0x0B	; 11
    1648:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    164c:	ef e6       	ldi	r30, 0x6F	; 111
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	82 60       	ori	r24, 0x02	; 2
    1654:	80 83       	st	Z, r24
    1656:	a0 91 6a 09 	lds	r26, 0x096A	; 0x80096a <pxCurrentTCB>
    165a:	b0 91 6b 09 	lds	r27, 0x096B	; 0x80096b <pxCurrentTCB+0x1>
    165e:	cd 91       	ld	r28, X+
    1660:	cd bf       	out	0x3d, r28	; 61
    1662:	dd 91       	ld	r29, X+
    1664:	de bf       	out	0x3e, r29	; 62
    1666:	ff 91       	pop	r31
    1668:	ef 91       	pop	r30
    166a:	df 91       	pop	r29
    166c:	cf 91       	pop	r28
    166e:	bf 91       	pop	r27
    1670:	af 91       	pop	r26
    1672:	9f 91       	pop	r25
    1674:	8f 91       	pop	r24
    1676:	7f 91       	pop	r23
    1678:	6f 91       	pop	r22
    167a:	5f 91       	pop	r21
    167c:	4f 91       	pop	r20
    167e:	3f 91       	pop	r19
    1680:	2f 91       	pop	r18
    1682:	1f 91       	pop	r17
    1684:	0f 91       	pop	r16
    1686:	ff 90       	pop	r15
    1688:	ef 90       	pop	r14
    168a:	df 90       	pop	r13
    168c:	cf 90       	pop	r12
    168e:	bf 90       	pop	r11
    1690:	af 90       	pop	r10
    1692:	9f 90       	pop	r9
    1694:	8f 90       	pop	r8
    1696:	7f 90       	pop	r7
    1698:	6f 90       	pop	r6
    169a:	5f 90       	pop	r5
    169c:	4f 90       	pop	r4
    169e:	3f 90       	pop	r3
    16a0:	2f 90       	pop	r2
    16a2:	1f 90       	pop	r1
    16a4:	0f 90       	pop	r0
    16a6:	0f be       	out	0x3f, r0	; 63
    16a8:	0f 90       	pop	r0
    16aa:	08 95       	ret
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	08 95       	ret

000016b0 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    16b0:	0f 92       	push	r0
    16b2:	0f b6       	in	r0, 0x3f	; 63
    16b4:	f8 94       	cli
    16b6:	0f 92       	push	r0
    16b8:	1f 92       	push	r1
    16ba:	11 24       	eor	r1, r1
    16bc:	2f 92       	push	r2
    16be:	3f 92       	push	r3
    16c0:	4f 92       	push	r4
    16c2:	5f 92       	push	r5
    16c4:	6f 92       	push	r6
    16c6:	7f 92       	push	r7
    16c8:	8f 92       	push	r8
    16ca:	9f 92       	push	r9
    16cc:	af 92       	push	r10
    16ce:	bf 92       	push	r11
    16d0:	cf 92       	push	r12
    16d2:	df 92       	push	r13
    16d4:	ef 92       	push	r14
    16d6:	ff 92       	push	r15
    16d8:	0f 93       	push	r16
    16da:	1f 93       	push	r17
    16dc:	2f 93       	push	r18
    16de:	3f 93       	push	r19
    16e0:	4f 93       	push	r20
    16e2:	5f 93       	push	r21
    16e4:	6f 93       	push	r22
    16e6:	7f 93       	push	r23
    16e8:	8f 93       	push	r24
    16ea:	9f 93       	push	r25
    16ec:	af 93       	push	r26
    16ee:	bf 93       	push	r27
    16f0:	cf 93       	push	r28
    16f2:	df 93       	push	r29
    16f4:	ef 93       	push	r30
    16f6:	ff 93       	push	r31
    16f8:	a0 91 6a 09 	lds	r26, 0x096A	; 0x80096a <pxCurrentTCB>
    16fc:	b0 91 6b 09 	lds	r27, 0x096B	; 0x80096b <pxCurrentTCB+0x1>
    1700:	0d b6       	in	r0, 0x3d	; 61
    1702:	0d 92       	st	X+, r0
    1704:	0e b6       	in	r0, 0x3e	; 62
	vTaskSwitchContext();
    1706:	0d 92       	st	X+, r0
	portRESTORE_CONTEXT();
    1708:	8a d3       	rcall	.+1812   	; 0x1e1e <vTaskSwitchContext>
    170a:	a0 91 6a 09 	lds	r26, 0x096A	; 0x80096a <pxCurrentTCB>
    170e:	b0 91 6b 09 	lds	r27, 0x096B	; 0x80096b <pxCurrentTCB+0x1>
    1712:	cd 91       	ld	r28, X+
    1714:	cd bf       	out	0x3d, r28	; 61
    1716:	dd 91       	ld	r29, X+
    1718:	de bf       	out	0x3e, r29	; 62
    171a:	ff 91       	pop	r31
    171c:	ef 91       	pop	r30
    171e:	df 91       	pop	r29
    1720:	cf 91       	pop	r28
    1722:	bf 91       	pop	r27
    1724:	af 91       	pop	r26
    1726:	9f 91       	pop	r25
    1728:	8f 91       	pop	r24
    172a:	7f 91       	pop	r23
    172c:	6f 91       	pop	r22
    172e:	5f 91       	pop	r21
    1730:	4f 91       	pop	r20
    1732:	3f 91       	pop	r19
    1734:	2f 91       	pop	r18
    1736:	1f 91       	pop	r17
    1738:	0f 91       	pop	r16
    173a:	ff 90       	pop	r15
    173c:	ef 90       	pop	r14
    173e:	df 90       	pop	r13
    1740:	cf 90       	pop	r12
    1742:	bf 90       	pop	r11
    1744:	af 90       	pop	r10
    1746:	9f 90       	pop	r9
    1748:	8f 90       	pop	r8
    174a:	7f 90       	pop	r7
    174c:	6f 90       	pop	r6
    174e:	5f 90       	pop	r5
    1750:	4f 90       	pop	r4
    1752:	3f 90       	pop	r3
    1754:	2f 90       	pop	r2
    1756:	1f 90       	pop	r1
    1758:	0f 90       	pop	r0
    175a:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
    175c:	0f 90       	pop	r0
    175e:	08 95       	ret

00001760 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    1760:	0f 92       	push	r0
    1762:	0f b6       	in	r0, 0x3f	; 63
    1764:	f8 94       	cli
    1766:	0f 92       	push	r0
    1768:	1f 92       	push	r1
    176a:	11 24       	eor	r1, r1
    176c:	2f 92       	push	r2
    176e:	3f 92       	push	r3
    1770:	4f 92       	push	r4
    1772:	5f 92       	push	r5
    1774:	6f 92       	push	r6
    1776:	7f 92       	push	r7
    1778:	8f 92       	push	r8
    177a:	9f 92       	push	r9
    177c:	af 92       	push	r10
    177e:	bf 92       	push	r11
    1780:	cf 92       	push	r12
    1782:	df 92       	push	r13
    1784:	ef 92       	push	r14
    1786:	ff 92       	push	r15
    1788:	0f 93       	push	r16
    178a:	1f 93       	push	r17
    178c:	2f 93       	push	r18
    178e:	3f 93       	push	r19
    1790:	4f 93       	push	r20
    1792:	5f 93       	push	r21
    1794:	6f 93       	push	r22
    1796:	7f 93       	push	r23
    1798:	8f 93       	push	r24
    179a:	9f 93       	push	r25
    179c:	af 93       	push	r26
    179e:	bf 93       	push	r27
    17a0:	cf 93       	push	r28
    17a2:	df 93       	push	r29
    17a4:	ef 93       	push	r30
    17a6:	ff 93       	push	r31
    17a8:	a0 91 6a 09 	lds	r26, 0x096A	; 0x80096a <pxCurrentTCB>
    17ac:	b0 91 6b 09 	lds	r27, 0x096B	; 0x80096b <pxCurrentTCB+0x1>
    17b0:	0d b6       	in	r0, 0x3d	; 61
    17b2:	0d 92       	st	X+, r0
    17b4:	0e b6       	in	r0, 0x3e	; 62
	vTaskIncrementTick();
	vTaskSwitchContext();
    17b6:	0d 92       	st	X+, r0
    17b8:	95 d1       	rcall	.+810    	; 0x1ae4 <vTaskIncrementTick>
	portRESTORE_CONTEXT();
    17ba:	31 d3       	rcall	.+1634   	; 0x1e1e <vTaskSwitchContext>
    17bc:	a0 91 6a 09 	lds	r26, 0x096A	; 0x80096a <pxCurrentTCB>
    17c0:	b0 91 6b 09 	lds	r27, 0x096B	; 0x80096b <pxCurrentTCB+0x1>
    17c4:	cd 91       	ld	r28, X+
    17c6:	cd bf       	out	0x3d, r28	; 61
    17c8:	dd 91       	ld	r29, X+
    17ca:	de bf       	out	0x3e, r29	; 62
    17cc:	ff 91       	pop	r31
    17ce:	ef 91       	pop	r30
    17d0:	df 91       	pop	r29
    17d2:	cf 91       	pop	r28
    17d4:	bf 91       	pop	r27
    17d6:	af 91       	pop	r26
    17d8:	9f 91       	pop	r25
    17da:	8f 91       	pop	r24
    17dc:	7f 91       	pop	r23
    17de:	6f 91       	pop	r22
    17e0:	5f 91       	pop	r21
    17e2:	4f 91       	pop	r20
    17e4:	3f 91       	pop	r19
    17e6:	2f 91       	pop	r18
    17e8:	1f 91       	pop	r17
    17ea:	0f 91       	pop	r16
    17ec:	ff 90       	pop	r15
    17ee:	ef 90       	pop	r14
    17f0:	df 90       	pop	r13
    17f2:	cf 90       	pop	r12
    17f4:	bf 90       	pop	r11
    17f6:	af 90       	pop	r10
    17f8:	9f 90       	pop	r9
    17fa:	8f 90       	pop	r8
    17fc:	7f 90       	pop	r7
    17fe:	6f 90       	pop	r6
    1800:	5f 90       	pop	r5
    1802:	4f 90       	pop	r4
    1804:	3f 90       	pop	r3
    1806:	2f 90       	pop	r2
    1808:	1f 90       	pop	r1
    180a:	0f 90       	pop	r0
    180c:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
    180e:	0f 90       	pop	r0
    1810:	08 95       	ret

00001812 <__vector_13>:
}
    1812:	a6 df       	rcall	.-180    	; 0x1760 <vPortYieldFromTick>
    1814:	18 95       	reti

00001816 <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
    1816:	cf 93       	push	r28
    1818:	df 93       	push	r29
    181a:	ec 01       	movw	r28, r24
    181c:	e0 91 6a 09 	lds	r30, 0x096A	; 0x80096a <pxCurrentTCB>
    1820:	f0 91 6b 09 	lds	r31, 0x096B	; 0x80096b <pxCurrentTCB+0x1>
    1824:	93 83       	std	Z+3, r25	; 0x03
    1826:	82 83       	std	Z+2, r24	; 0x02
    1828:	80 91 1a 09 	lds	r24, 0x091A	; 0x80091a <xTickCount>
    182c:	90 91 1b 09 	lds	r25, 0x091B	; 0x80091b <xTickCount+0x1>
    1830:	c8 17       	cp	r28, r24
    1832:	d9 07       	cpc	r29, r25
    1834:	68 f4       	brcc	.+26     	; 0x1850 <prvAddCurrentTaskToDelayedList+0x3a>
    1836:	60 91 6a 09 	lds	r22, 0x096A	; 0x80096a <pxCurrentTCB>
    183a:	70 91 6b 09 	lds	r23, 0x096B	; 0x80096b <pxCurrentTCB+0x1>
    183e:	80 91 30 09 	lds	r24, 0x0930	; 0x800930 <pxOverflowDelayedTaskList>
    1842:	90 91 31 09 	lds	r25, 0x0931	; 0x800931 <pxOverflowDelayedTaskList+0x1>
    1846:	6e 5f       	subi	r22, 0xFE	; 254
    1848:	7f 4f       	sbci	r23, 0xFF	; 255
    184a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <vListInsert>
    184e:	17 c0       	rjmp	.+46     	; 0x187e <prvAddCurrentTaskToDelayedList+0x68>
    1850:	60 91 6a 09 	lds	r22, 0x096A	; 0x80096a <pxCurrentTCB>
    1854:	70 91 6b 09 	lds	r23, 0x096B	; 0x80096b <pxCurrentTCB+0x1>
    1858:	80 91 32 09 	lds	r24, 0x0932	; 0x800932 <pxDelayedTaskList>
    185c:	90 91 33 09 	lds	r25, 0x0933	; 0x800933 <pxDelayedTaskList+0x1>
    1860:	6e 5f       	subi	r22, 0xFE	; 254
    1862:	7f 4f       	sbci	r23, 0xFF	; 255
    1864:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <vListInsert>
    1868:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <xNextTaskUnblockTime>
    186c:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <xNextTaskUnblockTime+0x1>
    1870:	c8 17       	cp	r28, r24
    1872:	d9 07       	cpc	r29, r25
    1874:	20 f4       	brcc	.+8      	; 0x187e <prvAddCurrentTaskToDelayedList+0x68>
    1876:	d0 93 55 02 	sts	0x0255, r29	; 0x800255 <xNextTaskUnblockTime+0x1>
    187a:	c0 93 54 02 	sts	0x0254, r28	; 0x800254 <xNextTaskUnblockTime>
    187e:	df 91       	pop	r29
    1880:	cf 91       	pop	r28
    1882:	08 95       	ret

00001884 <xTaskGenericCreate>:
    1884:	4f 92       	push	r4
    1886:	5f 92       	push	r5
    1888:	6f 92       	push	r6
    188a:	7f 92       	push	r7
    188c:	8f 92       	push	r8
    188e:	9f 92       	push	r9
    1890:	af 92       	push	r10
    1892:	bf 92       	push	r11
    1894:	cf 92       	push	r12
    1896:	df 92       	push	r13
    1898:	ef 92       	push	r14
    189a:	ff 92       	push	r15
    189c:	0f 93       	push	r16
    189e:	1f 93       	push	r17
    18a0:	cf 93       	push	r28
    18a2:	df 93       	push	r29
    18a4:	5c 01       	movw	r10, r24
    18a6:	4b 01       	movw	r8, r22
    18a8:	3a 01       	movw	r6, r20
    18aa:	29 01       	movw	r4, r18
    18ac:	81 e2       	ldi	r24, 0x21	; 33
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	0e 94 71 00 	call	0xe2	; 0xe2 <pvPortMalloc>
    18b4:	ec 01       	movw	r28, r24
    18b6:	89 2b       	or	r24, r25
    18b8:	09 f4       	brne	.+2      	; 0x18bc <xTaskGenericCreate+0x38>
    18ba:	d3 c0       	rjmp	.+422    	; 0x1a62 <xTaskGenericCreate+0x1de>
    18bc:	c1 14       	cp	r12, r1
    18be:	d1 04       	cpc	r13, r1
    18c0:	09 f0       	breq	.+2      	; 0x18c4 <xTaskGenericCreate+0x40>
    18c2:	cb c0       	rjmp	.+406    	; 0x1a5a <xTaskGenericCreate+0x1d6>
    18c4:	c3 01       	movw	r24, r6
    18c6:	0e 94 71 00 	call	0xe2	; 0xe2 <pvPortMalloc>
    18ca:	98 8f       	std	Y+24, r25	; 0x18
    18cc:	8f 8b       	std	Y+23, r24	; 0x17
    18ce:	00 97       	sbiw	r24, 0x00	; 0
    18d0:	21 f4       	brne	.+8      	; 0x18da <xTaskGenericCreate+0x56>
    18d2:	ce 01       	movw	r24, r28
    18d4:	0e 94 97 00 	call	0x12e	; 0x12e <vPortFree>
    18d8:	c4 c0       	rjmp	.+392    	; 0x1a62 <xTaskGenericCreate+0x1de>
    18da:	a3 01       	movw	r20, r6
    18dc:	65 ea       	ldi	r22, 0xA5	; 165
    18de:	70 e0       	ldi	r23, 0x00	; 0
    18e0:	8f d3       	rcall	.+1822   	; 0x2000 <memset>
    18e2:	93 01       	movw	r18, r6
    18e4:	21 50       	subi	r18, 0x01	; 1
    18e6:	31 09       	sbc	r19, r1
    18e8:	8f 89       	ldd	r24, Y+23	; 0x17
    18ea:	98 8d       	ldd	r25, Y+24	; 0x18
    18ec:	3c 01       	movw	r6, r24
    18ee:	62 0e       	add	r6, r18
    18f0:	73 1e       	adc	r7, r19
    18f2:	48 e0       	ldi	r20, 0x08	; 8
    18f4:	50 e0       	ldi	r21, 0x00	; 0
    18f6:	b4 01       	movw	r22, r8
    18f8:	ce 01       	movw	r24, r28
    18fa:	49 96       	adiw	r24, 0x19	; 25
    18fc:	88 d3       	rcall	.+1808   	; 0x200e <strncpy>
    18fe:	18 a2       	std	Y+32, r1	; 0x20
    1900:	10 2f       	mov	r17, r16
    1902:	04 30       	cpi	r16, 0x04	; 4
    1904:	08 f0       	brcs	.+2      	; 0x1908 <xTaskGenericCreate+0x84>
    1906:	13 e0       	ldi	r17, 0x03	; 3
    1908:	1e 8b       	std	Y+22, r17	; 0x16
    190a:	6e 01       	movw	r12, r28
    190c:	82 e0       	ldi	r24, 0x02	; 2
    190e:	c8 0e       	add	r12, r24
    1910:	d1 1c       	adc	r13, r1
    1912:	c6 01       	movw	r24, r12
    1914:	0e 94 a6 00 	call	0x14c	; 0x14c <vListInitialiseItem>
    1918:	ce 01       	movw	r24, r28
    191a:	0c 96       	adiw	r24, 0x0c	; 12
    191c:	0e 94 a6 00 	call	0x14c	; 0x14c <vListInitialiseItem>
    1920:	d9 87       	std	Y+9, r29	; 0x09
    1922:	c8 87       	std	Y+8, r28	; 0x08
    1924:	84 e0       	ldi	r24, 0x04	; 4
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	81 1b       	sub	r24, r17
    192a:	91 09       	sbc	r25, r1
    192c:	9d 87       	std	Y+13, r25	; 0x0d
    192e:	8c 87       	std	Y+12, r24	; 0x0c
    1930:	db 8b       	std	Y+19, r29	; 0x13
    1932:	ca 8b       	std	Y+18, r28	; 0x12
    1934:	a2 01       	movw	r20, r4
    1936:	b5 01       	movw	r22, r10
    1938:	c3 01       	movw	r24, r6
    193a:	14 de       	rcall	.-984    	; 0x1564 <pxPortInitialiseStack>
    193c:	99 83       	std	Y+1, r25	; 0x01
    193e:	88 83       	st	Y, r24
    1940:	e1 14       	cp	r14, r1
    1942:	f1 04       	cpc	r15, r1
    1944:	19 f0       	breq	.+6      	; 0x194c <xTaskGenericCreate+0xc8>
    1946:	f7 01       	movw	r30, r14
    1948:	d1 83       	std	Z+1, r29	; 0x01
    194a:	c0 83       	st	Z, r28
    194c:	0f b6       	in	r0, 0x3f	; 63
    194e:	f8 94       	cli
    1950:	0f 92       	push	r0
    1952:	80 91 1c 09 	lds	r24, 0x091C	; 0x80091c <uxCurrentNumberOfTasks>
    1956:	8f 5f       	subi	r24, 0xFF	; 255
    1958:	80 93 1c 09 	sts	0x091C, r24	; 0x80091c <uxCurrentNumberOfTasks>
    195c:	80 91 6a 09 	lds	r24, 0x096A	; 0x80096a <pxCurrentTCB>
    1960:	90 91 6b 09 	lds	r25, 0x096B	; 0x80096b <pxCurrentTCB+0x1>
    1964:	89 2b       	or	r24, r25
    1966:	a9 f5       	brne	.+106    	; 0x19d2 <xTaskGenericCreate+0x14e>
    1968:	d0 93 6b 09 	sts	0x096B, r29	; 0x80096b <pxCurrentTCB+0x1>
    196c:	c0 93 6a 09 	sts	0x096A, r28	; 0x80096a <pxCurrentTCB>
    1970:	80 91 1c 09 	lds	r24, 0x091C	; 0x80091c <uxCurrentNumberOfTasks>
    1974:	81 30       	cpi	r24, 0x01	; 1
    1976:	e1 f5       	brne	.+120    	; 0x19f0 <xTaskGenericCreate+0x16c>
    1978:	86 e4       	ldi	r24, 0x46	; 70
    197a:	99 e0       	ldi	r25, 0x09	; 9
    197c:	0e 94 98 00 	call	0x130	; 0x130 <vListInitialise>
    1980:	8f e4       	ldi	r24, 0x4F	; 79
    1982:	99 e0       	ldi	r25, 0x09	; 9
    1984:	0e 94 98 00 	call	0x130	; 0x130 <vListInitialise>
    1988:	88 e5       	ldi	r24, 0x58	; 88
    198a:	99 e0       	ldi	r25, 0x09	; 9
    198c:	0e 94 98 00 	call	0x130	; 0x130 <vListInitialise>
    1990:	81 e6       	ldi	r24, 0x61	; 97
    1992:	99 e0       	ldi	r25, 0x09	; 9
    1994:	0e 94 98 00 	call	0x130	; 0x130 <vListInitialise>
    1998:	8d e3       	ldi	r24, 0x3D	; 61
    199a:	99 e0       	ldi	r25, 0x09	; 9
    199c:	0e 94 98 00 	call	0x130	; 0x130 <vListInitialise>
    19a0:	84 e3       	ldi	r24, 0x34	; 52
    19a2:	99 e0       	ldi	r25, 0x09	; 9
    19a4:	0e 94 98 00 	call	0x130	; 0x130 <vListInitialise>
    19a8:	87 e2       	ldi	r24, 0x27	; 39
    19aa:	99 e0       	ldi	r25, 0x09	; 9
    19ac:	0e 94 98 00 	call	0x130	; 0x130 <vListInitialise>
    19b0:	8e e1       	ldi	r24, 0x1E	; 30
    19b2:	99 e0       	ldi	r25, 0x09	; 9
    19b4:	0e 94 98 00 	call	0x130	; 0x130 <vListInitialise>
    19b8:	8d e3       	ldi	r24, 0x3D	; 61
    19ba:	99 e0       	ldi	r25, 0x09	; 9
    19bc:	90 93 33 09 	sts	0x0933, r25	; 0x800933 <pxDelayedTaskList+0x1>
    19c0:	80 93 32 09 	sts	0x0932, r24	; 0x800932 <pxDelayedTaskList>
    19c4:	84 e3       	ldi	r24, 0x34	; 52
    19c6:	99 e0       	ldi	r25, 0x09	; 9
    19c8:	90 93 31 09 	sts	0x0931, r25	; 0x800931 <pxOverflowDelayedTaskList+0x1>
    19cc:	80 93 30 09 	sts	0x0930, r24	; 0x800930 <pxOverflowDelayedTaskList>
    19d0:	0f c0       	rjmp	.+30     	; 0x19f0 <xTaskGenericCreate+0x16c>
    19d2:	80 91 17 09 	lds	r24, 0x0917	; 0x800917 <xSchedulerRunning>
    19d6:	81 11       	cpse	r24, r1
    19d8:	0b c0       	rjmp	.+22     	; 0x19f0 <xTaskGenericCreate+0x16c>
    19da:	e0 91 6a 09 	lds	r30, 0x096A	; 0x80096a <pxCurrentTCB>
    19de:	f0 91 6b 09 	lds	r31, 0x096B	; 0x80096b <pxCurrentTCB+0x1>
    19e2:	86 89       	ldd	r24, Z+22	; 0x16
    19e4:	08 17       	cp	r16, r24
    19e6:	20 f0       	brcs	.+8      	; 0x19f0 <xTaskGenericCreate+0x16c>
    19e8:	d0 93 6b 09 	sts	0x096B, r29	; 0x80096b <pxCurrentTCB+0x1>
    19ec:	c0 93 6a 09 	sts	0x096A, r28	; 0x80096a <pxCurrentTCB>
    19f0:	8e 89       	ldd	r24, Y+22	; 0x16
    19f2:	90 91 19 09 	lds	r25, 0x0919	; 0x800919 <uxTopUsedPriority>
    19f6:	98 17       	cp	r25, r24
    19f8:	10 f4       	brcc	.+4      	; 0x19fe <xTaskGenericCreate+0x17a>
    19fa:	80 93 19 09 	sts	0x0919, r24	; 0x800919 <uxTopUsedPriority>
    19fe:	90 91 12 09 	lds	r25, 0x0912	; 0x800912 <uxTaskNumber>
    1a02:	9f 5f       	subi	r25, 0xFF	; 255
    1a04:	90 93 12 09 	sts	0x0912, r25	; 0x800912 <uxTaskNumber>
    1a08:	90 91 18 09 	lds	r25, 0x0918	; 0x800918 <uxTopReadyPriority>
    1a0c:	98 17       	cp	r25, r24
    1a0e:	10 f4       	brcc	.+4      	; 0x1a14 <xTaskGenericCreate+0x190>
    1a10:	80 93 18 09 	sts	0x0918, r24	; 0x800918 <uxTopReadyPriority>
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	9c 01       	movw	r18, r24
    1a18:	22 0f       	add	r18, r18
    1a1a:	33 1f       	adc	r19, r19
    1a1c:	22 0f       	add	r18, r18
    1a1e:	33 1f       	adc	r19, r19
    1a20:	22 0f       	add	r18, r18
    1a22:	33 1f       	adc	r19, r19
    1a24:	82 0f       	add	r24, r18
    1a26:	93 1f       	adc	r25, r19
    1a28:	b6 01       	movw	r22, r12
    1a2a:	8a 5b       	subi	r24, 0xBA	; 186
    1a2c:	96 4f       	sbci	r25, 0xF6	; 246
    1a2e:	0e 94 aa 00 	call	0x154	; 0x154 <vListInsertEnd>
    1a32:	0f 90       	pop	r0
    1a34:	0f be       	out	0x3f, r0	; 63
    1a36:	80 91 17 09 	lds	r24, 0x0917	; 0x800917 <xSchedulerRunning>
    1a3a:	88 23       	and	r24, r24
    1a3c:	51 f0       	breq	.+20     	; 0x1a52 <xTaskGenericCreate+0x1ce>
    1a3e:	e0 91 6a 09 	lds	r30, 0x096A	; 0x80096a <pxCurrentTCB>
    1a42:	f0 91 6b 09 	lds	r31, 0x096B	; 0x80096b <pxCurrentTCB+0x1>
    1a46:	86 89       	ldd	r24, Z+22	; 0x16
    1a48:	80 17       	cp	r24, r16
    1a4a:	28 f4       	brcc	.+10     	; 0x1a56 <xTaskGenericCreate+0x1d2>
    1a4c:	31 de       	rcall	.-926    	; 0x16b0 <vPortYield>
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	09 c0       	rjmp	.+18     	; 0x1a64 <xTaskGenericCreate+0x1e0>
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	07 c0       	rjmp	.+14     	; 0x1a64 <xTaskGenericCreate+0x1e0>
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	05 c0       	rjmp	.+10     	; 0x1a64 <xTaskGenericCreate+0x1e0>
    1a5a:	d8 8e       	std	Y+24, r13	; 0x18
    1a5c:	cf 8a       	std	Y+23, r12	; 0x17
    1a5e:	c6 01       	movw	r24, r12
    1a60:	3c cf       	rjmp	.-392    	; 0x18da <xTaskGenericCreate+0x56>
    1a62:	8f ef       	ldi	r24, 0xFF	; 255
    1a64:	df 91       	pop	r29
    1a66:	cf 91       	pop	r28
    1a68:	1f 91       	pop	r17
    1a6a:	0f 91       	pop	r16
    1a6c:	ff 90       	pop	r15
    1a6e:	ef 90       	pop	r14
    1a70:	df 90       	pop	r13
    1a72:	cf 90       	pop	r12
    1a74:	bf 90       	pop	r11
    1a76:	af 90       	pop	r10
    1a78:	9f 90       	pop	r9
    1a7a:	8f 90       	pop	r8
    1a7c:	7f 90       	pop	r7
    1a7e:	6f 90       	pop	r6
    1a80:	5f 90       	pop	r5
    1a82:	4f 90       	pop	r4
    1a84:	08 95       	ret

00001a86 <vTaskStartScheduler>:
    1a86:	af 92       	push	r10
    1a88:	bf 92       	push	r11
    1a8a:	cf 92       	push	r12
    1a8c:	df 92       	push	r13
    1a8e:	ef 92       	push	r14
    1a90:	ff 92       	push	r15
    1a92:	0f 93       	push	r16
    1a94:	a1 2c       	mov	r10, r1
    1a96:	b1 2c       	mov	r11, r1
    1a98:	c1 2c       	mov	r12, r1
    1a9a:	d1 2c       	mov	r13, r1
    1a9c:	e1 2c       	mov	r14, r1
    1a9e:	f1 2c       	mov	r15, r1
    1aa0:	00 e0       	ldi	r16, 0x00	; 0
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	45 e5       	ldi	r20, 0x55	; 85
    1aa8:	50 e0       	ldi	r21, 0x00	; 0
    1aaa:	68 e1       	ldi	r22, 0x18	; 24
    1aac:	73 e0       	ldi	r23, 0x03	; 3
    1aae:	86 ed       	ldi	r24, 0xD6	; 214
    1ab0:	9e e0       	ldi	r25, 0x0E	; 14
    1ab2:	e8 de       	rcall	.-560    	; 0x1884 <xTaskGenericCreate>
    1ab4:	81 30       	cpi	r24, 0x01	; 1
    1ab6:	41 f4       	brne	.+16     	; 0x1ac8 <vTaskStartScheduler+0x42>
    1ab8:	f8 94       	cli
    1aba:	80 93 17 09 	sts	0x0917, r24	; 0x800917 <xSchedulerRunning>
    1abe:	10 92 1b 09 	sts	0x091B, r1	; 0x80091b <xTickCount+0x1>
    1ac2:	10 92 1a 09 	sts	0x091A, r1	; 0x80091a <xTickCount>
    1ac6:	ba dd       	rcall	.-1164   	; 0x163c <xPortStartScheduler>
    1ac8:	0f 91       	pop	r16
    1aca:	ff 90       	pop	r15
    1acc:	ef 90       	pop	r14
    1ace:	df 90       	pop	r13
    1ad0:	cf 90       	pop	r12
    1ad2:	bf 90       	pop	r11
    1ad4:	af 90       	pop	r10
    1ad6:	08 95       	ret

00001ad8 <vTaskSuspendAll>:
    1ad8:	80 91 16 09 	lds	r24, 0x0916	; 0x800916 <uxSchedulerSuspended>
    1adc:	8f 5f       	subi	r24, 0xFF	; 255
    1ade:	80 93 16 09 	sts	0x0916, r24	; 0x800916 <uxSchedulerSuspended>
    1ae2:	08 95       	ret

00001ae4 <vTaskIncrementTick>:
    1ae4:	0f 93       	push	r16
    1ae6:	1f 93       	push	r17
    1ae8:	cf 93       	push	r28
    1aea:	df 93       	push	r29
    1aec:	80 91 16 09 	lds	r24, 0x0916	; 0x800916 <uxSchedulerSuspended>
    1af0:	81 11       	cpse	r24, r1
    1af2:	b2 c0       	rjmp	.+356    	; 0x1c58 <vTaskIncrementTick+0x174>
    1af4:	80 91 1a 09 	lds	r24, 0x091A	; 0x80091a <xTickCount>
    1af8:	90 91 1b 09 	lds	r25, 0x091B	; 0x80091b <xTickCount+0x1>
    1afc:	01 96       	adiw	r24, 0x01	; 1
    1afe:	90 93 1b 09 	sts	0x091B, r25	; 0x80091b <xTickCount+0x1>
    1b02:	80 93 1a 09 	sts	0x091A, r24	; 0x80091a <xTickCount>
    1b06:	80 91 1a 09 	lds	r24, 0x091A	; 0x80091a <xTickCount>
    1b0a:	90 91 1b 09 	lds	r25, 0x091B	; 0x80091b <xTickCount+0x1>
    1b0e:	89 2b       	or	r24, r25
    1b10:	99 f5       	brne	.+102    	; 0x1b78 <vTaskIncrementTick+0x94>
    1b12:	80 91 32 09 	lds	r24, 0x0932	; 0x800932 <pxDelayedTaskList>
    1b16:	90 91 33 09 	lds	r25, 0x0933	; 0x800933 <pxDelayedTaskList+0x1>
    1b1a:	20 91 30 09 	lds	r18, 0x0930	; 0x800930 <pxOverflowDelayedTaskList>
    1b1e:	30 91 31 09 	lds	r19, 0x0931	; 0x800931 <pxOverflowDelayedTaskList+0x1>
    1b22:	30 93 33 09 	sts	0x0933, r19	; 0x800933 <pxDelayedTaskList+0x1>
    1b26:	20 93 32 09 	sts	0x0932, r18	; 0x800932 <pxDelayedTaskList>
    1b2a:	90 93 31 09 	sts	0x0931, r25	; 0x800931 <pxOverflowDelayedTaskList+0x1>
    1b2e:	80 93 30 09 	sts	0x0930, r24	; 0x800930 <pxOverflowDelayedTaskList>
    1b32:	80 91 13 09 	lds	r24, 0x0913	; 0x800913 <xNumOfOverflows>
    1b36:	8f 5f       	subi	r24, 0xFF	; 255
    1b38:	80 93 13 09 	sts	0x0913, r24	; 0x800913 <xNumOfOverflows>
    1b3c:	e0 91 32 09 	lds	r30, 0x0932	; 0x800932 <pxDelayedTaskList>
    1b40:	f0 91 33 09 	lds	r31, 0x0933	; 0x800933 <pxDelayedTaskList+0x1>
    1b44:	80 81       	ld	r24, Z
    1b46:	81 11       	cpse	r24, r1
    1b48:	07 c0       	rjmp	.+14     	; 0x1b58 <vTaskIncrementTick+0x74>
    1b4a:	8f ef       	ldi	r24, 0xFF	; 255
    1b4c:	9f ef       	ldi	r25, 0xFF	; 255
    1b4e:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <xNextTaskUnblockTime+0x1>
    1b52:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <xNextTaskUnblockTime>
    1b56:	10 c0       	rjmp	.+32     	; 0x1b78 <vTaskIncrementTick+0x94>
    1b58:	e0 91 32 09 	lds	r30, 0x0932	; 0x800932 <pxDelayedTaskList>
    1b5c:	f0 91 33 09 	lds	r31, 0x0933	; 0x800933 <pxDelayedTaskList+0x1>
    1b60:	05 80       	ldd	r0, Z+5	; 0x05
    1b62:	f6 81       	ldd	r31, Z+6	; 0x06
    1b64:	e0 2d       	mov	r30, r0
    1b66:	06 80       	ldd	r0, Z+6	; 0x06
    1b68:	f7 81       	ldd	r31, Z+7	; 0x07
    1b6a:	e0 2d       	mov	r30, r0
    1b6c:	82 81       	ldd	r24, Z+2	; 0x02
    1b6e:	93 81       	ldd	r25, Z+3	; 0x03
    1b70:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <xNextTaskUnblockTime+0x1>
    1b74:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <xNextTaskUnblockTime>
    1b78:	20 91 1a 09 	lds	r18, 0x091A	; 0x80091a <xTickCount>
    1b7c:	30 91 1b 09 	lds	r19, 0x091B	; 0x80091b <xTickCount+0x1>
    1b80:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <xNextTaskUnblockTime>
    1b84:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <xNextTaskUnblockTime+0x1>
    1b88:	28 17       	cp	r18, r24
    1b8a:	39 07       	cpc	r19, r25
    1b8c:	08 f4       	brcc	.+2      	; 0x1b90 <vTaskIncrementTick+0xac>
    1b8e:	69 c0       	rjmp	.+210    	; 0x1c62 <vTaskIncrementTick+0x17e>
    1b90:	e0 91 32 09 	lds	r30, 0x0932	; 0x800932 <pxDelayedTaskList>
    1b94:	f0 91 33 09 	lds	r31, 0x0933	; 0x800933 <pxDelayedTaskList+0x1>
    1b98:	80 81       	ld	r24, Z
    1b9a:	88 23       	and	r24, r24
    1b9c:	99 f0       	breq	.+38     	; 0x1bc4 <vTaskIncrementTick+0xe0>
    1b9e:	e0 91 32 09 	lds	r30, 0x0932	; 0x800932 <pxDelayedTaskList>
    1ba2:	f0 91 33 09 	lds	r31, 0x0933	; 0x800933 <pxDelayedTaskList+0x1>
    1ba6:	05 80       	ldd	r0, Z+5	; 0x05
    1ba8:	f6 81       	ldd	r31, Z+6	; 0x06
    1baa:	e0 2d       	mov	r30, r0
    1bac:	c6 81       	ldd	r28, Z+6	; 0x06
    1bae:	d7 81       	ldd	r29, Z+7	; 0x07
    1bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb2:	9b 81       	ldd	r25, Y+3	; 0x03
    1bb4:	20 91 1a 09 	lds	r18, 0x091A	; 0x80091a <xTickCount>
    1bb8:	30 91 1b 09 	lds	r19, 0x091B	; 0x80091b <xTickCount+0x1>
    1bbc:	28 17       	cp	r18, r24
    1bbe:	39 07       	cpc	r19, r25
    1bc0:	f8 f4       	brcc	.+62     	; 0x1c00 <vTaskIncrementTick+0x11c>
    1bc2:	19 c0       	rjmp	.+50     	; 0x1bf6 <vTaskIncrementTick+0x112>
    1bc4:	8f ef       	ldi	r24, 0xFF	; 255
    1bc6:	9f ef       	ldi	r25, 0xFF	; 255
    1bc8:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <xNextTaskUnblockTime+0x1>
    1bcc:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <xNextTaskUnblockTime>
    1bd0:	48 c0       	rjmp	.+144    	; 0x1c62 <vTaskIncrementTick+0x17e>
    1bd2:	e0 91 32 09 	lds	r30, 0x0932	; 0x800932 <pxDelayedTaskList>
    1bd6:	f0 91 33 09 	lds	r31, 0x0933	; 0x800933 <pxDelayedTaskList+0x1>
    1bda:	05 80       	ldd	r0, Z+5	; 0x05
    1bdc:	f6 81       	ldd	r31, Z+6	; 0x06
    1bde:	e0 2d       	mov	r30, r0
    1be0:	c6 81       	ldd	r28, Z+6	; 0x06
    1be2:	d7 81       	ldd	r29, Z+7	; 0x07
    1be4:	8a 81       	ldd	r24, Y+2	; 0x02
    1be6:	9b 81       	ldd	r25, Y+3	; 0x03
    1be8:	20 91 1a 09 	lds	r18, 0x091A	; 0x80091a <xTickCount>
    1bec:	30 91 1b 09 	lds	r19, 0x091B	; 0x80091b <xTickCount+0x1>
    1bf0:	28 17       	cp	r18, r24
    1bf2:	39 07       	cpc	r19, r25
    1bf4:	28 f4       	brcc	.+10     	; 0x1c00 <vTaskIncrementTick+0x11c>
    1bf6:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <xNextTaskUnblockTime+0x1>
    1bfa:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <xNextTaskUnblockTime>
    1bfe:	31 c0       	rjmp	.+98     	; 0x1c62 <vTaskIncrementTick+0x17e>
    1c00:	8e 01       	movw	r16, r28
    1c02:	0e 5f       	subi	r16, 0xFE	; 254
    1c04:	1f 4f       	sbci	r17, 0xFF	; 255
    1c06:	c8 01       	movw	r24, r16
    1c08:	0e 94 0c 01 	call	0x218	; 0x218 <vListRemove>
    1c0c:	8c 89       	ldd	r24, Y+20	; 0x14
    1c0e:	9d 89       	ldd	r25, Y+21	; 0x15
    1c10:	89 2b       	or	r24, r25
    1c12:	21 f0       	breq	.+8      	; 0x1c1c <vTaskIncrementTick+0x138>
    1c14:	ce 01       	movw	r24, r28
    1c16:	0c 96       	adiw	r24, 0x0c	; 12
    1c18:	0e 94 0c 01 	call	0x218	; 0x218 <vListRemove>
    1c1c:	8e 89       	ldd	r24, Y+22	; 0x16
    1c1e:	90 91 18 09 	lds	r25, 0x0918	; 0x800918 <uxTopReadyPriority>
    1c22:	98 17       	cp	r25, r24
    1c24:	10 f4       	brcc	.+4      	; 0x1c2a <vTaskIncrementTick+0x146>
    1c26:	80 93 18 09 	sts	0x0918, r24	; 0x800918 <uxTopReadyPriority>
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	9c 01       	movw	r18, r24
    1c2e:	22 0f       	add	r18, r18
    1c30:	33 1f       	adc	r19, r19
    1c32:	22 0f       	add	r18, r18
    1c34:	33 1f       	adc	r19, r19
    1c36:	22 0f       	add	r18, r18
    1c38:	33 1f       	adc	r19, r19
    1c3a:	82 0f       	add	r24, r18
    1c3c:	93 1f       	adc	r25, r19
    1c3e:	b8 01       	movw	r22, r16
    1c40:	8a 5b       	subi	r24, 0xBA	; 186
    1c42:	96 4f       	sbci	r25, 0xF6	; 246
    1c44:	0e 94 aa 00 	call	0x154	; 0x154 <vListInsertEnd>
    1c48:	e0 91 32 09 	lds	r30, 0x0932	; 0x800932 <pxDelayedTaskList>
    1c4c:	f0 91 33 09 	lds	r31, 0x0933	; 0x800933 <pxDelayedTaskList+0x1>
    1c50:	80 81       	ld	r24, Z
    1c52:	81 11       	cpse	r24, r1
    1c54:	be cf       	rjmp	.-132    	; 0x1bd2 <vTaskIncrementTick+0xee>
    1c56:	b6 cf       	rjmp	.-148    	; 0x1bc4 <vTaskIncrementTick+0xe0>
    1c58:	80 91 15 09 	lds	r24, 0x0915	; 0x800915 <uxMissedTicks>
    1c5c:	8f 5f       	subi	r24, 0xFF	; 255
    1c5e:	80 93 15 09 	sts	0x0915, r24	; 0x800915 <uxMissedTicks>
    1c62:	df 91       	pop	r29
    1c64:	cf 91       	pop	r28
    1c66:	1f 91       	pop	r17
    1c68:	0f 91       	pop	r16
    1c6a:	08 95       	ret

00001c6c <xTaskResumeAll>:
    1c6c:	cf 92       	push	r12
    1c6e:	df 92       	push	r13
    1c70:	ef 92       	push	r14
    1c72:	ff 92       	push	r15
    1c74:	0f 93       	push	r16
    1c76:	1f 93       	push	r17
    1c78:	cf 93       	push	r28
    1c7a:	df 93       	push	r29
    1c7c:	0f b6       	in	r0, 0x3f	; 63
    1c7e:	f8 94       	cli
    1c80:	0f 92       	push	r0
    1c82:	80 91 16 09 	lds	r24, 0x0916	; 0x800916 <uxSchedulerSuspended>
    1c86:	81 50       	subi	r24, 0x01	; 1
    1c88:	80 93 16 09 	sts	0x0916, r24	; 0x800916 <uxSchedulerSuspended>
    1c8c:	80 91 16 09 	lds	r24, 0x0916	; 0x800916 <uxSchedulerSuspended>
    1c90:	81 11       	cpse	r24, r1
    1c92:	62 c0       	rjmp	.+196    	; 0x1d58 <xTaskResumeAll+0xec>
    1c94:	80 91 1c 09 	lds	r24, 0x091C	; 0x80091c <uxCurrentNumberOfTasks>
    1c98:	81 11       	cpse	r24, r1
    1c9a:	32 c0       	rjmp	.+100    	; 0x1d00 <xTaskResumeAll+0x94>
    1c9c:	60 c0       	rjmp	.+192    	; 0x1d5e <xTaskResumeAll+0xf2>
    1c9e:	d7 01       	movw	r26, r14
    1ca0:	15 96       	adiw	r26, 0x05	; 5
    1ca2:	ed 91       	ld	r30, X+
    1ca4:	fc 91       	ld	r31, X
    1ca6:	16 97       	sbiw	r26, 0x06	; 6
    1ca8:	c6 81       	ldd	r28, Z+6	; 0x06
    1caa:	d7 81       	ldd	r29, Z+7	; 0x07
    1cac:	ce 01       	movw	r24, r28
    1cae:	0c 96       	adiw	r24, 0x0c	; 12
    1cb0:	0e 94 0c 01 	call	0x218	; 0x218 <vListRemove>
    1cb4:	8e 01       	movw	r16, r28
    1cb6:	0e 5f       	subi	r16, 0xFE	; 254
    1cb8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cba:	c8 01       	movw	r24, r16
    1cbc:	0e 94 0c 01 	call	0x218	; 0x218 <vListRemove>
    1cc0:	8e 89       	ldd	r24, Y+22	; 0x16
    1cc2:	90 91 18 09 	lds	r25, 0x0918	; 0x800918 <uxTopReadyPriority>
    1cc6:	98 17       	cp	r25, r24
    1cc8:	10 f4       	brcc	.+4      	; 0x1cce <xTaskResumeAll+0x62>
    1cca:	80 93 18 09 	sts	0x0918, r24	; 0x800918 <uxTopReadyPriority>
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	9c 01       	movw	r18, r24
    1cd2:	22 0f       	add	r18, r18
    1cd4:	33 1f       	adc	r19, r19
    1cd6:	22 0f       	add	r18, r18
    1cd8:	33 1f       	adc	r19, r19
    1cda:	22 0f       	add	r18, r18
    1cdc:	33 1f       	adc	r19, r19
    1cde:	82 0f       	add	r24, r18
    1ce0:	93 1f       	adc	r25, r19
    1ce2:	b8 01       	movw	r22, r16
    1ce4:	8a 5b       	subi	r24, 0xBA	; 186
    1ce6:	96 4f       	sbci	r25, 0xF6	; 246
    1ce8:	0e 94 aa 00 	call	0x154	; 0x154 <vListInsertEnd>
    1cec:	e0 91 6a 09 	lds	r30, 0x096A	; 0x80096a <pxCurrentTCB>
    1cf0:	f0 91 6b 09 	lds	r31, 0x096B	; 0x80096b <pxCurrentTCB+0x1>
    1cf4:	9e 89       	ldd	r25, Y+22	; 0x16
    1cf6:	86 89       	ldd	r24, Z+22	; 0x16
    1cf8:	98 17       	cp	r25, r24
    1cfa:	58 f0       	brcs	.+22     	; 0x1d12 <xTaskResumeAll+0xa6>
    1cfc:	dc 2c       	mov	r13, r12
    1cfe:	09 c0       	rjmp	.+18     	; 0x1d12 <xTaskResumeAll+0xa6>
    1d00:	d1 2c       	mov	r13, r1
    1d02:	0f 2e       	mov	r0, r31
    1d04:	f7 e2       	ldi	r31, 0x27	; 39
    1d06:	ef 2e       	mov	r14, r31
    1d08:	f9 e0       	ldi	r31, 0x09	; 9
    1d0a:	ff 2e       	mov	r15, r31
    1d0c:	f0 2d       	mov	r31, r0
    1d0e:	cc 24       	eor	r12, r12
    1d10:	c3 94       	inc	r12
    1d12:	f7 01       	movw	r30, r14
    1d14:	80 81       	ld	r24, Z
    1d16:	81 11       	cpse	r24, r1
    1d18:	c2 cf       	rjmp	.-124    	; 0x1c9e <xTaskResumeAll+0x32>
    1d1a:	80 91 15 09 	lds	r24, 0x0915	; 0x800915 <uxMissedTicks>
    1d1e:	88 23       	and	r24, r24
    1d20:	79 f0       	breq	.+30     	; 0x1d40 <xTaskResumeAll+0xd4>
    1d22:	80 91 15 09 	lds	r24, 0x0915	; 0x800915 <uxMissedTicks>
    1d26:	88 23       	and	r24, r24
    1d28:	91 f0       	breq	.+36     	; 0x1d4e <xTaskResumeAll+0xe2>
    1d2a:	dc de       	rcall	.-584    	; 0x1ae4 <vTaskIncrementTick>
    1d2c:	80 91 15 09 	lds	r24, 0x0915	; 0x800915 <uxMissedTicks>
    1d30:	81 50       	subi	r24, 0x01	; 1
    1d32:	80 93 15 09 	sts	0x0915, r24	; 0x800915 <uxMissedTicks>
    1d36:	80 91 15 09 	lds	r24, 0x0915	; 0x800915 <uxMissedTicks>
    1d3a:	81 11       	cpse	r24, r1
    1d3c:	f6 cf       	rjmp	.-20     	; 0x1d2a <xTaskResumeAll+0xbe>
    1d3e:	07 c0       	rjmp	.+14     	; 0x1d4e <xTaskResumeAll+0xe2>
    1d40:	f1 e0       	ldi	r31, 0x01	; 1
    1d42:	df 16       	cp	r13, r31
    1d44:	21 f0       	breq	.+8      	; 0x1d4e <xTaskResumeAll+0xe2>
    1d46:	80 91 14 09 	lds	r24, 0x0914	; 0x800914 <xMissedYield>
    1d4a:	81 30       	cpi	r24, 0x01	; 1
    1d4c:	39 f4       	brne	.+14     	; 0x1d5c <xTaskResumeAll+0xf0>
    1d4e:	10 92 14 09 	sts	0x0914, r1	; 0x800914 <xMissedYield>
    1d52:	ae dc       	rcall	.-1700   	; 0x16b0 <vPortYield>
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	03 c0       	rjmp	.+6      	; 0x1d5e <xTaskResumeAll+0xf2>
    1d58:	80 e0       	ldi	r24, 0x00	; 0
    1d5a:	01 c0       	rjmp	.+2      	; 0x1d5e <xTaskResumeAll+0xf2>
    1d5c:	80 e0       	ldi	r24, 0x00	; 0
    1d5e:	0f 90       	pop	r0
    1d60:	0f be       	out	0x3f, r0	; 63
    1d62:	df 91       	pop	r29
    1d64:	cf 91       	pop	r28
    1d66:	1f 91       	pop	r17
    1d68:	0f 91       	pop	r16
    1d6a:	ff 90       	pop	r15
    1d6c:	ef 90       	pop	r14
    1d6e:	df 90       	pop	r13
    1d70:	cf 90       	pop	r12
    1d72:	08 95       	ret

00001d74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    1d74:	cf 93       	push	r28
    1d76:	df 93       	push	r29
    1d78:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    1d7a:	89 2b       	or	r24, r25
		{
			vTaskSuspendAll();
    1d7c:	99 f0       	breq	.+38     	; 0x1da4 <vTaskDelay+0x30>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    1d7e:	ac de       	rcall	.-680    	; 0x1ad8 <vTaskSuspendAll>
    1d80:	80 91 1a 09 	lds	r24, 0x091A	; 0x80091a <xTickCount>
    1d84:	90 91 1b 09 	lds	r25, 0x091B	; 0x80091b <xTickCount+0x1>
    1d88:	c8 0f       	add	r28, r24

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    1d8a:	d9 1f       	adc	r29, r25
    1d8c:	80 91 6a 09 	lds	r24, 0x096A	; 0x80096a <pxCurrentTCB>
    1d90:	90 91 6b 09 	lds	r25, 0x096B	; 0x80096b <pxCurrentTCB+0x1>
    1d94:	02 96       	adiw	r24, 0x02	; 2
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    1d96:	0e 94 0c 01 	call	0x218	; 0x218 <vListRemove>
			xAlreadyYielded = xTaskResumeAll();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1d9a:	ce 01       	movw	r24, r28
    1d9c:	3c dd       	rcall	.-1416   	; 0x1816 <prvAddCurrentTaskToDelayedList>
		{
			portYIELD_WITHIN_API();
    1d9e:	66 df       	rcall	.-308    	; 0x1c6c <xTaskResumeAll>
    1da0:	81 11       	cpse	r24, r1
		}
	}
    1da2:	01 c0       	rjmp	.+2      	; 0x1da6 <vTaskDelay+0x32>
    1da4:	85 dc       	rcall	.-1782   	; 0x16b0 <vPortYield>
    1da6:	df 91       	pop	r29
    1da8:	cf 91       	pop	r28
    1daa:	08 95       	ret

00001dac <prvIdleTask>:
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1dac:	0f 2e       	mov	r0, r31
    1dae:	fe e1       	ldi	r31, 0x1E	; 30
    1db0:	ef 2e       	mov	r14, r31
    1db2:	f9 e0       	ldi	r31, 0x09	; 9
    1db4:	ff 2e       	mov	r15, r31
    1db6:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    1db8:	c6 e4       	ldi	r28, 0x46	; 70
    1dba:	d9 e0       	ldi	r29, 0x09	; 9
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    1dbc:	80 91 1d 09 	lds	r24, 0x091D	; 0x80091d <uxTasksDeleted>
    1dc0:	88 23       	and	r24, r24
		{
			vTaskSuspendAll();
    1dc2:	41 f1       	breq	.+80     	; 0x1e14 <prvIdleTask+0x68>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1dc4:	89 de       	rcall	.-750    	; 0x1ad8 <vTaskSuspendAll>
			xTaskResumeAll();
    1dc6:	d7 01       	movw	r26, r14
    1dc8:	1c 91       	ld	r17, X

			if( xListIsEmpty == pdFALSE )
    1dca:	50 df       	rcall	.-352    	; 0x1c6c <xTaskResumeAll>
    1dcc:	11 23       	and	r17, r17
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    1dce:	11 f1       	breq	.+68     	; 0x1e14 <prvIdleTask+0x68>
    1dd0:	0f b6       	in	r0, 0x3f	; 63
    1dd2:	f8 94       	cli
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    1dd4:	0f 92       	push	r0
    1dd6:	d7 01       	movw	r26, r14
    1dd8:	15 96       	adiw	r26, 0x05	; 5
    1dda:	ed 91       	ld	r30, X+
    1ddc:	fc 91       	ld	r31, X
    1dde:	16 97       	sbiw	r26, 0x06	; 6
    1de0:	06 81       	ldd	r16, Z+6	; 0x06
					vListRemove( &( pxTCB->xGenericListItem ) );
    1de2:	17 81       	ldd	r17, Z+7	; 0x07
    1de4:	c8 01       	movw	r24, r16
    1de6:	02 96       	adiw	r24, 0x02	; 2
    1de8:	0e 94 0c 01 	call	0x218	; 0x218 <vListRemove>
					--uxCurrentNumberOfTasks;
    1dec:	80 91 1c 09 	lds	r24, 0x091C	; 0x80091c <uxCurrentNumberOfTasks>
    1df0:	81 50       	subi	r24, 0x01	; 1
    1df2:	80 93 1c 09 	sts	0x091C, r24	; 0x80091c <uxCurrentNumberOfTasks>
					--uxTasksDeleted;
    1df6:	80 91 1d 09 	lds	r24, 0x091D	; 0x80091d <uxTasksDeleted>
    1dfa:	81 50       	subi	r24, 0x01	; 1
    1dfc:	80 93 1d 09 	sts	0x091D, r24	; 0x80091d <uxTasksDeleted>
				}
				taskEXIT_CRITICAL();
    1e00:	0f 90       	pop	r0
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    1e02:	0f be       	out	0x3f, r0	; 63
    1e04:	f8 01       	movw	r30, r16
    1e06:	87 89       	ldd	r24, Z+23	; 0x17
    1e08:	90 8d       	ldd	r25, Z+24	; 0x18
    1e0a:	0e 94 97 00 	call	0x12e	; 0x12e <vPortFree>
		vPortFree( pxTCB );
    1e0e:	c8 01       	movw	r24, r16
    1e10:	0e 94 97 00 	call	0x12e	; 0x12e <vPortFree>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    1e14:	88 81       	ld	r24, Y
			{
				taskYIELD();
    1e16:	82 30       	cpi	r24, 0x02	; 2
    1e18:	88 f2       	brcs	.-94     	; 0x1dbc <prvIdleTask+0x10>
    1e1a:	4a dc       	rcall	.-1900   	; 0x16b0 <vPortYield>
    1e1c:	cf cf       	rjmp	.-98     	; 0x1dbc <prvIdleTask+0x10>

00001e1e <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    1e1e:	80 91 16 09 	lds	r24, 0x0916	; 0x800916 <uxSchedulerSuspended>
    1e22:	81 11       	cpse	r24, r1
    1e24:	13 c0       	rjmp	.+38     	; 0x1e4c <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    1e26:	80 91 18 09 	lds	r24, 0x0918	; 0x800918 <uxTopReadyPriority>
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	fc 01       	movw	r30, r24
    1e2e:	ee 0f       	add	r30, r30
    1e30:	ff 1f       	adc	r31, r31
    1e32:	ee 0f       	add	r30, r30
    1e34:	ff 1f       	adc	r31, r31
    1e36:	ee 0f       	add	r30, r30
    1e38:	ff 1f       	adc	r31, r31
    1e3a:	8e 0f       	add	r24, r30
    1e3c:	9f 1f       	adc	r25, r31
    1e3e:	fc 01       	movw	r30, r24
    1e40:	ea 5b       	subi	r30, 0xBA	; 186
    1e42:	f6 4f       	sbci	r31, 0xF6	; 246
    1e44:	80 81       	ld	r24, Z
    1e46:	88 23       	and	r24, r24
    1e48:	29 f0       	breq	.+10     	; 0x1e54 <vTaskSwitchContext+0x36>
    1e4a:	1b c0       	rjmp	.+54     	; 0x1e82 <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	80 93 14 09 	sts	0x0914, r24	; 0x800914 <xMissedYield>
    1e52:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    1e54:	80 91 18 09 	lds	r24, 0x0918	; 0x800918 <uxTopReadyPriority>
    1e58:	81 50       	subi	r24, 0x01	; 1
    1e5a:	80 93 18 09 	sts	0x0918, r24	; 0x800918 <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    1e5e:	80 91 18 09 	lds	r24, 0x0918	; 0x800918 <uxTopReadyPriority>
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	fc 01       	movw	r30, r24
    1e66:	ee 0f       	add	r30, r30
    1e68:	ff 1f       	adc	r31, r31
    1e6a:	ee 0f       	add	r30, r30
    1e6c:	ff 1f       	adc	r31, r31
    1e6e:	ee 0f       	add	r30, r30
    1e70:	ff 1f       	adc	r31, r31
    1e72:	8e 0f       	add	r24, r30
    1e74:	9f 1f       	adc	r25, r31
    1e76:	fc 01       	movw	r30, r24
    1e78:	ea 5b       	subi	r30, 0xBA	; 186
    1e7a:	f6 4f       	sbci	r31, 0xF6	; 246
    1e7c:	80 81       	ld	r24, Z
    1e7e:	88 23       	and	r24, r24
    1e80:	49 f3       	breq	.-46     	; 0x1e54 <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    1e82:	80 91 18 09 	lds	r24, 0x0918	; 0x800918 <uxTopReadyPriority>
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	9c 01       	movw	r18, r24
    1e8a:	22 0f       	add	r18, r18
    1e8c:	33 1f       	adc	r19, r19
    1e8e:	22 0f       	add	r18, r18
    1e90:	33 1f       	adc	r19, r19
    1e92:	22 0f       	add	r18, r18
    1e94:	33 1f       	adc	r19, r19
    1e96:	28 0f       	add	r18, r24
    1e98:	39 1f       	adc	r19, r25
    1e9a:	d9 01       	movw	r26, r18
    1e9c:	aa 5b       	subi	r26, 0xBA	; 186
    1e9e:	b6 4f       	sbci	r27, 0xF6	; 246
    1ea0:	11 96       	adiw	r26, 0x01	; 1
    1ea2:	ed 91       	ld	r30, X+
    1ea4:	fc 91       	ld	r31, X
    1ea6:	12 97       	sbiw	r26, 0x02	; 2
    1ea8:	02 80       	ldd	r0, Z+2	; 0x02
    1eaa:	f3 81       	ldd	r31, Z+3	; 0x03
    1eac:	e0 2d       	mov	r30, r0
    1eae:	12 96       	adiw	r26, 0x02	; 2
    1eb0:	fc 93       	st	X, r31
    1eb2:	ee 93       	st	-X, r30
    1eb4:	11 97       	sbiw	r26, 0x01	; 1
    1eb6:	27 5b       	subi	r18, 0xB7	; 183
    1eb8:	36 4f       	sbci	r19, 0xF6	; 246
    1eba:	e2 17       	cp	r30, r18
    1ebc:	f3 07       	cpc	r31, r19
    1ebe:	29 f4       	brne	.+10     	; 0x1eca <vTaskSwitchContext+0xac>
    1ec0:	22 81       	ldd	r18, Z+2	; 0x02
    1ec2:	33 81       	ldd	r19, Z+3	; 0x03
    1ec4:	fd 01       	movw	r30, r26
    1ec6:	32 83       	std	Z+2, r19	; 0x02
    1ec8:	21 83       	std	Z+1, r18	; 0x01
    1eca:	fc 01       	movw	r30, r24
    1ecc:	ee 0f       	add	r30, r30
    1ece:	ff 1f       	adc	r31, r31
    1ed0:	ee 0f       	add	r30, r30
    1ed2:	ff 1f       	adc	r31, r31
    1ed4:	ee 0f       	add	r30, r30
    1ed6:	ff 1f       	adc	r31, r31
    1ed8:	8e 0f       	add	r24, r30
    1eda:	9f 1f       	adc	r25, r31
    1edc:	fc 01       	movw	r30, r24
    1ede:	ea 5b       	subi	r30, 0xBA	; 186
    1ee0:	f6 4f       	sbci	r31, 0xF6	; 246
    1ee2:	01 80       	ldd	r0, Z+1	; 0x01
    1ee4:	f2 81       	ldd	r31, Z+2	; 0x02
    1ee6:	e0 2d       	mov	r30, r0
    1ee8:	86 81       	ldd	r24, Z+6	; 0x06
    1eea:	97 81       	ldd	r25, Z+7	; 0x07
    1eec:	90 93 6b 09 	sts	0x096B, r25	; 0x80096b <pxCurrentTCB+0x1>
    1ef0:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <pxCurrentTCB>
    1ef4:	08 95       	ret

00001ef6 <__divmodhi4>:
    1ef6:	97 fb       	bst	r25, 7
    1ef8:	07 2e       	mov	r0, r23
    1efa:	16 f4       	brtc	.+4      	; 0x1f00 <__divmodhi4+0xa>
    1efc:	00 94       	com	r0
    1efe:	06 d0       	rcall	.+12     	; 0x1f0c <__divmodhi4_neg1>
    1f00:	77 fd       	sbrc	r23, 7
    1f02:	08 d0       	rcall	.+16     	; 0x1f14 <__divmodhi4_neg2>
    1f04:	14 d0       	rcall	.+40     	; 0x1f2e <__udivmodhi4>
    1f06:	07 fc       	sbrc	r0, 7
    1f08:	05 d0       	rcall	.+10     	; 0x1f14 <__divmodhi4_neg2>
    1f0a:	3e f4       	brtc	.+14     	; 0x1f1a <__divmodhi4_exit>

00001f0c <__divmodhi4_neg1>:
    1f0c:	90 95       	com	r25
    1f0e:	81 95       	neg	r24
    1f10:	9f 4f       	sbci	r25, 0xFF	; 255
    1f12:	08 95       	ret

00001f14 <__divmodhi4_neg2>:
    1f14:	70 95       	com	r23
    1f16:	61 95       	neg	r22
    1f18:	7f 4f       	sbci	r23, 0xFF	; 255

00001f1a <__divmodhi4_exit>:
    1f1a:	08 95       	ret

00001f1c <__tablejump2__>:
    1f1c:	ee 0f       	add	r30, r30
    1f1e:	ff 1f       	adc	r31, r31
    1f20:	00 24       	eor	r0, r0
    1f22:	00 1c       	adc	r0, r0
    1f24:	0b be       	out	0x3b, r0	; 59
    1f26:	07 90       	elpm	r0, Z+
    1f28:	f6 91       	elpm	r31, Z
    1f2a:	e0 2d       	mov	r30, r0
    1f2c:	09 94       	ijmp

00001f2e <__udivmodhi4>:
    1f2e:	aa 1b       	sub	r26, r26
    1f30:	bb 1b       	sub	r27, r27
    1f32:	51 e1       	ldi	r21, 0x11	; 17
    1f34:	07 c0       	rjmp	.+14     	; 0x1f44 <__udivmodhi4_ep>

00001f36 <__udivmodhi4_loop>:
    1f36:	aa 1f       	adc	r26, r26
    1f38:	bb 1f       	adc	r27, r27
    1f3a:	a6 17       	cp	r26, r22
    1f3c:	b7 07       	cpc	r27, r23
    1f3e:	10 f0       	brcs	.+4      	; 0x1f44 <__udivmodhi4_ep>
    1f40:	a6 1b       	sub	r26, r22
    1f42:	b7 0b       	sbc	r27, r23

00001f44 <__udivmodhi4_ep>:
    1f44:	88 1f       	adc	r24, r24
    1f46:	99 1f       	adc	r25, r25
    1f48:	5a 95       	dec	r21
    1f4a:	a9 f7       	brne	.-22     	; 0x1f36 <__udivmodhi4_loop>
    1f4c:	80 95       	com	r24
    1f4e:	90 95       	com	r25
    1f50:	bc 01       	movw	r22, r24
    1f52:	cd 01       	movw	r24, r26
    1f54:	08 95       	ret

00001f56 <do_rand>:
    1f56:	8f 92       	push	r8
    1f58:	9f 92       	push	r9
    1f5a:	af 92       	push	r10
    1f5c:	bf 92       	push	r11
    1f5e:	cf 92       	push	r12
    1f60:	df 92       	push	r13
    1f62:	ef 92       	push	r14
    1f64:	ff 92       	push	r15
    1f66:	cf 93       	push	r28
    1f68:	df 93       	push	r29
    1f6a:	ec 01       	movw	r28, r24
    1f6c:	68 81       	ld	r22, Y
    1f6e:	79 81       	ldd	r23, Y+1	; 0x01
    1f70:	8a 81       	ldd	r24, Y+2	; 0x02
    1f72:	9b 81       	ldd	r25, Y+3	; 0x03
    1f74:	61 15       	cp	r22, r1
    1f76:	71 05       	cpc	r23, r1
    1f78:	81 05       	cpc	r24, r1
    1f7a:	91 05       	cpc	r25, r1
    1f7c:	21 f4       	brne	.+8      	; 0x1f86 <do_rand+0x30>
    1f7e:	64 e2       	ldi	r22, 0x24	; 36
    1f80:	79 ed       	ldi	r23, 0xD9	; 217
    1f82:	8b e5       	ldi	r24, 0x5B	; 91
    1f84:	97 e0       	ldi	r25, 0x07	; 7
    1f86:	2d e1       	ldi	r18, 0x1D	; 29
    1f88:	33 ef       	ldi	r19, 0xF3	; 243
    1f8a:	41 e0       	ldi	r20, 0x01	; 1
    1f8c:	50 e0       	ldi	r21, 0x00	; 0
    1f8e:	64 d0       	rcall	.+200    	; 0x2058 <__divmodsi4>
    1f90:	49 01       	movw	r8, r18
    1f92:	5a 01       	movw	r10, r20
    1f94:	9b 01       	movw	r18, r22
    1f96:	ac 01       	movw	r20, r24
    1f98:	a7 ea       	ldi	r26, 0xA7	; 167
    1f9a:	b1 e4       	ldi	r27, 0x41	; 65
    1f9c:	79 d0       	rcall	.+242    	; 0x2090 <__muluhisi3>
    1f9e:	6b 01       	movw	r12, r22
    1fa0:	7c 01       	movw	r14, r24
    1fa2:	ac ee       	ldi	r26, 0xEC	; 236
    1fa4:	b4 ef       	ldi	r27, 0xF4	; 244
    1fa6:	a5 01       	movw	r20, r10
    1fa8:	94 01       	movw	r18, r8
    1faa:	7e d0       	rcall	.+252    	; 0x20a8 <__mulohisi3>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	8c 0d       	add	r24, r12
    1fb2:	9d 1d       	adc	r25, r13
    1fb4:	ae 1d       	adc	r26, r14
    1fb6:	bf 1d       	adc	r27, r15
    1fb8:	b7 ff       	sbrs	r27, 7
    1fba:	03 c0       	rjmp	.+6      	; 0x1fc2 <do_rand+0x6c>
    1fbc:	01 97       	sbiw	r24, 0x01	; 1
    1fbe:	a1 09       	sbc	r26, r1
    1fc0:	b0 48       	sbci	r27, 0x80	; 128
    1fc2:	88 83       	st	Y, r24
    1fc4:	99 83       	std	Y+1, r25	; 0x01
    1fc6:	aa 83       	std	Y+2, r26	; 0x02
    1fc8:	bb 83       	std	Y+3, r27	; 0x03
    1fca:	9f 77       	andi	r25, 0x7F	; 127
    1fcc:	df 91       	pop	r29
    1fce:	cf 91       	pop	r28
    1fd0:	ff 90       	pop	r15
    1fd2:	ef 90       	pop	r14
    1fd4:	df 90       	pop	r13
    1fd6:	cf 90       	pop	r12
    1fd8:	bf 90       	pop	r11
    1fda:	af 90       	pop	r10
    1fdc:	9f 90       	pop	r9
    1fde:	8f 90       	pop	r8
    1fe0:	08 95       	ret

00001fe2 <rand_r>:
    1fe2:	b9 cf       	rjmp	.-142    	; 0x1f56 <do_rand>

00001fe4 <rand>:
    1fe4:	80 e0       	ldi	r24, 0x00	; 0
    1fe6:	91 e0       	ldi	r25, 0x01	; 1
    1fe8:	b6 cf       	rjmp	.-148    	; 0x1f56 <do_rand>

00001fea <srand>:
    1fea:	a0 e0       	ldi	r26, 0x00	; 0
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    1ff2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1ff6:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    1ffa:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    1ffe:	08 95       	ret

00002000 <memset>:
    2000:	dc 01       	movw	r26, r24
    2002:	01 c0       	rjmp	.+2      	; 0x2006 <memset+0x6>
    2004:	6d 93       	st	X+, r22
    2006:	41 50       	subi	r20, 0x01	; 1
    2008:	50 40       	sbci	r21, 0x00	; 0
    200a:	e0 f7       	brcc	.-8      	; 0x2004 <memset+0x4>
    200c:	08 95       	ret

0000200e <strncpy>:
    200e:	fb 01       	movw	r30, r22
    2010:	dc 01       	movw	r26, r24
    2012:	41 50       	subi	r20, 0x01	; 1
    2014:	50 40       	sbci	r21, 0x00	; 0
    2016:	48 f0       	brcs	.+18     	; 0x202a <strncpy+0x1c>
    2018:	01 90       	ld	r0, Z+
    201a:	0d 92       	st	X+, r0
    201c:	00 20       	and	r0, r0
    201e:	c9 f7       	brne	.-14     	; 0x2012 <strncpy+0x4>
    2020:	01 c0       	rjmp	.+2      	; 0x2024 <strncpy+0x16>
    2022:	1d 92       	st	X+, r1
    2024:	41 50       	subi	r20, 0x01	; 1
    2026:	50 40       	sbci	r21, 0x00	; 0
    2028:	e0 f7       	brcc	.-8      	; 0x2022 <strncpy+0x14>
    202a:	08 95       	ret

0000202c <eeprom_read_byte>:
    202c:	f9 99       	sbic	0x1f, 1	; 31
    202e:	fe cf       	rjmp	.-4      	; 0x202c <eeprom_read_byte>
    2030:	92 bd       	out	0x22, r25	; 34
    2032:	81 bd       	out	0x21, r24	; 33
    2034:	f8 9a       	sbi	0x1f, 0	; 31
    2036:	99 27       	eor	r25, r25
    2038:	80 b5       	in	r24, 0x20	; 32
    203a:	08 95       	ret

0000203c <eeprom_write_byte>:
    203c:	26 2f       	mov	r18, r22

0000203e <eeprom_write_r18>:
    203e:	f9 99       	sbic	0x1f, 1	; 31
    2040:	fe cf       	rjmp	.-4      	; 0x203e <eeprom_write_r18>
    2042:	1f ba       	out	0x1f, r1	; 31
    2044:	92 bd       	out	0x22, r25	; 34
    2046:	81 bd       	out	0x21, r24	; 33
    2048:	20 bd       	out	0x20, r18	; 32
    204a:	0f b6       	in	r0, 0x3f	; 63
    204c:	f8 94       	cli
    204e:	fa 9a       	sbi	0x1f, 2	; 31
    2050:	f9 9a       	sbi	0x1f, 1	; 31
    2052:	0f be       	out	0x3f, r0	; 63
    2054:	01 96       	adiw	r24, 0x01	; 1
    2056:	08 95       	ret

00002058 <__divmodsi4>:
    2058:	05 2e       	mov	r0, r21
    205a:	97 fb       	bst	r25, 7
    205c:	16 f4       	brtc	.+4      	; 0x2062 <__divmodsi4+0xa>
    205e:	00 94       	com	r0
    2060:	0f d0       	rcall	.+30     	; 0x2080 <__negsi2>
    2062:	57 fd       	sbrc	r21, 7
    2064:	05 d0       	rcall	.+10     	; 0x2070 <__divmodsi4_neg2>
    2066:	24 d0       	rcall	.+72     	; 0x20b0 <__udivmodsi4>
    2068:	07 fc       	sbrc	r0, 7
    206a:	02 d0       	rcall	.+4      	; 0x2070 <__divmodsi4_neg2>
    206c:	46 f4       	brtc	.+16     	; 0x207e <__divmodsi4_exit>
    206e:	08 c0       	rjmp	.+16     	; 0x2080 <__negsi2>

00002070 <__divmodsi4_neg2>:
    2070:	50 95       	com	r21
    2072:	40 95       	com	r20
    2074:	30 95       	com	r19
    2076:	21 95       	neg	r18
    2078:	3f 4f       	sbci	r19, 0xFF	; 255
    207a:	4f 4f       	sbci	r20, 0xFF	; 255
    207c:	5f 4f       	sbci	r21, 0xFF	; 255

0000207e <__divmodsi4_exit>:
    207e:	08 95       	ret

00002080 <__negsi2>:
    2080:	90 95       	com	r25
    2082:	80 95       	com	r24
    2084:	70 95       	com	r23
    2086:	61 95       	neg	r22
    2088:	7f 4f       	sbci	r23, 0xFF	; 255
    208a:	8f 4f       	sbci	r24, 0xFF	; 255
    208c:	9f 4f       	sbci	r25, 0xFF	; 255
    208e:	08 95       	ret

00002090 <__muluhisi3>:
    2090:	31 d0       	rcall	.+98     	; 0x20f4 <__umulhisi3>
    2092:	a5 9f       	mul	r26, r21
    2094:	90 0d       	add	r25, r0
    2096:	b4 9f       	mul	r27, r20
    2098:	90 0d       	add	r25, r0
    209a:	a4 9f       	mul	r26, r20
    209c:	80 0d       	add	r24, r0
    209e:	91 1d       	adc	r25, r1
    20a0:	11 24       	eor	r1, r1
    20a2:	08 95       	ret

000020a4 <__mulshisi3>:
    20a4:	b7 ff       	sbrs	r27, 7
    20a6:	f4 cf       	rjmp	.-24     	; 0x2090 <__muluhisi3>

000020a8 <__mulohisi3>:
    20a8:	f3 df       	rcall	.-26     	; 0x2090 <__muluhisi3>
    20aa:	82 1b       	sub	r24, r18
    20ac:	93 0b       	sbc	r25, r19
    20ae:	08 95       	ret

000020b0 <__udivmodsi4>:
    20b0:	a1 e2       	ldi	r26, 0x21	; 33
    20b2:	1a 2e       	mov	r1, r26
    20b4:	aa 1b       	sub	r26, r26
    20b6:	bb 1b       	sub	r27, r27
    20b8:	fd 01       	movw	r30, r26
    20ba:	0d c0       	rjmp	.+26     	; 0x20d6 <__udivmodsi4_ep>

000020bc <__udivmodsi4_loop>:
    20bc:	aa 1f       	adc	r26, r26
    20be:	bb 1f       	adc	r27, r27
    20c0:	ee 1f       	adc	r30, r30
    20c2:	ff 1f       	adc	r31, r31
    20c4:	a2 17       	cp	r26, r18
    20c6:	b3 07       	cpc	r27, r19
    20c8:	e4 07       	cpc	r30, r20
    20ca:	f5 07       	cpc	r31, r21
    20cc:	20 f0       	brcs	.+8      	; 0x20d6 <__udivmodsi4_ep>
    20ce:	a2 1b       	sub	r26, r18
    20d0:	b3 0b       	sbc	r27, r19
    20d2:	e4 0b       	sbc	r30, r20
    20d4:	f5 0b       	sbc	r31, r21

000020d6 <__udivmodsi4_ep>:
    20d6:	66 1f       	adc	r22, r22
    20d8:	77 1f       	adc	r23, r23
    20da:	88 1f       	adc	r24, r24
    20dc:	99 1f       	adc	r25, r25
    20de:	1a 94       	dec	r1
    20e0:	69 f7       	brne	.-38     	; 0x20bc <__udivmodsi4_loop>
    20e2:	60 95       	com	r22
    20e4:	70 95       	com	r23
    20e6:	80 95       	com	r24
    20e8:	90 95       	com	r25
    20ea:	9b 01       	movw	r18, r22
    20ec:	ac 01       	movw	r20, r24
    20ee:	bd 01       	movw	r22, r26
    20f0:	cf 01       	movw	r24, r30
    20f2:	08 95       	ret

000020f4 <__umulhisi3>:
    20f4:	a2 9f       	mul	r26, r18
    20f6:	b0 01       	movw	r22, r0
    20f8:	b3 9f       	mul	r27, r19
    20fa:	c0 01       	movw	r24, r0
    20fc:	a3 9f       	mul	r26, r19
    20fe:	70 0d       	add	r23, r0
    2100:	81 1d       	adc	r24, r1
    2102:	11 24       	eor	r1, r1
    2104:	91 1d       	adc	r25, r1
    2106:	b2 9f       	mul	r27, r18
    2108:	70 0d       	add	r23, r0
    210a:	81 1d       	adc	r24, r1
    210c:	11 24       	eor	r1, r1
    210e:	91 1d       	adc	r25, r1
    2110:	08 95       	ret

00002112 <_exit>:
    2112:	f8 94       	cli

00002114 <__stop_program>:
    2114:	ff cf       	rjmp	.-2      	; 0x2114 <__stop_program>
