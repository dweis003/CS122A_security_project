
dweis003_prodr010_lab10_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000466  000004fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000466  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  0080012a  0080012a  00000524  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000554  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008b8  00000000  00000000  00000674  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002ca  00000000  00000000  00000f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000064c  00000000  00000000  000011f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000208  00000000  00000000  00001844  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c8  00000000  00000000  00001a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000720  00000000  00000000  00001e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00002534  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	7e c0       	rjmp	.+252    	; 0x132 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e6       	ldi	r30, 0x66	; 102
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 32       	cpi	r26, 0x2A	; 42
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e2       	ldi	r26, 0x2A	; 42
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 34       	cpi	r26, 0x46	; 70
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	46 d1       	rcall	.+652    	; 0x350 <main>
  c4:	ce c1       	rjmp	.+924    	; 0x462 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerSet>:
		if(c==0){return b;}
		a = b;
		b = c;
	}
	return 0;
}
  c8:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
  cc:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
  d0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
  d4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
  d8:	60 93 41 01 	sts	0x0141, r22	; 0x800141 <_avr_timer_cntcurr>
  dc:	70 93 42 01 	sts	0x0142, r23	; 0x800142 <_avr_timer_cntcurr+0x1>
  e0:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <_avr_timer_cntcurr+0x2>
  e4:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <_avr_timer_cntcurr+0x3>
  e8:	08 95       	ret

000000ea <TimerOn>:
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  f0:	8d e7       	ldi	r24, 0x7D	; 125
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 102:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 106:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 10e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 112:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 116:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 11a:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <_avr_timer_cntcurr>
 11e:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <_avr_timer_cntcurr+0x1>
 122:	a0 93 43 01 	sts	0x0143, r26	; 0x800143 <_avr_timer_cntcurr+0x2>
 126:	b0 93 44 01 	sts	0x0144, r27	; 0x800144 <_avr_timer_cntcurr+0x3>
 12a:	8f b7       	in	r24, 0x3f	; 63
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	8f bf       	out	0x3f, r24	; 63
 130:	08 95       	ret

00000132 <__vector_13>:
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <_avr_timer_cntcurr>
 148:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <_avr_timer_cntcurr+0x1>
 14c:	a0 91 43 01 	lds	r26, 0x0143	; 0x800143 <_avr_timer_cntcurr+0x2>
 150:	b0 91 44 01 	lds	r27, 0x0144	; 0x800144 <_avr_timer_cntcurr+0x3>
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	a1 09       	sbc	r26, r1
 158:	b1 09       	sbc	r27, r1
 15a:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <_avr_timer_cntcurr>
 15e:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <_avr_timer_cntcurr+0x1>
 162:	a0 93 43 01 	sts	0x0143, r26	; 0x800143 <_avr_timer_cntcurr+0x2>
 166:	b0 93 44 01 	sts	0x0144, r27	; 0x800144 <_avr_timer_cntcurr+0x3>
 16a:	89 2b       	or	r24, r25
 16c:	8a 2b       	or	r24, r26
 16e:	8b 2b       	or	r24, r27
 170:	99 f4       	brne	.+38     	; 0x198 <__vector_13+0x66>
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <TimerFlag>
 178:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 17c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 180:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 184:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 188:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <_avr_timer_cntcurr>
 18c:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <_avr_timer_cntcurr+0x1>
 190:	a0 93 43 01 	sts	0x0143, r26	; 0x800143 <_avr_timer_cntcurr+0x2>
 194:	b0 93 44 01 	sts	0x0144, r27	; 0x800144 <_avr_timer_cntcurr+0x3>
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <delay_ms>:
 1aa:	18 16       	cp	r1, r24
 1ac:	19 06       	cpc	r1, r25
 1ae:	5c f0       	brlt	.+22     	; 0x1c6 <delay_ms+0x1c>
 1b0:	08 95       	ret
 1b2:	00 00       	nop
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	31 09       	sbc	r19, r1
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <delay_ms+0x8>
 1ba:	4f 5f       	subi	r20, 0xFF	; 255
 1bc:	5f 4f       	sbci	r21, 0xFF	; 255
 1be:	84 17       	cp	r24, r20
 1c0:	95 07       	cpc	r25, r21
 1c2:	19 f4       	brne	.+6      	; 0x1ca <delay_ms+0x20>
 1c4:	08 95       	ret
 1c6:	40 e0       	ldi	r20, 0x00	; 0
 1c8:	50 e0       	ldi	r21, 0x00	; 0
 1ca:	27 e0       	ldi	r18, 0x07	; 7
 1cc:	33 e0       	ldi	r19, 0x03	; 3
 1ce:	f1 cf       	rjmp	.-30     	; 0x1b2 <delay_ms+0x8>

000001d0 <LCD_WriteCommand>:
 1d0:	5e 98       	cbi	0x0b, 6	; 11
 1d2:	88 b9       	out	0x08, r24	; 8
 1d4:	5f 9a       	sbi	0x0b, 7	; 11
 1d6:	00 00       	nop
 1d8:	5f 98       	cbi	0x0b, 7	; 11
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	e5 cf       	rjmp	.-54     	; 0x1aa <delay_ms>
 1e0:	08 95       	ret

000001e2 <LCD_ClearScreen>:
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	f5 cf       	rjmp	.-22     	; 0x1d0 <LCD_WriteCommand>
 1e6:	08 95       	ret

000001e8 <LCD_Cursor>:
 1e8:	81 31       	cpi	r24, 0x11	; 17
 1ea:	18 f4       	brcc	.+6      	; 0x1f2 <LCD_Cursor+0xa>
 1ec:	81 58       	subi	r24, 0x81	; 129
 1ee:	f0 cf       	rjmp	.-32     	; 0x1d0 <LCD_WriteCommand>
 1f0:	08 95       	ret
 1f2:	81 55       	subi	r24, 0x51	; 81
 1f4:	ed cf       	rjmp	.-38     	; 0x1d0 <LCD_WriteCommand>
 1f6:	08 95       	ret

000001f8 <LCD_init>:
 1f8:	84 e6       	ldi	r24, 0x64	; 100
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	d6 df       	rcall	.-84     	; 0x1aa <delay_ms>
 1fe:	88 e3       	ldi	r24, 0x38	; 56
 200:	e7 df       	rcall	.-50     	; 0x1d0 <LCD_WriteCommand>
 202:	86 e0       	ldi	r24, 0x06	; 6
 204:	e5 df       	rcall	.-54     	; 0x1d0 <LCD_WriteCommand>
 206:	8f e0       	ldi	r24, 0x0F	; 15
 208:	e3 df       	rcall	.-58     	; 0x1d0 <LCD_WriteCommand>
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	e1 df       	rcall	.-62     	; 0x1d0 <LCD_WriteCommand>
 20e:	8a e0       	ldi	r24, 0x0A	; 10
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	cb cf       	rjmp	.-106    	; 0x1aa <delay_ms>
 214:	08 95       	ret

00000216 <LCD_WriteData>:
 216:	5e 9a       	sbi	0x0b, 6	; 11
 218:	88 b9       	out	0x08, r24	; 8
 21a:	5f 9a       	sbi	0x0b, 7	; 11
 21c:	00 00       	nop
 21e:	5f 98       	cbi	0x0b, 7	; 11
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	c2 cf       	rjmp	.-124    	; 0x1aa <delay_ms>
 226:	08 95       	ret

00000228 <LCD_DisplayString>:
 228:	0f 93       	push	r16
 22a:	1f 93       	push	r17
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	18 2f       	mov	r17, r24
 232:	eb 01       	movw	r28, r22
 234:	d6 df       	rcall	.-84     	; 0x1e2 <LCD_ClearScreen>
 236:	88 81       	ld	r24, Y
 238:	88 23       	and	r24, r24
 23a:	51 f0       	breq	.+20     	; 0x250 <LCD_DisplayString+0x28>
 23c:	01 e0       	ldi	r16, 0x01	; 1
 23e:	01 0f       	add	r16, r17
 240:	81 2f       	mov	r24, r17
 242:	d2 df       	rcall	.-92     	; 0x1e8 <LCD_Cursor>
 244:	89 91       	ld	r24, Y+
 246:	e7 df       	rcall	.-50     	; 0x216 <LCD_WriteData>
 248:	10 2f       	mov	r17, r16
 24a:	88 81       	ld	r24, Y
 24c:	81 11       	cpse	r24, r1
 24e:	f6 cf       	rjmp	.-20     	; 0x23c <LCD_DisplayString+0x14>
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	1f 91       	pop	r17
 256:	0f 91       	pop	r16
 258:	08 95       	ret

0000025a <SMTick1>:
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	51 f4       	brne	.+20     	; 0x272 <SMTick1+0x18>
 25e:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <LED_val>
 262:	12 b8       	out	0x02, r1	; 2
 264:	64 e0       	ldi	r22, 0x04	; 4
 266:	71 e0       	ldi	r23, 0x01	; 1
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	de df       	rcall	.-68     	; 0x228 <LCD_DisplayString>
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	08 95       	ret
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <LED_val>
 278:	82 b9       	out	0x02, r24	; 2
 27a:	68 e1       	ldi	r22, 0x18	; 24
 27c:	71 e0       	ldi	r23, 0x01	; 1
 27e:	d4 df       	rcall	.-88     	; 0x228 <LCD_DisplayString>
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	08 95       	ret

00000286 <initUSART>:
 286:	81 30       	cpi	r24, 0x01	; 1
 288:	81 f0       	breq	.+32     	; 0x2aa <initUSART+0x24>
 28a:	e1 ec       	ldi	r30, 0xC1	; 193
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	88 61       	ori	r24, 0x18	; 24
 292:	80 83       	st	Z, r24
 294:	e2 ec       	ldi	r30, 0xC2	; 194
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	80 81       	ld	r24, Z
 29a:	86 60       	ori	r24, 0x06	; 6
 29c:	80 83       	st	Z, r24
 29e:	83 e3       	ldi	r24, 0x33	; 51
 2a0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 2a4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 2a8:	08 95       	ret
 2aa:	e9 ec       	ldi	r30, 0xC9	; 201
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	88 61       	ori	r24, 0x18	; 24
 2b2:	80 83       	st	Z, r24
 2b4:	ea ec       	ldi	r30, 0xCA	; 202
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	80 81       	ld	r24, Z
 2ba:	86 60       	ori	r24, 0x06	; 6
 2bc:	80 83       	st	Z, r24
 2be:	83 e3       	ldi	r24, 0x33	; 51
 2c0:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 2c4:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 2c8:	08 95       	ret

000002ca <USART_Send>:
 2ca:	61 30       	cpi	r22, 0x01	; 1
 2cc:	41 f0       	breq	.+16     	; 0x2de <USART_Send+0x14>
 2ce:	e0 ec       	ldi	r30, 0xC0	; 192
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	90 81       	ld	r25, Z
 2d4:	95 ff       	sbrs	r25, 5
 2d6:	fd cf       	rjmp	.-6      	; 0x2d2 <USART_Send+0x8>
 2d8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2dc:	08 95       	ret
 2de:	e8 ec       	ldi	r30, 0xC8	; 200
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	90 81       	ld	r25, Z
 2e4:	95 ff       	sbrs	r25, 5
 2e6:	fd cf       	rjmp	.-6      	; 0x2e2 <USART_Send+0x18>
 2e8:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 2ec:	08 95       	ret

000002ee <SMTick2>:
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	00 97       	sbiw	r24, 0x00	; 0
 2f4:	19 f0       	breq	.+6      	; 0x2fc <SMTick2+0xe>
 2f6:	01 97       	sbiw	r24, 0x01	; 1
 2f8:	51 f0       	breq	.+20     	; 0x30e <SMTick2+0x20>
 2fa:	16 c0       	rjmp	.+44     	; 0x328 <SMTick2+0x3a>
 2fc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 300:	85 fb       	bst	r24, 5
 302:	88 27       	eor	r24, r24
 304:	80 f9       	bld	r24, 0
 306:	c8 2f       	mov	r28, r24
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	d8 2f       	mov	r29, r24
 30c:	0f c0       	rjmp	.+30     	; 0x32c <SMTick2+0x3e>
 30e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 312:	82 95       	swap	r24
 314:	86 95       	lsr	r24
 316:	86 95       	lsr	r24
 318:	83 70       	andi	r24, 0x03	; 3
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	89 27       	eor	r24, r25
 31e:	81 70       	andi	r24, 0x01	; 1
 320:	c8 2f       	mov	r28, r24
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	d8 2f       	mov	r29, r24
 326:	02 c0       	rjmp	.+4      	; 0x32c <SMTick2+0x3e>
 328:	c0 e0       	ldi	r28, 0x00	; 0
 32a:	d0 e0       	ldi	r29, 0x00	; 0
 32c:	c1 30       	cpi	r28, 0x01	; 1
 32e:	d1 05       	cpc	r29, r1
 330:	59 f4       	brne	.+22     	; 0x348 <SMTick2+0x5a>
 332:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <LED_val>
 336:	81 30       	cpi	r24, 0x01	; 1
 338:	21 f4       	brne	.+8      	; 0x342 <SMTick2+0x54>
 33a:	60 e0       	ldi	r22, 0x00	; 0
 33c:	80 e2       	ldi	r24, 0x20	; 32
 33e:	c5 df       	rcall	.-118    	; 0x2ca <USART_Send>
 340:	03 c0       	rjmp	.+6      	; 0x348 <SMTick2+0x5a>
 342:	60 e0       	ldi	r22, 0x00	; 0
 344:	81 e2       	ldi	r24, 0x21	; 33
 346:	c1 df       	rcall	.-126    	; 0x2ca <USART_Send>
 348:	ce 01       	movw	r24, r28
 34a:	df 91       	pop	r29
 34c:	cf 91       	pop	r28
 34e:	08 95       	ret

00000350 <main>:
}

// --------END User defined FSMs-----------------------------------------------
// Implement scheduler code from PES.
int main()
{
 350:	cf 93       	push	r28
 352:	df 93       	push	r29
 354:	00 d0       	rcall	.+0      	; 0x356 <main+0x6>
 356:	00 d0       	rcall	.+0      	; 0x358 <main+0x8>
 358:	cd b7       	in	r28, 0x3d	; 61
 35a:	de b7       	in	r29, 0x3e	; 62

	DDRA = 0xFF; PORTA = 0x00; // PORTA set to output, outputs init 0s
 35c:	1f ef       	ldi	r17, 0xFF	; 255
 35e:	11 b9       	out	0x01, r17	; 1
 360:	12 b8       	out	0x02, r1	; 2
	//DDRC = 0xF0; PORTC = 0x0F; // PC7..4 outputs init 0s, PC3..0 inputs init 1s
	DDRC = 0xFF; PORTC = 0x00; // set as output for lcd
 362:	17 b9       	out	0x07, r17	; 7
 364:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00; // LCD control lines
 366:	1a b9       	out	0x0a, r17	; 10
	LCD_init();
 368:	1b b8       	out	0x0b, r1	; 11
	//Recalculate GCD periods for scheduler
	unsigned long int SMTick1_period = SMTick1_calc/GCD;
	unsigned long int SMTick2_period = SMTick2_calc/GCD;

	static task task1, task2;
	task *tasks[] = { &task1, &task2};
 36a:	46 df       	rcall	.-372    	; 0x1f8 <LCD_init>
 36c:	a5 e3       	ldi	r26, 0x35	; 53
 36e:	b1 e0       	ldi	r27, 0x01	; 1
 370:	ba 83       	std	Y+2, r27	; 0x02
 372:	a9 83       	std	Y+1, r26	; 0x01
 374:	ea e2       	ldi	r30, 0x2A	; 42
 376:	f1 e0       	ldi	r31, 0x01	; 1
 378:	fc 83       	std	Y+4, r31	; 0x04
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
	// Task 1
	task1.state = -1;//Task initial state.
 37a:	eb 83       	std	Y+3, r30	; 0x03
	task1.period = SMTick1_period;//Task Period.
 37c:	1c 93       	st	X, r17
 37e:	48 ee       	ldi	r20, 0xE8	; 232
 380:	53 e0       	ldi	r21, 0x03	; 3
 382:	60 e0       	ldi	r22, 0x00	; 0
 384:	70 e0       	ldi	r23, 0x00	; 0
 386:	11 96       	adiw	r26, 0x01	; 1
 388:	4d 93       	st	X+, r20
 38a:	5d 93       	st	X+, r21
 38c:	6d 93       	st	X+, r22
 38e:	7c 93       	st	X, r23
	task1.elapsedTime = SMTick1_period;//Task current elapsed time.
 390:	14 97       	sbiw	r26, 0x04	; 4
 392:	15 96       	adiw	r26, 0x05	; 5
 394:	4d 93       	st	X+, r20
 396:	5d 93       	st	X+, r21
 398:	6d 93       	st	X+, r22
 39a:	7c 93       	st	X, r23
	task1.TickFct = &SMTick1;//Function pointer for the tick.
 39c:	18 97       	sbiw	r26, 0x08	; 8
 39e:	8d e2       	ldi	r24, 0x2D	; 45
 3a0:	91 e0       	ldi	r25, 0x01	; 1
 3a2:	1a 96       	adiw	r26, 0x0a	; 10
 3a4:	9c 93       	st	X, r25
 3a6:	8e 93       	st	-X, r24
	// Task 2
	task2.state = -1;//Task initial state.
 3a8:	19 97       	sbiw	r26, 0x09	; 9
	task2.period = SMTick2_period;//Task Period.
 3aa:	10 83       	st	Z, r17
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	a0 e0       	ldi	r26, 0x00	; 0
 3b2:	b0 e0       	ldi	r27, 0x00	; 0
 3b4:	81 83       	std	Z+1, r24	; 0x01
 3b6:	92 83       	std	Z+2, r25	; 0x02
 3b8:	a3 83       	std	Z+3, r26	; 0x03
	task2.elapsedTime = SMTick2_period;//Task current elapsed time.
 3ba:	b4 83       	std	Z+4, r27	; 0x04
 3bc:	85 83       	std	Z+5, r24	; 0x05
 3be:	96 83       	std	Z+6, r25	; 0x06
 3c0:	a7 83       	std	Z+7, r26	; 0x07
	task2.TickFct = &SMTick2;//Function pointer for the tick.
 3c2:	b0 87       	std	Z+8, r27	; 0x08
 3c4:	87 e7       	ldi	r24, 0x77	; 119
 3c6:	91 e0       	ldi	r25, 0x01	; 1
 3c8:	92 87       	std	Z+10, r25	; 0x0a

	// Set the timer and turn it on
	TimerSet(GCD);
 3ca:	81 87       	std	Z+9, r24	; 0x09
 3cc:	6a e0       	ldi	r22, 0x0A	; 10
 3ce:	70 e0       	ldi	r23, 0x00	; 0
	TimerOn();
 3d0:	80 e0       	ldi	r24, 0x00	; 0
	

	//code to initialize USART


	initUSART(0);     //init USART
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	79 de       	rcall	.-782    	; 0xc8 <TimerSet>
 3d6:	89 de       	rcall	.-750    	; 0xea <TimerOn>
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	55 df       	rcall	.-342    	; 0x286 <initUSART>
 3dc:	7e 01       	movw	r14, r28
 3de:	85 e0       	ldi	r24, 0x05	; 5
 3e0:	e8 0e       	add	r14, r24
 3e2:	f1 1c       	adc	r15, r1
 3e4:	de 01       	movw	r26, r28
	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		// Scheduler code ---------------------------------------------
		for ( i = 0; i < numTasks; i++ ) {
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 3e6:	11 96       	adiw	r26, 0x01	; 1
 3e8:	6d 01       	movw	r12, r26
 3ea:	f6 01       	movw	r30, r12
 3ec:	01 91       	ld	r16, Z+
 3ee:	11 91       	ld	r17, Z+
 3f0:	6f 01       	movw	r12, r30
 3f2:	d8 01       	movw	r26, r16
 3f4:	15 96       	adiw	r26, 0x05	; 5
 3f6:	4d 91       	ld	r20, X+
 3f8:	5d 91       	ld	r21, X+
 3fa:	6d 91       	ld	r22, X+
 3fc:	7c 91       	ld	r23, X
 3fe:	18 97       	sbiw	r26, 0x08	; 8
 400:	11 96       	adiw	r26, 0x01	; 1
 402:	8d 91       	ld	r24, X+
 404:	9d 91       	ld	r25, X+
 406:	0d 90       	ld	r0, X+
 408:	bc 91       	ld	r27, X
 40a:	a0 2d       	mov	r26, r0
 40c:	48 17       	cp	r20, r24
 40e:	59 07       	cpc	r21, r25
 410:	6a 07       	cpc	r22, r26
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 412:	7b 07       	cpc	r23, r27
 414:	81 f4       	brne	.+32     	; 0x436 <__FUSE_REGION_LENGTH__+0x36>
 416:	f8 01       	movw	r30, r16
 418:	80 81       	ld	r24, Z
 41a:	01 84       	ldd	r0, Z+9	; 0x09
 41c:	f2 85       	ldd	r31, Z+10	; 0x0a
 41e:	e0 2d       	mov	r30, r0
 420:	08 2e       	mov	r0, r24
 422:	00 0c       	add	r0, r0
 424:	99 0b       	sbc	r25, r25
 426:	09 95       	icall
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
 428:	d8 01       	movw	r26, r16
 42a:	8c 93       	st	X, r24
 42c:	f8 01       	movw	r30, r16
 42e:	15 82       	std	Z+5, r1	; 0x05
 430:	16 82       	std	Z+6, r1	; 0x06
			}
			tasks[i]->elapsedTime += 1;
 432:	17 82       	std	Z+7, r1	; 0x07
 434:	10 86       	std	Z+8, r1	; 0x08
 436:	f8 01       	movw	r30, r16
 438:	85 81       	ldd	r24, Z+5	; 0x05
 43a:	96 81       	ldd	r25, Z+6	; 0x06
 43c:	a7 81       	ldd	r26, Z+7	; 0x07
 43e:	b0 85       	ldd	r27, Z+8	; 0x08
 440:	01 96       	adiw	r24, 0x01	; 1
 442:	a1 1d       	adc	r26, r1
 444:	b1 1d       	adc	r27, r1
 446:	85 83       	std	Z+5, r24	; 0x05
 448:	96 83       	std	Z+6, r25	; 0x06

	initUSART(0);     //init USART
	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		// Scheduler code ---------------------------------------------
		for ( i = 0; i < numTasks; i++ ) {
 44a:	a7 83       	std	Z+7, r26	; 0x07
 44c:	b0 87       	std	Z+8, r27	; 0x08
 44e:	ce 14       	cp	r12, r14
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
 450:	df 04       	cpc	r13, r15
 452:	59 f6       	brne	.-106    	; 0x3ea <main+0x9a>
 454:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <TimerFlag>
		TimerFlag = 0;
 458:	88 23       	and	r24, r24
 45a:	e1 f3       	breq	.-8      	; 0x454 <__FUSE_REGION_LENGTH__+0x54>
	} //---------------------------------------------------------------
 45c:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <TimerFlag>
 460:	c1 cf       	rjmp	.-126    	; 0x3e4 <main+0x94>

00000462 <_exit>:
 462:	f8 94       	cli

00000464 <__stop_program>:
 464:	ff cf       	rjmp	.-2      	; 0x464 <__stop_program>
