
dweis003_prodr010_lab8_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  0000023a  000002ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800162  00800162  00000330  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000360  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000403  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000137  00000000  00000000  0000080b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000294  00000000  00000000  00000942  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  00000bd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000213  00000000  00000000  00000ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000021a  00000000  00000000  00000eb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000010cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e3       	ldi	r30, 0x3A	; 58
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 36       	cpi	r26, 0x62	; 98
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e6       	ldi	r26, 0x62	; 98
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 36       	cpi	r26, 0x65	; 101
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	9f d0       	rcall	.+318    	; 0x202 <main>
  c4:	b8 c0       	rjmp	.+368    	; 0x236 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
    for(j=0;j<775;j++)
  {
   asm("nop");
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
    for(j=0;j<775;j++)
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
   }
}

void delay_ms(int miliSec) //for 8 Mhz crystal

{
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
	LCD_WriteCommand(0x01);
	delay_ms(10);						 
}

void LCD_WriteCommand (unsigned char Command) {
   CLR_BIT(CONTROL_BUS,RS);
  ee:	5e 98       	cbi	0x0b, 6	; 11
   DATA_BUS = Command;
  f0:	88 b9       	out	0x08, r24	; 8
   SET_BIT(CONTROL_BUS,E);
  f2:	5f 9a       	sbi	0x0b, 7	; 11
   asm("nop");
  f4:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
  f6:	5f 98       	cbi	0x0b, 7	; 11
   delay_ms(2); // ClearScreen requires 1.52ms to execute
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_ClearScreen>:
#define E 7			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
   LCD_WriteCommand(0x01);
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	f5 cf       	rjmp	.-22     	; 0xee <LCD_WriteCommand>
 104:	08 95       	ret

00000106 <LCD_Cursor>:
      LCD_WriteData(*string++);
   }
}

void LCD_Cursor(unsigned char column) {
   if ( column < 17 ) { // 16x1 LCD: column < 9
 106:	81 31       	cpi	r24, 0x11	; 17
 108:	18 f4       	brcc	.+6      	; 0x110 <LCD_Cursor+0xa>
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
 10a:	81 58       	subi	r24, 0x81	; 129
 10c:	f0 cf       	rjmp	.-32     	; 0xee <LCD_WriteCommand>
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
 10e:	08 95       	ret
 110:	81 55       	subi	r24, 0x51	; 81
 112:	ed cf       	rjmp	.-38     	; 0xee <LCD_WriteCommand>
 114:	08 95       	ret

00000116 <LCD_init>:
}

void LCD_init(void) {

    //wait for 100 ms.
	delay_ms(100);
 116:	84 e6       	ldi	r24, 0x64	; 100
 118:	90 e0       	ldi	r25, 0x00	; 0
	LCD_WriteCommand(0x38);
 11a:	d6 df       	rcall	.-84     	; 0xc8 <delay_ms>
	LCD_WriteCommand(0x06);
 11c:	88 e3       	ldi	r24, 0x38	; 56
	LCD_WriteCommand(0x0f);
 11e:	e7 df       	rcall	.-50     	; 0xee <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	e5 df       	rcall	.-54     	; 0xee <LCD_WriteCommand>
	delay_ms(10);						 
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	e3 df       	rcall	.-58     	; 0xee <LCD_WriteCommand>
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	e1 df       	rcall	.-62     	; 0xee <LCD_WriteCommand>
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	cb cf       	rjmp	.-106    	; 0xc8 <delay_ms>
 132:	08 95       	ret

00000134 <LCD_WriteData>:
   CLR_BIT(CONTROL_BUS,E);
   delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
   SET_BIT(CONTROL_BUS,RS);
 134:	5e 9a       	sbi	0x0b, 6	; 11
   DATA_BUS = Data;
 136:	88 b9       	out	0x08, r24	; 8
   SET_BIT(CONTROL_BUS,E);
 138:	5f 9a       	sbi	0x0b, 7	; 11
   asm("nop");
 13a:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 13c:	5f 98       	cbi	0x0b, 7	; 11
   delay_ms(1);
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	c2 cf       	rjmp	.-124    	; 0xc8 <delay_ms>
 144:	08 95       	ret

00000146 <LCD_DisplayString>:
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	18 2f       	mov	r17, r24
   LCD_ClearScreen();
 150:	eb 01       	movw	r28, r22
   unsigned char c = column;
   while(*string) {
 152:	d6 df       	rcall	.-84     	; 0x100 <LCD_ClearScreen>
 154:	88 81       	ld	r24, Y
 156:	88 23       	and	r24, r24
      LCD_Cursor(c++);
 158:	51 f0       	breq	.+20     	; 0x16e <LCD_DisplayString+0x28>
 15a:	01 e0       	ldi	r16, 0x01	; 1
 15c:	01 0f       	add	r16, r17
      LCD_WriteData(*string++);
 15e:	81 2f       	mov	r24, r17
 160:	d2 df       	rcall	.-92     	; 0x106 <LCD_Cursor>
 162:	89 91       	ld	r24, Y+

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
      LCD_Cursor(c++);
 164:	e7 df       	rcall	.-50     	; 0x134 <LCD_WriteData>
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
 166:	10 2f       	mov	r17, r16
 168:	88 81       	ld	r24, Y
 16a:	81 11       	cpse	r24, r1
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
 16c:	f6 cf       	rjmp	.-20     	; 0x15a <LCD_DisplayString+0x14>
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <ADC_init>:
unsigned char temp_val = 0x00;
unsigned short temp_MV = 0x00;
#include "io.c"

void ADC_init() {
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
 178:	ea e7       	ldi	r30, 0x7A	; 122
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	80 6e       	ori	r24, 0xE0	; 224
 180:	80 83       	st	Z, r24
 182:	08 95       	ret

00000184 <read>:
	// the previous conversion completes.
}


void read(){
	temp_MV = ADC * (5000/1024);
 184:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 188:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 18c:	22 0f       	add	r18, r18
 18e:	33 1f       	adc	r19, r19
 190:	22 0f       	add	r18, r18
 192:	33 1f       	adc	r19, r19
 194:	30 93 63 01 	sts	0x0163, r19	; 0x800163 <__data_end+0x1>
 198:	20 93 62 01 	sts	0x0162, r18	; 0x800162 <__data_end>
	temp_val = ((temp_MV - 500)/10);
 19c:	24 5f       	subi	r18, 0xF4	; 244
 19e:	31 40       	sbci	r19, 0x01	; 1
 1a0:	ad ec       	ldi	r26, 0xCD	; 205
 1a2:	bc ec       	ldi	r27, 0xCC	; 204
 1a4:	39 d0       	rcall	.+114    	; 0x218 <__umulhisi3>
 1a6:	96 95       	lsr	r25
 1a8:	87 95       	ror	r24
 1aa:	96 95       	lsr	r25
 1ac:	87 95       	ror	r24
 1ae:	96 95       	lsr	r25
 1b0:	87 95       	ror	r24
 1b2:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <temp_val>
	if(temp_val < 10){
 1b6:	8a 30       	cpi	r24, 0x0A	; 10
 1b8:	28 f4       	brcc	.+10     	; 0x1c4 <read+0x40>
		LCD_DisplayString(1,"temp less than 10");
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	71 e0       	ldi	r23, 0x01	; 1
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	c2 cf       	rjmp	.-124    	; 0x146 <LCD_DisplayString>
 1c2:	08 95       	ret
	}
	else if((temp_val > 10) && (temp_val < 20)){
 1c4:	25 ef       	ldi	r18, 0xF5	; 245
 1c6:	28 0f       	add	r18, r24
 1c8:	29 30       	cpi	r18, 0x09	; 9
 1ca:	28 f4       	brcc	.+10     	; 0x1d6 <read+0x52>
		LCD_DisplayString(1,"temp between 10 and 20");
 1cc:	62 e1       	ldi	r22, 0x12	; 18
 1ce:	71 e0       	ldi	r23, 0x01	; 1
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	b9 cf       	rjmp	.-142    	; 0x146 <LCD_DisplayString>
 1d4:	08 95       	ret
	}
	else if((temp_val > 20) && (temp_val < 25)){
 1d6:	2b ee       	ldi	r18, 0xEB	; 235
 1d8:	28 0f       	add	r18, r24
 1da:	24 30       	cpi	r18, 0x04	; 4
		LCD_DisplayString(1,"temp between 20 and 25");
 1dc:	28 f4       	brcc	.+10     	; 0x1e8 <read+0x64>
 1de:	69 e2       	ldi	r22, 0x29	; 41
 1e0:	71 e0       	ldi	r23, 0x01	; 1
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	b0 cf       	rjmp	.-160    	; 0x146 <LCD_DisplayString>
	}
	else if((temp_val > 25) && (temp_val < 30)){
 1e6:	08 95       	ret
 1e8:	8a 51       	subi	r24, 0x1A	; 26
		LCD_DisplayString(1,"temp between 25 and 30");
 1ea:	84 30       	cpi	r24, 0x04	; 4
 1ec:	28 f4       	brcc	.+10     	; 0x1f8 <read+0x74>
 1ee:	60 e4       	ldi	r22, 0x40	; 64
 1f0:	71 e0       	ldi	r23, 0x01	; 1
 1f2:	81 e0       	ldi	r24, 0x01	; 1
	}
	else{
		LCD_DisplayString(1,"temp > 30");
 1f4:	a8 cf       	rjmp	.-176    	; 0x146 <LCD_DisplayString>
 1f6:	08 95       	ret
 1f8:	67 e5       	ldi	r22, 0x57	; 87
 1fa:	71 e0       	ldi	r23, 0x01	; 1
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	a3 cf       	rjmp	.-186    	; 0x146 <LCD_DisplayString>
 200:	08 95       	ret

00000202 <main>:

}

int main(void)
{
	DDRA = 0x00; // Set port A to input
 202:	11 b8       	out	0x01, r1	; 1
	PORTA = 0xFF; // Init port A to 0s
 204:	8f ef       	ldi	r24, 0xFF	; 255
 206:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xFF; PORTC = 0x00; // set as output for lcd
 208:	87 b9       	out	0x07, r24	; 7
 20a:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00; // LCD control lines
 20c:	8a b9       	out	0x0a, r24	; 10
	LCD_init();
 20e:	1b b8       	out	0x0b, r1	; 11
 210:	82 df       	rcall	.-252    	; 0x116 <LCD_init>
 212:	b2 df       	rcall	.-156    	; 0x178 <ADC_init>
 214:	b7 df       	rcall	.-146    	; 0x184 <read>
 216:	fe cf       	rjmp	.-4      	; 0x214 <main+0x12>

00000218 <__umulhisi3>:
 218:	a2 9f       	mul	r26, r18
 21a:	b0 01       	movw	r22, r0
 21c:	b3 9f       	mul	r27, r19
 21e:	c0 01       	movw	r24, r0
 220:	a3 9f       	mul	r26, r19
 222:	70 0d       	add	r23, r0
 224:	81 1d       	adc	r24, r1
 226:	11 24       	eor	r1, r1
 228:	91 1d       	adc	r25, r1
 22a:	b2 9f       	mul	r27, r18
 22c:	70 0d       	add	r23, r0
 22e:	81 1d       	adc	r24, r1
 230:	11 24       	eor	r1, r1
 232:	91 1d       	adc	r25, r1
 234:	08 95       	ret

00000236 <_exit>:
 236:	f8 94       	cli

00000238 <__stop_program>:
 238:	ff cf       	rjmp	.-2      	; 0x238 <__stop_program>
