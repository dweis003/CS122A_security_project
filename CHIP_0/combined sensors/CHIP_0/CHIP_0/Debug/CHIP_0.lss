
CHIP_0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000066  00800100  000013b6  0000144a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000650  00800166  00800166  000014b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000014b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000014e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  00001520  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002cd4  00000000  00000000  000017c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000106c  00000000  00000000  0000449c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bb2  00000000  00000000  00005508  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006dc  00000000  00000000  000070bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001065  00000000  00000000  00007798  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016c1  00000000  00000000  000087fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a0  00000000  00000000  00009ebe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	3c c6       	rjmp	.+3192   	; 0xcae <__vector_13>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 eb       	ldi	r30, 0xB6	; 182
      a0:	f3 e1       	ldi	r31, 0x13	; 19
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 36       	cpi	r26, 0x66	; 102
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	27 e0       	ldi	r18, 0x07	; 7
      b4:	a6 e6       	ldi	r26, 0x66	; 102
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a6 3b       	cpi	r26, 0xB6	; 182
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	86 d4       	rcall	.+2316   	; 0x9d0 <main>
      c4:	0c 94 d9 09 	jmp	0x13b2	; 0x13b2 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
      ce:	ec 01       	movw	r28, r24
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
      d0:	41 d7       	rcall	.+3714   	; 0xf54 <vTaskSuspendAll>
      d2:	20 91 66 01 	lds	r18, 0x0166	; 0x800166 <__data_end>
      d6:	30 91 67 01 	lds	r19, 0x0167	; 0x800167 <__data_end+0x1>
      da:	c9 01       	movw	r24, r18
      dc:	8c 0f       	add	r24, r28
      de:	9d 1f       	adc	r25, r29
      e0:	8c 3d       	cpi	r24, 0xDC	; 220
      e2:	45 e0       	ldi	r20, 0x05	; 5
      e4:	94 07       	cpc	r25, r20
      e6:	58 f4       	brcc	.+22     	; 0xfe <pvPortMalloc+0x34>
      e8:	28 17       	cp	r18, r24
      ea:	39 07       	cpc	r19, r25
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
      ec:	58 f4       	brcc	.+22     	; 0x104 <pvPortMalloc+0x3a>
      ee:	e9 01       	movw	r28, r18
      f0:	c8 59       	subi	r28, 0x98	; 152
			xNextFreeByte += xWantedSize;			
      f2:	de 4f       	sbci	r29, 0xFE	; 254
      f4:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <__data_end+0x1>
      f8:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <__data_end>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
      fc:	05 c0       	rjmp	.+10     	; 0x108 <pvPortMalloc+0x3e>
      fe:	c0 e0       	ldi	r28, 0x00	; 0
     100:	d0 e0       	ldi	r29, 0x00	; 0
     102:	02 c0       	rjmp	.+4      	; 0x108 <pvPortMalloc+0x3e>
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     104:	c0 e0       	ldi	r28, 0x00	; 0
     106:	d0 e0       	ldi	r29, 0x00	; 0
		}
	}
	#endif	

	return pvReturn;
}
     108:	ec d7       	rcall	.+4056   	; 0x10e2 <xTaskResumeAll>
     10a:	ce 01       	movw	r24, r28
     10c:	df 91       	pop	r29
     10e:	cf 91       	pop	r28
     110:	08 95       	ret

00000112 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     112:	08 95       	ret

00000114 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     114:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     116:	03 96       	adiw	r24, 0x03	; 3
     118:	92 83       	std	Z+2, r25	; 0x02
     11a:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     11c:	2f ef       	ldi	r18, 0xFF	; 255
     11e:	3f ef       	ldi	r19, 0xFF	; 255
     120:	34 83       	std	Z+4, r19	; 0x04
     122:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     124:	96 83       	std	Z+6, r25	; 0x06
     126:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     128:	90 87       	std	Z+8, r25	; 0x08
     12a:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     12c:	10 82       	st	Z, r1
     12e:	08 95       	ret

00000130 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     130:	fc 01       	movw	r30, r24
     132:	11 86       	std	Z+9, r1	; 0x09
     134:	10 86       	std	Z+8, r1	; 0x08
     136:	08 95       	ret

00000138 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     138:	cf 93       	push	r28
     13a:	df 93       	push	r29
     13c:	fc 01       	movw	r30, r24
     13e:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     140:	21 81       	ldd	r18, Z+1	; 0x01
     142:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
     144:	e9 01       	movw	r28, r18
     146:	8a 81       	ldd	r24, Y+2	; 0x02
     148:	9b 81       	ldd	r25, Y+3	; 0x03
     14a:	13 96       	adiw	r26, 0x03	; 3
     14c:	9c 93       	st	X, r25
     14e:	8e 93       	st	-X, r24
     150:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
     152:	81 81       	ldd	r24, Z+1	; 0x01
     154:	92 81       	ldd	r25, Z+2	; 0x02
     156:	15 96       	adiw	r26, 0x05	; 5
     158:	9c 93       	st	X, r25
     15a:	8e 93       	st	-X, r24
     15c:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     15e:	8a 81       	ldd	r24, Y+2	; 0x02
     160:	9b 81       	ldd	r25, Y+3	; 0x03
     162:	ec 01       	movw	r28, r24
     164:	7d 83       	std	Y+5, r23	; 0x05
     166:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     168:	e9 01       	movw	r28, r18
     16a:	7b 83       	std	Y+3, r23	; 0x03
     16c:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     16e:	72 83       	std	Z+2, r23	; 0x02
     170:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     172:	19 96       	adiw	r26, 0x09	; 9
     174:	fc 93       	st	X, r31
     176:	ee 93       	st	-X, r30
     178:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
     17a:	80 81       	ld	r24, Z
     17c:	8f 5f       	subi	r24, 0xFF	; 255
     17e:	80 83       	st	Z, r24
}
     180:	df 91       	pop	r29
     182:	cf 91       	pop	r28
     184:	08 95       	ret

00000186 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     186:	cf 93       	push	r28
     188:	df 93       	push	r29
     18a:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     18c:	48 81       	ld	r20, Y
     18e:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     190:	4f 3f       	cpi	r20, 0xFF	; 255
     192:	2f ef       	ldi	r18, 0xFF	; 255
     194:	52 07       	cpc	r21, r18
     196:	31 f4       	brne	.+12     	; 0x1a4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     198:	dc 01       	movw	r26, r24
     19a:	17 96       	adiw	r26, 0x07	; 7
     19c:	ed 91       	ld	r30, X+
     19e:	fc 91       	ld	r31, X
     1a0:	18 97       	sbiw	r26, 0x08	; 8
     1a2:	17 c0       	rjmp	.+46     	; 0x1d2 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     1a4:	fc 01       	movw	r30, r24
     1a6:	33 96       	adiw	r30, 0x03	; 3
     1a8:	dc 01       	movw	r26, r24
     1aa:	15 96       	adiw	r26, 0x05	; 5
     1ac:	2d 91       	ld	r18, X+
     1ae:	3c 91       	ld	r19, X
     1b0:	16 97       	sbiw	r26, 0x06	; 6
     1b2:	d9 01       	movw	r26, r18
     1b4:	2d 91       	ld	r18, X+
     1b6:	3c 91       	ld	r19, X
     1b8:	42 17       	cp	r20, r18
     1ba:	53 07       	cpc	r21, r19
     1bc:	50 f0       	brcs	.+20     	; 0x1d2 <vListInsert+0x4c>
     1be:	02 80       	ldd	r0, Z+2	; 0x02
     1c0:	f3 81       	ldd	r31, Z+3	; 0x03
     1c2:	e0 2d       	mov	r30, r0
     1c4:	a2 81       	ldd	r26, Z+2	; 0x02
     1c6:	b3 81       	ldd	r27, Z+3	; 0x03
     1c8:	2d 91       	ld	r18, X+
     1ca:	3c 91       	ld	r19, X
     1cc:	42 17       	cp	r20, r18
     1ce:	53 07       	cpc	r21, r19
     1d0:	b0 f7       	brcc	.-20     	; 0x1be <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     1d2:	a2 81       	ldd	r26, Z+2	; 0x02
     1d4:	b3 81       	ldd	r27, Z+3	; 0x03
     1d6:	bb 83       	std	Y+3, r27	; 0x03
     1d8:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     1da:	15 96       	adiw	r26, 0x05	; 5
     1dc:	dc 93       	st	X, r29
     1de:	ce 93       	st	-X, r28
     1e0:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
     1e2:	fd 83       	std	Y+5, r31	; 0x05
     1e4:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     1e6:	d3 83       	std	Z+3, r29	; 0x03
     1e8:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     1ea:	99 87       	std	Y+9, r25	; 0x09
     1ec:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     1ee:	fc 01       	movw	r30, r24
     1f0:	20 81       	ld	r18, Z
     1f2:	2f 5f       	subi	r18, 0xFF	; 255
     1f4:	20 83       	st	Z, r18
}
     1f6:	df 91       	pop	r29
     1f8:	cf 91       	pop	r28
     1fa:	08 95       	ret

000001fc <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     1fc:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     1fe:	a2 81       	ldd	r26, Z+2	; 0x02
     200:	b3 81       	ldd	r27, Z+3	; 0x03
     202:	84 81       	ldd	r24, Z+4	; 0x04
     204:	95 81       	ldd	r25, Z+5	; 0x05
     206:	15 96       	adiw	r26, 0x05	; 5
     208:	9c 93       	st	X, r25
     20a:	8e 93       	st	-X, r24
     20c:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     20e:	a4 81       	ldd	r26, Z+4	; 0x04
     210:	b5 81       	ldd	r27, Z+5	; 0x05
     212:	82 81       	ldd	r24, Z+2	; 0x02
     214:	93 81       	ldd	r25, Z+3	; 0x03
     216:	13 96       	adiw	r26, 0x03	; 3
     218:	9c 93       	st	X, r25
     21a:	8e 93       	st	-X, r24
     21c:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     21e:	a0 85       	ldd	r26, Z+8	; 0x08
     220:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     222:	11 96       	adiw	r26, 0x01	; 1
     224:	8d 91       	ld	r24, X+
     226:	9c 91       	ld	r25, X
     228:	12 97       	sbiw	r26, 0x02	; 2
     22a:	e8 17       	cp	r30, r24
     22c:	f9 07       	cpc	r31, r25
     22e:	31 f4       	brne	.+12     	; 0x23c <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     230:	84 81       	ldd	r24, Z+4	; 0x04
     232:	95 81       	ldd	r25, Z+5	; 0x05
     234:	12 96       	adiw	r26, 0x02	; 2
     236:	9c 93       	st	X, r25
     238:	8e 93       	st	-X, r24
     23a:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
     23c:	11 86       	std	Z+9, r1	; 0x09
     23e:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     240:	8c 91       	ld	r24, X
     242:	81 50       	subi	r24, 0x01	; 1
     244:	8c 93       	st	X, r24
     246:	08 95       	ret

00000248 <initUSART>:
}

void RecSecPulse(unsigned portBASE_TYPE Priority)
{
	xTaskCreate(RecSecTask, (signed portCHAR *)"RecSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
}
     248:	81 30       	cpi	r24, 0x01	; 1
     24a:	81 f0       	breq	.+32     	; 0x26c <initUSART+0x24>
     24c:	e1 ec       	ldi	r30, 0xC1	; 193
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	80 81       	ld	r24, Z
     252:	88 61       	ori	r24, 0x18	; 24
     254:	80 83       	st	Z, r24
     256:	e2 ec       	ldi	r30, 0xC2	; 194
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	80 81       	ld	r24, Z
     25c:	86 60       	ori	r24, 0x06	; 6
     25e:	80 83       	st	Z, r24
     260:	83 e3       	ldi	r24, 0x33	; 51
     262:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     266:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     26a:	08 95       	ret
     26c:	e9 ec       	ldi	r30, 0xC9	; 201
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	80 81       	ld	r24, Z
     272:	88 61       	ori	r24, 0x18	; 24
     274:	80 83       	st	Z, r24
     276:	ea ec       	ldi	r30, 0xCA	; 202
     278:	f0 e0       	ldi	r31, 0x00	; 0
     27a:	80 81       	ld	r24, Z
     27c:	86 60       	ori	r24, 0x06	; 6
     27e:	80 83       	st	Z, r24
     280:	83 e3       	ldi	r24, 0x33	; 51
     282:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     286:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     28a:	08 95       	ret

0000028c <USART_Send>:
     28c:	61 30       	cpi	r22, 0x01	; 1
     28e:	41 f0       	breq	.+16     	; 0x2a0 <USART_Send+0x14>
     290:	e0 ec       	ldi	r30, 0xC0	; 192
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	90 81       	ld	r25, Z
     296:	95 ff       	sbrs	r25, 5
     298:	fd cf       	rjmp	.-6      	; 0x294 <USART_Send+0x8>
     29a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     29e:	08 95       	ret
     2a0:	e8 ec       	ldi	r30, 0xC8	; 200
     2a2:	f0 e0       	ldi	r31, 0x00	; 0
     2a4:	90 81       	ld	r25, Z
     2a6:	95 ff       	sbrs	r25, 5
     2a8:	fd cf       	rjmp	.-6      	; 0x2a4 <USART_Send+0x18>
     2aa:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     2ae:	08 95       	ret

000002b0 <ADC_init>:
     2b0:	ea e7       	ldi	r30, 0x7A	; 122
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	80 81       	ld	r24, Z
     2b6:	80 6e       	ori	r24, 0xE0	; 224
     2b8:	80 83       	st	Z, r24
     2ba:	08 95       	ret

000002bc <TEMP_Tick>:
     2bc:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <temp_state>
     2c0:	81 30       	cpi	r24, 0x01	; 1
     2c2:	19 f0       	breq	.+6      	; 0x2ca <TEMP_Tick+0xe>
     2c4:	83 30       	cpi	r24, 0x03	; 3
     2c6:	e1 f0       	breq	.+56     	; 0x300 <TEMP_Tick+0x44>
     2c8:	1f c0       	rjmp	.+62     	; 0x308 <TEMP_Tick+0x4c>
     2ca:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     2ce:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     2d2:	22 0f       	add	r18, r18
     2d4:	33 1f       	adc	r19, r19
     2d6:	22 0f       	add	r18, r18
     2d8:	33 1f       	adc	r19, r19
     2da:	30 93 54 07 	sts	0x0754, r19	; 0x800754 <temp_MV+0x1>
     2de:	20 93 53 07 	sts	0x0753, r18	; 0x800753 <temp_MV>
     2e2:	24 5f       	subi	r18, 0xF4	; 244
     2e4:	31 40       	sbci	r19, 0x01	; 1
     2e6:	ad ec       	ldi	r26, 0xCD	; 205
     2e8:	bc ec       	ldi	r27, 0xCC	; 204
     2ea:	0e 94 b4 09 	call	0x1368	; 0x1368 <__umulhisi3>
     2ee:	96 95       	lsr	r25
     2f0:	87 95       	ror	r24
     2f2:	96 95       	lsr	r25
     2f4:	87 95       	ror	r24
     2f6:	96 95       	lsr	r25
     2f8:	87 95       	ror	r24
     2fa:	80 93 55 07 	sts	0x0755, r24	; 0x800755 <temp_val>
     2fe:	16 c0       	rjmp	.+44     	; 0x32c <TEMP_Tick+0x70>
     300:	60 e0       	ldi	r22, 0x00	; 0
     302:	80 91 55 07 	lds	r24, 0x0755	; 0x800755 <temp_val>
     306:	c2 df       	rcall	.-124    	; 0x28c <USART_Send>
     308:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <temp_state>
     30c:	81 30       	cpi	r24, 0x01	; 1
     30e:	71 f0       	breq	.+28     	; 0x32c <TEMP_Tick+0x70>
     310:	28 f0       	brcs	.+10     	; 0x31c <TEMP_Tick+0x60>
     312:	82 30       	cpi	r24, 0x02	; 2
     314:	b1 f0       	breq	.+44     	; 0x342 <TEMP_Tick+0x86>
     316:	10 92 b4 07 	sts	0x07B4, r1	; 0x8007b4 <temp_state>
     31a:	08 95       	ret
     31c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <ARM_DISARM>
     320:	81 11       	cpse	r24, r1
     322:	21 c0       	rjmp	.+66     	; 0x366 <TEMP_Tick+0xaa>
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	80 93 b4 07 	sts	0x07B4, r24	; 0x8007b4 <temp_state>
     32a:	08 95       	ret
     32c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <ARM_DISARM>
     330:	81 11       	cpse	r24, r1
     332:	04 c0       	rjmp	.+8      	; 0x33c <TEMP_Tick+0x80>
     334:	82 e0       	ldi	r24, 0x02	; 2
     336:	80 93 b4 07 	sts	0x07B4, r24	; 0x8007b4 <temp_state>
     33a:	08 95       	ret
     33c:	10 92 b4 07 	sts	0x07B4, r1	; 0x8007b4 <temp_state>
     340:	08 95       	ret
     342:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     346:	85 ff       	sbrs	r24, 5
     348:	08 c0       	rjmp	.+16     	; 0x35a <TEMP_Tick+0x9e>
     34a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <ARM_DISARM>
     34e:	81 11       	cpse	r24, r1
     350:	04 c0       	rjmp	.+8      	; 0x35a <TEMP_Tick+0x9e>
     352:	83 e0       	ldi	r24, 0x03	; 3
     354:	80 93 b4 07 	sts	0x07B4, r24	; 0x8007b4 <temp_state>
     358:	08 95       	ret
     35a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <ARM_DISARM>
     35e:	81 30       	cpi	r24, 0x01	; 1
     360:	11 f4       	brne	.+4      	; 0x366 <TEMP_Tick+0xaa>
     362:	10 92 b4 07 	sts	0x07B4, r1	; 0x8007b4 <temp_state>
     366:	08 95       	ret

00000368 <TempSecTask>:
     368:	10 92 b4 07 	sts	0x07B4, r1	; 0x8007b4 <temp_state>
     36c:	a7 df       	rcall	.-178    	; 0x2bc <TEMP_Tick>
     36e:	8a e0       	ldi	r24, 0x0A	; 10
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	39 d7       	rcall	.+3698   	; 0x11e6 <vTaskDelay>
     374:	fb cf       	rjmp	.-10     	; 0x36c <TempSecTask+0x4>

00000376 <StartTempPulse>:
     376:	af 92       	push	r10
     378:	bf 92       	push	r11
     37a:	cf 92       	push	r12
     37c:	df 92       	push	r13
     37e:	ef 92       	push	r14
     380:	ff 92       	push	r15
     382:	0f 93       	push	r16
     384:	a1 2c       	mov	r10, r1
     386:	b1 2c       	mov	r11, r1
     388:	c1 2c       	mov	r12, r1
     38a:	d1 2c       	mov	r13, r1
     38c:	e1 2c       	mov	r14, r1
     38e:	f1 2c       	mov	r15, r1
     390:	08 2f       	mov	r16, r24
     392:	20 e0       	ldi	r18, 0x00	; 0
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	45 e5       	ldi	r20, 0x55	; 85
     398:	50 e0       	ldi	r21, 0x00	; 0
     39a:	66 e1       	ldi	r22, 0x16	; 22
     39c:	71 e0       	ldi	r23, 0x01	; 1
     39e:	84 eb       	ldi	r24, 0xB4	; 180
     3a0:	91 e0       	ldi	r25, 0x01	; 1
     3a2:	bc d4       	rcall	.+2424   	; 0xd1c <xTaskGenericCreate>
     3a4:	0f 91       	pop	r16
     3a6:	ff 90       	pop	r15
     3a8:	ef 90       	pop	r14
     3aa:	df 90       	pop	r13
     3ac:	cf 90       	pop	r12
     3ae:	bf 90       	pop	r11
     3b0:	af 90       	pop	r10
     3b2:	08 95       	ret

000003b4 <ARM_Tick>:
     3b4:	80 91 b5 07 	lds	r24, 0x07B5	; 0x8007b5 <arm_state>
     3b8:	88 23       	and	r24, r24
     3ba:	19 f0       	breq	.+6      	; 0x3c2 <ARM_Tick+0xe>
     3bc:	81 30       	cpi	r24, 0x01	; 1
     3be:	71 f0       	breq	.+28     	; 0x3dc <ARM_Tick+0x28>
     3c0:	5f c0       	rjmp	.+190    	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     3c2:	10 92 52 07 	sts	0x0752, r1	; 0x800752 <temp_trip>
     3c6:	10 92 51 07 	sts	0x0751, r1	; 0x800751 <IR_one_trip>
     3ca:	10 92 50 07 	sts	0x0750, r1	; 0x800750 <IR_two_trip>
     3ce:	10 92 4f 07 	sts	0x074F, r1	; 0x80074f <button_one_trip>
     3d2:	10 92 4e 07 	sts	0x074E, r1	; 0x80074e <button_two_trip>
     3d6:	10 92 4d 07 	sts	0x074D, r1	; 0x80074d <triggered_sensors>
     3da:	57 c0       	rjmp	.+174    	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     3dc:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     3e0:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     3e4:	22 0f       	add	r18, r18
     3e6:	33 1f       	adc	r19, r19
     3e8:	22 0f       	add	r18, r18
     3ea:	33 1f       	adc	r19, r19
     3ec:	30 93 54 07 	sts	0x0754, r19	; 0x800754 <temp_MV+0x1>
     3f0:	20 93 53 07 	sts	0x0753, r18	; 0x800753 <temp_MV>
     3f4:	24 5f       	subi	r18, 0xF4	; 244
     3f6:	31 40       	sbci	r19, 0x01	; 1
     3f8:	ad ec       	ldi	r26, 0xCD	; 205
     3fa:	bc ec       	ldi	r27, 0xCC	; 204
     3fc:	b5 d7       	rcall	.+3946   	; 0x1368 <__umulhisi3>
     3fe:	96 95       	lsr	r25
     400:	87 95       	ror	r24
     402:	96 95       	lsr	r25
     404:	87 95       	ror	r24
     406:	96 95       	lsr	r25
     408:	87 95       	ror	r24
     40a:	80 93 55 07 	sts	0x0755, r24	; 0x800755 <temp_val>
     40e:	80 32       	cpi	r24, 0x20	; 32
     410:	40 f0       	brcs	.+16     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	80 93 52 07 	sts	0x0752, r24	; 0x800752 <temp_trip>
     418:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <triggered_sensors>
     41c:	81 60       	ori	r24, 0x01	; 1
     41e:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <triggered_sensors>
     422:	86 b1       	in	r24, 0x06	; 6
     424:	80 95       	com	r24
     426:	83 ff       	sbrs	r24, 3
     428:	08 c0       	rjmp	.+16     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <IR_two_trip>
     430:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <triggered_sensors>
     434:	82 60       	ori	r24, 0x02	; 2
     436:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <triggered_sensors>
     43a:	86 b1       	in	r24, 0x06	; 6
     43c:	80 95       	com	r24
     43e:	82 ff       	sbrs	r24, 2
     440:	08 c0       	rjmp	.+16     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	80 93 51 07 	sts	0x0751, r24	; 0x800751 <IR_one_trip>
     448:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <triggered_sensors>
     44c:	84 60       	ori	r24, 0x04	; 4
     44e:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <triggered_sensors>
     452:	86 b1       	in	r24, 0x06	; 6
     454:	80 95       	com	r24
     456:	81 ff       	sbrs	r24, 1
     458:	08 c0       	rjmp	.+16     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	80 93 4e 07 	sts	0x074E, r24	; 0x80074e <button_two_trip>
     460:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <triggered_sensors>
     464:	88 60       	ori	r24, 0x08	; 8
     466:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <triggered_sensors>
     46a:	30 99       	sbic	0x06, 0	; 6
     46c:	18 c0       	rjmp	.+48     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	80 93 4f 07 	sts	0x074F, r24	; 0x80074f <button_one_trip>
     474:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <triggered_sensors>
     478:	80 61       	ori	r24, 0x10	; 16
     47a:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <triggered_sensors>
     47e:	0f c0       	rjmp	.+30     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     480:	88 23       	and	r24, r24
     482:	19 f0       	breq	.+6      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     484:	81 30       	cpi	r24, 0x01	; 1
     486:	a9 f4       	brne	.+42     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
     488:	0a c0       	rjmp	.+20     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     48a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <ARM_DISARM>
     48e:	81 30       	cpi	r24, 0x01	; 1
     490:	19 f4       	brne	.+6      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     492:	80 93 b5 07 	sts	0x07B5, r24	; 0x8007b5 <arm_state>
     496:	08 95       	ret
     498:	10 92 b5 07 	sts	0x07B5, r1	; 0x8007b5 <arm_state>
     49c:	08 95       	ret
     49e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <ARM_DISARM>
     4a2:	81 30       	cpi	r24, 0x01	; 1
     4a4:	19 f4       	brne	.+6      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     4a6:	80 93 b5 07 	sts	0x07B5, r24	; 0x8007b5 <arm_state>
     4aa:	08 95       	ret
     4ac:	10 92 b5 07 	sts	0x07B5, r1	; 0x8007b5 <arm_state>
     4b0:	08 95       	ret
     4b2:	10 92 b5 07 	sts	0x07B5, r1	; 0x8007b5 <arm_state>
     4b6:	08 95       	ret

000004b8 <ARMSecTask>:
     4b8:	10 92 b5 07 	sts	0x07B5, r1	; 0x8007b5 <arm_state>
     4bc:	7b df       	rcall	.-266    	; 0x3b4 <ARM_Tick>
     4be:	8a e0       	ldi	r24, 0x0A	; 10
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	91 d6       	rcall	.+3362   	; 0x11e6 <vTaskDelay>
     4c4:	fb cf       	rjmp	.-10     	; 0x4bc <ARMSecTask+0x4>

000004c6 <StartARMPulse>:
     4c6:	af 92       	push	r10
     4c8:	bf 92       	push	r11
     4ca:	cf 92       	push	r12
     4cc:	df 92       	push	r13
     4ce:	ef 92       	push	r14
     4d0:	ff 92       	push	r15
     4d2:	0f 93       	push	r16
     4d4:	a1 2c       	mov	r10, r1
     4d6:	b1 2c       	mov	r11, r1
     4d8:	c1 2c       	mov	r12, r1
     4da:	d1 2c       	mov	r13, r1
     4dc:	e1 2c       	mov	r14, r1
     4de:	f1 2c       	mov	r15, r1
     4e0:	08 2f       	mov	r16, r24
     4e2:	20 e0       	ldi	r18, 0x00	; 0
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	45 e5       	ldi	r20, 0x55	; 85
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	62 e2       	ldi	r22, 0x22	; 34
     4ec:	71 e0       	ldi	r23, 0x01	; 1
     4ee:	8c e5       	ldi	r24, 0x5C	; 92
     4f0:	92 e0       	ldi	r25, 0x02	; 2
     4f2:	14 d4       	rcall	.+2088   	; 0xd1c <xTaskGenericCreate>
     4f4:	0f 91       	pop	r16
     4f6:	ff 90       	pop	r15
     4f8:	ef 90       	pop	r14
     4fa:	df 90       	pop	r13
     4fc:	cf 90       	pop	r12
     4fe:	bf 90       	pop	r11
     500:	af 90       	pop	r10
     502:	08 95       	ret

00000504 <Motor_Tick>:
     504:	80 91 b2 07 	lds	r24, 0x07B2	; 0x8007b2 <motor_state>
     508:	81 30       	cpi	r24, 0x01	; 1
     50a:	89 f0       	breq	.+34     	; 0x52e <Motor_Tick+0x2a>
     50c:	20 f0       	brcs	.+8      	; 0x516 <Motor_Tick+0x12>
     50e:	82 30       	cpi	r24, 0x02	; 2
     510:	09 f4       	brne	.+2      	; 0x514 <Motor_Tick+0x10>
     512:	69 c0       	rjmp	.+210    	; 0x5e6 <Motor_Tick+0xe2>
     514:	b6 c0       	rjmp	.+364    	; 0x682 <Motor_Tick+0x17e>
     516:	10 92 49 07 	sts	0x0749, r1	; 0x800749 <finished_reset_1>
     51a:	10 92 4c 07 	sts	0x074C, r1	; 0x80074c <p_index>
     51e:	10 92 4b 07 	sts	0x074B, r1	; 0x80074b <numCounter+0x1>
     522:	10 92 4a 07 	sts	0x074A, r1	; 0x80074a <numCounter>
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <orientation>
     52c:	b2 c0       	rjmp	.+356    	; 0x692 <Motor_Tick+0x18e>
     52e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <orientation>
     532:	88 23       	and	r24, r24
     534:	59 f1       	breq	.+86     	; 0x58c <Motor_Tick+0x88>
     536:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <numCounter>
     53a:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <numCounter+0x1>
     53e:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <numPhases>
     542:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <numPhases+0x1>
     546:	82 17       	cp	r24, r18
     548:	93 07       	cpc	r25, r19
     54a:	bc f4       	brge	.+46     	; 0x57a <Motor_Tick+0x76>
     54c:	01 96       	adiw	r24, 0x01	; 1
     54e:	90 93 4b 07 	sts	0x074B, r25	; 0x80074b <numCounter+0x1>
     552:	80 93 4a 07 	sts	0x074A, r24	; 0x80074a <numCounter>
     556:	e0 91 4c 07 	lds	r30, 0x074C	; 0x80074c <p_index>
     55a:	f0 e0       	ldi	r31, 0x00	; 0
     55c:	e7 5f       	subi	r30, 0xF7	; 247
     55e:	fe 4f       	sbci	r31, 0xFE	; 254
     560:	80 81       	ld	r24, Z
     562:	85 b9       	out	0x05, r24	; 5
     564:	80 91 4c 07 	lds	r24, 0x074C	; 0x80074c <p_index>
     568:	87 30       	cpi	r24, 0x07	; 7
     56a:	19 f4       	brne	.+6      	; 0x572 <Motor_Tick+0x6e>
     56c:	10 92 4c 07 	sts	0x074C, r1	; 0x80074c <p_index>
     570:	88 c0       	rjmp	.+272    	; 0x682 <Motor_Tick+0x17e>
     572:	8f 5f       	subi	r24, 0xFF	; 255
     574:	80 93 4c 07 	sts	0x074C, r24	; 0x80074c <p_index>
     578:	84 c0       	rjmp	.+264    	; 0x682 <Motor_Tick+0x17e>
     57a:	10 92 4b 07 	sts	0x074B, r1	; 0x80074b <numCounter+0x1>
     57e:	10 92 4a 07 	sts	0x074A, r1	; 0x80074a <numCounter>
     582:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <orientation>
     586:	10 92 4c 07 	sts	0x074C, r1	; 0x80074c <p_index>
     58a:	8b c0       	rjmp	.+278    	; 0x6a2 <Motor_Tick+0x19e>
     58c:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <numCounter>
     590:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <numCounter+0x1>
     594:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <numPhases>
     598:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <numPhases+0x1>
     59c:	82 17       	cp	r24, r18
     59e:	93 07       	cpc	r25, r19
     5a0:	c4 f4       	brge	.+48     	; 0x5d2 <Motor_Tick+0xce>
     5a2:	01 96       	adiw	r24, 0x01	; 1
     5a4:	90 93 4b 07 	sts	0x074B, r25	; 0x80074b <numCounter+0x1>
     5a8:	80 93 4a 07 	sts	0x074A, r24	; 0x80074a <numCounter>
     5ac:	e0 91 4c 07 	lds	r30, 0x074C	; 0x80074c <p_index>
     5b0:	f0 e0       	ldi	r31, 0x00	; 0
     5b2:	e7 5f       	subi	r30, 0xF7	; 247
     5b4:	fe 4f       	sbci	r31, 0xFE	; 254
     5b6:	80 81       	ld	r24, Z
     5b8:	85 b9       	out	0x05, r24	; 5
     5ba:	80 91 4c 07 	lds	r24, 0x074C	; 0x80074c <p_index>
     5be:	81 11       	cpse	r24, r1
     5c0:	04 c0       	rjmp	.+8      	; 0x5ca <Motor_Tick+0xc6>
     5c2:	87 e0       	ldi	r24, 0x07	; 7
     5c4:	80 93 4c 07 	sts	0x074C, r24	; 0x80074c <p_index>
     5c8:	5c c0       	rjmp	.+184    	; 0x682 <Motor_Tick+0x17e>
     5ca:	81 50       	subi	r24, 0x01	; 1
     5cc:	80 93 4c 07 	sts	0x074C, r24	; 0x80074c <p_index>
     5d0:	58 c0       	rjmp	.+176    	; 0x682 <Motor_Tick+0x17e>
     5d2:	10 92 4b 07 	sts	0x074B, r1	; 0x80074b <numCounter+0x1>
     5d6:	10 92 4a 07 	sts	0x074A, r1	; 0x80074a <numCounter>
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <orientation>
     5e0:	10 92 4c 07 	sts	0x074C, r1	; 0x80074c <p_index>
     5e4:	5e c0       	rjmp	.+188    	; 0x6a2 <Motor_Tick+0x19e>
     5e6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <orientation>
     5ea:	88 23       	and	r24, r24
     5ec:	19 f1       	breq	.+70     	; 0x634 <Motor_Tick+0x130>
     5ee:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <numCounter>
     5f2:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <numCounter+0x1>
     5f6:	18 16       	cp	r1, r24
     5f8:	19 06       	cpc	r1, r25
     5fa:	c4 f4       	brge	.+48     	; 0x62c <Motor_Tick+0x128>
     5fc:	01 97       	sbiw	r24, 0x01	; 1
     5fe:	90 93 4b 07 	sts	0x074B, r25	; 0x80074b <numCounter+0x1>
     602:	80 93 4a 07 	sts	0x074A, r24	; 0x80074a <numCounter>
     606:	e0 91 4c 07 	lds	r30, 0x074C	; 0x80074c <p_index>
     60a:	f0 e0       	ldi	r31, 0x00	; 0
     60c:	e7 5f       	subi	r30, 0xF7	; 247
     60e:	fe 4f       	sbci	r31, 0xFE	; 254
     610:	80 81       	ld	r24, Z
     612:	85 b9       	out	0x05, r24	; 5
     614:	80 91 4c 07 	lds	r24, 0x074C	; 0x80074c <p_index>
     618:	81 11       	cpse	r24, r1
     61a:	04 c0       	rjmp	.+8      	; 0x624 <Motor_Tick+0x120>
     61c:	87 e0       	ldi	r24, 0x07	; 7
     61e:	80 93 4c 07 	sts	0x074C, r24	; 0x80074c <p_index>
     622:	2f c0       	rjmp	.+94     	; 0x682 <Motor_Tick+0x17e>
     624:	81 50       	subi	r24, 0x01	; 1
     626:	80 93 4c 07 	sts	0x074C, r24	; 0x80074c <p_index>
     62a:	2b c0       	rjmp	.+86     	; 0x682 <Motor_Tick+0x17e>
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	80 93 49 07 	sts	0x0749, r24	; 0x800749 <finished_reset_1>
     632:	43 c0       	rjmp	.+134    	; 0x6ba <Motor_Tick+0x1b6>
     634:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <numCounter>
     638:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <numCounter+0x1>
     63c:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <numPhases>
     640:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <numPhases+0x1>
     644:	82 17       	cp	r24, r18
     646:	93 07       	cpc	r25, r19
     648:	c4 f4       	brge	.+48     	; 0x67a <Motor_Tick+0x176>
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	90 93 4b 07 	sts	0x074B, r25	; 0x80074b <numCounter+0x1>
     650:	80 93 4a 07 	sts	0x074A, r24	; 0x80074a <numCounter>
     654:	e0 91 4c 07 	lds	r30, 0x074C	; 0x80074c <p_index>
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	e7 5f       	subi	r30, 0xF7	; 247
     65c:	fe 4f       	sbci	r31, 0xFE	; 254
     65e:	80 81       	ld	r24, Z
     660:	85 b9       	out	0x05, r24	; 5
     662:	80 91 4c 07 	lds	r24, 0x074C	; 0x80074c <p_index>
     666:	81 11       	cpse	r24, r1
     668:	04 c0       	rjmp	.+8      	; 0x672 <Motor_Tick+0x16e>
     66a:	87 e0       	ldi	r24, 0x07	; 7
     66c:	80 93 4c 07 	sts	0x074C, r24	; 0x80074c <p_index>
     670:	08 c0       	rjmp	.+16     	; 0x682 <Motor_Tick+0x17e>
     672:	81 50       	subi	r24, 0x01	; 1
     674:	80 93 4c 07 	sts	0x074C, r24	; 0x80074c <p_index>
     678:	04 c0       	rjmp	.+8      	; 0x682 <Motor_Tick+0x17e>
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	80 93 49 07 	sts	0x0749, r24	; 0x800749 <finished_reset_1>
     680:	1c c0       	rjmp	.+56     	; 0x6ba <Motor_Tick+0x1b6>
     682:	80 91 b2 07 	lds	r24, 0x07B2	; 0x8007b2 <motor_state>
     686:	81 30       	cpi	r24, 0x01	; 1
     688:	61 f0       	breq	.+24     	; 0x6a2 <Motor_Tick+0x19e>
     68a:	18 f0       	brcs	.+6      	; 0x692 <Motor_Tick+0x18e>
     68c:	82 30       	cpi	r24, 0x02	; 2
     68e:	c1 f4       	brne	.+48     	; 0x6c0 <Motor_Tick+0x1bc>
     690:	10 c0       	rjmp	.+32     	; 0x6b2 <Motor_Tick+0x1ae>
     692:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <ARM_DISARM>
     696:	88 23       	and	r24, r24
     698:	a9 f0       	breq	.+42     	; 0x6c4 <Motor_Tick+0x1c0>
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	80 93 b2 07 	sts	0x07B2, r24	; 0x8007b2 <motor_state>
     6a0:	08 95       	ret
     6a2:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <ARM_DISARM>
     6a6:	81 30       	cpi	r24, 0x01	; 1
     6a8:	69 f0       	breq	.+26     	; 0x6c4 <Motor_Tick+0x1c0>
     6aa:	82 e0       	ldi	r24, 0x02	; 2
     6ac:	80 93 b2 07 	sts	0x07B2, r24	; 0x8007b2 <motor_state>
     6b0:	08 95       	ret
     6b2:	80 91 49 07 	lds	r24, 0x0749	; 0x800749 <finished_reset_1>
     6b6:	81 30       	cpi	r24, 0x01	; 1
     6b8:	29 f4       	brne	.+10     	; 0x6c4 <Motor_Tick+0x1c0>
     6ba:	10 92 b2 07 	sts	0x07B2, r1	; 0x8007b2 <motor_state>
     6be:	08 95       	ret
     6c0:	10 92 b2 07 	sts	0x07B2, r1	; 0x8007b2 <motor_state>
     6c4:	08 95       	ret

000006c6 <MotorSecTask>:
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	80 93 b2 07 	sts	0x07B2, r24	; 0x8007b2 <motor_state>
     6cc:	1b df       	rcall	.-458    	; 0x504 <Motor_Tick>
     6ce:	83 e0       	ldi	r24, 0x03	; 3
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	89 d5       	rcall	.+2834   	; 0x11e6 <vTaskDelay>
     6d4:	fb cf       	rjmp	.-10     	; 0x6cc <MotorSecTask+0x6>

000006d6 <MotorSecPulse>:
     6d6:	af 92       	push	r10
     6d8:	bf 92       	push	r11
     6da:	cf 92       	push	r12
     6dc:	df 92       	push	r13
     6de:	ef 92       	push	r14
     6e0:	ff 92       	push	r15
     6e2:	0f 93       	push	r16
     6e4:	a1 2c       	mov	r10, r1
     6e6:	b1 2c       	mov	r11, r1
     6e8:	c1 2c       	mov	r12, r1
     6ea:	d1 2c       	mov	r13, r1
     6ec:	e1 2c       	mov	r14, r1
     6ee:	f1 2c       	mov	r15, r1
     6f0:	08 2f       	mov	r16, r24
     6f2:	20 e0       	ldi	r18, 0x00	; 0
     6f4:	30 e0       	ldi	r19, 0x00	; 0
     6f6:	45 e5       	ldi	r20, 0x55	; 85
     6f8:	50 e0       	ldi	r21, 0x00	; 0
     6fa:	6d e2       	ldi	r22, 0x2D	; 45
     6fc:	71 e0       	ldi	r23, 0x01	; 1
     6fe:	83 e6       	ldi	r24, 0x63	; 99
     700:	93 e0       	ldi	r25, 0x03	; 3
     702:	0c d3       	rcall	.+1560   	; 0xd1c <xTaskGenericCreate>
     704:	0f 91       	pop	r16
     706:	ff 90       	pop	r15
     708:	ef 90       	pop	r14
     70a:	df 90       	pop	r13
     70c:	cf 90       	pop	r12
     70e:	bf 90       	pop	r11
     710:	af 90       	pop	r10
     712:	08 95       	ret

00000714 <Motor_Tick_2>:
     714:	80 91 b3 07 	lds	r24, 0x07B3	; 0x8007b3 <motor_state_2>
     718:	81 30       	cpi	r24, 0x01	; 1
     71a:	81 f0       	breq	.+32     	; 0x73c <Motor_Tick_2+0x28>
     71c:	20 f0       	brcs	.+8      	; 0x726 <Motor_Tick_2+0x12>
     71e:	82 30       	cpi	r24, 0x02	; 2
     720:	09 f4       	brne	.+2      	; 0x724 <Motor_Tick_2+0x10>
     722:	6c c0       	rjmp	.+216    	; 0x7fc <Motor_Tick_2+0xe8>
     724:	bb c0       	rjmp	.+374    	; 0x89c <Motor_Tick_2+0x188>
     726:	10 92 44 07 	sts	0x0744, r1	; 0x800744 <finished_reset_2>
     72a:	10 92 47 07 	sts	0x0747, r1	; 0x800747 <p_index_2>
     72e:	10 92 46 07 	sts	0x0746, r1	; 0x800746 <numCounter_2+0x1>
     732:	10 92 45 07 	sts	0x0745, r1	; 0x800745 <numCounter_2>
     736:	10 92 48 07 	sts	0x0748, r1	; 0x800748 <orientation_2>
     73a:	b8 c0       	rjmp	.+368    	; 0x8ac <Motor_Tick_2+0x198>
     73c:	80 91 48 07 	lds	r24, 0x0748	; 0x800748 <orientation_2>
     740:	88 23       	and	r24, r24
     742:	69 f1       	breq	.+90     	; 0x79e <Motor_Tick_2+0x8a>
     744:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <numCounter_2>
     748:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <numCounter_2+0x1>
     74c:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <numPhases>
     750:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <numPhases+0x1>
     754:	82 17       	cp	r24, r18
     756:	93 07       	cpc	r25, r19
     758:	cc f4       	brge	.+50     	; 0x78c <Motor_Tick_2+0x78>
     75a:	01 96       	adiw	r24, 0x01	; 1
     75c:	90 93 46 07 	sts	0x0746, r25	; 0x800746 <numCounter_2+0x1>
     760:	80 93 45 07 	sts	0x0745, r24	; 0x800745 <numCounter_2>
     764:	95 b1       	in	r25, 0x05	; 5
     766:	e0 91 47 07 	lds	r30, 0x0747	; 0x800747 <p_index_2>
     76a:	f0 e0       	ldi	r31, 0x00	; 0
     76c:	e0 50       	subi	r30, 0x00	; 0
     76e:	ff 4f       	sbci	r31, 0xFF	; 255
     770:	80 81       	ld	r24, Z
     772:	89 2b       	or	r24, r25
     774:	85 b9       	out	0x05, r24	; 5
     776:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <p_index_2>
     77a:	87 30       	cpi	r24, 0x07	; 7
     77c:	19 f4       	brne	.+6      	; 0x784 <Motor_Tick_2+0x70>
     77e:	10 92 47 07 	sts	0x0747, r1	; 0x800747 <p_index_2>
     782:	8c c0       	rjmp	.+280    	; 0x89c <Motor_Tick_2+0x188>
     784:	8f 5f       	subi	r24, 0xFF	; 255
     786:	80 93 47 07 	sts	0x0747, r24	; 0x800747 <p_index_2>
     78a:	88 c0       	rjmp	.+272    	; 0x89c <Motor_Tick_2+0x188>
     78c:	10 92 46 07 	sts	0x0746, r1	; 0x800746 <numCounter_2+0x1>
     790:	10 92 45 07 	sts	0x0745, r1	; 0x800745 <numCounter_2>
     794:	10 92 48 07 	sts	0x0748, r1	; 0x800748 <orientation_2>
     798:	10 92 47 07 	sts	0x0747, r1	; 0x800747 <p_index_2>
     79c:	8f c0       	rjmp	.+286    	; 0x8bc <Motor_Tick_2+0x1a8>
     79e:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <numCounter_2>
     7a2:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <numCounter_2+0x1>
     7a6:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <numPhases>
     7aa:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <numPhases+0x1>
     7ae:	82 17       	cp	r24, r18
     7b0:	93 07       	cpc	r25, r19
     7b2:	d4 f4       	brge	.+52     	; 0x7e8 <Motor_Tick_2+0xd4>
     7b4:	01 96       	adiw	r24, 0x01	; 1
     7b6:	90 93 46 07 	sts	0x0746, r25	; 0x800746 <numCounter_2+0x1>
     7ba:	80 93 45 07 	sts	0x0745, r24	; 0x800745 <numCounter_2>
     7be:	95 b1       	in	r25, 0x05	; 5
     7c0:	e0 91 47 07 	lds	r30, 0x0747	; 0x800747 <p_index_2>
     7c4:	f0 e0       	ldi	r31, 0x00	; 0
     7c6:	e0 50       	subi	r30, 0x00	; 0
     7c8:	ff 4f       	sbci	r31, 0xFF	; 255
     7ca:	80 81       	ld	r24, Z
     7cc:	89 2b       	or	r24, r25
     7ce:	85 b9       	out	0x05, r24	; 5
     7d0:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <p_index_2>
     7d4:	81 11       	cpse	r24, r1
     7d6:	04 c0       	rjmp	.+8      	; 0x7e0 <Motor_Tick_2+0xcc>
     7d8:	87 e0       	ldi	r24, 0x07	; 7
     7da:	80 93 47 07 	sts	0x0747, r24	; 0x800747 <p_index_2>
     7de:	5e c0       	rjmp	.+188    	; 0x89c <Motor_Tick_2+0x188>
     7e0:	81 50       	subi	r24, 0x01	; 1
     7e2:	80 93 47 07 	sts	0x0747, r24	; 0x800747 <p_index_2>
     7e6:	5a c0       	rjmp	.+180    	; 0x89c <Motor_Tick_2+0x188>
     7e8:	10 92 46 07 	sts	0x0746, r1	; 0x800746 <numCounter_2+0x1>
     7ec:	10 92 45 07 	sts	0x0745, r1	; 0x800745 <numCounter_2>
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	80 93 48 07 	sts	0x0748, r24	; 0x800748 <orientation_2>
     7f6:	10 92 47 07 	sts	0x0747, r1	; 0x800747 <p_index_2>
     7fa:	60 c0       	rjmp	.+192    	; 0x8bc <Motor_Tick_2+0x1a8>
     7fc:	80 91 48 07 	lds	r24, 0x0748	; 0x800748 <orientation_2>
     800:	81 11       	cpse	r24, r1
     802:	24 c0       	rjmp	.+72     	; 0x84c <Motor_Tick_2+0x138>
     804:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <numCounter_2>
     808:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <numCounter_2+0x1>
     80c:	18 16       	cp	r1, r24
     80e:	19 06       	cpc	r1, r25
     810:	cc f4       	brge	.+50     	; 0x844 <Motor_Tick_2+0x130>
     812:	01 97       	sbiw	r24, 0x01	; 1
     814:	90 93 46 07 	sts	0x0746, r25	; 0x800746 <numCounter_2+0x1>
     818:	80 93 45 07 	sts	0x0745, r24	; 0x800745 <numCounter_2>
     81c:	95 b1       	in	r25, 0x05	; 5
     81e:	e0 91 47 07 	lds	r30, 0x0747	; 0x800747 <p_index_2>
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	e0 50       	subi	r30, 0x00	; 0
     826:	ff 4f       	sbci	r31, 0xFF	; 255
     828:	80 81       	ld	r24, Z
     82a:	89 2b       	or	r24, r25
     82c:	85 b9       	out	0x05, r24	; 5
     82e:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <p_index_2>
     832:	87 30       	cpi	r24, 0x07	; 7
     834:	19 f4       	brne	.+6      	; 0x83c <Motor_Tick_2+0x128>
     836:	10 92 47 07 	sts	0x0747, r1	; 0x800747 <p_index_2>
     83a:	30 c0       	rjmp	.+96     	; 0x89c <Motor_Tick_2+0x188>
     83c:	8f 5f       	subi	r24, 0xFF	; 255
     83e:	80 93 47 07 	sts	0x0747, r24	; 0x800747 <p_index_2>
     842:	2c c0       	rjmp	.+88     	; 0x89c <Motor_Tick_2+0x188>
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	80 93 44 07 	sts	0x0744, r24	; 0x800744 <finished_reset_2>
     84a:	44 c0       	rjmp	.+136    	; 0x8d4 <Motor_Tick_2+0x1c0>
     84c:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <numCounter_2>
     850:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <numCounter_2+0x1>
     854:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <numPhases>
     858:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <numPhases+0x1>
     85c:	82 17       	cp	r24, r18
     85e:	93 07       	cpc	r25, r19
     860:	cc f4       	brge	.+50     	; 0x894 <Motor_Tick_2+0x180>
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	90 93 46 07 	sts	0x0746, r25	; 0x800746 <numCounter_2+0x1>
     868:	80 93 45 07 	sts	0x0745, r24	; 0x800745 <numCounter_2>
     86c:	95 b1       	in	r25, 0x05	; 5
     86e:	e0 91 47 07 	lds	r30, 0x0747	; 0x800747 <p_index_2>
     872:	f0 e0       	ldi	r31, 0x00	; 0
     874:	e0 50       	subi	r30, 0x00	; 0
     876:	ff 4f       	sbci	r31, 0xFF	; 255
     878:	80 81       	ld	r24, Z
     87a:	89 2b       	or	r24, r25
     87c:	85 b9       	out	0x05, r24	; 5
     87e:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <p_index_2>
     882:	87 30       	cpi	r24, 0x07	; 7
     884:	19 f4       	brne	.+6      	; 0x88c <Motor_Tick_2+0x178>
     886:	10 92 47 07 	sts	0x0747, r1	; 0x800747 <p_index_2>
     88a:	08 c0       	rjmp	.+16     	; 0x89c <Motor_Tick_2+0x188>
     88c:	8f 5f       	subi	r24, 0xFF	; 255
     88e:	80 93 47 07 	sts	0x0747, r24	; 0x800747 <p_index_2>
     892:	04 c0       	rjmp	.+8      	; 0x89c <Motor_Tick_2+0x188>
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	80 93 44 07 	sts	0x0744, r24	; 0x800744 <finished_reset_2>
     89a:	1c c0       	rjmp	.+56     	; 0x8d4 <Motor_Tick_2+0x1c0>
     89c:	80 91 b3 07 	lds	r24, 0x07B3	; 0x8007b3 <motor_state_2>
     8a0:	81 30       	cpi	r24, 0x01	; 1
     8a2:	61 f0       	breq	.+24     	; 0x8bc <Motor_Tick_2+0x1a8>
     8a4:	18 f0       	brcs	.+6      	; 0x8ac <Motor_Tick_2+0x198>
     8a6:	82 30       	cpi	r24, 0x02	; 2
     8a8:	c1 f4       	brne	.+48     	; 0x8da <Motor_Tick_2+0x1c6>
     8aa:	10 c0       	rjmp	.+32     	; 0x8cc <Motor_Tick_2+0x1b8>
     8ac:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <ARM_DISARM>
     8b0:	88 23       	and	r24, r24
     8b2:	a9 f0       	breq	.+42     	; 0x8de <Motor_Tick_2+0x1ca>
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	80 93 b3 07 	sts	0x07B3, r24	; 0x8007b3 <motor_state_2>
     8ba:	08 95       	ret
     8bc:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <ARM_DISARM>
     8c0:	81 30       	cpi	r24, 0x01	; 1
     8c2:	69 f0       	breq	.+26     	; 0x8de <Motor_Tick_2+0x1ca>
     8c4:	82 e0       	ldi	r24, 0x02	; 2
     8c6:	80 93 b3 07 	sts	0x07B3, r24	; 0x8007b3 <motor_state_2>
     8ca:	08 95       	ret
     8cc:	80 91 44 07 	lds	r24, 0x0744	; 0x800744 <finished_reset_2>
     8d0:	81 30       	cpi	r24, 0x01	; 1
     8d2:	29 f4       	brne	.+10     	; 0x8de <Motor_Tick_2+0x1ca>
     8d4:	10 92 b3 07 	sts	0x07B3, r1	; 0x8007b3 <motor_state_2>
     8d8:	08 95       	ret
     8da:	10 92 b3 07 	sts	0x07B3, r1	; 0x8007b3 <motor_state_2>
     8de:	08 95       	ret

000008e0 <MotorSecTask_2>:
     8e0:	81 e0       	ldi	r24, 0x01	; 1
     8e2:	80 93 b3 07 	sts	0x07B3, r24	; 0x8007b3 <motor_state_2>
     8e6:	16 df       	rcall	.-468    	; 0x714 <Motor_Tick_2>
     8e8:	83 e0       	ldi	r24, 0x03	; 3
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	7c d4       	rcall	.+2296   	; 0x11e6 <vTaskDelay>
     8ee:	fb cf       	rjmp	.-10     	; 0x8e6 <MotorSecTask_2+0x6>

000008f0 <Motor2SecPulse>:
     8f0:	af 92       	push	r10
     8f2:	bf 92       	push	r11
     8f4:	cf 92       	push	r12
     8f6:	df 92       	push	r13
     8f8:	ef 92       	push	r14
     8fa:	ff 92       	push	r15
     8fc:	0f 93       	push	r16
     8fe:	a1 2c       	mov	r10, r1
     900:	b1 2c       	mov	r11, r1
     902:	c1 2c       	mov	r12, r1
     904:	d1 2c       	mov	r13, r1
     906:	e1 2c       	mov	r14, r1
     908:	f1 2c       	mov	r15, r1
     90a:	08 2f       	mov	r16, r24
     90c:	20 e0       	ldi	r18, 0x00	; 0
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	45 e5       	ldi	r20, 0x55	; 85
     912:	50 e0       	ldi	r21, 0x00	; 0
     914:	6a e3       	ldi	r22, 0x3A	; 58
     916:	71 e0       	ldi	r23, 0x01	; 1
     918:	80 e7       	ldi	r24, 0x70	; 112
     91a:	94 e0       	ldi	r25, 0x04	; 4
     91c:	ff d1       	rcall	.+1022   	; 0xd1c <xTaskGenericCreate>
     91e:	0f 91       	pop	r16
     920:	ff 90       	pop	r15
     922:	ef 90       	pop	r14
     924:	df 90       	pop	r13
     926:	cf 90       	pop	r12
     928:	bf 90       	pop	r11
     92a:	af 90       	pop	r10
     92c:	08 95       	ret

0000092e <Trans_Tick>:
     92e:	80 91 b1 07 	lds	r24, 0x07B1	; 0x8007b1 <trans_state>
     932:	81 30       	cpi	r24, 0x01	; 1
     934:	21 f4       	brne	.+8      	; 0x93e <Trans_Tick+0x10>
     936:	60 e0       	ldi	r22, 0x00	; 0
     938:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <triggered_sensors>
     93c:	a7 dc       	rcall	.-1714   	; 0x28c <USART_Send>
     93e:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <temp_state>
     942:	88 23       	and	r24, r24
     944:	19 f0       	breq	.+6      	; 0x94c <Trans_Tick+0x1e>
     946:	81 30       	cpi	r24, 0x01	; 1
     948:	79 f0       	breq	.+30     	; 0x968 <Trans_Tick+0x3a>
     94a:	19 c0       	rjmp	.+50     	; 0x97e <Trans_Tick+0x50>
     94c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     950:	85 ff       	sbrs	r24, 5
     952:	07 c0       	rjmp	.+14     	; 0x962 <Trans_Tick+0x34>
     954:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <ARM_DISARM>
     958:	81 30       	cpi	r24, 0x01	; 1
     95a:	19 f4       	brne	.+6      	; 0x962 <Trans_Tick+0x34>
     95c:	80 93 b1 07 	sts	0x07B1, r24	; 0x8007b1 <trans_state>
     960:	08 95       	ret
     962:	10 92 b1 07 	sts	0x07B1, r1	; 0x8007b1 <trans_state>
     966:	08 95       	ret
     968:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     96c:	86 ff       	sbrs	r24, 6
     96e:	03 c0       	rjmp	.+6      	; 0x976 <Trans_Tick+0x48>
     970:	10 92 b1 07 	sts	0x07B1, r1	; 0x8007b1 <trans_state>
     974:	08 95       	ret
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	80 93 b1 07 	sts	0x07B1, r24	; 0x8007b1 <trans_state>
     97c:	08 95       	ret
     97e:	10 92 b1 07 	sts	0x07B1, r1	; 0x8007b1 <trans_state>
     982:	08 95       	ret

00000984 <TransSecTask>:
     984:	10 92 b1 07 	sts	0x07B1, r1	; 0x8007b1 <trans_state>
     988:	d2 df       	rcall	.-92     	; 0x92e <Trans_Tick>
     98a:	8a e0       	ldi	r24, 0x0A	; 10
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	2b d4       	rcall	.+2134   	; 0x11e6 <vTaskDelay>
     990:	fb cf       	rjmp	.-10     	; 0x988 <TransSecTask+0x4>

00000992 <TransSecPulse>:
     992:	af 92       	push	r10
     994:	bf 92       	push	r11
     996:	cf 92       	push	r12
     998:	df 92       	push	r13
     99a:	ef 92       	push	r14
     99c:	ff 92       	push	r15
     99e:	0f 93       	push	r16
     9a0:	a1 2c       	mov	r10, r1
     9a2:	b1 2c       	mov	r11, r1
     9a4:	c1 2c       	mov	r12, r1
     9a6:	d1 2c       	mov	r13, r1
     9a8:	e1 2c       	mov	r14, r1
     9aa:	f1 2c       	mov	r15, r1
     9ac:	08 2f       	mov	r16, r24
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	45 e5       	ldi	r20, 0x55	; 85
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	69 e4       	ldi	r22, 0x49	; 73
     9b8:	71 e0       	ldi	r23, 0x01	; 1
     9ba:	82 ec       	ldi	r24, 0xC2	; 194
     9bc:	94 e0       	ldi	r25, 0x04	; 4
     9be:	ae d1       	rcall	.+860    	; 0xd1c <xTaskGenericCreate>
     9c0:	0f 91       	pop	r16
     9c2:	ff 90       	pop	r15
     9c4:	ef 90       	pop	r14
     9c6:	df 90       	pop	r13
     9c8:	cf 90       	pop	r12
     9ca:	bf 90       	pop	r11
     9cc:	af 90       	pop	r10
     9ce:	08 95       	ret

000009d0 <main>:

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 
int main(void) 
{ 
     9d0:	6f dc       	rcall	.-1826   	; 0x2b0 <ADC_init>
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	39 dc       	rcall	.-1934   	; 0x248 <initUSART>
     9d6:	11 b8       	out	0x01, r1	; 1
     9d8:	8f ef       	ldi	r24, 0xFF	; 255
     9da:	82 b9       	out	0x02, r24	; 2
     9dc:	84 b9       	out	0x04, r24	; 4
     9de:	15 b8       	out	0x05, r1	; 5
     9e0:	17 b8       	out	0x07, r1	; 7
     9e2:	88 b9       	out	0x08, r24	; 8
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	77 de       	rcall	.-786    	; 0x6d6 <MotorSecPulse>
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	82 df       	rcall	.-252    	; 0x8f0 <Motor2SecPulse>
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	6b dd       	rcall	.-1322   	; 0x4c6 <StartARMPulse>
     9f0:	81 e0       	ldi	r24, 0x01	; 1
     9f2:	c1 dc       	rcall	.-1662   	; 0x376 <StartTempPulse>
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	cd df       	rcall	.-102    	; 0x992 <TransSecPulse>
     9f8:	84 d2       	rcall	.+1288   	; 0xf02 <vTaskStartScheduler>
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	08 95       	ret

00000a00 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     a00:	31 e1       	ldi	r19, 0x11	; 17
     a02:	fc 01       	movw	r30, r24
     a04:	30 83       	st	Z, r19
     a06:	31 97       	sbiw	r30, 0x01	; 1
     a08:	22 e2       	ldi	r18, 0x22	; 34
     a0a:	20 83       	st	Z, r18
     a0c:	31 97       	sbiw	r30, 0x01	; 1
     a0e:	a3 e3       	ldi	r26, 0x33	; 51
     a10:	a0 83       	st	Z, r26
     a12:	31 97       	sbiw	r30, 0x01	; 1
     a14:	60 83       	st	Z, r22
     a16:	31 97       	sbiw	r30, 0x01	; 1
     a18:	70 83       	st	Z, r23
     a1a:	31 97       	sbiw	r30, 0x01	; 1
     a1c:	10 82       	st	Z, r1
     a1e:	31 97       	sbiw	r30, 0x01	; 1
     a20:	60 e8       	ldi	r22, 0x80	; 128
     a22:	60 83       	st	Z, r22
     a24:	31 97       	sbiw	r30, 0x01	; 1
     a26:	10 82       	st	Z, r1
     a28:	31 97       	sbiw	r30, 0x01	; 1
     a2a:	62 e0       	ldi	r22, 0x02	; 2
     a2c:	60 83       	st	Z, r22
     a2e:	31 97       	sbiw	r30, 0x01	; 1
     a30:	63 e0       	ldi	r22, 0x03	; 3
     a32:	60 83       	st	Z, r22
     a34:	31 97       	sbiw	r30, 0x01	; 1
     a36:	64 e0       	ldi	r22, 0x04	; 4
     a38:	60 83       	st	Z, r22
     a3a:	31 97       	sbiw	r30, 0x01	; 1
     a3c:	65 e0       	ldi	r22, 0x05	; 5
     a3e:	60 83       	st	Z, r22
     a40:	31 97       	sbiw	r30, 0x01	; 1
     a42:	66 e0       	ldi	r22, 0x06	; 6
     a44:	60 83       	st	Z, r22
     a46:	31 97       	sbiw	r30, 0x01	; 1
     a48:	67 e0       	ldi	r22, 0x07	; 7
     a4a:	60 83       	st	Z, r22
     a4c:	31 97       	sbiw	r30, 0x01	; 1
     a4e:	68 e0       	ldi	r22, 0x08	; 8
     a50:	60 83       	st	Z, r22
     a52:	31 97       	sbiw	r30, 0x01	; 1
     a54:	69 e0       	ldi	r22, 0x09	; 9
     a56:	60 83       	st	Z, r22
     a58:	31 97       	sbiw	r30, 0x01	; 1
     a5a:	60 e1       	ldi	r22, 0x10	; 16
     a5c:	60 83       	st	Z, r22
     a5e:	31 97       	sbiw	r30, 0x01	; 1
     a60:	30 83       	st	Z, r19
     a62:	31 97       	sbiw	r30, 0x01	; 1
     a64:	32 e1       	ldi	r19, 0x12	; 18
     a66:	30 83       	st	Z, r19
     a68:	31 97       	sbiw	r30, 0x01	; 1
     a6a:	33 e1       	ldi	r19, 0x13	; 19
     a6c:	30 83       	st	Z, r19
     a6e:	31 97       	sbiw	r30, 0x01	; 1
     a70:	34 e1       	ldi	r19, 0x14	; 20
     a72:	30 83       	st	Z, r19
     a74:	31 97       	sbiw	r30, 0x01	; 1
     a76:	35 e1       	ldi	r19, 0x15	; 21
     a78:	30 83       	st	Z, r19
     a7a:	31 97       	sbiw	r30, 0x01	; 1
     a7c:	36 e1       	ldi	r19, 0x16	; 22
     a7e:	30 83       	st	Z, r19
     a80:	31 97       	sbiw	r30, 0x01	; 1
     a82:	37 e1       	ldi	r19, 0x17	; 23
     a84:	30 83       	st	Z, r19
     a86:	31 97       	sbiw	r30, 0x01	; 1
     a88:	38 e1       	ldi	r19, 0x18	; 24
     a8a:	30 83       	st	Z, r19
     a8c:	31 97       	sbiw	r30, 0x01	; 1
     a8e:	39 e1       	ldi	r19, 0x19	; 25
     a90:	30 83       	st	Z, r19
     a92:	31 97       	sbiw	r30, 0x01	; 1
     a94:	30 e2       	ldi	r19, 0x20	; 32
     a96:	30 83       	st	Z, r19
     a98:	31 97       	sbiw	r30, 0x01	; 1
     a9a:	31 e2       	ldi	r19, 0x21	; 33
     a9c:	30 83       	st	Z, r19
     a9e:	31 97       	sbiw	r30, 0x01	; 1
     aa0:	20 83       	st	Z, r18
     aa2:	31 97       	sbiw	r30, 0x01	; 1
     aa4:	23 e2       	ldi	r18, 0x23	; 35
     aa6:	20 83       	st	Z, r18
     aa8:	31 97       	sbiw	r30, 0x01	; 1
     aaa:	40 83       	st	Z, r20
     aac:	31 97       	sbiw	r30, 0x01	; 1
     aae:	50 83       	st	Z, r21
     ab0:	31 97       	sbiw	r30, 0x01	; 1
     ab2:	26 e2       	ldi	r18, 0x26	; 38
     ab4:	20 83       	st	Z, r18
     ab6:	31 97       	sbiw	r30, 0x01	; 1
     ab8:	27 e2       	ldi	r18, 0x27	; 39
     aba:	20 83       	st	Z, r18
     abc:	31 97       	sbiw	r30, 0x01	; 1
     abe:	28 e2       	ldi	r18, 0x28	; 40
     ac0:	20 83       	st	Z, r18
     ac2:	31 97       	sbiw	r30, 0x01	; 1
     ac4:	29 e2       	ldi	r18, 0x29	; 41
     ac6:	20 83       	st	Z, r18
     ac8:	31 97       	sbiw	r30, 0x01	; 1
     aca:	20 e3       	ldi	r18, 0x30	; 48
     acc:	20 83       	st	Z, r18
     ace:	31 97       	sbiw	r30, 0x01	; 1
     ad0:	21 e3       	ldi	r18, 0x31	; 49
     ad2:	20 83       	st	Z, r18
     ad4:	86 97       	sbiw	r24, 0x26	; 38
     ad6:	08 95       	ret

00000ad8 <xPortStartScheduler>:
     ad8:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     adc:	8c e7       	ldi	r24, 0x7C	; 124
     ade:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     ae2:	8b e0       	ldi	r24, 0x0B	; 11
     ae4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     ae8:	ef e6       	ldi	r30, 0x6F	; 111
     aea:	f0 e0       	ldi	r31, 0x00	; 0
     aec:	80 81       	ld	r24, Z
     aee:	82 60       	ori	r24, 0x02	; 2
     af0:	80 83       	st	Z, r24
     af2:	a0 91 ae 07 	lds	r26, 0x07AE	; 0x8007ae <pxCurrentTCB>
     af6:	b0 91 af 07 	lds	r27, 0x07AF	; 0x8007af <pxCurrentTCB+0x1>
     afa:	cd 91       	ld	r28, X+
     afc:	cd bf       	out	0x3d, r28	; 61
     afe:	dd 91       	ld	r29, X+
     b00:	de bf       	out	0x3e, r29	; 62
     b02:	ff 91       	pop	r31
     b04:	ef 91       	pop	r30
     b06:	df 91       	pop	r29
     b08:	cf 91       	pop	r28
     b0a:	bf 91       	pop	r27
     b0c:	af 91       	pop	r26
     b0e:	9f 91       	pop	r25
     b10:	8f 91       	pop	r24
     b12:	7f 91       	pop	r23
     b14:	6f 91       	pop	r22
     b16:	5f 91       	pop	r21
     b18:	4f 91       	pop	r20
     b1a:	3f 91       	pop	r19
     b1c:	2f 91       	pop	r18
     b1e:	1f 91       	pop	r17
     b20:	0f 91       	pop	r16
     b22:	ff 90       	pop	r15
     b24:	ef 90       	pop	r14
     b26:	df 90       	pop	r13
     b28:	cf 90       	pop	r12
     b2a:	bf 90       	pop	r11
     b2c:	af 90       	pop	r10
     b2e:	9f 90       	pop	r9
     b30:	8f 90       	pop	r8
     b32:	7f 90       	pop	r7
     b34:	6f 90       	pop	r6
     b36:	5f 90       	pop	r5
     b38:	4f 90       	pop	r4
     b3a:	3f 90       	pop	r3
     b3c:	2f 90       	pop	r2
     b3e:	1f 90       	pop	r1
     b40:	0f 90       	pop	r0
     b42:	0f be       	out	0x3f, r0	; 63
     b44:	0f 90       	pop	r0
     b46:	08 95       	ret
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	08 95       	ret

00000b4c <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     b4c:	0f 92       	push	r0
     b4e:	0f b6       	in	r0, 0x3f	; 63
     b50:	f8 94       	cli
     b52:	0f 92       	push	r0
     b54:	1f 92       	push	r1
     b56:	11 24       	eor	r1, r1
     b58:	2f 92       	push	r2
     b5a:	3f 92       	push	r3
     b5c:	4f 92       	push	r4
     b5e:	5f 92       	push	r5
     b60:	6f 92       	push	r6
     b62:	7f 92       	push	r7
     b64:	8f 92       	push	r8
     b66:	9f 92       	push	r9
     b68:	af 92       	push	r10
     b6a:	bf 92       	push	r11
     b6c:	cf 92       	push	r12
     b6e:	df 92       	push	r13
     b70:	ef 92       	push	r14
     b72:	ff 92       	push	r15
     b74:	0f 93       	push	r16
     b76:	1f 93       	push	r17
     b78:	2f 93       	push	r18
     b7a:	3f 93       	push	r19
     b7c:	4f 93       	push	r20
     b7e:	5f 93       	push	r21
     b80:	6f 93       	push	r22
     b82:	7f 93       	push	r23
     b84:	8f 93       	push	r24
     b86:	9f 93       	push	r25
     b88:	af 93       	push	r26
     b8a:	bf 93       	push	r27
     b8c:	cf 93       	push	r28
     b8e:	df 93       	push	r29
     b90:	ef 93       	push	r30
     b92:	ff 93       	push	r31
     b94:	a0 91 ae 07 	lds	r26, 0x07AE	; 0x8007ae <pxCurrentTCB>
     b98:	b0 91 af 07 	lds	r27, 0x07AF	; 0x8007af <pxCurrentTCB+0x1>
     b9c:	0d b6       	in	r0, 0x3d	; 61
     b9e:	0d 92       	st	X+, r0
     ba0:	0e b6       	in	r0, 0x3e	; 62
	vTaskSwitchContext();
     ba2:	0d 92       	st	X+, r0
	portRESTORE_CONTEXT();
     ba4:	75 d3       	rcall	.+1770   	; 0x1290 <vTaskSwitchContext>
     ba6:	a0 91 ae 07 	lds	r26, 0x07AE	; 0x8007ae <pxCurrentTCB>
     baa:	b0 91 af 07 	lds	r27, 0x07AF	; 0x8007af <pxCurrentTCB+0x1>
     bae:	cd 91       	ld	r28, X+
     bb0:	cd bf       	out	0x3d, r28	; 61
     bb2:	dd 91       	ld	r29, X+
     bb4:	de bf       	out	0x3e, r29	; 62
     bb6:	ff 91       	pop	r31
     bb8:	ef 91       	pop	r30
     bba:	df 91       	pop	r29
     bbc:	cf 91       	pop	r28
     bbe:	bf 91       	pop	r27
     bc0:	af 91       	pop	r26
     bc2:	9f 91       	pop	r25
     bc4:	8f 91       	pop	r24
     bc6:	7f 91       	pop	r23
     bc8:	6f 91       	pop	r22
     bca:	5f 91       	pop	r21
     bcc:	4f 91       	pop	r20
     bce:	3f 91       	pop	r19
     bd0:	2f 91       	pop	r18
     bd2:	1f 91       	pop	r17
     bd4:	0f 91       	pop	r16
     bd6:	ff 90       	pop	r15
     bd8:	ef 90       	pop	r14
     bda:	df 90       	pop	r13
     bdc:	cf 90       	pop	r12
     bde:	bf 90       	pop	r11
     be0:	af 90       	pop	r10
     be2:	9f 90       	pop	r9
     be4:	8f 90       	pop	r8
     be6:	7f 90       	pop	r7
     be8:	6f 90       	pop	r6
     bea:	5f 90       	pop	r5
     bec:	4f 90       	pop	r4
     bee:	3f 90       	pop	r3
     bf0:	2f 90       	pop	r2
     bf2:	1f 90       	pop	r1
     bf4:	0f 90       	pop	r0
     bf6:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
     bf8:	0f 90       	pop	r0
     bfa:	08 95       	ret

00000bfc <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     bfc:	0f 92       	push	r0
     bfe:	0f b6       	in	r0, 0x3f	; 63
     c00:	f8 94       	cli
     c02:	0f 92       	push	r0
     c04:	1f 92       	push	r1
     c06:	11 24       	eor	r1, r1
     c08:	2f 92       	push	r2
     c0a:	3f 92       	push	r3
     c0c:	4f 92       	push	r4
     c0e:	5f 92       	push	r5
     c10:	6f 92       	push	r6
     c12:	7f 92       	push	r7
     c14:	8f 92       	push	r8
     c16:	9f 92       	push	r9
     c18:	af 92       	push	r10
     c1a:	bf 92       	push	r11
     c1c:	cf 92       	push	r12
     c1e:	df 92       	push	r13
     c20:	ef 92       	push	r14
     c22:	ff 92       	push	r15
     c24:	0f 93       	push	r16
     c26:	1f 93       	push	r17
     c28:	2f 93       	push	r18
     c2a:	3f 93       	push	r19
     c2c:	4f 93       	push	r20
     c2e:	5f 93       	push	r21
     c30:	6f 93       	push	r22
     c32:	7f 93       	push	r23
     c34:	8f 93       	push	r24
     c36:	9f 93       	push	r25
     c38:	af 93       	push	r26
     c3a:	bf 93       	push	r27
     c3c:	cf 93       	push	r28
     c3e:	df 93       	push	r29
     c40:	ef 93       	push	r30
     c42:	ff 93       	push	r31
     c44:	a0 91 ae 07 	lds	r26, 0x07AE	; 0x8007ae <pxCurrentTCB>
     c48:	b0 91 af 07 	lds	r27, 0x07AF	; 0x8007af <pxCurrentTCB+0x1>
     c4c:	0d b6       	in	r0, 0x3d	; 61
     c4e:	0d 92       	st	X+, r0
     c50:	0e b6       	in	r0, 0x3e	; 62
	vTaskIncrementTick();
	vTaskSwitchContext();
     c52:	0d 92       	st	X+, r0
     c54:	85 d1       	rcall	.+778    	; 0xf60 <vTaskIncrementTick>
	portRESTORE_CONTEXT();
     c56:	1c d3       	rcall	.+1592   	; 0x1290 <vTaskSwitchContext>
     c58:	a0 91 ae 07 	lds	r26, 0x07AE	; 0x8007ae <pxCurrentTCB>
     c5c:	b0 91 af 07 	lds	r27, 0x07AF	; 0x8007af <pxCurrentTCB+0x1>
     c60:	cd 91       	ld	r28, X+
     c62:	cd bf       	out	0x3d, r28	; 61
     c64:	dd 91       	ld	r29, X+
     c66:	de bf       	out	0x3e, r29	; 62
     c68:	ff 91       	pop	r31
     c6a:	ef 91       	pop	r30
     c6c:	df 91       	pop	r29
     c6e:	cf 91       	pop	r28
     c70:	bf 91       	pop	r27
     c72:	af 91       	pop	r26
     c74:	9f 91       	pop	r25
     c76:	8f 91       	pop	r24
     c78:	7f 91       	pop	r23
     c7a:	6f 91       	pop	r22
     c7c:	5f 91       	pop	r21
     c7e:	4f 91       	pop	r20
     c80:	3f 91       	pop	r19
     c82:	2f 91       	pop	r18
     c84:	1f 91       	pop	r17
     c86:	0f 91       	pop	r16
     c88:	ff 90       	pop	r15
     c8a:	ef 90       	pop	r14
     c8c:	df 90       	pop	r13
     c8e:	cf 90       	pop	r12
     c90:	bf 90       	pop	r11
     c92:	af 90       	pop	r10
     c94:	9f 90       	pop	r9
     c96:	8f 90       	pop	r8
     c98:	7f 90       	pop	r7
     c9a:	6f 90       	pop	r6
     c9c:	5f 90       	pop	r5
     c9e:	4f 90       	pop	r4
     ca0:	3f 90       	pop	r3
     ca2:	2f 90       	pop	r2
     ca4:	1f 90       	pop	r1
     ca6:	0f 90       	pop	r0
     ca8:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
     caa:	0f 90       	pop	r0
     cac:	08 95       	ret

00000cae <__vector_13>:
     cae:	a6 df       	rcall	.-180    	; 0xbfc <vPortYieldFromTick>
     cb0:	18 95       	reti

00000cb2 <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
     cb2:	cf 93       	push	r28
     cb4:	df 93       	push	r29
     cb6:	ec 01       	movw	r28, r24
     cb8:	e0 91 ae 07 	lds	r30, 0x07AE	; 0x8007ae <pxCurrentTCB>
     cbc:	f0 91 af 07 	lds	r31, 0x07AF	; 0x8007af <pxCurrentTCB+0x1>
     cc0:	93 83       	std	Z+3, r25	; 0x03
     cc2:	82 83       	std	Z+2, r24	; 0x02
     cc4:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <xTickCount>
     cc8:	90 91 5f 07 	lds	r25, 0x075F	; 0x80075f <xTickCount+0x1>
     ccc:	c8 17       	cp	r28, r24
     cce:	d9 07       	cpc	r29, r25
     cd0:	60 f4       	brcc	.+24     	; 0xcea <prvAddCurrentTaskToDelayedList+0x38>
     cd2:	60 91 ae 07 	lds	r22, 0x07AE	; 0x8007ae <pxCurrentTCB>
     cd6:	70 91 af 07 	lds	r23, 0x07AF	; 0x8007af <pxCurrentTCB+0x1>
     cda:	80 91 74 07 	lds	r24, 0x0774	; 0x800774 <pxOverflowDelayedTaskList>
     cde:	90 91 75 07 	lds	r25, 0x0775	; 0x800775 <pxOverflowDelayedTaskList+0x1>
     ce2:	6e 5f       	subi	r22, 0xFE	; 254
     ce4:	7f 4f       	sbci	r23, 0xFF	; 255
     ce6:	4f da       	rcall	.-2914   	; 0x186 <vListInsert>
     ce8:	16 c0       	rjmp	.+44     	; 0xd16 <prvAddCurrentTaskToDelayedList+0x64>
     cea:	60 91 ae 07 	lds	r22, 0x07AE	; 0x8007ae <pxCurrentTCB>
     cee:	70 91 af 07 	lds	r23, 0x07AF	; 0x8007af <pxCurrentTCB+0x1>
     cf2:	80 91 76 07 	lds	r24, 0x0776	; 0x800776 <pxDelayedTaskList>
     cf6:	90 91 77 07 	lds	r25, 0x0777	; 0x800777 <pxDelayedTaskList+0x1>
     cfa:	6e 5f       	subi	r22, 0xFE	; 254
     cfc:	7f 4f       	sbci	r23, 0xFF	; 255
     cfe:	43 da       	rcall	.-2938   	; 0x186 <vListInsert>
     d00:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <xNextTaskUnblockTime>
     d04:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <xNextTaskUnblockTime+0x1>
     d08:	c8 17       	cp	r28, r24
     d0a:	d9 07       	cpc	r29, r25
     d0c:	20 f4       	brcc	.+8      	; 0xd16 <prvAddCurrentTaskToDelayedList+0x64>
     d0e:	d0 93 15 01 	sts	0x0115, r29	; 0x800115 <xNextTaskUnblockTime+0x1>
     d12:	c0 93 14 01 	sts	0x0114, r28	; 0x800114 <xNextTaskUnblockTime>
     d16:	df 91       	pop	r29
     d18:	cf 91       	pop	r28
     d1a:	08 95       	ret

00000d1c <xTaskGenericCreate>:
     d1c:	4f 92       	push	r4
     d1e:	5f 92       	push	r5
     d20:	6f 92       	push	r6
     d22:	7f 92       	push	r7
     d24:	8f 92       	push	r8
     d26:	9f 92       	push	r9
     d28:	af 92       	push	r10
     d2a:	bf 92       	push	r11
     d2c:	cf 92       	push	r12
     d2e:	df 92       	push	r13
     d30:	ef 92       	push	r14
     d32:	ff 92       	push	r15
     d34:	0f 93       	push	r16
     d36:	1f 93       	push	r17
     d38:	cf 93       	push	r28
     d3a:	df 93       	push	r29
     d3c:	5c 01       	movw	r10, r24
     d3e:	4b 01       	movw	r8, r22
     d40:	3a 01       	movw	r6, r20
     d42:	29 01       	movw	r4, r18
     d44:	81 e2       	ldi	r24, 0x21	; 33
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	c0 d9       	rcall	.-3200   	; 0xca <pvPortMalloc>
     d4a:	ec 01       	movw	r28, r24
     d4c:	89 2b       	or	r24, r25
     d4e:	09 f4       	brne	.+2      	; 0xd52 <xTaskGenericCreate+0x36>
     d50:	c6 c0       	rjmp	.+396    	; 0xede <xTaskGenericCreate+0x1c2>
     d52:	c1 14       	cp	r12, r1
     d54:	d1 04       	cpc	r13, r1
     d56:	09 f0       	breq	.+2      	; 0xd5a <xTaskGenericCreate+0x3e>
     d58:	be c0       	rjmp	.+380    	; 0xed6 <xTaskGenericCreate+0x1ba>
     d5a:	c3 01       	movw	r24, r6
     d5c:	b6 d9       	rcall	.-3220   	; 0xca <pvPortMalloc>
     d5e:	98 8f       	std	Y+24, r25	; 0x18
     d60:	8f 8b       	std	Y+23, r24	; 0x17
     d62:	00 97       	sbiw	r24, 0x00	; 0
     d64:	19 f4       	brne	.+6      	; 0xd6c <xTaskGenericCreate+0x50>
     d66:	ce 01       	movw	r24, r28
     d68:	d4 d9       	rcall	.-3160   	; 0x112 <vPortFree>
     d6a:	b9 c0       	rjmp	.+370    	; 0xede <xTaskGenericCreate+0x1c2>
     d6c:	a3 01       	movw	r20, r6
     d6e:	65 ea       	ldi	r22, 0xA5	; 165
     d70:	70 e0       	ldi	r23, 0x00	; 0
     d72:	09 d3       	rcall	.+1554   	; 0x1386 <memset>
     d74:	93 01       	movw	r18, r6
     d76:	21 50       	subi	r18, 0x01	; 1
     d78:	31 09       	sbc	r19, r1
     d7a:	8f 89       	ldd	r24, Y+23	; 0x17
     d7c:	98 8d       	ldd	r25, Y+24	; 0x18
     d7e:	3c 01       	movw	r6, r24
     d80:	62 0e       	add	r6, r18
     d82:	73 1e       	adc	r7, r19
     d84:	48 e0       	ldi	r20, 0x08	; 8
     d86:	50 e0       	ldi	r21, 0x00	; 0
     d88:	b4 01       	movw	r22, r8
     d8a:	ce 01       	movw	r24, r28
     d8c:	49 96       	adiw	r24, 0x19	; 25
     d8e:	02 d3       	rcall	.+1540   	; 0x1394 <strncpy>
     d90:	18 a2       	std	Y+32, r1	; 0x20
     d92:	10 2f       	mov	r17, r16
     d94:	04 30       	cpi	r16, 0x04	; 4
     d96:	08 f0       	brcs	.+2      	; 0xd9a <xTaskGenericCreate+0x7e>
     d98:	13 e0       	ldi	r17, 0x03	; 3
     d9a:	1e 8b       	std	Y+22, r17	; 0x16
     d9c:	6e 01       	movw	r12, r28
     d9e:	82 e0       	ldi	r24, 0x02	; 2
     da0:	c8 0e       	add	r12, r24
     da2:	d1 1c       	adc	r13, r1
     da4:	c6 01       	movw	r24, r12
     da6:	c4 d9       	rcall	.-3192   	; 0x130 <vListInitialiseItem>
     da8:	ce 01       	movw	r24, r28
     daa:	0c 96       	adiw	r24, 0x0c	; 12
     dac:	c1 d9       	rcall	.-3198   	; 0x130 <vListInitialiseItem>
     dae:	d9 87       	std	Y+9, r29	; 0x09
     db0:	c8 87       	std	Y+8, r28	; 0x08
     db2:	84 e0       	ldi	r24, 0x04	; 4
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	81 1b       	sub	r24, r17
     db8:	91 09       	sbc	r25, r1
     dba:	9d 87       	std	Y+13, r25	; 0x0d
     dbc:	8c 87       	std	Y+12, r24	; 0x0c
     dbe:	db 8b       	std	Y+19, r29	; 0x13
     dc0:	ca 8b       	std	Y+18, r28	; 0x12
     dc2:	a2 01       	movw	r20, r4
     dc4:	b5 01       	movw	r22, r10
     dc6:	c3 01       	movw	r24, r6
     dc8:	1b de       	rcall	.-970    	; 0xa00 <pxPortInitialiseStack>
     dca:	99 83       	std	Y+1, r25	; 0x01
     dcc:	88 83       	st	Y, r24
     dce:	e1 14       	cp	r14, r1
     dd0:	f1 04       	cpc	r15, r1
     dd2:	19 f0       	breq	.+6      	; 0xdda <xTaskGenericCreate+0xbe>
     dd4:	f7 01       	movw	r30, r14
     dd6:	d1 83       	std	Z+1, r29	; 0x01
     dd8:	c0 83       	st	Z, r28
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	f8 94       	cli
     dde:	0f 92       	push	r0
     de0:	80 91 60 07 	lds	r24, 0x0760	; 0x800760 <uxCurrentNumberOfTasks>
     de4:	8f 5f       	subi	r24, 0xFF	; 255
     de6:	80 93 60 07 	sts	0x0760, r24	; 0x800760 <uxCurrentNumberOfTasks>
     dea:	80 91 ae 07 	lds	r24, 0x07AE	; 0x8007ae <pxCurrentTCB>
     dee:	90 91 af 07 	lds	r25, 0x07AF	; 0x8007af <pxCurrentTCB+0x1>
     df2:	89 2b       	or	r24, r25
     df4:	69 f5       	brne	.+90     	; 0xe50 <xTaskGenericCreate+0x134>
     df6:	d0 93 af 07 	sts	0x07AF, r29	; 0x8007af <pxCurrentTCB+0x1>
     dfa:	c0 93 ae 07 	sts	0x07AE, r28	; 0x8007ae <pxCurrentTCB>
     dfe:	80 91 60 07 	lds	r24, 0x0760	; 0x800760 <uxCurrentNumberOfTasks>
     e02:	81 30       	cpi	r24, 0x01	; 1
     e04:	a1 f5       	brne	.+104    	; 0xe6e <xTaskGenericCreate+0x152>
     e06:	8a e8       	ldi	r24, 0x8A	; 138
     e08:	97 e0       	ldi	r25, 0x07	; 7
     e0a:	84 d9       	rcall	.-3320   	; 0x114 <vListInitialise>
     e0c:	83 e9       	ldi	r24, 0x93	; 147
     e0e:	97 e0       	ldi	r25, 0x07	; 7
     e10:	81 d9       	rcall	.-3326   	; 0x114 <vListInitialise>
     e12:	8c e9       	ldi	r24, 0x9C	; 156
     e14:	97 e0       	ldi	r25, 0x07	; 7
     e16:	7e d9       	rcall	.-3332   	; 0x114 <vListInitialise>
     e18:	85 ea       	ldi	r24, 0xA5	; 165
     e1a:	97 e0       	ldi	r25, 0x07	; 7
     e1c:	7b d9       	rcall	.-3338   	; 0x114 <vListInitialise>
     e1e:	81 e8       	ldi	r24, 0x81	; 129
     e20:	97 e0       	ldi	r25, 0x07	; 7
     e22:	78 d9       	rcall	.-3344   	; 0x114 <vListInitialise>
     e24:	88 e7       	ldi	r24, 0x78	; 120
     e26:	97 e0       	ldi	r25, 0x07	; 7
     e28:	75 d9       	rcall	.-3350   	; 0x114 <vListInitialise>
     e2a:	8b e6       	ldi	r24, 0x6B	; 107
     e2c:	97 e0       	ldi	r25, 0x07	; 7
     e2e:	72 d9       	rcall	.-3356   	; 0x114 <vListInitialise>
     e30:	82 e6       	ldi	r24, 0x62	; 98
     e32:	97 e0       	ldi	r25, 0x07	; 7
     e34:	6f d9       	rcall	.-3362   	; 0x114 <vListInitialise>
     e36:	81 e8       	ldi	r24, 0x81	; 129
     e38:	97 e0       	ldi	r25, 0x07	; 7
     e3a:	90 93 77 07 	sts	0x0777, r25	; 0x800777 <pxDelayedTaskList+0x1>
     e3e:	80 93 76 07 	sts	0x0776, r24	; 0x800776 <pxDelayedTaskList>
     e42:	88 e7       	ldi	r24, 0x78	; 120
     e44:	97 e0       	ldi	r25, 0x07	; 7
     e46:	90 93 75 07 	sts	0x0775, r25	; 0x800775 <pxOverflowDelayedTaskList+0x1>
     e4a:	80 93 74 07 	sts	0x0774, r24	; 0x800774 <pxOverflowDelayedTaskList>
     e4e:	0f c0       	rjmp	.+30     	; 0xe6e <xTaskGenericCreate+0x152>
     e50:	80 91 5b 07 	lds	r24, 0x075B	; 0x80075b <xSchedulerRunning>
     e54:	81 11       	cpse	r24, r1
     e56:	0b c0       	rjmp	.+22     	; 0xe6e <xTaskGenericCreate+0x152>
     e58:	e0 91 ae 07 	lds	r30, 0x07AE	; 0x8007ae <pxCurrentTCB>
     e5c:	f0 91 af 07 	lds	r31, 0x07AF	; 0x8007af <pxCurrentTCB+0x1>
     e60:	86 89       	ldd	r24, Z+22	; 0x16
     e62:	08 17       	cp	r16, r24
     e64:	20 f0       	brcs	.+8      	; 0xe6e <xTaskGenericCreate+0x152>
     e66:	d0 93 af 07 	sts	0x07AF, r29	; 0x8007af <pxCurrentTCB+0x1>
     e6a:	c0 93 ae 07 	sts	0x07AE, r28	; 0x8007ae <pxCurrentTCB>
     e6e:	8e 89       	ldd	r24, Y+22	; 0x16
     e70:	90 91 5d 07 	lds	r25, 0x075D	; 0x80075d <uxTopUsedPriority>
     e74:	98 17       	cp	r25, r24
     e76:	10 f4       	brcc	.+4      	; 0xe7c <xTaskGenericCreate+0x160>
     e78:	80 93 5d 07 	sts	0x075D, r24	; 0x80075d <uxTopUsedPriority>
     e7c:	90 91 56 07 	lds	r25, 0x0756	; 0x800756 <uxTaskNumber>
     e80:	9f 5f       	subi	r25, 0xFF	; 255
     e82:	90 93 56 07 	sts	0x0756, r25	; 0x800756 <uxTaskNumber>
     e86:	90 91 5c 07 	lds	r25, 0x075C	; 0x80075c <uxTopReadyPriority>
     e8a:	98 17       	cp	r25, r24
     e8c:	10 f4       	brcc	.+4      	; 0xe92 <xTaskGenericCreate+0x176>
     e8e:	80 93 5c 07 	sts	0x075C, r24	; 0x80075c <uxTopReadyPriority>
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	9c 01       	movw	r18, r24
     e96:	22 0f       	add	r18, r18
     e98:	33 1f       	adc	r19, r19
     e9a:	22 0f       	add	r18, r18
     e9c:	33 1f       	adc	r19, r19
     e9e:	22 0f       	add	r18, r18
     ea0:	33 1f       	adc	r19, r19
     ea2:	82 0f       	add	r24, r18
     ea4:	93 1f       	adc	r25, r19
     ea6:	b6 01       	movw	r22, r12
     ea8:	86 57       	subi	r24, 0x76	; 118
     eaa:	98 4f       	sbci	r25, 0xF8	; 248
     eac:	45 d9       	rcall	.-3446   	; 0x138 <vListInsertEnd>
     eae:	0f 90       	pop	r0
     eb0:	0f be       	out	0x3f, r0	; 63
     eb2:	80 91 5b 07 	lds	r24, 0x075B	; 0x80075b <xSchedulerRunning>
     eb6:	88 23       	and	r24, r24
     eb8:	51 f0       	breq	.+20     	; 0xece <xTaskGenericCreate+0x1b2>
     eba:	e0 91 ae 07 	lds	r30, 0x07AE	; 0x8007ae <pxCurrentTCB>
     ebe:	f0 91 af 07 	lds	r31, 0x07AF	; 0x8007af <pxCurrentTCB+0x1>
     ec2:	86 89       	ldd	r24, Z+22	; 0x16
     ec4:	80 17       	cp	r24, r16
     ec6:	28 f4       	brcc	.+10     	; 0xed2 <xTaskGenericCreate+0x1b6>
     ec8:	41 de       	rcall	.-894    	; 0xb4c <vPortYield>
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	09 c0       	rjmp	.+18     	; 0xee0 <xTaskGenericCreate+0x1c4>
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	07 c0       	rjmp	.+14     	; 0xee0 <xTaskGenericCreate+0x1c4>
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	05 c0       	rjmp	.+10     	; 0xee0 <xTaskGenericCreate+0x1c4>
     ed6:	d8 8e       	std	Y+24, r13	; 0x18
     ed8:	cf 8a       	std	Y+23, r12	; 0x17
     eda:	c6 01       	movw	r24, r12
     edc:	47 cf       	rjmp	.-370    	; 0xd6c <xTaskGenericCreate+0x50>
     ede:	8f ef       	ldi	r24, 0xFF	; 255
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	1f 91       	pop	r17
     ee6:	0f 91       	pop	r16
     ee8:	ff 90       	pop	r15
     eea:	ef 90       	pop	r14
     eec:	df 90       	pop	r13
     eee:	cf 90       	pop	r12
     ef0:	bf 90       	pop	r11
     ef2:	af 90       	pop	r10
     ef4:	9f 90       	pop	r9
     ef6:	8f 90       	pop	r8
     ef8:	7f 90       	pop	r7
     efa:	6f 90       	pop	r6
     efc:	5f 90       	pop	r5
     efe:	4f 90       	pop	r4
     f00:	08 95       	ret

00000f02 <vTaskStartScheduler>:
     f02:	af 92       	push	r10
     f04:	bf 92       	push	r11
     f06:	cf 92       	push	r12
     f08:	df 92       	push	r13
     f0a:	ef 92       	push	r14
     f0c:	ff 92       	push	r15
     f0e:	0f 93       	push	r16
     f10:	a1 2c       	mov	r10, r1
     f12:	b1 2c       	mov	r11, r1
     f14:	c1 2c       	mov	r12, r1
     f16:	d1 2c       	mov	r13, r1
     f18:	e1 2c       	mov	r14, r1
     f1a:	f1 2c       	mov	r15, r1
     f1c:	00 e0       	ldi	r16, 0x00	; 0
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	45 e5       	ldi	r20, 0x55	; 85
     f24:	50 e0       	ldi	r21, 0x00	; 0
     f26:	61 e6       	ldi	r22, 0x61	; 97
     f28:	71 e0       	ldi	r23, 0x01	; 1
     f2a:	8f e0       	ldi	r24, 0x0F	; 15
     f2c:	99 e0       	ldi	r25, 0x09	; 9
     f2e:	f6 de       	rcall	.-532    	; 0xd1c <xTaskGenericCreate>
     f30:	81 30       	cpi	r24, 0x01	; 1
     f32:	41 f4       	brne	.+16     	; 0xf44 <vTaskStartScheduler+0x42>
     f34:	f8 94       	cli
     f36:	80 93 5b 07 	sts	0x075B, r24	; 0x80075b <xSchedulerRunning>
     f3a:	10 92 5f 07 	sts	0x075F, r1	; 0x80075f <xTickCount+0x1>
     f3e:	10 92 5e 07 	sts	0x075E, r1	; 0x80075e <xTickCount>
     f42:	ca dd       	rcall	.-1132   	; 0xad8 <xPortStartScheduler>
     f44:	0f 91       	pop	r16
     f46:	ff 90       	pop	r15
     f48:	ef 90       	pop	r14
     f4a:	df 90       	pop	r13
     f4c:	cf 90       	pop	r12
     f4e:	bf 90       	pop	r11
     f50:	af 90       	pop	r10
     f52:	08 95       	ret

00000f54 <vTaskSuspendAll>:
     f54:	80 91 5a 07 	lds	r24, 0x075A	; 0x80075a <uxSchedulerSuspended>
     f58:	8f 5f       	subi	r24, 0xFF	; 255
     f5a:	80 93 5a 07 	sts	0x075A, r24	; 0x80075a <uxSchedulerSuspended>
     f5e:	08 95       	ret

00000f60 <vTaskIncrementTick>:
     f60:	0f 93       	push	r16
     f62:	1f 93       	push	r17
     f64:	cf 93       	push	r28
     f66:	df 93       	push	r29
     f68:	80 91 5a 07 	lds	r24, 0x075A	; 0x80075a <uxSchedulerSuspended>
     f6c:	81 11       	cpse	r24, r1
     f6e:	af c0       	rjmp	.+350    	; 0x10ce <vTaskIncrementTick+0x16e>
     f70:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <xTickCount>
     f74:	90 91 5f 07 	lds	r25, 0x075F	; 0x80075f <xTickCount+0x1>
     f78:	01 96       	adiw	r24, 0x01	; 1
     f7a:	90 93 5f 07 	sts	0x075F, r25	; 0x80075f <xTickCount+0x1>
     f7e:	80 93 5e 07 	sts	0x075E, r24	; 0x80075e <xTickCount>
     f82:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <xTickCount>
     f86:	90 91 5f 07 	lds	r25, 0x075F	; 0x80075f <xTickCount+0x1>
     f8a:	89 2b       	or	r24, r25
     f8c:	99 f5       	brne	.+102    	; 0xff4 <vTaskIncrementTick+0x94>
     f8e:	80 91 76 07 	lds	r24, 0x0776	; 0x800776 <pxDelayedTaskList>
     f92:	90 91 77 07 	lds	r25, 0x0777	; 0x800777 <pxDelayedTaskList+0x1>
     f96:	20 91 74 07 	lds	r18, 0x0774	; 0x800774 <pxOverflowDelayedTaskList>
     f9a:	30 91 75 07 	lds	r19, 0x0775	; 0x800775 <pxOverflowDelayedTaskList+0x1>
     f9e:	30 93 77 07 	sts	0x0777, r19	; 0x800777 <pxDelayedTaskList+0x1>
     fa2:	20 93 76 07 	sts	0x0776, r18	; 0x800776 <pxDelayedTaskList>
     fa6:	90 93 75 07 	sts	0x0775, r25	; 0x800775 <pxOverflowDelayedTaskList+0x1>
     faa:	80 93 74 07 	sts	0x0774, r24	; 0x800774 <pxOverflowDelayedTaskList>
     fae:	80 91 57 07 	lds	r24, 0x0757	; 0x800757 <xNumOfOverflows>
     fb2:	8f 5f       	subi	r24, 0xFF	; 255
     fb4:	80 93 57 07 	sts	0x0757, r24	; 0x800757 <xNumOfOverflows>
     fb8:	e0 91 76 07 	lds	r30, 0x0776	; 0x800776 <pxDelayedTaskList>
     fbc:	f0 91 77 07 	lds	r31, 0x0777	; 0x800777 <pxDelayedTaskList+0x1>
     fc0:	80 81       	ld	r24, Z
     fc2:	81 11       	cpse	r24, r1
     fc4:	07 c0       	rjmp	.+14     	; 0xfd4 <vTaskIncrementTick+0x74>
     fc6:	8f ef       	ldi	r24, 0xFF	; 255
     fc8:	9f ef       	ldi	r25, 0xFF	; 255
     fca:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <xNextTaskUnblockTime+0x1>
     fce:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <xNextTaskUnblockTime>
     fd2:	10 c0       	rjmp	.+32     	; 0xff4 <vTaskIncrementTick+0x94>
     fd4:	e0 91 76 07 	lds	r30, 0x0776	; 0x800776 <pxDelayedTaskList>
     fd8:	f0 91 77 07 	lds	r31, 0x0777	; 0x800777 <pxDelayedTaskList+0x1>
     fdc:	05 80       	ldd	r0, Z+5	; 0x05
     fde:	f6 81       	ldd	r31, Z+6	; 0x06
     fe0:	e0 2d       	mov	r30, r0
     fe2:	06 80       	ldd	r0, Z+6	; 0x06
     fe4:	f7 81       	ldd	r31, Z+7	; 0x07
     fe6:	e0 2d       	mov	r30, r0
     fe8:	82 81       	ldd	r24, Z+2	; 0x02
     fea:	93 81       	ldd	r25, Z+3	; 0x03
     fec:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <xNextTaskUnblockTime+0x1>
     ff0:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <xNextTaskUnblockTime>
     ff4:	20 91 5e 07 	lds	r18, 0x075E	; 0x80075e <xTickCount>
     ff8:	30 91 5f 07 	lds	r19, 0x075F	; 0x80075f <xTickCount+0x1>
     ffc:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <xNextTaskUnblockTime>
    1000:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <xNextTaskUnblockTime+0x1>
    1004:	28 17       	cp	r18, r24
    1006:	39 07       	cpc	r19, r25
    1008:	08 f4       	brcc	.+2      	; 0x100c <vTaskIncrementTick+0xac>
    100a:	66 c0       	rjmp	.+204    	; 0x10d8 <vTaskIncrementTick+0x178>
    100c:	e0 91 76 07 	lds	r30, 0x0776	; 0x800776 <pxDelayedTaskList>
    1010:	f0 91 77 07 	lds	r31, 0x0777	; 0x800777 <pxDelayedTaskList+0x1>
    1014:	80 81       	ld	r24, Z
    1016:	88 23       	and	r24, r24
    1018:	99 f0       	breq	.+38     	; 0x1040 <vTaskIncrementTick+0xe0>
    101a:	e0 91 76 07 	lds	r30, 0x0776	; 0x800776 <pxDelayedTaskList>
    101e:	f0 91 77 07 	lds	r31, 0x0777	; 0x800777 <pxDelayedTaskList+0x1>
    1022:	05 80       	ldd	r0, Z+5	; 0x05
    1024:	f6 81       	ldd	r31, Z+6	; 0x06
    1026:	e0 2d       	mov	r30, r0
    1028:	c6 81       	ldd	r28, Z+6	; 0x06
    102a:	d7 81       	ldd	r29, Z+7	; 0x07
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	9b 81       	ldd	r25, Y+3	; 0x03
    1030:	20 91 5e 07 	lds	r18, 0x075E	; 0x80075e <xTickCount>
    1034:	30 91 5f 07 	lds	r19, 0x075F	; 0x80075f <xTickCount+0x1>
    1038:	28 17       	cp	r18, r24
    103a:	39 07       	cpc	r19, r25
    103c:	f8 f4       	brcc	.+62     	; 0x107c <vTaskIncrementTick+0x11c>
    103e:	19 c0       	rjmp	.+50     	; 0x1072 <vTaskIncrementTick+0x112>
    1040:	8f ef       	ldi	r24, 0xFF	; 255
    1042:	9f ef       	ldi	r25, 0xFF	; 255
    1044:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <xNextTaskUnblockTime+0x1>
    1048:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <xNextTaskUnblockTime>
    104c:	45 c0       	rjmp	.+138    	; 0x10d8 <vTaskIncrementTick+0x178>
    104e:	e0 91 76 07 	lds	r30, 0x0776	; 0x800776 <pxDelayedTaskList>
    1052:	f0 91 77 07 	lds	r31, 0x0777	; 0x800777 <pxDelayedTaskList+0x1>
    1056:	05 80       	ldd	r0, Z+5	; 0x05
    1058:	f6 81       	ldd	r31, Z+6	; 0x06
    105a:	e0 2d       	mov	r30, r0
    105c:	c6 81       	ldd	r28, Z+6	; 0x06
    105e:	d7 81       	ldd	r29, Z+7	; 0x07
    1060:	8a 81       	ldd	r24, Y+2	; 0x02
    1062:	9b 81       	ldd	r25, Y+3	; 0x03
    1064:	20 91 5e 07 	lds	r18, 0x075E	; 0x80075e <xTickCount>
    1068:	30 91 5f 07 	lds	r19, 0x075F	; 0x80075f <xTickCount+0x1>
    106c:	28 17       	cp	r18, r24
    106e:	39 07       	cpc	r19, r25
    1070:	28 f4       	brcc	.+10     	; 0x107c <vTaskIncrementTick+0x11c>
    1072:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <xNextTaskUnblockTime+0x1>
    1076:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <xNextTaskUnblockTime>
    107a:	2e c0       	rjmp	.+92     	; 0x10d8 <vTaskIncrementTick+0x178>
    107c:	8e 01       	movw	r16, r28
    107e:	0e 5f       	subi	r16, 0xFE	; 254
    1080:	1f 4f       	sbci	r17, 0xFF	; 255
    1082:	c8 01       	movw	r24, r16
    1084:	bb d8       	rcall	.-3722   	; 0x1fc <vListRemove>
    1086:	8c 89       	ldd	r24, Y+20	; 0x14
    1088:	9d 89       	ldd	r25, Y+21	; 0x15
    108a:	89 2b       	or	r24, r25
    108c:	19 f0       	breq	.+6      	; 0x1094 <vTaskIncrementTick+0x134>
    108e:	ce 01       	movw	r24, r28
    1090:	0c 96       	adiw	r24, 0x0c	; 12
    1092:	b4 d8       	rcall	.-3736   	; 0x1fc <vListRemove>
    1094:	8e 89       	ldd	r24, Y+22	; 0x16
    1096:	90 91 5c 07 	lds	r25, 0x075C	; 0x80075c <uxTopReadyPriority>
    109a:	98 17       	cp	r25, r24
    109c:	10 f4       	brcc	.+4      	; 0x10a2 <vTaskIncrementTick+0x142>
    109e:	80 93 5c 07 	sts	0x075C, r24	; 0x80075c <uxTopReadyPriority>
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	9c 01       	movw	r18, r24
    10a6:	22 0f       	add	r18, r18
    10a8:	33 1f       	adc	r19, r19
    10aa:	22 0f       	add	r18, r18
    10ac:	33 1f       	adc	r19, r19
    10ae:	22 0f       	add	r18, r18
    10b0:	33 1f       	adc	r19, r19
    10b2:	82 0f       	add	r24, r18
    10b4:	93 1f       	adc	r25, r19
    10b6:	b8 01       	movw	r22, r16
    10b8:	86 57       	subi	r24, 0x76	; 118
    10ba:	98 4f       	sbci	r25, 0xF8	; 248
    10bc:	3d d8       	rcall	.-3974   	; 0x138 <vListInsertEnd>
    10be:	e0 91 76 07 	lds	r30, 0x0776	; 0x800776 <pxDelayedTaskList>
    10c2:	f0 91 77 07 	lds	r31, 0x0777	; 0x800777 <pxDelayedTaskList+0x1>
    10c6:	80 81       	ld	r24, Z
    10c8:	81 11       	cpse	r24, r1
    10ca:	c1 cf       	rjmp	.-126    	; 0x104e <vTaskIncrementTick+0xee>
    10cc:	b9 cf       	rjmp	.-142    	; 0x1040 <vTaskIncrementTick+0xe0>
    10ce:	80 91 59 07 	lds	r24, 0x0759	; 0x800759 <uxMissedTicks>
    10d2:	8f 5f       	subi	r24, 0xFF	; 255
    10d4:	80 93 59 07 	sts	0x0759, r24	; 0x800759 <uxMissedTicks>
    10d8:	df 91       	pop	r29
    10da:	cf 91       	pop	r28
    10dc:	1f 91       	pop	r17
    10de:	0f 91       	pop	r16
    10e0:	08 95       	ret

000010e2 <xTaskResumeAll>:
    10e2:	cf 92       	push	r12
    10e4:	df 92       	push	r13
    10e6:	ef 92       	push	r14
    10e8:	ff 92       	push	r15
    10ea:	0f 93       	push	r16
    10ec:	1f 93       	push	r17
    10ee:	cf 93       	push	r28
    10f0:	df 93       	push	r29
    10f2:	0f b6       	in	r0, 0x3f	; 63
    10f4:	f8 94       	cli
    10f6:	0f 92       	push	r0
    10f8:	80 91 5a 07 	lds	r24, 0x075A	; 0x80075a <uxSchedulerSuspended>
    10fc:	81 50       	subi	r24, 0x01	; 1
    10fe:	80 93 5a 07 	sts	0x075A, r24	; 0x80075a <uxSchedulerSuspended>
    1102:	80 91 5a 07 	lds	r24, 0x075A	; 0x80075a <uxSchedulerSuspended>
    1106:	81 11       	cpse	r24, r1
    1108:	60 c0       	rjmp	.+192    	; 0x11ca <xTaskResumeAll+0xe8>
    110a:	80 91 60 07 	lds	r24, 0x0760	; 0x800760 <uxCurrentNumberOfTasks>
    110e:	81 11       	cpse	r24, r1
    1110:	30 c0       	rjmp	.+96     	; 0x1172 <xTaskResumeAll+0x90>
    1112:	5e c0       	rjmp	.+188    	; 0x11d0 <xTaskResumeAll+0xee>
    1114:	d7 01       	movw	r26, r14
    1116:	15 96       	adiw	r26, 0x05	; 5
    1118:	ed 91       	ld	r30, X+
    111a:	fc 91       	ld	r31, X
    111c:	16 97       	sbiw	r26, 0x06	; 6
    111e:	c6 81       	ldd	r28, Z+6	; 0x06
    1120:	d7 81       	ldd	r29, Z+7	; 0x07
    1122:	ce 01       	movw	r24, r28
    1124:	0c 96       	adiw	r24, 0x0c	; 12
    1126:	6a d8       	rcall	.-3884   	; 0x1fc <vListRemove>
    1128:	8e 01       	movw	r16, r28
    112a:	0e 5f       	subi	r16, 0xFE	; 254
    112c:	1f 4f       	sbci	r17, 0xFF	; 255
    112e:	c8 01       	movw	r24, r16
    1130:	65 d8       	rcall	.-3894   	; 0x1fc <vListRemove>
    1132:	8e 89       	ldd	r24, Y+22	; 0x16
    1134:	90 91 5c 07 	lds	r25, 0x075C	; 0x80075c <uxTopReadyPriority>
    1138:	98 17       	cp	r25, r24
    113a:	10 f4       	brcc	.+4      	; 0x1140 <xTaskResumeAll+0x5e>
    113c:	80 93 5c 07 	sts	0x075C, r24	; 0x80075c <uxTopReadyPriority>
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	9c 01       	movw	r18, r24
    1144:	22 0f       	add	r18, r18
    1146:	33 1f       	adc	r19, r19
    1148:	22 0f       	add	r18, r18
    114a:	33 1f       	adc	r19, r19
    114c:	22 0f       	add	r18, r18
    114e:	33 1f       	adc	r19, r19
    1150:	82 0f       	add	r24, r18
    1152:	93 1f       	adc	r25, r19
    1154:	b8 01       	movw	r22, r16
    1156:	86 57       	subi	r24, 0x76	; 118
    1158:	98 4f       	sbci	r25, 0xF8	; 248
    115a:	0e 94 9c 00 	call	0x138	; 0x138 <vListInsertEnd>
    115e:	e0 91 ae 07 	lds	r30, 0x07AE	; 0x8007ae <pxCurrentTCB>
    1162:	f0 91 af 07 	lds	r31, 0x07AF	; 0x8007af <pxCurrentTCB+0x1>
    1166:	9e 89       	ldd	r25, Y+22	; 0x16
    1168:	86 89       	ldd	r24, Z+22	; 0x16
    116a:	98 17       	cp	r25, r24
    116c:	58 f0       	brcs	.+22     	; 0x1184 <xTaskResumeAll+0xa2>
    116e:	dc 2c       	mov	r13, r12
    1170:	09 c0       	rjmp	.+18     	; 0x1184 <xTaskResumeAll+0xa2>
    1172:	d1 2c       	mov	r13, r1
    1174:	0f 2e       	mov	r0, r31
    1176:	fb e6       	ldi	r31, 0x6B	; 107
    1178:	ef 2e       	mov	r14, r31
    117a:	f7 e0       	ldi	r31, 0x07	; 7
    117c:	ff 2e       	mov	r15, r31
    117e:	f0 2d       	mov	r31, r0
    1180:	cc 24       	eor	r12, r12
    1182:	c3 94       	inc	r12
    1184:	f7 01       	movw	r30, r14
    1186:	80 81       	ld	r24, Z
    1188:	81 11       	cpse	r24, r1
    118a:	c4 cf       	rjmp	.-120    	; 0x1114 <xTaskResumeAll+0x32>
    118c:	80 91 59 07 	lds	r24, 0x0759	; 0x800759 <uxMissedTicks>
    1190:	88 23       	and	r24, r24
    1192:	79 f0       	breq	.+30     	; 0x11b2 <xTaskResumeAll+0xd0>
    1194:	80 91 59 07 	lds	r24, 0x0759	; 0x800759 <uxMissedTicks>
    1198:	88 23       	and	r24, r24
    119a:	91 f0       	breq	.+36     	; 0x11c0 <xTaskResumeAll+0xde>
    119c:	e1 de       	rcall	.-574    	; 0xf60 <vTaskIncrementTick>
    119e:	80 91 59 07 	lds	r24, 0x0759	; 0x800759 <uxMissedTicks>
    11a2:	81 50       	subi	r24, 0x01	; 1
    11a4:	80 93 59 07 	sts	0x0759, r24	; 0x800759 <uxMissedTicks>
    11a8:	80 91 59 07 	lds	r24, 0x0759	; 0x800759 <uxMissedTicks>
    11ac:	81 11       	cpse	r24, r1
    11ae:	f6 cf       	rjmp	.-20     	; 0x119c <xTaskResumeAll+0xba>
    11b0:	07 c0       	rjmp	.+14     	; 0x11c0 <xTaskResumeAll+0xde>
    11b2:	f1 e0       	ldi	r31, 0x01	; 1
    11b4:	df 16       	cp	r13, r31
    11b6:	21 f0       	breq	.+8      	; 0x11c0 <xTaskResumeAll+0xde>
    11b8:	80 91 58 07 	lds	r24, 0x0758	; 0x800758 <xMissedYield>
    11bc:	81 30       	cpi	r24, 0x01	; 1
    11be:	39 f4       	brne	.+14     	; 0x11ce <xTaskResumeAll+0xec>
    11c0:	10 92 58 07 	sts	0x0758, r1	; 0x800758 <xMissedYield>
    11c4:	c3 dc       	rcall	.-1658   	; 0xb4c <vPortYield>
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	03 c0       	rjmp	.+6      	; 0x11d0 <xTaskResumeAll+0xee>
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	01 c0       	rjmp	.+2      	; 0x11d0 <xTaskResumeAll+0xee>
    11ce:	80 e0       	ldi	r24, 0x00	; 0
    11d0:	0f 90       	pop	r0
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	df 91       	pop	r29
    11d6:	cf 91       	pop	r28
    11d8:	1f 91       	pop	r17
    11da:	0f 91       	pop	r16
    11dc:	ff 90       	pop	r15
    11de:	ef 90       	pop	r14
    11e0:	df 90       	pop	r13
    11e2:	cf 90       	pop	r12
    11e4:	08 95       	ret

000011e6 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    11e6:	cf 93       	push	r28
    11e8:	df 93       	push	r29
    11ea:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    11ec:	89 2b       	or	r24, r25
		{
			vTaskSuspendAll();
    11ee:	99 f0       	breq	.+38     	; 0x1216 <vTaskDelay+0x30>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    11f0:	b1 de       	rcall	.-670    	; 0xf54 <vTaskSuspendAll>
    11f2:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <xTickCount>
    11f6:	90 91 5f 07 	lds	r25, 0x075F	; 0x80075f <xTickCount+0x1>
    11fa:	c8 0f       	add	r28, r24

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    11fc:	d9 1f       	adc	r29, r25
    11fe:	80 91 ae 07 	lds	r24, 0x07AE	; 0x8007ae <pxCurrentTCB>
    1202:	90 91 af 07 	lds	r25, 0x07AF	; 0x8007af <pxCurrentTCB+0x1>
    1206:	02 96       	adiw	r24, 0x02	; 2
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    1208:	0e 94 fe 00 	call	0x1fc	; 0x1fc <vListRemove>
			xAlreadyYielded = xTaskResumeAll();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    120c:	ce 01       	movw	r24, r28
    120e:	51 dd       	rcall	.-1374   	; 0xcb2 <prvAddCurrentTaskToDelayedList>
		{
			portYIELD_WITHIN_API();
    1210:	68 df       	rcall	.-304    	; 0x10e2 <xTaskResumeAll>
    1212:	81 11       	cpse	r24, r1
		}
	}
    1214:	01 c0       	rjmp	.+2      	; 0x1218 <vTaskDelay+0x32>
    1216:	9a dc       	rcall	.-1740   	; 0xb4c <vPortYield>
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	08 95       	ret

0000121e <prvIdleTask>:
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    121e:	0f 2e       	mov	r0, r31
    1220:	f2 e6       	ldi	r31, 0x62	; 98
    1222:	ef 2e       	mov	r14, r31
    1224:	f7 e0       	ldi	r31, 0x07	; 7
    1226:	ff 2e       	mov	r15, r31
    1228:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    122a:	ca e8       	ldi	r28, 0x8A	; 138
    122c:	d7 e0       	ldi	r29, 0x07	; 7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    122e:	80 91 61 07 	lds	r24, 0x0761	; 0x800761 <uxTasksDeleted>
    1232:	88 23       	and	r24, r24
		{
			vTaskSuspendAll();
    1234:	41 f1       	breq	.+80     	; 0x1286 <prvIdleTask+0x68>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1236:	8e de       	rcall	.-740    	; 0xf54 <vTaskSuspendAll>
			xTaskResumeAll();
    1238:	d7 01       	movw	r26, r14
    123a:	1c 91       	ld	r17, X

			if( xListIsEmpty == pdFALSE )
    123c:	52 df       	rcall	.-348    	; 0x10e2 <xTaskResumeAll>
    123e:	11 23       	and	r17, r17
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    1240:	11 f1       	breq	.+68     	; 0x1286 <prvIdleTask+0x68>
    1242:	0f b6       	in	r0, 0x3f	; 63
    1244:	f8 94       	cli
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    1246:	0f 92       	push	r0
    1248:	d7 01       	movw	r26, r14
    124a:	15 96       	adiw	r26, 0x05	; 5
    124c:	ed 91       	ld	r30, X+
    124e:	fc 91       	ld	r31, X
    1250:	16 97       	sbiw	r26, 0x06	; 6
    1252:	06 81       	ldd	r16, Z+6	; 0x06
					vListRemove( &( pxTCB->xGenericListItem ) );
    1254:	17 81       	ldd	r17, Z+7	; 0x07
    1256:	c8 01       	movw	r24, r16
    1258:	02 96       	adiw	r24, 0x02	; 2
    125a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <vListRemove>
					--uxCurrentNumberOfTasks;
    125e:	80 91 60 07 	lds	r24, 0x0760	; 0x800760 <uxCurrentNumberOfTasks>
    1262:	81 50       	subi	r24, 0x01	; 1
    1264:	80 93 60 07 	sts	0x0760, r24	; 0x800760 <uxCurrentNumberOfTasks>
					--uxTasksDeleted;
    1268:	80 91 61 07 	lds	r24, 0x0761	; 0x800761 <uxTasksDeleted>
    126c:	81 50       	subi	r24, 0x01	; 1
    126e:	80 93 61 07 	sts	0x0761, r24	; 0x800761 <uxTasksDeleted>
				}
				taskEXIT_CRITICAL();
    1272:	0f 90       	pop	r0
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	f8 01       	movw	r30, r16
    1278:	87 89       	ldd	r24, Z+23	; 0x17
    127a:	90 8d       	ldd	r25, Z+24	; 0x18
    127c:	0e 94 89 00 	call	0x112	; 0x112 <vPortFree>
		vPortFree( pxTCB );
    1280:	c8 01       	movw	r24, r16
    1282:	0e 94 89 00 	call	0x112	; 0x112 <vPortFree>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    1286:	88 81       	ld	r24, Y
			{
				taskYIELD();
    1288:	82 30       	cpi	r24, 0x02	; 2
    128a:	88 f2       	brcs	.-94     	; 0x122e <prvIdleTask+0x10>
    128c:	5f dc       	rcall	.-1858   	; 0xb4c <vPortYield>
    128e:	cf cf       	rjmp	.-98     	; 0x122e <prvIdleTask+0x10>

00001290 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    1290:	80 91 5a 07 	lds	r24, 0x075A	; 0x80075a <uxSchedulerSuspended>
    1294:	81 11       	cpse	r24, r1
    1296:	13 c0       	rjmp	.+38     	; 0x12be <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    1298:	80 91 5c 07 	lds	r24, 0x075C	; 0x80075c <uxTopReadyPriority>
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	fc 01       	movw	r30, r24
    12a0:	ee 0f       	add	r30, r30
    12a2:	ff 1f       	adc	r31, r31
    12a4:	ee 0f       	add	r30, r30
    12a6:	ff 1f       	adc	r31, r31
    12a8:	ee 0f       	add	r30, r30
    12aa:	ff 1f       	adc	r31, r31
    12ac:	8e 0f       	add	r24, r30
    12ae:	9f 1f       	adc	r25, r31
    12b0:	fc 01       	movw	r30, r24
    12b2:	e6 57       	subi	r30, 0x76	; 118
    12b4:	f8 4f       	sbci	r31, 0xF8	; 248
    12b6:	80 81       	ld	r24, Z
    12b8:	88 23       	and	r24, r24
    12ba:	29 f0       	breq	.+10     	; 0x12c6 <vTaskSwitchContext+0x36>
    12bc:	1b c0       	rjmp	.+54     	; 0x12f4 <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	80 93 58 07 	sts	0x0758, r24	; 0x800758 <xMissedYield>
    12c4:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    12c6:	80 91 5c 07 	lds	r24, 0x075C	; 0x80075c <uxTopReadyPriority>
    12ca:	81 50       	subi	r24, 0x01	; 1
    12cc:	80 93 5c 07 	sts	0x075C, r24	; 0x80075c <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    12d0:	80 91 5c 07 	lds	r24, 0x075C	; 0x80075c <uxTopReadyPriority>
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	fc 01       	movw	r30, r24
    12d8:	ee 0f       	add	r30, r30
    12da:	ff 1f       	adc	r31, r31
    12dc:	ee 0f       	add	r30, r30
    12de:	ff 1f       	adc	r31, r31
    12e0:	ee 0f       	add	r30, r30
    12e2:	ff 1f       	adc	r31, r31
    12e4:	8e 0f       	add	r24, r30
    12e6:	9f 1f       	adc	r25, r31
    12e8:	fc 01       	movw	r30, r24
    12ea:	e6 57       	subi	r30, 0x76	; 118
    12ec:	f8 4f       	sbci	r31, 0xF8	; 248
    12ee:	80 81       	ld	r24, Z
    12f0:	88 23       	and	r24, r24
    12f2:	49 f3       	breq	.-46     	; 0x12c6 <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    12f4:	80 91 5c 07 	lds	r24, 0x075C	; 0x80075c <uxTopReadyPriority>
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	9c 01       	movw	r18, r24
    12fc:	22 0f       	add	r18, r18
    12fe:	33 1f       	adc	r19, r19
    1300:	22 0f       	add	r18, r18
    1302:	33 1f       	adc	r19, r19
    1304:	22 0f       	add	r18, r18
    1306:	33 1f       	adc	r19, r19
    1308:	28 0f       	add	r18, r24
    130a:	39 1f       	adc	r19, r25
    130c:	d9 01       	movw	r26, r18
    130e:	a6 57       	subi	r26, 0x76	; 118
    1310:	b8 4f       	sbci	r27, 0xF8	; 248
    1312:	11 96       	adiw	r26, 0x01	; 1
    1314:	ed 91       	ld	r30, X+
    1316:	fc 91       	ld	r31, X
    1318:	12 97       	sbiw	r26, 0x02	; 2
    131a:	02 80       	ldd	r0, Z+2	; 0x02
    131c:	f3 81       	ldd	r31, Z+3	; 0x03
    131e:	e0 2d       	mov	r30, r0
    1320:	12 96       	adiw	r26, 0x02	; 2
    1322:	fc 93       	st	X, r31
    1324:	ee 93       	st	-X, r30
    1326:	11 97       	sbiw	r26, 0x01	; 1
    1328:	23 57       	subi	r18, 0x73	; 115
    132a:	38 4f       	sbci	r19, 0xF8	; 248
    132c:	e2 17       	cp	r30, r18
    132e:	f3 07       	cpc	r31, r19
    1330:	29 f4       	brne	.+10     	; 0x133c <vTaskSwitchContext+0xac>
    1332:	22 81       	ldd	r18, Z+2	; 0x02
    1334:	33 81       	ldd	r19, Z+3	; 0x03
    1336:	fd 01       	movw	r30, r26
    1338:	32 83       	std	Z+2, r19	; 0x02
    133a:	21 83       	std	Z+1, r18	; 0x01
    133c:	fc 01       	movw	r30, r24
    133e:	ee 0f       	add	r30, r30
    1340:	ff 1f       	adc	r31, r31
    1342:	ee 0f       	add	r30, r30
    1344:	ff 1f       	adc	r31, r31
    1346:	ee 0f       	add	r30, r30
    1348:	ff 1f       	adc	r31, r31
    134a:	8e 0f       	add	r24, r30
    134c:	9f 1f       	adc	r25, r31
    134e:	fc 01       	movw	r30, r24
    1350:	e6 57       	subi	r30, 0x76	; 118
    1352:	f8 4f       	sbci	r31, 0xF8	; 248
    1354:	01 80       	ldd	r0, Z+1	; 0x01
    1356:	f2 81       	ldd	r31, Z+2	; 0x02
    1358:	e0 2d       	mov	r30, r0
    135a:	86 81       	ldd	r24, Z+6	; 0x06
    135c:	97 81       	ldd	r25, Z+7	; 0x07
    135e:	90 93 af 07 	sts	0x07AF, r25	; 0x8007af <pxCurrentTCB+0x1>
    1362:	80 93 ae 07 	sts	0x07AE, r24	; 0x8007ae <pxCurrentTCB>
    1366:	08 95       	ret

00001368 <__umulhisi3>:
    1368:	a2 9f       	mul	r26, r18
    136a:	b0 01       	movw	r22, r0
    136c:	b3 9f       	mul	r27, r19
    136e:	c0 01       	movw	r24, r0
    1370:	a3 9f       	mul	r26, r19
    1372:	70 0d       	add	r23, r0
    1374:	81 1d       	adc	r24, r1
    1376:	11 24       	eor	r1, r1
    1378:	91 1d       	adc	r25, r1
    137a:	b2 9f       	mul	r27, r18
    137c:	70 0d       	add	r23, r0
    137e:	81 1d       	adc	r24, r1
    1380:	11 24       	eor	r1, r1
    1382:	91 1d       	adc	r25, r1
    1384:	08 95       	ret

00001386 <memset>:
    1386:	dc 01       	movw	r26, r24
    1388:	01 c0       	rjmp	.+2      	; 0x138c <memset+0x6>
    138a:	6d 93       	st	X+, r22
    138c:	41 50       	subi	r20, 0x01	; 1
    138e:	50 40       	sbci	r21, 0x00	; 0
    1390:	e0 f7       	brcc	.-8      	; 0x138a <memset+0x4>
    1392:	08 95       	ret

00001394 <strncpy>:
    1394:	fb 01       	movw	r30, r22
    1396:	dc 01       	movw	r26, r24
    1398:	41 50       	subi	r20, 0x01	; 1
    139a:	50 40       	sbci	r21, 0x00	; 0
    139c:	48 f0       	brcs	.+18     	; 0x13b0 <strncpy+0x1c>
    139e:	01 90       	ld	r0, Z+
    13a0:	0d 92       	st	X+, r0
    13a2:	00 20       	and	r0, r0
    13a4:	c9 f7       	brne	.-14     	; 0x1398 <strncpy+0x4>
    13a6:	01 c0       	rjmp	.+2      	; 0x13aa <strncpy+0x16>
    13a8:	1d 92       	st	X+, r1
    13aa:	41 50       	subi	r20, 0x01	; 1
    13ac:	50 40       	sbci	r21, 0x00	; 0
    13ae:	e0 f7       	brcc	.-8      	; 0x13a8 <strncpy+0x14>
    13b0:	08 95       	ret

000013b2 <_exit>:
    13b2:	f8 94       	cli

000013b4 <__stop_program>:
    13b4:	ff cf       	rjmp	.-2      	; 0x13b4 <__stop_program>
