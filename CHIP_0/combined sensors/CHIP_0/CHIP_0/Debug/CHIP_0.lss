
CHIP_0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000066  00800100  000014a4  00001538  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000652  00800166  00800166  0000159e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000159e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  00001610  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d0c  00000000  00000000  000018b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000106c  00000000  00000000  000045c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bc4  00000000  00000000  00005630  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006dc  00000000  00000000  000071f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001073  00000000  00000000  000078d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016c1  00000000  00000000  00008943  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a0  00000000  00000000  0000a004  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	b0 c6       	rjmp	.+3424   	; 0xd96 <__vector_13>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 ea       	ldi	r30, 0xA4	; 164
      a0:	f4 e1       	ldi	r31, 0x14	; 20
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 36       	cpi	r26, 0x66	; 102
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	27 e0       	ldi	r18, 0x07	; 7
      b4:	a6 e6       	ldi	r26, 0x66	; 102
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a8 3b       	cpi	r26, 0xB8	; 184
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	f6 d4       	rcall	.+2540   	; 0xab0 <main>
      c4:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
      ce:	ec 01       	movw	r28, r24
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
      d0:	b5 d7       	rcall	.+3946   	; 0x103c <vTaskSuspendAll>
      d2:	20 91 66 01 	lds	r18, 0x0166	; 0x800166 <__data_end>
      d6:	30 91 67 01 	lds	r19, 0x0167	; 0x800167 <__data_end+0x1>
      da:	c9 01       	movw	r24, r18
      dc:	8c 0f       	add	r24, r28
      de:	9d 1f       	adc	r25, r29
      e0:	8c 3d       	cpi	r24, 0xDC	; 220
      e2:	45 e0       	ldi	r20, 0x05	; 5
      e4:	94 07       	cpc	r25, r20
      e6:	58 f4       	brcc	.+22     	; 0xfe <pvPortMalloc+0x34>
      e8:	28 17       	cp	r18, r24
      ea:	39 07       	cpc	r19, r25
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
      ec:	58 f4       	brcc	.+22     	; 0x104 <pvPortMalloc+0x3a>
      ee:	e9 01       	movw	r28, r18
      f0:	c8 59       	subi	r28, 0x98	; 152
			xNextFreeByte += xWantedSize;			
      f2:	de 4f       	sbci	r29, 0xFE	; 254
      f4:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <__data_end+0x1>
      f8:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <__data_end>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
      fc:	05 c0       	rjmp	.+10     	; 0x108 <pvPortMalloc+0x3e>
      fe:	c0 e0       	ldi	r28, 0x00	; 0
     100:	d0 e0       	ldi	r29, 0x00	; 0
     102:	02 c0       	rjmp	.+4      	; 0x108 <pvPortMalloc+0x3e>
     104:	c0 e0       	ldi	r28, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     106:	d0 e0       	ldi	r29, 0x00	; 0
     108:	0e 94 e6 08 	call	0x11cc	; 0x11cc <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     10c:	ce 01       	movw	r24, r28
     10e:	df 91       	pop	r29
     110:	cf 91       	pop	r28
     112:	08 95       	ret

00000114 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     114:	08 95       	ret

00000116 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     116:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     118:	03 96       	adiw	r24, 0x03	; 3
     11a:	92 83       	std	Z+2, r25	; 0x02
     11c:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     11e:	2f ef       	ldi	r18, 0xFF	; 255
     120:	3f ef       	ldi	r19, 0xFF	; 255
     122:	34 83       	std	Z+4, r19	; 0x04
     124:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     126:	96 83       	std	Z+6, r25	; 0x06
     128:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     12a:	90 87       	std	Z+8, r25	; 0x08
     12c:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     12e:	10 82       	st	Z, r1
     130:	08 95       	ret

00000132 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     132:	fc 01       	movw	r30, r24
     134:	11 86       	std	Z+9, r1	; 0x09
     136:	10 86       	std	Z+8, r1	; 0x08
     138:	08 95       	ret

0000013a <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     13a:	cf 93       	push	r28
     13c:	df 93       	push	r29
     13e:	fc 01       	movw	r30, r24
     140:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     142:	21 81       	ldd	r18, Z+1	; 0x01
     144:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
     146:	e9 01       	movw	r28, r18
     148:	8a 81       	ldd	r24, Y+2	; 0x02
     14a:	9b 81       	ldd	r25, Y+3	; 0x03
     14c:	13 96       	adiw	r26, 0x03	; 3
     14e:	9c 93       	st	X, r25
     150:	8e 93       	st	-X, r24
     152:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
     154:	81 81       	ldd	r24, Z+1	; 0x01
     156:	92 81       	ldd	r25, Z+2	; 0x02
     158:	15 96       	adiw	r26, 0x05	; 5
     15a:	9c 93       	st	X, r25
     15c:	8e 93       	st	-X, r24
     15e:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	ec 01       	movw	r28, r24
     166:	7d 83       	std	Y+5, r23	; 0x05
     168:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     16a:	e9 01       	movw	r28, r18
     16c:	7b 83       	std	Y+3, r23	; 0x03
     16e:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     170:	72 83       	std	Z+2, r23	; 0x02
     172:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     174:	19 96       	adiw	r26, 0x09	; 9
     176:	fc 93       	st	X, r31
     178:	ee 93       	st	-X, r30
     17a:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
     17c:	80 81       	ld	r24, Z
     17e:	8f 5f       	subi	r24, 0xFF	; 255
     180:	80 83       	st	Z, r24
}
     182:	df 91       	pop	r29
     184:	cf 91       	pop	r28
     186:	08 95       	ret

00000188 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     188:	cf 93       	push	r28
     18a:	df 93       	push	r29
     18c:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     18e:	48 81       	ld	r20, Y
     190:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     192:	4f 3f       	cpi	r20, 0xFF	; 255
     194:	2f ef       	ldi	r18, 0xFF	; 255
     196:	52 07       	cpc	r21, r18
     198:	31 f4       	brne	.+12     	; 0x1a6 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     19a:	dc 01       	movw	r26, r24
     19c:	17 96       	adiw	r26, 0x07	; 7
     19e:	ed 91       	ld	r30, X+
     1a0:	fc 91       	ld	r31, X
     1a2:	18 97       	sbiw	r26, 0x08	; 8
     1a4:	17 c0       	rjmp	.+46     	; 0x1d4 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     1a6:	fc 01       	movw	r30, r24
     1a8:	33 96       	adiw	r30, 0x03	; 3
     1aa:	dc 01       	movw	r26, r24
     1ac:	15 96       	adiw	r26, 0x05	; 5
     1ae:	2d 91       	ld	r18, X+
     1b0:	3c 91       	ld	r19, X
     1b2:	16 97       	sbiw	r26, 0x06	; 6
     1b4:	d9 01       	movw	r26, r18
     1b6:	2d 91       	ld	r18, X+
     1b8:	3c 91       	ld	r19, X
     1ba:	42 17       	cp	r20, r18
     1bc:	53 07       	cpc	r21, r19
     1be:	50 f0       	brcs	.+20     	; 0x1d4 <vListInsert+0x4c>
     1c0:	02 80       	ldd	r0, Z+2	; 0x02
     1c2:	f3 81       	ldd	r31, Z+3	; 0x03
     1c4:	e0 2d       	mov	r30, r0
     1c6:	a2 81       	ldd	r26, Z+2	; 0x02
     1c8:	b3 81       	ldd	r27, Z+3	; 0x03
     1ca:	2d 91       	ld	r18, X+
     1cc:	3c 91       	ld	r19, X
     1ce:	42 17       	cp	r20, r18
     1d0:	53 07       	cpc	r21, r19
     1d2:	b0 f7       	brcc	.-20     	; 0x1c0 <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     1d4:	a2 81       	ldd	r26, Z+2	; 0x02
     1d6:	b3 81       	ldd	r27, Z+3	; 0x03
     1d8:	bb 83       	std	Y+3, r27	; 0x03
     1da:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     1dc:	15 96       	adiw	r26, 0x05	; 5
     1de:	dc 93       	st	X, r29
     1e0:	ce 93       	st	-X, r28
     1e2:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
     1e4:	fd 83       	std	Y+5, r31	; 0x05
     1e6:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     1e8:	d3 83       	std	Z+3, r29	; 0x03
     1ea:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     1ec:	99 87       	std	Y+9, r25	; 0x09
     1ee:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     1f0:	fc 01       	movw	r30, r24
     1f2:	20 81       	ld	r18, Z
     1f4:	2f 5f       	subi	r18, 0xFF	; 255
     1f6:	20 83       	st	Z, r18
}
     1f8:	df 91       	pop	r29
     1fa:	cf 91       	pop	r28
     1fc:	08 95       	ret

000001fe <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     1fe:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     200:	a2 81       	ldd	r26, Z+2	; 0x02
     202:	b3 81       	ldd	r27, Z+3	; 0x03
     204:	84 81       	ldd	r24, Z+4	; 0x04
     206:	95 81       	ldd	r25, Z+5	; 0x05
     208:	15 96       	adiw	r26, 0x05	; 5
     20a:	9c 93       	st	X, r25
     20c:	8e 93       	st	-X, r24
     20e:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     210:	a4 81       	ldd	r26, Z+4	; 0x04
     212:	b5 81       	ldd	r27, Z+5	; 0x05
     214:	82 81       	ldd	r24, Z+2	; 0x02
     216:	93 81       	ldd	r25, Z+3	; 0x03
     218:	13 96       	adiw	r26, 0x03	; 3
     21a:	9c 93       	st	X, r25
     21c:	8e 93       	st	-X, r24
     21e:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     220:	a0 85       	ldd	r26, Z+8	; 0x08
     222:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     224:	11 96       	adiw	r26, 0x01	; 1
     226:	8d 91       	ld	r24, X+
     228:	9c 91       	ld	r25, X
     22a:	12 97       	sbiw	r26, 0x02	; 2
     22c:	e8 17       	cp	r30, r24
     22e:	f9 07       	cpc	r31, r25
     230:	31 f4       	brne	.+12     	; 0x23e <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     232:	84 81       	ldd	r24, Z+4	; 0x04
     234:	95 81       	ldd	r25, Z+5	; 0x05
     236:	12 96       	adiw	r26, 0x02	; 2
     238:	9c 93       	st	X, r25
     23a:	8e 93       	st	-X, r24
     23c:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
     23e:	11 86       	std	Z+9, r1	; 0x09
     240:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     242:	8c 91       	ld	r24, X
     244:	81 50       	subi	r24, 0x01	; 1
     246:	8c 93       	st	X, r24
     248:	08 95       	ret

0000024a <initUSART>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//RECEIVE FSM
enum RECState {Rec_Wait, Receive_State } rec_state;

void REC_Init(){
	rec_state = Rec_Wait;
     24a:	81 30       	cpi	r24, 0x01	; 1
     24c:	81 f0       	breq	.+32     	; 0x26e <initUSART+0x24>
     24e:	e1 ec       	ldi	r30, 0xC1	; 193
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	80 81       	ld	r24, Z
     254:	88 61       	ori	r24, 0x18	; 24
     256:	80 83       	st	Z, r24
     258:	e2 ec       	ldi	r30, 0xC2	; 194
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	80 81       	ld	r24, Z
     25e:	86 60       	ori	r24, 0x06	; 6
     260:	80 83       	st	Z, r24
     262:	83 e3       	ldi	r24, 0x33	; 51
     264:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     268:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     26c:	08 95       	ret
     26e:	e9 ec       	ldi	r30, 0xC9	; 201
     270:	f0 e0       	ldi	r31, 0x00	; 0
     272:	80 81       	ld	r24, Z
     274:	88 61       	ori	r24, 0x18	; 24
     276:	80 83       	st	Z, r24
     278:	ea ec       	ldi	r30, 0xCA	; 202
     27a:	f0 e0       	ldi	r31, 0x00	; 0
     27c:	80 81       	ld	r24, Z
     27e:	86 60       	ori	r24, 0x06	; 6
     280:	80 83       	st	Z, r24
     282:	83 e3       	ldi	r24, 0x33	; 51
     284:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     288:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     28c:	08 95       	ret

0000028e <USART_Flush>:
     28e:	81 30       	cpi	r24, 0x01	; 1
     290:	29 f4       	brne	.+10     	; 0x29c <USART_Flush+0xe>
     292:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     296:	88 23       	and	r24, r24
     298:	74 f0       	brlt	.+28     	; 0x2b6 <USART_Flush+0x28>
     29a:	08 95       	ret
     29c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     2a0:	88 23       	and	r24, r24
     2a2:	8c f4       	brge	.+34     	; 0x2c6 <USART_Flush+0x38>
     2a4:	a6 ec       	ldi	r26, 0xC6	; 198
     2a6:	b0 e0       	ldi	r27, 0x00	; 0
     2a8:	e0 ec       	ldi	r30, 0xC0	; 192
     2aa:	f0 e0       	ldi	r31, 0x00	; 0
     2ac:	8c 91       	ld	r24, X
     2ae:	80 81       	ld	r24, Z
     2b0:	88 23       	and	r24, r24
     2b2:	e4 f3       	brlt	.-8      	; 0x2ac <USART_Flush+0x1e>
     2b4:	08 95       	ret
     2b6:	ae ec       	ldi	r26, 0xCE	; 206
     2b8:	b0 e0       	ldi	r27, 0x00	; 0
     2ba:	e8 ec       	ldi	r30, 0xC8	; 200
     2bc:	f0 e0       	ldi	r31, 0x00	; 0
     2be:	8c 91       	ld	r24, X
     2c0:	80 81       	ld	r24, Z
     2c2:	88 23       	and	r24, r24
     2c4:	e4 f3       	brlt	.-8      	; 0x2be <USART_Flush+0x30>
     2c6:	08 95       	ret

000002c8 <USART_Send>:
     2c8:	61 30       	cpi	r22, 0x01	; 1
     2ca:	41 f0       	breq	.+16     	; 0x2dc <USART_Send+0x14>
     2cc:	e0 ec       	ldi	r30, 0xC0	; 192
     2ce:	f0 e0       	ldi	r31, 0x00	; 0
     2d0:	90 81       	ld	r25, Z
     2d2:	95 ff       	sbrs	r25, 5
     2d4:	fd cf       	rjmp	.-6      	; 0x2d0 <USART_Send+0x8>
     2d6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     2da:	08 95       	ret
     2dc:	e8 ec       	ldi	r30, 0xC8	; 200
     2de:	f0 e0       	ldi	r31, 0x00	; 0
     2e0:	90 81       	ld	r25, Z
     2e2:	95 ff       	sbrs	r25, 5
     2e4:	fd cf       	rjmp	.-6      	; 0x2e0 <USART_Send+0x18>
     2e6:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     2ea:	08 95       	ret

000002ec <USART_Receive>:
     2ec:	81 30       	cpi	r24, 0x01	; 1
     2ee:	41 f0       	breq	.+16     	; 0x300 <USART_Receive+0x14>
     2f0:	e0 ec       	ldi	r30, 0xC0	; 192
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	80 81       	ld	r24, Z
     2f6:	88 23       	and	r24, r24
     2f8:	ec f7       	brge	.-6      	; 0x2f4 <USART_Receive+0x8>
     2fa:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     2fe:	08 95       	ret
     300:	e8 ec       	ldi	r30, 0xC8	; 200
     302:	f0 e0       	ldi	r31, 0x00	; 0
     304:	80 81       	ld	r24, Z
     306:	88 23       	and	r24, r24
     308:	ec f7       	brge	.-6      	; 0x304 <USART_Receive+0x18>
     30a:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     30e:	08 95       	ret

00000310 <ADC_init>:
     310:	ea e7       	ldi	r30, 0x7A	; 122
     312:	f0 e0       	ldi	r31, 0x00	; 0
     314:	80 81       	ld	r24, Z
     316:	80 6e       	ori	r24, 0xE0	; 224
     318:	80 83       	st	Z, r24
     31a:	08 95       	ret

0000031c <TEMP_Tick>:
     31c:	80 91 b6 07 	lds	r24, 0x07B6	; 0x8007b6 <temp_state>
     320:	81 30       	cpi	r24, 0x01	; 1
     322:	19 f0       	breq	.+6      	; 0x32a <TEMP_Tick+0xe>
     324:	83 30       	cpi	r24, 0x03	; 3
     326:	e1 f0       	breq	.+56     	; 0x360 <TEMP_Tick+0x44>
     328:	1f c0       	rjmp	.+62     	; 0x368 <TEMP_Tick+0x4c>
     32a:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     32e:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     332:	22 0f       	add	r18, r18
     334:	33 1f       	adc	r19, r19
     336:	22 0f       	add	r18, r18
     338:	33 1f       	adc	r19, r19
     33a:	30 93 55 07 	sts	0x0755, r19	; 0x800755 <temp_MV+0x1>
     33e:	20 93 54 07 	sts	0x0754, r18	; 0x800754 <temp_MV>
     342:	24 5f       	subi	r18, 0xF4	; 244
     344:	31 40       	sbci	r19, 0x01	; 1
     346:	ad ec       	ldi	r26, 0xCD	; 205
     348:	bc ec       	ldi	r27, 0xCC	; 204
     34a:	0e 94 2b 0a 	call	0x1456	; 0x1456 <__umulhisi3>
     34e:	96 95       	lsr	r25
     350:	87 95       	ror	r24
     352:	96 95       	lsr	r25
     354:	87 95       	ror	r24
     356:	96 95       	lsr	r25
     358:	87 95       	ror	r24
     35a:	80 93 56 07 	sts	0x0756, r24	; 0x800756 <temp_val>
     35e:	16 c0       	rjmp	.+44     	; 0x38c <TEMP_Tick+0x70>
     360:	60 e0       	ldi	r22, 0x00	; 0
     362:	80 91 56 07 	lds	r24, 0x0756	; 0x800756 <temp_val>
     366:	b0 df       	rcall	.-160    	; 0x2c8 <USART_Send>
     368:	80 91 b6 07 	lds	r24, 0x07B6	; 0x8007b6 <temp_state>
     36c:	81 30       	cpi	r24, 0x01	; 1
     36e:	71 f0       	breq	.+28     	; 0x38c <TEMP_Tick+0x70>
     370:	28 f0       	brcs	.+10     	; 0x37c <TEMP_Tick+0x60>
     372:	82 30       	cpi	r24, 0x02	; 2
     374:	b1 f0       	breq	.+44     	; 0x3a2 <TEMP_Tick+0x86>
     376:	10 92 b6 07 	sts	0x07B6, r1	; 0x8007b6 <temp_state>
     37a:	08 95       	ret
     37c:	80 91 57 07 	lds	r24, 0x0757	; 0x800757 <ARM_DISARM>
     380:	81 11       	cpse	r24, r1
     382:	21 c0       	rjmp	.+66     	; 0x3c6 <TEMP_Tick+0xaa>
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	80 93 b6 07 	sts	0x07B6, r24	; 0x8007b6 <temp_state>
     38a:	08 95       	ret
     38c:	80 91 57 07 	lds	r24, 0x0757	; 0x800757 <ARM_DISARM>
     390:	81 11       	cpse	r24, r1
     392:	04 c0       	rjmp	.+8      	; 0x39c <TEMP_Tick+0x80>
     394:	82 e0       	ldi	r24, 0x02	; 2
     396:	80 93 b6 07 	sts	0x07B6, r24	; 0x8007b6 <temp_state>
     39a:	08 95       	ret
     39c:	10 92 b6 07 	sts	0x07B6, r1	; 0x8007b6 <temp_state>
     3a0:	08 95       	ret
     3a2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     3a6:	85 ff       	sbrs	r24, 5
     3a8:	08 c0       	rjmp	.+16     	; 0x3ba <TEMP_Tick+0x9e>
     3aa:	80 91 57 07 	lds	r24, 0x0757	; 0x800757 <ARM_DISARM>
     3ae:	81 11       	cpse	r24, r1
     3b0:	04 c0       	rjmp	.+8      	; 0x3ba <TEMP_Tick+0x9e>
     3b2:	83 e0       	ldi	r24, 0x03	; 3
     3b4:	80 93 b6 07 	sts	0x07B6, r24	; 0x8007b6 <temp_state>
     3b8:	08 95       	ret
     3ba:	80 91 57 07 	lds	r24, 0x0757	; 0x800757 <ARM_DISARM>
     3be:	81 30       	cpi	r24, 0x01	; 1
     3c0:	11 f4       	brne	.+4      	; 0x3c6 <TEMP_Tick+0xaa>
     3c2:	10 92 b6 07 	sts	0x07B6, r1	; 0x8007b6 <temp_state>
     3c6:	08 95       	ret

000003c8 <TempSecTask>:
     3c8:	10 92 b6 07 	sts	0x07B6, r1	; 0x8007b6 <temp_state>
     3cc:	a7 df       	rcall	.-178    	; 0x31c <TEMP_Tick>
     3ce:	8a e0       	ldi	r24, 0x0A	; 10
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	80 d7       	rcall	.+3840   	; 0x12d4 <vTaskDelay>
     3d4:	fb cf       	rjmp	.-10     	; 0x3cc <TempSecTask+0x4>

000003d6 <StartTempPulse>:
     3d6:	af 92       	push	r10
     3d8:	bf 92       	push	r11
     3da:	cf 92       	push	r12
     3dc:	df 92       	push	r13
     3de:	ef 92       	push	r14
     3e0:	ff 92       	push	r15
     3e2:	0f 93       	push	r16
     3e4:	a1 2c       	mov	r10, r1
     3e6:	b1 2c       	mov	r11, r1
     3e8:	c1 2c       	mov	r12, r1
     3ea:	d1 2c       	mov	r13, r1
     3ec:	e1 2c       	mov	r14, r1
     3ee:	f1 2c       	mov	r15, r1
     3f0:	08 2f       	mov	r16, r24
     3f2:	20 e0       	ldi	r18, 0x00	; 0
     3f4:	30 e0       	ldi	r19, 0x00	; 0
     3f6:	45 e5       	ldi	r20, 0x55	; 85
     3f8:	50 e0       	ldi	r21, 0x00	; 0
     3fa:	65 e1       	ldi	r22, 0x15	; 21
     3fc:	71 e0       	ldi	r23, 0x01	; 1
     3fe:	84 ee       	ldi	r24, 0xE4	; 228
     400:	91 e0       	ldi	r25, 0x01	; 1
     402:	00 d5       	rcall	.+2560   	; 0xe04 <xTaskGenericCreate>
     404:	0f 91       	pop	r16
     406:	ff 90       	pop	r15
     408:	ef 90       	pop	r14
     40a:	df 90       	pop	r13
     40c:	cf 90       	pop	r12
     40e:	bf 90       	pop	r11
     410:	af 90       	pop	r10
     412:	08 95       	ret

00000414 <ARM_Tick>:
     414:	80 91 b7 07 	lds	r24, 0x07B7	; 0x8007b7 <arm_state>
     418:	88 23       	and	r24, r24
     41a:	19 f0       	breq	.+6      	; 0x422 <ARM_Tick+0xe>
     41c:	81 30       	cpi	r24, 0x01	; 1
     41e:	71 f0       	breq	.+28     	; 0x43c <ARM_Tick+0x28>
     420:	5f c0       	rjmp	.+190    	; 0x4e0 <ARM_Tick+0xcc>
     422:	10 92 53 07 	sts	0x0753, r1	; 0x800753 <temp_trip>
     426:	10 92 52 07 	sts	0x0752, r1	; 0x800752 <IR_one_trip>
     42a:	10 92 51 07 	sts	0x0751, r1	; 0x800751 <IR_two_trip>
     42e:	10 92 50 07 	sts	0x0750, r1	; 0x800750 <button_one_trip>
     432:	10 92 4f 07 	sts	0x074F, r1	; 0x80074f <button_two_trip>
     436:	10 92 4e 07 	sts	0x074E, r1	; 0x80074e <triggered_sensors>
     43a:	57 c0       	rjmp	.+174    	; 0x4ea <ARM_Tick+0xd6>
     43c:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     440:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     444:	22 0f       	add	r18, r18
     446:	33 1f       	adc	r19, r19
     448:	22 0f       	add	r18, r18
     44a:	33 1f       	adc	r19, r19
     44c:	30 93 55 07 	sts	0x0755, r19	; 0x800755 <temp_MV+0x1>
     450:	20 93 54 07 	sts	0x0754, r18	; 0x800754 <temp_MV>
     454:	24 5f       	subi	r18, 0xF4	; 244
     456:	31 40       	sbci	r19, 0x01	; 1
     458:	ad ec       	ldi	r26, 0xCD	; 205
     45a:	bc ec       	ldi	r27, 0xCC	; 204
     45c:	fc d7       	rcall	.+4088   	; 0x1456 <__umulhisi3>
     45e:	96 95       	lsr	r25
     460:	87 95       	ror	r24
     462:	96 95       	lsr	r25
     464:	87 95       	ror	r24
     466:	96 95       	lsr	r25
     468:	87 95       	ror	r24
     46a:	80 93 56 07 	sts	0x0756, r24	; 0x800756 <temp_val>
     46e:	80 32       	cpi	r24, 0x20	; 32
     470:	40 f0       	brcs	.+16     	; 0x482 <ARM_Tick+0x6e>
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	80 93 53 07 	sts	0x0753, r24	; 0x800753 <temp_trip>
     478:	80 91 4e 07 	lds	r24, 0x074E	; 0x80074e <triggered_sensors>
     47c:	81 60       	ori	r24, 0x01	; 1
     47e:	80 93 4e 07 	sts	0x074E, r24	; 0x80074e <triggered_sensors>
     482:	86 b1       	in	r24, 0x06	; 6
     484:	80 95       	com	r24
     486:	83 ff       	sbrs	r24, 3
     488:	08 c0       	rjmp	.+16     	; 0x49a <ARM_Tick+0x86>
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	80 93 51 07 	sts	0x0751, r24	; 0x800751 <IR_two_trip>
     490:	80 91 4e 07 	lds	r24, 0x074E	; 0x80074e <triggered_sensors>
     494:	82 60       	ori	r24, 0x02	; 2
     496:	80 93 4e 07 	sts	0x074E, r24	; 0x80074e <triggered_sensors>
     49a:	86 b1       	in	r24, 0x06	; 6
     49c:	80 95       	com	r24
     49e:	82 ff       	sbrs	r24, 2
     4a0:	08 c0       	rjmp	.+16     	; 0x4b2 <ARM_Tick+0x9e>
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	80 93 52 07 	sts	0x0752, r24	; 0x800752 <IR_one_trip>
     4a8:	80 91 4e 07 	lds	r24, 0x074E	; 0x80074e <triggered_sensors>
     4ac:	84 60       	ori	r24, 0x04	; 4
     4ae:	80 93 4e 07 	sts	0x074E, r24	; 0x80074e <triggered_sensors>
     4b2:	86 b1       	in	r24, 0x06	; 6
     4b4:	80 95       	com	r24
     4b6:	81 ff       	sbrs	r24, 1
     4b8:	08 c0       	rjmp	.+16     	; 0x4ca <ARM_Tick+0xb6>
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	80 93 4f 07 	sts	0x074F, r24	; 0x80074f <button_two_trip>
     4c0:	80 91 4e 07 	lds	r24, 0x074E	; 0x80074e <triggered_sensors>
     4c4:	88 60       	ori	r24, 0x08	; 8
     4c6:	80 93 4e 07 	sts	0x074E, r24	; 0x80074e <triggered_sensors>
     4ca:	30 99       	sbic	0x06, 0	; 6
     4cc:	18 c0       	rjmp	.+48     	; 0x4fe <ARM_Tick+0xea>
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <button_one_trip>
     4d4:	80 91 4e 07 	lds	r24, 0x074E	; 0x80074e <triggered_sensors>
     4d8:	80 61       	ori	r24, 0x10	; 16
     4da:	80 93 4e 07 	sts	0x074E, r24	; 0x80074e <triggered_sensors>
     4de:	0f c0       	rjmp	.+30     	; 0x4fe <ARM_Tick+0xea>
     4e0:	88 23       	and	r24, r24
     4e2:	19 f0       	breq	.+6      	; 0x4ea <ARM_Tick+0xd6>
     4e4:	81 30       	cpi	r24, 0x01	; 1
     4e6:	a9 f4       	brne	.+42     	; 0x512 <ARM_Tick+0xfe>
     4e8:	0a c0       	rjmp	.+20     	; 0x4fe <ARM_Tick+0xea>
     4ea:	80 91 57 07 	lds	r24, 0x0757	; 0x800757 <ARM_DISARM>
     4ee:	81 30       	cpi	r24, 0x01	; 1
     4f0:	19 f4       	brne	.+6      	; 0x4f8 <ARM_Tick+0xe4>
     4f2:	80 93 b7 07 	sts	0x07B7, r24	; 0x8007b7 <arm_state>
     4f6:	08 95       	ret
     4f8:	10 92 b7 07 	sts	0x07B7, r1	; 0x8007b7 <arm_state>
     4fc:	08 95       	ret
     4fe:	80 91 57 07 	lds	r24, 0x0757	; 0x800757 <ARM_DISARM>
     502:	81 30       	cpi	r24, 0x01	; 1
     504:	19 f4       	brne	.+6      	; 0x50c <ARM_Tick+0xf8>
     506:	80 93 b7 07 	sts	0x07B7, r24	; 0x8007b7 <arm_state>
     50a:	08 95       	ret
     50c:	10 92 b7 07 	sts	0x07B7, r1	; 0x8007b7 <arm_state>
     510:	08 95       	ret
     512:	10 92 b7 07 	sts	0x07B7, r1	; 0x8007b7 <arm_state>
     516:	08 95       	ret

00000518 <ARMSecTask>:
     518:	10 92 b7 07 	sts	0x07B7, r1	; 0x8007b7 <arm_state>
     51c:	7b df       	rcall	.-266    	; 0x414 <ARM_Tick>
     51e:	8a e0       	ldi	r24, 0x0A	; 10
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	d8 d6       	rcall	.+3504   	; 0x12d4 <vTaskDelay>
     524:	fb cf       	rjmp	.-10     	; 0x51c <ARMSecTask+0x4>

00000526 <StartARMPulse>:
     526:	af 92       	push	r10
     528:	bf 92       	push	r11
     52a:	cf 92       	push	r12
     52c:	df 92       	push	r13
     52e:	ef 92       	push	r14
     530:	ff 92       	push	r15
     532:	0f 93       	push	r16
     534:	a1 2c       	mov	r10, r1
     536:	b1 2c       	mov	r11, r1
     538:	c1 2c       	mov	r12, r1
     53a:	d1 2c       	mov	r13, r1
     53c:	e1 2c       	mov	r14, r1
     53e:	f1 2c       	mov	r15, r1
     540:	08 2f       	mov	r16, r24
     542:	20 e0       	ldi	r18, 0x00	; 0
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	45 e5       	ldi	r20, 0x55	; 85
     548:	50 e0       	ldi	r21, 0x00	; 0
     54a:	61 e2       	ldi	r22, 0x21	; 33
     54c:	71 e0       	ldi	r23, 0x01	; 1
     54e:	8c e8       	ldi	r24, 0x8C	; 140
     550:	92 e0       	ldi	r25, 0x02	; 2
     552:	58 d4       	rcall	.+2224   	; 0xe04 <xTaskGenericCreate>
     554:	0f 91       	pop	r16
     556:	ff 90       	pop	r15
     558:	ef 90       	pop	r14
     55a:	df 90       	pop	r13
     55c:	cf 90       	pop	r12
     55e:	bf 90       	pop	r11
     560:	af 90       	pop	r10
     562:	08 95       	ret

00000564 <Motor_Tick>:
     564:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <motor_state>
     568:	81 30       	cpi	r24, 0x01	; 1
     56a:	89 f0       	breq	.+34     	; 0x58e <Motor_Tick+0x2a>
     56c:	20 f0       	brcs	.+8      	; 0x576 <Motor_Tick+0x12>
     56e:	82 30       	cpi	r24, 0x02	; 2
     570:	09 f4       	brne	.+2      	; 0x574 <Motor_Tick+0x10>
     572:	69 c0       	rjmp	.+210    	; 0x646 <Motor_Tick+0xe2>
     574:	b6 c0       	rjmp	.+364    	; 0x6e2 <Motor_Tick+0x17e>
     576:	10 92 4a 07 	sts	0x074A, r1	; 0x80074a <finished_reset_1>
     57a:	10 92 4d 07 	sts	0x074D, r1	; 0x80074d <p_index>
     57e:	10 92 4c 07 	sts	0x074C, r1	; 0x80074c <numCounter+0x1>
     582:	10 92 4b 07 	sts	0x074B, r1	; 0x80074b <numCounter>
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <orientation>
     58c:	b2 c0       	rjmp	.+356    	; 0x6f2 <Motor_Tick+0x18e>
     58e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <orientation>
     592:	88 23       	and	r24, r24
     594:	59 f1       	breq	.+86     	; 0x5ec <Motor_Tick+0x88>
     596:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <numCounter>
     59a:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <numCounter+0x1>
     59e:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <numPhases>
     5a2:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <numPhases+0x1>
     5a6:	82 17       	cp	r24, r18
     5a8:	93 07       	cpc	r25, r19
     5aa:	bc f4       	brge	.+46     	; 0x5da <Motor_Tick+0x76>
     5ac:	01 96       	adiw	r24, 0x01	; 1
     5ae:	90 93 4c 07 	sts	0x074C, r25	; 0x80074c <numCounter+0x1>
     5b2:	80 93 4b 07 	sts	0x074B, r24	; 0x80074b <numCounter>
     5b6:	e0 91 4d 07 	lds	r30, 0x074D	; 0x80074d <p_index>
     5ba:	f0 e0       	ldi	r31, 0x00	; 0
     5bc:	e7 5f       	subi	r30, 0xF7	; 247
     5be:	fe 4f       	sbci	r31, 0xFE	; 254
     5c0:	80 81       	ld	r24, Z
     5c2:	85 b9       	out	0x05, r24	; 5
     5c4:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <p_index>
     5c8:	87 30       	cpi	r24, 0x07	; 7
     5ca:	19 f4       	brne	.+6      	; 0x5d2 <Motor_Tick+0x6e>
     5cc:	10 92 4d 07 	sts	0x074D, r1	; 0x80074d <p_index>
     5d0:	88 c0       	rjmp	.+272    	; 0x6e2 <Motor_Tick+0x17e>
     5d2:	8f 5f       	subi	r24, 0xFF	; 255
     5d4:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <p_index>
     5d8:	84 c0       	rjmp	.+264    	; 0x6e2 <Motor_Tick+0x17e>
     5da:	10 92 4c 07 	sts	0x074C, r1	; 0x80074c <numCounter+0x1>
     5de:	10 92 4b 07 	sts	0x074B, r1	; 0x80074b <numCounter>
     5e2:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <orientation>
     5e6:	10 92 4d 07 	sts	0x074D, r1	; 0x80074d <p_index>
     5ea:	8b c0       	rjmp	.+278    	; 0x702 <Motor_Tick+0x19e>
     5ec:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <numCounter>
     5f0:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <numCounter+0x1>
     5f4:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <numPhases>
     5f8:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <numPhases+0x1>
     5fc:	82 17       	cp	r24, r18
     5fe:	93 07       	cpc	r25, r19
     600:	c4 f4       	brge	.+48     	; 0x632 <Motor_Tick+0xce>
     602:	01 96       	adiw	r24, 0x01	; 1
     604:	90 93 4c 07 	sts	0x074C, r25	; 0x80074c <numCounter+0x1>
     608:	80 93 4b 07 	sts	0x074B, r24	; 0x80074b <numCounter>
     60c:	e0 91 4d 07 	lds	r30, 0x074D	; 0x80074d <p_index>
     610:	f0 e0       	ldi	r31, 0x00	; 0
     612:	e7 5f       	subi	r30, 0xF7	; 247
     614:	fe 4f       	sbci	r31, 0xFE	; 254
     616:	80 81       	ld	r24, Z
     618:	85 b9       	out	0x05, r24	; 5
     61a:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <p_index>
     61e:	81 11       	cpse	r24, r1
     620:	04 c0       	rjmp	.+8      	; 0x62a <Motor_Tick+0xc6>
     622:	87 e0       	ldi	r24, 0x07	; 7
     624:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <p_index>
     628:	5c c0       	rjmp	.+184    	; 0x6e2 <Motor_Tick+0x17e>
     62a:	81 50       	subi	r24, 0x01	; 1
     62c:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <p_index>
     630:	58 c0       	rjmp	.+176    	; 0x6e2 <Motor_Tick+0x17e>
     632:	10 92 4c 07 	sts	0x074C, r1	; 0x80074c <numCounter+0x1>
     636:	10 92 4b 07 	sts	0x074B, r1	; 0x80074b <numCounter>
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <orientation>
     640:	10 92 4d 07 	sts	0x074D, r1	; 0x80074d <p_index>
     644:	5e c0       	rjmp	.+188    	; 0x702 <Motor_Tick+0x19e>
     646:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <orientation>
     64a:	88 23       	and	r24, r24
     64c:	19 f1       	breq	.+70     	; 0x694 <Motor_Tick+0x130>
     64e:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <numCounter>
     652:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <numCounter+0x1>
     656:	18 16       	cp	r1, r24
     658:	19 06       	cpc	r1, r25
     65a:	c4 f4       	brge	.+48     	; 0x68c <Motor_Tick+0x128>
     65c:	01 97       	sbiw	r24, 0x01	; 1
     65e:	90 93 4c 07 	sts	0x074C, r25	; 0x80074c <numCounter+0x1>
     662:	80 93 4b 07 	sts	0x074B, r24	; 0x80074b <numCounter>
     666:	e0 91 4d 07 	lds	r30, 0x074D	; 0x80074d <p_index>
     66a:	f0 e0       	ldi	r31, 0x00	; 0
     66c:	e7 5f       	subi	r30, 0xF7	; 247
     66e:	fe 4f       	sbci	r31, 0xFE	; 254
     670:	80 81       	ld	r24, Z
     672:	85 b9       	out	0x05, r24	; 5
     674:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <p_index>
     678:	81 11       	cpse	r24, r1
     67a:	04 c0       	rjmp	.+8      	; 0x684 <Motor_Tick+0x120>
     67c:	87 e0       	ldi	r24, 0x07	; 7
     67e:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <p_index>
     682:	2f c0       	rjmp	.+94     	; 0x6e2 <Motor_Tick+0x17e>
     684:	81 50       	subi	r24, 0x01	; 1
     686:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <p_index>
     68a:	2b c0       	rjmp	.+86     	; 0x6e2 <Motor_Tick+0x17e>
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	80 93 4a 07 	sts	0x074A, r24	; 0x80074a <finished_reset_1>
     692:	43 c0       	rjmp	.+134    	; 0x71a <Motor_Tick+0x1b6>
     694:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <numCounter>
     698:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <numCounter+0x1>
     69c:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <numPhases>
     6a0:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <numPhases+0x1>
     6a4:	82 17       	cp	r24, r18
     6a6:	93 07       	cpc	r25, r19
     6a8:	c4 f4       	brge	.+48     	; 0x6da <Motor_Tick+0x176>
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	90 93 4c 07 	sts	0x074C, r25	; 0x80074c <numCounter+0x1>
     6b0:	80 93 4b 07 	sts	0x074B, r24	; 0x80074b <numCounter>
     6b4:	e0 91 4d 07 	lds	r30, 0x074D	; 0x80074d <p_index>
     6b8:	f0 e0       	ldi	r31, 0x00	; 0
     6ba:	e7 5f       	subi	r30, 0xF7	; 247
     6bc:	fe 4f       	sbci	r31, 0xFE	; 254
     6be:	80 81       	ld	r24, Z
     6c0:	85 b9       	out	0x05, r24	; 5
     6c2:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <p_index>
     6c6:	81 11       	cpse	r24, r1
     6c8:	04 c0       	rjmp	.+8      	; 0x6d2 <Motor_Tick+0x16e>
     6ca:	87 e0       	ldi	r24, 0x07	; 7
     6cc:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <p_index>
     6d0:	08 c0       	rjmp	.+16     	; 0x6e2 <Motor_Tick+0x17e>
     6d2:	81 50       	subi	r24, 0x01	; 1
     6d4:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <p_index>
     6d8:	04 c0       	rjmp	.+8      	; 0x6e2 <Motor_Tick+0x17e>
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	80 93 4a 07 	sts	0x074A, r24	; 0x80074a <finished_reset_1>
     6e0:	1c c0       	rjmp	.+56     	; 0x71a <Motor_Tick+0x1b6>
     6e2:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <motor_state>
     6e6:	81 30       	cpi	r24, 0x01	; 1
     6e8:	61 f0       	breq	.+24     	; 0x702 <Motor_Tick+0x19e>
     6ea:	18 f0       	brcs	.+6      	; 0x6f2 <Motor_Tick+0x18e>
     6ec:	82 30       	cpi	r24, 0x02	; 2
     6ee:	c1 f4       	brne	.+48     	; 0x720 <Motor_Tick+0x1bc>
     6f0:	10 c0       	rjmp	.+32     	; 0x712 <Motor_Tick+0x1ae>
     6f2:	80 91 57 07 	lds	r24, 0x0757	; 0x800757 <ARM_DISARM>
     6f6:	88 23       	and	r24, r24
     6f8:	a9 f0       	breq	.+42     	; 0x724 <Motor_Tick+0x1c0>
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	80 93 b4 07 	sts	0x07B4, r24	; 0x8007b4 <motor_state>
     700:	08 95       	ret
     702:	80 91 57 07 	lds	r24, 0x0757	; 0x800757 <ARM_DISARM>
     706:	81 30       	cpi	r24, 0x01	; 1
     708:	69 f0       	breq	.+26     	; 0x724 <Motor_Tick+0x1c0>
     70a:	82 e0       	ldi	r24, 0x02	; 2
     70c:	80 93 b4 07 	sts	0x07B4, r24	; 0x8007b4 <motor_state>
     710:	08 95       	ret
     712:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <finished_reset_1>
     716:	81 30       	cpi	r24, 0x01	; 1
     718:	29 f4       	brne	.+10     	; 0x724 <Motor_Tick+0x1c0>
     71a:	10 92 b4 07 	sts	0x07B4, r1	; 0x8007b4 <motor_state>
     71e:	08 95       	ret
     720:	10 92 b4 07 	sts	0x07B4, r1	; 0x8007b4 <motor_state>
     724:	08 95       	ret

00000726 <MotorSecTask>:
     726:	81 e0       	ldi	r24, 0x01	; 1
     728:	80 93 b4 07 	sts	0x07B4, r24	; 0x8007b4 <motor_state>
     72c:	1b df       	rcall	.-458    	; 0x564 <Motor_Tick>
     72e:	83 e0       	ldi	r24, 0x03	; 3
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	d0 d5       	rcall	.+2976   	; 0x12d4 <vTaskDelay>
     734:	fb cf       	rjmp	.-10     	; 0x72c <MotorSecTask+0x6>

00000736 <MotorSecPulse>:
     736:	af 92       	push	r10
     738:	bf 92       	push	r11
     73a:	cf 92       	push	r12
     73c:	df 92       	push	r13
     73e:	ef 92       	push	r14
     740:	ff 92       	push	r15
     742:	0f 93       	push	r16
     744:	a1 2c       	mov	r10, r1
     746:	b1 2c       	mov	r11, r1
     748:	c1 2c       	mov	r12, r1
     74a:	d1 2c       	mov	r13, r1
     74c:	e1 2c       	mov	r14, r1
     74e:	f1 2c       	mov	r15, r1
     750:	08 2f       	mov	r16, r24
     752:	20 e0       	ldi	r18, 0x00	; 0
     754:	30 e0       	ldi	r19, 0x00	; 0
     756:	45 e5       	ldi	r20, 0x55	; 85
     758:	50 e0       	ldi	r21, 0x00	; 0
     75a:	6c e2       	ldi	r22, 0x2C	; 44
     75c:	71 e0       	ldi	r23, 0x01	; 1
     75e:	83 e9       	ldi	r24, 0x93	; 147
     760:	93 e0       	ldi	r25, 0x03	; 3
     762:	50 d3       	rcall	.+1696   	; 0xe04 <xTaskGenericCreate>
     764:	0f 91       	pop	r16
     766:	ff 90       	pop	r15
     768:	ef 90       	pop	r14
     76a:	df 90       	pop	r13
     76c:	cf 90       	pop	r12
     76e:	bf 90       	pop	r11
     770:	af 90       	pop	r10
     772:	08 95       	ret

00000774 <Motor_Tick_2>:
     774:	80 91 b5 07 	lds	r24, 0x07B5	; 0x8007b5 <motor_state_2>
     778:	81 30       	cpi	r24, 0x01	; 1
     77a:	81 f0       	breq	.+32     	; 0x79c <Motor_Tick_2+0x28>
     77c:	20 f0       	brcs	.+8      	; 0x786 <Motor_Tick_2+0x12>
     77e:	82 30       	cpi	r24, 0x02	; 2
     780:	09 f4       	brne	.+2      	; 0x784 <Motor_Tick_2+0x10>
     782:	6c c0       	rjmp	.+216    	; 0x85c <Motor_Tick_2+0xe8>
     784:	bb c0       	rjmp	.+374    	; 0x8fc <Motor_Tick_2+0x188>
     786:	10 92 45 07 	sts	0x0745, r1	; 0x800745 <finished_reset_2>
     78a:	10 92 48 07 	sts	0x0748, r1	; 0x800748 <p_index_2>
     78e:	10 92 47 07 	sts	0x0747, r1	; 0x800747 <numCounter_2+0x1>
     792:	10 92 46 07 	sts	0x0746, r1	; 0x800746 <numCounter_2>
     796:	10 92 49 07 	sts	0x0749, r1	; 0x800749 <orientation_2>
     79a:	b8 c0       	rjmp	.+368    	; 0x90c <Motor_Tick_2+0x198>
     79c:	80 91 49 07 	lds	r24, 0x0749	; 0x800749 <orientation_2>
     7a0:	88 23       	and	r24, r24
     7a2:	69 f1       	breq	.+90     	; 0x7fe <Motor_Tick_2+0x8a>
     7a4:	80 91 46 07 	lds	r24, 0x0746	; 0x800746 <numCounter_2>
     7a8:	90 91 47 07 	lds	r25, 0x0747	; 0x800747 <numCounter_2+0x1>
     7ac:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <numPhases>
     7b0:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <numPhases+0x1>
     7b4:	82 17       	cp	r24, r18
     7b6:	93 07       	cpc	r25, r19
     7b8:	cc f4       	brge	.+50     	; 0x7ec <Motor_Tick_2+0x78>
     7ba:	01 96       	adiw	r24, 0x01	; 1
     7bc:	90 93 47 07 	sts	0x0747, r25	; 0x800747 <numCounter_2+0x1>
     7c0:	80 93 46 07 	sts	0x0746, r24	; 0x800746 <numCounter_2>
     7c4:	95 b1       	in	r25, 0x05	; 5
     7c6:	e0 91 48 07 	lds	r30, 0x0748	; 0x800748 <p_index_2>
     7ca:	f0 e0       	ldi	r31, 0x00	; 0
     7cc:	e0 50       	subi	r30, 0x00	; 0
     7ce:	ff 4f       	sbci	r31, 0xFF	; 255
     7d0:	80 81       	ld	r24, Z
     7d2:	89 2b       	or	r24, r25
     7d4:	85 b9       	out	0x05, r24	; 5
     7d6:	80 91 48 07 	lds	r24, 0x0748	; 0x800748 <p_index_2>
     7da:	87 30       	cpi	r24, 0x07	; 7
     7dc:	19 f4       	brne	.+6      	; 0x7e4 <Motor_Tick_2+0x70>
     7de:	10 92 48 07 	sts	0x0748, r1	; 0x800748 <p_index_2>
     7e2:	8c c0       	rjmp	.+280    	; 0x8fc <Motor_Tick_2+0x188>
     7e4:	8f 5f       	subi	r24, 0xFF	; 255
     7e6:	80 93 48 07 	sts	0x0748, r24	; 0x800748 <p_index_2>
     7ea:	88 c0       	rjmp	.+272    	; 0x8fc <Motor_Tick_2+0x188>
     7ec:	10 92 47 07 	sts	0x0747, r1	; 0x800747 <numCounter_2+0x1>
     7f0:	10 92 46 07 	sts	0x0746, r1	; 0x800746 <numCounter_2>
     7f4:	10 92 49 07 	sts	0x0749, r1	; 0x800749 <orientation_2>
     7f8:	10 92 48 07 	sts	0x0748, r1	; 0x800748 <p_index_2>
     7fc:	8f c0       	rjmp	.+286    	; 0x91c <Motor_Tick_2+0x1a8>
     7fe:	80 91 46 07 	lds	r24, 0x0746	; 0x800746 <numCounter_2>
     802:	90 91 47 07 	lds	r25, 0x0747	; 0x800747 <numCounter_2+0x1>
     806:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <numPhases>
     80a:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <numPhases+0x1>
     80e:	82 17       	cp	r24, r18
     810:	93 07       	cpc	r25, r19
     812:	d4 f4       	brge	.+52     	; 0x848 <Motor_Tick_2+0xd4>
     814:	01 96       	adiw	r24, 0x01	; 1
     816:	90 93 47 07 	sts	0x0747, r25	; 0x800747 <numCounter_2+0x1>
     81a:	80 93 46 07 	sts	0x0746, r24	; 0x800746 <numCounter_2>
     81e:	95 b1       	in	r25, 0x05	; 5
     820:	e0 91 48 07 	lds	r30, 0x0748	; 0x800748 <p_index_2>
     824:	f0 e0       	ldi	r31, 0x00	; 0
     826:	e0 50       	subi	r30, 0x00	; 0
     828:	ff 4f       	sbci	r31, 0xFF	; 255
     82a:	80 81       	ld	r24, Z
     82c:	89 2b       	or	r24, r25
     82e:	85 b9       	out	0x05, r24	; 5
     830:	80 91 48 07 	lds	r24, 0x0748	; 0x800748 <p_index_2>
     834:	81 11       	cpse	r24, r1
     836:	04 c0       	rjmp	.+8      	; 0x840 <Motor_Tick_2+0xcc>
     838:	87 e0       	ldi	r24, 0x07	; 7
     83a:	80 93 48 07 	sts	0x0748, r24	; 0x800748 <p_index_2>
     83e:	5e c0       	rjmp	.+188    	; 0x8fc <Motor_Tick_2+0x188>
     840:	81 50       	subi	r24, 0x01	; 1
     842:	80 93 48 07 	sts	0x0748, r24	; 0x800748 <p_index_2>
     846:	5a c0       	rjmp	.+180    	; 0x8fc <Motor_Tick_2+0x188>
     848:	10 92 47 07 	sts	0x0747, r1	; 0x800747 <numCounter_2+0x1>
     84c:	10 92 46 07 	sts	0x0746, r1	; 0x800746 <numCounter_2>
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	80 93 49 07 	sts	0x0749, r24	; 0x800749 <orientation_2>
     856:	10 92 48 07 	sts	0x0748, r1	; 0x800748 <p_index_2>
     85a:	60 c0       	rjmp	.+192    	; 0x91c <Motor_Tick_2+0x1a8>
     85c:	80 91 49 07 	lds	r24, 0x0749	; 0x800749 <orientation_2>
     860:	81 11       	cpse	r24, r1
     862:	24 c0       	rjmp	.+72     	; 0x8ac <Motor_Tick_2+0x138>
     864:	80 91 46 07 	lds	r24, 0x0746	; 0x800746 <numCounter_2>
     868:	90 91 47 07 	lds	r25, 0x0747	; 0x800747 <numCounter_2+0x1>
     86c:	18 16       	cp	r1, r24
     86e:	19 06       	cpc	r1, r25
     870:	cc f4       	brge	.+50     	; 0x8a4 <Motor_Tick_2+0x130>
     872:	01 97       	sbiw	r24, 0x01	; 1
     874:	90 93 47 07 	sts	0x0747, r25	; 0x800747 <numCounter_2+0x1>
     878:	80 93 46 07 	sts	0x0746, r24	; 0x800746 <numCounter_2>
     87c:	95 b1       	in	r25, 0x05	; 5
     87e:	e0 91 48 07 	lds	r30, 0x0748	; 0x800748 <p_index_2>
     882:	f0 e0       	ldi	r31, 0x00	; 0
     884:	e0 50       	subi	r30, 0x00	; 0
     886:	ff 4f       	sbci	r31, 0xFF	; 255
     888:	80 81       	ld	r24, Z
     88a:	89 2b       	or	r24, r25
     88c:	85 b9       	out	0x05, r24	; 5
     88e:	80 91 48 07 	lds	r24, 0x0748	; 0x800748 <p_index_2>
     892:	87 30       	cpi	r24, 0x07	; 7
     894:	19 f4       	brne	.+6      	; 0x89c <Motor_Tick_2+0x128>
     896:	10 92 48 07 	sts	0x0748, r1	; 0x800748 <p_index_2>
     89a:	30 c0       	rjmp	.+96     	; 0x8fc <Motor_Tick_2+0x188>
     89c:	8f 5f       	subi	r24, 0xFF	; 255
     89e:	80 93 48 07 	sts	0x0748, r24	; 0x800748 <p_index_2>
     8a2:	2c c0       	rjmp	.+88     	; 0x8fc <Motor_Tick_2+0x188>
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	80 93 45 07 	sts	0x0745, r24	; 0x800745 <finished_reset_2>
     8aa:	44 c0       	rjmp	.+136    	; 0x934 <Motor_Tick_2+0x1c0>
     8ac:	80 91 46 07 	lds	r24, 0x0746	; 0x800746 <numCounter_2>
     8b0:	90 91 47 07 	lds	r25, 0x0747	; 0x800747 <numCounter_2+0x1>
     8b4:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <numPhases>
     8b8:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <numPhases+0x1>
     8bc:	82 17       	cp	r24, r18
     8be:	93 07       	cpc	r25, r19
     8c0:	cc f4       	brge	.+50     	; 0x8f4 <Motor_Tick_2+0x180>
     8c2:	01 96       	adiw	r24, 0x01	; 1
     8c4:	90 93 47 07 	sts	0x0747, r25	; 0x800747 <numCounter_2+0x1>
     8c8:	80 93 46 07 	sts	0x0746, r24	; 0x800746 <numCounter_2>
     8cc:	95 b1       	in	r25, 0x05	; 5
     8ce:	e0 91 48 07 	lds	r30, 0x0748	; 0x800748 <p_index_2>
     8d2:	f0 e0       	ldi	r31, 0x00	; 0
     8d4:	e0 50       	subi	r30, 0x00	; 0
     8d6:	ff 4f       	sbci	r31, 0xFF	; 255
     8d8:	80 81       	ld	r24, Z
     8da:	89 2b       	or	r24, r25
     8dc:	85 b9       	out	0x05, r24	; 5
     8de:	80 91 48 07 	lds	r24, 0x0748	; 0x800748 <p_index_2>
     8e2:	87 30       	cpi	r24, 0x07	; 7
     8e4:	19 f4       	brne	.+6      	; 0x8ec <Motor_Tick_2+0x178>
     8e6:	10 92 48 07 	sts	0x0748, r1	; 0x800748 <p_index_2>
     8ea:	08 c0       	rjmp	.+16     	; 0x8fc <Motor_Tick_2+0x188>
     8ec:	8f 5f       	subi	r24, 0xFF	; 255
     8ee:	80 93 48 07 	sts	0x0748, r24	; 0x800748 <p_index_2>
     8f2:	04 c0       	rjmp	.+8      	; 0x8fc <Motor_Tick_2+0x188>
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	80 93 45 07 	sts	0x0745, r24	; 0x800745 <finished_reset_2>
     8fa:	1c c0       	rjmp	.+56     	; 0x934 <Motor_Tick_2+0x1c0>
     8fc:	80 91 b5 07 	lds	r24, 0x07B5	; 0x8007b5 <motor_state_2>
     900:	81 30       	cpi	r24, 0x01	; 1
     902:	61 f0       	breq	.+24     	; 0x91c <Motor_Tick_2+0x1a8>
     904:	18 f0       	brcs	.+6      	; 0x90c <Motor_Tick_2+0x198>
     906:	82 30       	cpi	r24, 0x02	; 2
     908:	c1 f4       	brne	.+48     	; 0x93a <Motor_Tick_2+0x1c6>
     90a:	10 c0       	rjmp	.+32     	; 0x92c <Motor_Tick_2+0x1b8>
     90c:	80 91 57 07 	lds	r24, 0x0757	; 0x800757 <ARM_DISARM>
     910:	88 23       	and	r24, r24
     912:	a9 f0       	breq	.+42     	; 0x93e <Motor_Tick_2+0x1ca>
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	80 93 b5 07 	sts	0x07B5, r24	; 0x8007b5 <motor_state_2>
     91a:	08 95       	ret
     91c:	80 91 57 07 	lds	r24, 0x0757	; 0x800757 <ARM_DISARM>
     920:	81 30       	cpi	r24, 0x01	; 1
     922:	69 f0       	breq	.+26     	; 0x93e <Motor_Tick_2+0x1ca>
     924:	82 e0       	ldi	r24, 0x02	; 2
     926:	80 93 b5 07 	sts	0x07B5, r24	; 0x8007b5 <motor_state_2>
     92a:	08 95       	ret
     92c:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <finished_reset_2>
     930:	81 30       	cpi	r24, 0x01	; 1
     932:	29 f4       	brne	.+10     	; 0x93e <Motor_Tick_2+0x1ca>
     934:	10 92 b5 07 	sts	0x07B5, r1	; 0x8007b5 <motor_state_2>
     938:	08 95       	ret
     93a:	10 92 b5 07 	sts	0x07B5, r1	; 0x8007b5 <motor_state_2>
     93e:	08 95       	ret

00000940 <MotorSecTask_2>:
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	80 93 b5 07 	sts	0x07B5, r24	; 0x8007b5 <motor_state_2>
     946:	16 df       	rcall	.-468    	; 0x774 <Motor_Tick_2>
     948:	83 e0       	ldi	r24, 0x03	; 3
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	c3 d4       	rcall	.+2438   	; 0x12d4 <vTaskDelay>
     94e:	fb cf       	rjmp	.-10     	; 0x946 <MotorSecTask_2+0x6>

00000950 <Motor2SecPulse>:
     950:	af 92       	push	r10
     952:	bf 92       	push	r11
     954:	cf 92       	push	r12
     956:	df 92       	push	r13
     958:	ef 92       	push	r14
     95a:	ff 92       	push	r15
     95c:	0f 93       	push	r16
     95e:	a1 2c       	mov	r10, r1
     960:	b1 2c       	mov	r11, r1
     962:	c1 2c       	mov	r12, r1
     964:	d1 2c       	mov	r13, r1
     966:	e1 2c       	mov	r14, r1
     968:	f1 2c       	mov	r15, r1
     96a:	08 2f       	mov	r16, r24
     96c:	20 e0       	ldi	r18, 0x00	; 0
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	45 e5       	ldi	r20, 0x55	; 85
     972:	50 e0       	ldi	r21, 0x00	; 0
     974:	69 e3       	ldi	r22, 0x39	; 57
     976:	71 e0       	ldi	r23, 0x01	; 1
     978:	80 ea       	ldi	r24, 0xA0	; 160
     97a:	94 e0       	ldi	r25, 0x04	; 4
     97c:	43 d2       	rcall	.+1158   	; 0xe04 <xTaskGenericCreate>
     97e:	0f 91       	pop	r16
     980:	ff 90       	pop	r15
     982:	ef 90       	pop	r14
     984:	df 90       	pop	r13
     986:	cf 90       	pop	r12
     988:	bf 90       	pop	r11
     98a:	af 90       	pop	r10
     98c:	08 95       	ret

0000098e <Trans_Tick>:
     98e:	80 91 b3 07 	lds	r24, 0x07B3	; 0x8007b3 <trans_state>
     992:	81 30       	cpi	r24, 0x01	; 1
     994:	21 f4       	brne	.+8      	; 0x99e <Trans_Tick+0x10>
     996:	60 e0       	ldi	r22, 0x00	; 0
     998:	80 91 4e 07 	lds	r24, 0x074E	; 0x80074e <triggered_sensors>
     99c:	95 dc       	rcall	.-1750   	; 0x2c8 <USART_Send>
     99e:	80 91 b3 07 	lds	r24, 0x07B3	; 0x8007b3 <trans_state>
     9a2:	88 23       	and	r24, r24
     9a4:	19 f0       	breq	.+6      	; 0x9ac <Trans_Tick+0x1e>
     9a6:	81 30       	cpi	r24, 0x01	; 1
     9a8:	61 f0       	breq	.+24     	; 0x9c2 <Trans_Tick+0x34>
     9aa:	12 c0       	rjmp	.+36     	; 0x9d0 <Trans_Tick+0x42>
     9ac:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     9b0:	85 ff       	sbrs	r24, 5
     9b2:	10 c0       	rjmp	.+32     	; 0x9d4 <Trans_Tick+0x46>
     9b4:	80 91 57 07 	lds	r24, 0x0757	; 0x800757 <ARM_DISARM>
     9b8:	81 30       	cpi	r24, 0x01	; 1
     9ba:	61 f4       	brne	.+24     	; 0x9d4 <Trans_Tick+0x46>
     9bc:	80 93 b3 07 	sts	0x07B3, r24	; 0x8007b3 <trans_state>
     9c0:	08 95       	ret
     9c2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     9c6:	86 ff       	sbrs	r24, 6
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <Trans_Tick+0x46>
     9ca:	10 92 b3 07 	sts	0x07B3, r1	; 0x8007b3 <trans_state>
     9ce:	08 95       	ret
     9d0:	10 92 b3 07 	sts	0x07B3, r1	; 0x8007b3 <trans_state>
     9d4:	08 95       	ret

000009d6 <TransSecTask>:
     9d6:	10 92 b3 07 	sts	0x07B3, r1	; 0x8007b3 <trans_state>
     9da:	d9 df       	rcall	.-78     	; 0x98e <Trans_Tick>
     9dc:	8a e0       	ldi	r24, 0x0A	; 10
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	79 d4       	rcall	.+2290   	; 0x12d4 <vTaskDelay>
     9e2:	fb cf       	rjmp	.-10     	; 0x9da <TransSecTask+0x4>

000009e4 <TransSecPulse>:
     9e4:	af 92       	push	r10
     9e6:	bf 92       	push	r11
     9e8:	cf 92       	push	r12
     9ea:	df 92       	push	r13
     9ec:	ef 92       	push	r14
     9ee:	ff 92       	push	r15
     9f0:	0f 93       	push	r16
     9f2:	a1 2c       	mov	r10, r1
     9f4:	b1 2c       	mov	r11, r1
     9f6:	c1 2c       	mov	r12, r1
     9f8:	d1 2c       	mov	r13, r1
     9fa:	e1 2c       	mov	r14, r1
     9fc:	f1 2c       	mov	r15, r1
     9fe:	08 2f       	mov	r16, r24
     a00:	20 e0       	ldi	r18, 0x00	; 0
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	45 e5       	ldi	r20, 0x55	; 85
     a06:	50 e0       	ldi	r21, 0x00	; 0
     a08:	68 e4       	ldi	r22, 0x48	; 72
     a0a:	71 e0       	ldi	r23, 0x01	; 1
     a0c:	8b ee       	ldi	r24, 0xEB	; 235
     a0e:	94 e0       	ldi	r25, 0x04	; 4
     a10:	f9 d1       	rcall	.+1010   	; 0xe04 <xTaskGenericCreate>
     a12:	0f 91       	pop	r16
     a14:	ff 90       	pop	r15
     a16:	ef 90       	pop	r14
     a18:	df 90       	pop	r13
     a1a:	cf 90       	pop	r12
     a1c:	bf 90       	pop	r11
     a1e:	af 90       	pop	r10
     a20:	08 95       	ret

00000a22 <Rec_Tick>:
}

void Rec_Tick(){
	//Actions
	switch(rec_state){
     a22:	80 91 b2 07 	lds	r24, 0x07B2	; 0x8007b2 <rec_state>
     a26:	81 30       	cpi	r24, 0x01	; 1
     a28:	71 f4       	brne	.+28     	; 0xa46 <Rec_Tick+0x24>
		break;


		case Receive_State:
		//ARM_DISARM = USART_Receive(0); //receive data
		 received_data = USART_Receive(0);
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	5f dc       	rcall	.-1858   	; 0x2ec <USART_Receive>
     a2e:	80 93 44 07 	sts	0x0744, r24	; 0x800744 <received_data>
		if( received_data == 0xFF){ //ARM SYSTEM
     a32:	8f 3f       	cpi	r24, 0xFF	; 255
     a34:	21 f4       	brne	.+8      	; 0xa3e <Rec_Tick+0x1c>
			ARM_DISARM = 1;
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	80 93 57 07 	sts	0x0757, r24	; 0x800757 <ARM_DISARM>
     a3c:	02 c0       	rjmp	.+4      	; 0xa42 <Rec_Tick+0x20>
		}
		else{							//DISARM SYSTEM
			ARM_DISARM = 0;
     a3e:	10 92 57 07 	sts	0x0757, r1	; 0x800757 <ARM_DISARM>
		}
	
		USART_Flush(0); //flush so flag reset
     a42:	80 e0       	ldi	r24, 0x00	; 0
		
		default:
		break;
	}
	//Transitions
	switch(rec_state){
     a44:	24 dc       	rcall	.-1976   	; 0x28e <USART_Flush>
     a46:	80 91 b2 07 	lds	r24, 0x07B2	; 0x8007b2 <rec_state>
     a4a:	88 23       	and	r24, r24
			}
		break;


		case Receive_State:
			rec_state = Rec_Wait; //go back 
     a4c:	19 f0       	breq	.+6      	; 0xa54 <Rec_Tick+0x32>
     a4e:	10 92 b2 07 	sts	0x07B2, r1	; 0x8007b2 <rec_state>
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
     a52:	08 95       	ret
     a54:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
		break;
	}
	//Transitions
	switch(rec_state){
		case Rec_Wait:
			if(USART_HasReceived(0)){
     a58:	88 23       	and	r24, r24
				rec_state = Receive_State; //if ready go to next state
     a5a:	1c f4       	brge	.+6      	; 0xa62 <Rec_Tick+0x40>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	80 93 b2 07 	sts	0x07B2, r24	; 0x8007b2 <rec_state>
     a62:	08 95       	ret

00000a64 <RecSecTask>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//RECEIVE FSM
enum RECState {Rec_Wait, Receive_State } rec_state;

void REC_Init(){
	rec_state = Rec_Wait;
     a64:	10 92 b2 07 	sts	0x07B2, r1	; 0x8007b2 <rec_state>
{
	REC_Init();
	for(;;)
	{
		Rec_Tick();
		vTaskDelay(10);
     a68:	dc df       	rcall	.-72     	; 0xa22 <Rec_Tick>
     a6a:	8a e0       	ldi	r24, 0x0A	; 10
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	32 d4       	rcall	.+2148   	; 0x12d4 <vTaskDelay>
     a70:	fb cf       	rjmp	.-10     	; 0xa68 <RecSecTask+0x4>

00000a72 <RecSecPulse>:
	}
}

void RecSecPulse(unsigned portBASE_TYPE Priority)
{
     a72:	af 92       	push	r10
     a74:	bf 92       	push	r11
     a76:	cf 92       	push	r12
     a78:	df 92       	push	r13
     a7a:	ef 92       	push	r14
     a7c:	ff 92       	push	r15
     a7e:	0f 93       	push	r16
	xTaskCreate(RecSecTask, (signed portCHAR *)"RecSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
     a80:	a1 2c       	mov	r10, r1
     a82:	b1 2c       	mov	r11, r1
     a84:	c1 2c       	mov	r12, r1
     a86:	d1 2c       	mov	r13, r1
     a88:	e1 2c       	mov	r14, r1
     a8a:	f1 2c       	mov	r15, r1
     a8c:	08 2f       	mov	r16, r24
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	45 e5       	ldi	r20, 0x55	; 85
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	65 e5       	ldi	r22, 0x55	; 85
     a98:	71 e0       	ldi	r23, 0x01	; 1
     a9a:	82 e3       	ldi	r24, 0x32	; 50
     a9c:	95 e0       	ldi	r25, 0x05	; 5
     a9e:	b2 d1       	rcall	.+868    	; 0xe04 <xTaskGenericCreate>
}
     aa0:	0f 91       	pop	r16
     aa2:	ff 90       	pop	r15
     aa4:	ef 90       	pop	r14
     aa6:	df 90       	pop	r13
     aa8:	cf 90       	pop	r12
     aaa:	bf 90       	pop	r11
     aac:	af 90       	pop	r10
     aae:	08 95       	ret

00000ab0 <main>:

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 
int main(void) 
{ 
     ab0:	2f dc       	rcall	.-1954   	; 0x310 <ADC_init>
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	ca db       	rcall	.-2156   	; 0x24a <initUSART>
     ab6:	11 b8       	out	0x01, r1	; 1
     ab8:	8f ef       	ldi	r24, 0xFF	; 255
     aba:	82 b9       	out	0x02, r24	; 2
     abc:	84 b9       	out	0x04, r24	; 4
     abe:	15 b8       	out	0x05, r1	; 5
     ac0:	17 b8       	out	0x07, r1	; 7
     ac2:	88 b9       	out	0x08, r24	; 8
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	8e df       	rcall	.-228    	; 0x9e4 <TransSecPulse>
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	35 de       	rcall	.-918    	; 0x736 <MotorSecPulse>
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	40 df       	rcall	.-384    	; 0x950 <Motor2SecPulse>
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	29 dd       	rcall	.-1454   	; 0x526 <StartARMPulse>
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	7f dc       	rcall	.-1794   	; 0x3d6 <StartTempPulse>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	84 df       	rcall	.-248    	; 0x9e4 <TransSecPulse>
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	c9 df       	rcall	.-110    	; 0xa72 <RecSecPulse>
     ae0:	84 d2       	rcall	.+1288   	; 0xfea <vTaskStartScheduler>
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	08 95       	ret

00000ae8 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     ae8:	31 e1       	ldi	r19, 0x11	; 17
     aea:	fc 01       	movw	r30, r24
     aec:	30 83       	st	Z, r19
     aee:	31 97       	sbiw	r30, 0x01	; 1
     af0:	22 e2       	ldi	r18, 0x22	; 34
     af2:	20 83       	st	Z, r18
     af4:	31 97       	sbiw	r30, 0x01	; 1
     af6:	a3 e3       	ldi	r26, 0x33	; 51
     af8:	a0 83       	st	Z, r26
     afa:	31 97       	sbiw	r30, 0x01	; 1
     afc:	60 83       	st	Z, r22
     afe:	31 97       	sbiw	r30, 0x01	; 1
     b00:	70 83       	st	Z, r23
     b02:	31 97       	sbiw	r30, 0x01	; 1
     b04:	10 82       	st	Z, r1
     b06:	31 97       	sbiw	r30, 0x01	; 1
     b08:	60 e8       	ldi	r22, 0x80	; 128
     b0a:	60 83       	st	Z, r22
     b0c:	31 97       	sbiw	r30, 0x01	; 1
     b0e:	10 82       	st	Z, r1
     b10:	31 97       	sbiw	r30, 0x01	; 1
     b12:	62 e0       	ldi	r22, 0x02	; 2
     b14:	60 83       	st	Z, r22
     b16:	31 97       	sbiw	r30, 0x01	; 1
     b18:	63 e0       	ldi	r22, 0x03	; 3
     b1a:	60 83       	st	Z, r22
     b1c:	31 97       	sbiw	r30, 0x01	; 1
     b1e:	64 e0       	ldi	r22, 0x04	; 4
     b20:	60 83       	st	Z, r22
     b22:	31 97       	sbiw	r30, 0x01	; 1
     b24:	65 e0       	ldi	r22, 0x05	; 5
     b26:	60 83       	st	Z, r22
     b28:	31 97       	sbiw	r30, 0x01	; 1
     b2a:	66 e0       	ldi	r22, 0x06	; 6
     b2c:	60 83       	st	Z, r22
     b2e:	31 97       	sbiw	r30, 0x01	; 1
     b30:	67 e0       	ldi	r22, 0x07	; 7
     b32:	60 83       	st	Z, r22
     b34:	31 97       	sbiw	r30, 0x01	; 1
     b36:	68 e0       	ldi	r22, 0x08	; 8
     b38:	60 83       	st	Z, r22
     b3a:	31 97       	sbiw	r30, 0x01	; 1
     b3c:	69 e0       	ldi	r22, 0x09	; 9
     b3e:	60 83       	st	Z, r22
     b40:	31 97       	sbiw	r30, 0x01	; 1
     b42:	60 e1       	ldi	r22, 0x10	; 16
     b44:	60 83       	st	Z, r22
     b46:	31 97       	sbiw	r30, 0x01	; 1
     b48:	30 83       	st	Z, r19
     b4a:	31 97       	sbiw	r30, 0x01	; 1
     b4c:	32 e1       	ldi	r19, 0x12	; 18
     b4e:	30 83       	st	Z, r19
     b50:	31 97       	sbiw	r30, 0x01	; 1
     b52:	33 e1       	ldi	r19, 0x13	; 19
     b54:	30 83       	st	Z, r19
     b56:	31 97       	sbiw	r30, 0x01	; 1
     b58:	34 e1       	ldi	r19, 0x14	; 20
     b5a:	30 83       	st	Z, r19
     b5c:	31 97       	sbiw	r30, 0x01	; 1
     b5e:	35 e1       	ldi	r19, 0x15	; 21
     b60:	30 83       	st	Z, r19
     b62:	31 97       	sbiw	r30, 0x01	; 1
     b64:	36 e1       	ldi	r19, 0x16	; 22
     b66:	30 83       	st	Z, r19
     b68:	31 97       	sbiw	r30, 0x01	; 1
     b6a:	37 e1       	ldi	r19, 0x17	; 23
     b6c:	30 83       	st	Z, r19
     b6e:	31 97       	sbiw	r30, 0x01	; 1
     b70:	38 e1       	ldi	r19, 0x18	; 24
     b72:	30 83       	st	Z, r19
     b74:	31 97       	sbiw	r30, 0x01	; 1
     b76:	39 e1       	ldi	r19, 0x19	; 25
     b78:	30 83       	st	Z, r19
     b7a:	31 97       	sbiw	r30, 0x01	; 1
     b7c:	30 e2       	ldi	r19, 0x20	; 32
     b7e:	30 83       	st	Z, r19
     b80:	31 97       	sbiw	r30, 0x01	; 1
     b82:	31 e2       	ldi	r19, 0x21	; 33
     b84:	30 83       	st	Z, r19
     b86:	31 97       	sbiw	r30, 0x01	; 1
     b88:	20 83       	st	Z, r18
     b8a:	31 97       	sbiw	r30, 0x01	; 1
     b8c:	23 e2       	ldi	r18, 0x23	; 35
     b8e:	20 83       	st	Z, r18
     b90:	31 97       	sbiw	r30, 0x01	; 1
     b92:	40 83       	st	Z, r20
     b94:	31 97       	sbiw	r30, 0x01	; 1
     b96:	50 83       	st	Z, r21
     b98:	31 97       	sbiw	r30, 0x01	; 1
     b9a:	26 e2       	ldi	r18, 0x26	; 38
     b9c:	20 83       	st	Z, r18
     b9e:	31 97       	sbiw	r30, 0x01	; 1
     ba0:	27 e2       	ldi	r18, 0x27	; 39
     ba2:	20 83       	st	Z, r18
     ba4:	31 97       	sbiw	r30, 0x01	; 1
     ba6:	28 e2       	ldi	r18, 0x28	; 40
     ba8:	20 83       	st	Z, r18
     baa:	31 97       	sbiw	r30, 0x01	; 1
     bac:	29 e2       	ldi	r18, 0x29	; 41
     bae:	20 83       	st	Z, r18
     bb0:	31 97       	sbiw	r30, 0x01	; 1
     bb2:	20 e3       	ldi	r18, 0x30	; 48
     bb4:	20 83       	st	Z, r18
     bb6:	31 97       	sbiw	r30, 0x01	; 1
     bb8:	21 e3       	ldi	r18, 0x31	; 49
     bba:	20 83       	st	Z, r18
     bbc:	86 97       	sbiw	r24, 0x26	; 38
     bbe:	08 95       	ret

00000bc0 <xPortStartScheduler>:
     bc0:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     bc4:	8c e7       	ldi	r24, 0x7C	; 124
     bc6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     bca:	8b e0       	ldi	r24, 0x0B	; 11
     bcc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     bd0:	ef e6       	ldi	r30, 0x6F	; 111
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	82 60       	ori	r24, 0x02	; 2
     bd8:	80 83       	st	Z, r24
     bda:	a0 91 b0 07 	lds	r26, 0x07B0	; 0x8007b0 <pxCurrentTCB>
     bde:	b0 91 b1 07 	lds	r27, 0x07B1	; 0x8007b1 <pxCurrentTCB+0x1>
     be2:	cd 91       	ld	r28, X+
     be4:	cd bf       	out	0x3d, r28	; 61
     be6:	dd 91       	ld	r29, X+
     be8:	de bf       	out	0x3e, r29	; 62
     bea:	ff 91       	pop	r31
     bec:	ef 91       	pop	r30
     bee:	df 91       	pop	r29
     bf0:	cf 91       	pop	r28
     bf2:	bf 91       	pop	r27
     bf4:	af 91       	pop	r26
     bf6:	9f 91       	pop	r25
     bf8:	8f 91       	pop	r24
     bfa:	7f 91       	pop	r23
     bfc:	6f 91       	pop	r22
     bfe:	5f 91       	pop	r21
     c00:	4f 91       	pop	r20
     c02:	3f 91       	pop	r19
     c04:	2f 91       	pop	r18
     c06:	1f 91       	pop	r17
     c08:	0f 91       	pop	r16
     c0a:	ff 90       	pop	r15
     c0c:	ef 90       	pop	r14
     c0e:	df 90       	pop	r13
     c10:	cf 90       	pop	r12
     c12:	bf 90       	pop	r11
     c14:	af 90       	pop	r10
     c16:	9f 90       	pop	r9
     c18:	8f 90       	pop	r8
     c1a:	7f 90       	pop	r7
     c1c:	6f 90       	pop	r6
     c1e:	5f 90       	pop	r5
     c20:	4f 90       	pop	r4
     c22:	3f 90       	pop	r3
     c24:	2f 90       	pop	r2
     c26:	1f 90       	pop	r1
     c28:	0f 90       	pop	r0
     c2a:	0f be       	out	0x3f, r0	; 63
     c2c:	0f 90       	pop	r0
     c2e:	08 95       	ret
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	08 95       	ret

00000c34 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     c34:	0f 92       	push	r0
     c36:	0f b6       	in	r0, 0x3f	; 63
     c38:	f8 94       	cli
     c3a:	0f 92       	push	r0
     c3c:	1f 92       	push	r1
     c3e:	11 24       	eor	r1, r1
     c40:	2f 92       	push	r2
     c42:	3f 92       	push	r3
     c44:	4f 92       	push	r4
     c46:	5f 92       	push	r5
     c48:	6f 92       	push	r6
     c4a:	7f 92       	push	r7
     c4c:	8f 92       	push	r8
     c4e:	9f 92       	push	r9
     c50:	af 92       	push	r10
     c52:	bf 92       	push	r11
     c54:	cf 92       	push	r12
     c56:	df 92       	push	r13
     c58:	ef 92       	push	r14
     c5a:	ff 92       	push	r15
     c5c:	0f 93       	push	r16
     c5e:	1f 93       	push	r17
     c60:	2f 93       	push	r18
     c62:	3f 93       	push	r19
     c64:	4f 93       	push	r20
     c66:	5f 93       	push	r21
     c68:	6f 93       	push	r22
     c6a:	7f 93       	push	r23
     c6c:	8f 93       	push	r24
     c6e:	9f 93       	push	r25
     c70:	af 93       	push	r26
     c72:	bf 93       	push	r27
     c74:	cf 93       	push	r28
     c76:	df 93       	push	r29
     c78:	ef 93       	push	r30
     c7a:	ff 93       	push	r31
     c7c:	a0 91 b0 07 	lds	r26, 0x07B0	; 0x8007b0 <pxCurrentTCB>
     c80:	b0 91 b1 07 	lds	r27, 0x07B1	; 0x8007b1 <pxCurrentTCB+0x1>
     c84:	0d b6       	in	r0, 0x3d	; 61
     c86:	0d 92       	st	X+, r0
     c88:	0e b6       	in	r0, 0x3e	; 62
	vTaskSwitchContext();
     c8a:	0d 92       	st	X+, r0
	portRESTORE_CONTEXT();
     c8c:	78 d3       	rcall	.+1776   	; 0x137e <vTaskSwitchContext>
     c8e:	a0 91 b0 07 	lds	r26, 0x07B0	; 0x8007b0 <pxCurrentTCB>
     c92:	b0 91 b1 07 	lds	r27, 0x07B1	; 0x8007b1 <pxCurrentTCB+0x1>
     c96:	cd 91       	ld	r28, X+
     c98:	cd bf       	out	0x3d, r28	; 61
     c9a:	dd 91       	ld	r29, X+
     c9c:	de bf       	out	0x3e, r29	; 62
     c9e:	ff 91       	pop	r31
     ca0:	ef 91       	pop	r30
     ca2:	df 91       	pop	r29
     ca4:	cf 91       	pop	r28
     ca6:	bf 91       	pop	r27
     ca8:	af 91       	pop	r26
     caa:	9f 91       	pop	r25
     cac:	8f 91       	pop	r24
     cae:	7f 91       	pop	r23
     cb0:	6f 91       	pop	r22
     cb2:	5f 91       	pop	r21
     cb4:	4f 91       	pop	r20
     cb6:	3f 91       	pop	r19
     cb8:	2f 91       	pop	r18
     cba:	1f 91       	pop	r17
     cbc:	0f 91       	pop	r16
     cbe:	ff 90       	pop	r15
     cc0:	ef 90       	pop	r14
     cc2:	df 90       	pop	r13
     cc4:	cf 90       	pop	r12
     cc6:	bf 90       	pop	r11
     cc8:	af 90       	pop	r10
     cca:	9f 90       	pop	r9
     ccc:	8f 90       	pop	r8
     cce:	7f 90       	pop	r7
     cd0:	6f 90       	pop	r6
     cd2:	5f 90       	pop	r5
     cd4:	4f 90       	pop	r4
     cd6:	3f 90       	pop	r3
     cd8:	2f 90       	pop	r2
     cda:	1f 90       	pop	r1
     cdc:	0f 90       	pop	r0
     cde:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
     ce0:	0f 90       	pop	r0
     ce2:	08 95       	ret

00000ce4 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     ce4:	0f 92       	push	r0
     ce6:	0f b6       	in	r0, 0x3f	; 63
     ce8:	f8 94       	cli
     cea:	0f 92       	push	r0
     cec:	1f 92       	push	r1
     cee:	11 24       	eor	r1, r1
     cf0:	2f 92       	push	r2
     cf2:	3f 92       	push	r3
     cf4:	4f 92       	push	r4
     cf6:	5f 92       	push	r5
     cf8:	6f 92       	push	r6
     cfa:	7f 92       	push	r7
     cfc:	8f 92       	push	r8
     cfe:	9f 92       	push	r9
     d00:	af 92       	push	r10
     d02:	bf 92       	push	r11
     d04:	cf 92       	push	r12
     d06:	df 92       	push	r13
     d08:	ef 92       	push	r14
     d0a:	ff 92       	push	r15
     d0c:	0f 93       	push	r16
     d0e:	1f 93       	push	r17
     d10:	2f 93       	push	r18
     d12:	3f 93       	push	r19
     d14:	4f 93       	push	r20
     d16:	5f 93       	push	r21
     d18:	6f 93       	push	r22
     d1a:	7f 93       	push	r23
     d1c:	8f 93       	push	r24
     d1e:	9f 93       	push	r25
     d20:	af 93       	push	r26
     d22:	bf 93       	push	r27
     d24:	cf 93       	push	r28
     d26:	df 93       	push	r29
     d28:	ef 93       	push	r30
     d2a:	ff 93       	push	r31
     d2c:	a0 91 b0 07 	lds	r26, 0x07B0	; 0x8007b0 <pxCurrentTCB>
     d30:	b0 91 b1 07 	lds	r27, 0x07B1	; 0x8007b1 <pxCurrentTCB+0x1>
     d34:	0d b6       	in	r0, 0x3d	; 61
     d36:	0d 92       	st	X+, r0
     d38:	0e b6       	in	r0, 0x3e	; 62
	vTaskIncrementTick();
	vTaskSwitchContext();
     d3a:	0d 92       	st	X+, r0
     d3c:	85 d1       	rcall	.+778    	; 0x1048 <vTaskIncrementTick>
	portRESTORE_CONTEXT();
     d3e:	1f d3       	rcall	.+1598   	; 0x137e <vTaskSwitchContext>
     d40:	a0 91 b0 07 	lds	r26, 0x07B0	; 0x8007b0 <pxCurrentTCB>
     d44:	b0 91 b1 07 	lds	r27, 0x07B1	; 0x8007b1 <pxCurrentTCB+0x1>
     d48:	cd 91       	ld	r28, X+
     d4a:	cd bf       	out	0x3d, r28	; 61
     d4c:	dd 91       	ld	r29, X+
     d4e:	de bf       	out	0x3e, r29	; 62
     d50:	ff 91       	pop	r31
     d52:	ef 91       	pop	r30
     d54:	df 91       	pop	r29
     d56:	cf 91       	pop	r28
     d58:	bf 91       	pop	r27
     d5a:	af 91       	pop	r26
     d5c:	9f 91       	pop	r25
     d5e:	8f 91       	pop	r24
     d60:	7f 91       	pop	r23
     d62:	6f 91       	pop	r22
     d64:	5f 91       	pop	r21
     d66:	4f 91       	pop	r20
     d68:	3f 91       	pop	r19
     d6a:	2f 91       	pop	r18
     d6c:	1f 91       	pop	r17
     d6e:	0f 91       	pop	r16
     d70:	ff 90       	pop	r15
     d72:	ef 90       	pop	r14
     d74:	df 90       	pop	r13
     d76:	cf 90       	pop	r12
     d78:	bf 90       	pop	r11
     d7a:	af 90       	pop	r10
     d7c:	9f 90       	pop	r9
     d7e:	8f 90       	pop	r8
     d80:	7f 90       	pop	r7
     d82:	6f 90       	pop	r6
     d84:	5f 90       	pop	r5
     d86:	4f 90       	pop	r4
     d88:	3f 90       	pop	r3
     d8a:	2f 90       	pop	r2
     d8c:	1f 90       	pop	r1
     d8e:	0f 90       	pop	r0
     d90:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
     d92:	0f 90       	pop	r0
     d94:	08 95       	ret

00000d96 <__vector_13>:
     d96:	a6 df       	rcall	.-180    	; 0xce4 <vPortYieldFromTick>
     d98:	18 95       	reti

00000d9a <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
     d9a:	cf 93       	push	r28
     d9c:	df 93       	push	r29
     d9e:	ec 01       	movw	r28, r24
     da0:	e0 91 b0 07 	lds	r30, 0x07B0	; 0x8007b0 <pxCurrentTCB>
     da4:	f0 91 b1 07 	lds	r31, 0x07B1	; 0x8007b1 <pxCurrentTCB+0x1>
     da8:	93 83       	std	Z+3, r25	; 0x03
     daa:	82 83       	std	Z+2, r24	; 0x02
     dac:	80 91 60 07 	lds	r24, 0x0760	; 0x800760 <xTickCount>
     db0:	90 91 61 07 	lds	r25, 0x0761	; 0x800761 <xTickCount+0x1>
     db4:	c8 17       	cp	r28, r24
     db6:	d9 07       	cpc	r29, r25
     db8:	60 f4       	brcc	.+24     	; 0xdd2 <prvAddCurrentTaskToDelayedList+0x38>
     dba:	60 91 b0 07 	lds	r22, 0x07B0	; 0x8007b0 <pxCurrentTCB>
     dbe:	70 91 b1 07 	lds	r23, 0x07B1	; 0x8007b1 <pxCurrentTCB+0x1>
     dc2:	80 91 76 07 	lds	r24, 0x0776	; 0x800776 <pxOverflowDelayedTaskList>
     dc6:	90 91 77 07 	lds	r25, 0x0777	; 0x800777 <pxOverflowDelayedTaskList+0x1>
     dca:	6e 5f       	subi	r22, 0xFE	; 254
     dcc:	7f 4f       	sbci	r23, 0xFF	; 255
     dce:	dc d9       	rcall	.-3144   	; 0x188 <vListInsert>
     dd0:	16 c0       	rjmp	.+44     	; 0xdfe <prvAddCurrentTaskToDelayedList+0x64>
     dd2:	60 91 b0 07 	lds	r22, 0x07B0	; 0x8007b0 <pxCurrentTCB>
     dd6:	70 91 b1 07 	lds	r23, 0x07B1	; 0x8007b1 <pxCurrentTCB+0x1>
     dda:	80 91 78 07 	lds	r24, 0x0778	; 0x800778 <pxDelayedTaskList>
     dde:	90 91 79 07 	lds	r25, 0x0779	; 0x800779 <pxDelayedTaskList+0x1>
     de2:	6e 5f       	subi	r22, 0xFE	; 254
     de4:	7f 4f       	sbci	r23, 0xFF	; 255
     de6:	d0 d9       	rcall	.-3168   	; 0x188 <vListInsert>
     de8:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <xNextTaskUnblockTime>
     dec:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <xNextTaskUnblockTime+0x1>
     df0:	c8 17       	cp	r28, r24
     df2:	d9 07       	cpc	r29, r25
     df4:	20 f4       	brcc	.+8      	; 0xdfe <prvAddCurrentTaskToDelayedList+0x64>
     df6:	d0 93 14 01 	sts	0x0114, r29	; 0x800114 <xNextTaskUnblockTime+0x1>
     dfa:	c0 93 13 01 	sts	0x0113, r28	; 0x800113 <xNextTaskUnblockTime>
     dfe:	df 91       	pop	r29
     e00:	cf 91       	pop	r28
     e02:	08 95       	ret

00000e04 <xTaskGenericCreate>:
     e04:	4f 92       	push	r4
     e06:	5f 92       	push	r5
     e08:	6f 92       	push	r6
     e0a:	7f 92       	push	r7
     e0c:	8f 92       	push	r8
     e0e:	9f 92       	push	r9
     e10:	af 92       	push	r10
     e12:	bf 92       	push	r11
     e14:	cf 92       	push	r12
     e16:	df 92       	push	r13
     e18:	ef 92       	push	r14
     e1a:	ff 92       	push	r15
     e1c:	0f 93       	push	r16
     e1e:	1f 93       	push	r17
     e20:	cf 93       	push	r28
     e22:	df 93       	push	r29
     e24:	5c 01       	movw	r10, r24
     e26:	4b 01       	movw	r8, r22
     e28:	3a 01       	movw	r6, r20
     e2a:	29 01       	movw	r4, r18
     e2c:	81 e2       	ldi	r24, 0x21	; 33
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	4c d9       	rcall	.-3432   	; 0xca <pvPortMalloc>
     e32:	ec 01       	movw	r28, r24
     e34:	89 2b       	or	r24, r25
     e36:	09 f4       	brne	.+2      	; 0xe3a <xTaskGenericCreate+0x36>
     e38:	c6 c0       	rjmp	.+396    	; 0xfc6 <xTaskGenericCreate+0x1c2>
     e3a:	c1 14       	cp	r12, r1
     e3c:	d1 04       	cpc	r13, r1
     e3e:	09 f0       	breq	.+2      	; 0xe42 <xTaskGenericCreate+0x3e>
     e40:	be c0       	rjmp	.+380    	; 0xfbe <xTaskGenericCreate+0x1ba>
     e42:	c3 01       	movw	r24, r6
     e44:	42 d9       	rcall	.-3452   	; 0xca <pvPortMalloc>
     e46:	98 8f       	std	Y+24, r25	; 0x18
     e48:	8f 8b       	std	Y+23, r24	; 0x17
     e4a:	00 97       	sbiw	r24, 0x00	; 0
     e4c:	19 f4       	brne	.+6      	; 0xe54 <xTaskGenericCreate+0x50>
     e4e:	ce 01       	movw	r24, r28
     e50:	61 d9       	rcall	.-3390   	; 0x114 <vPortFree>
     e52:	b9 c0       	rjmp	.+370    	; 0xfc6 <xTaskGenericCreate+0x1c2>
     e54:	a3 01       	movw	r20, r6
     e56:	65 ea       	ldi	r22, 0xA5	; 165
     e58:	70 e0       	ldi	r23, 0x00	; 0
     e5a:	0c d3       	rcall	.+1560   	; 0x1474 <memset>
     e5c:	93 01       	movw	r18, r6
     e5e:	21 50       	subi	r18, 0x01	; 1
     e60:	31 09       	sbc	r19, r1
     e62:	8f 89       	ldd	r24, Y+23	; 0x17
     e64:	98 8d       	ldd	r25, Y+24	; 0x18
     e66:	3c 01       	movw	r6, r24
     e68:	62 0e       	add	r6, r18
     e6a:	73 1e       	adc	r7, r19
     e6c:	48 e0       	ldi	r20, 0x08	; 8
     e6e:	50 e0       	ldi	r21, 0x00	; 0
     e70:	b4 01       	movw	r22, r8
     e72:	ce 01       	movw	r24, r28
     e74:	49 96       	adiw	r24, 0x19	; 25
     e76:	05 d3       	rcall	.+1546   	; 0x1482 <strncpy>
     e78:	18 a2       	std	Y+32, r1	; 0x20
     e7a:	10 2f       	mov	r17, r16
     e7c:	04 30       	cpi	r16, 0x04	; 4
     e7e:	08 f0       	brcs	.+2      	; 0xe82 <xTaskGenericCreate+0x7e>
     e80:	13 e0       	ldi	r17, 0x03	; 3
     e82:	1e 8b       	std	Y+22, r17	; 0x16
     e84:	6e 01       	movw	r12, r28
     e86:	82 e0       	ldi	r24, 0x02	; 2
     e88:	c8 0e       	add	r12, r24
     e8a:	d1 1c       	adc	r13, r1
     e8c:	c6 01       	movw	r24, r12
     e8e:	51 d9       	rcall	.-3422   	; 0x132 <vListInitialiseItem>
     e90:	ce 01       	movw	r24, r28
     e92:	0c 96       	adiw	r24, 0x0c	; 12
     e94:	4e d9       	rcall	.-3428   	; 0x132 <vListInitialiseItem>
     e96:	d9 87       	std	Y+9, r29	; 0x09
     e98:	c8 87       	std	Y+8, r28	; 0x08
     e9a:	84 e0       	ldi	r24, 0x04	; 4
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	81 1b       	sub	r24, r17
     ea0:	91 09       	sbc	r25, r1
     ea2:	9d 87       	std	Y+13, r25	; 0x0d
     ea4:	8c 87       	std	Y+12, r24	; 0x0c
     ea6:	db 8b       	std	Y+19, r29	; 0x13
     ea8:	ca 8b       	std	Y+18, r28	; 0x12
     eaa:	a2 01       	movw	r20, r4
     eac:	b5 01       	movw	r22, r10
     eae:	c3 01       	movw	r24, r6
     eb0:	1b de       	rcall	.-970    	; 0xae8 <pxPortInitialiseStack>
     eb2:	99 83       	std	Y+1, r25	; 0x01
     eb4:	88 83       	st	Y, r24
     eb6:	e1 14       	cp	r14, r1
     eb8:	f1 04       	cpc	r15, r1
     eba:	19 f0       	breq	.+6      	; 0xec2 <xTaskGenericCreate+0xbe>
     ebc:	f7 01       	movw	r30, r14
     ebe:	d1 83       	std	Z+1, r29	; 0x01
     ec0:	c0 83       	st	Z, r28
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	f8 94       	cli
     ec6:	0f 92       	push	r0
     ec8:	80 91 62 07 	lds	r24, 0x0762	; 0x800762 <uxCurrentNumberOfTasks>
     ecc:	8f 5f       	subi	r24, 0xFF	; 255
     ece:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <uxCurrentNumberOfTasks>
     ed2:	80 91 b0 07 	lds	r24, 0x07B0	; 0x8007b0 <pxCurrentTCB>
     ed6:	90 91 b1 07 	lds	r25, 0x07B1	; 0x8007b1 <pxCurrentTCB+0x1>
     eda:	89 2b       	or	r24, r25
     edc:	69 f5       	brne	.+90     	; 0xf38 <xTaskGenericCreate+0x134>
     ede:	d0 93 b1 07 	sts	0x07B1, r29	; 0x8007b1 <pxCurrentTCB+0x1>
     ee2:	c0 93 b0 07 	sts	0x07B0, r28	; 0x8007b0 <pxCurrentTCB>
     ee6:	80 91 62 07 	lds	r24, 0x0762	; 0x800762 <uxCurrentNumberOfTasks>
     eea:	81 30       	cpi	r24, 0x01	; 1
     eec:	a1 f5       	brne	.+104    	; 0xf56 <xTaskGenericCreate+0x152>
     eee:	8c e8       	ldi	r24, 0x8C	; 140
     ef0:	97 e0       	ldi	r25, 0x07	; 7
     ef2:	11 d9       	rcall	.-3550   	; 0x116 <vListInitialise>
     ef4:	85 e9       	ldi	r24, 0x95	; 149
     ef6:	97 e0       	ldi	r25, 0x07	; 7
     ef8:	0e d9       	rcall	.-3556   	; 0x116 <vListInitialise>
     efa:	8e e9       	ldi	r24, 0x9E	; 158
     efc:	97 e0       	ldi	r25, 0x07	; 7
     efe:	0b d9       	rcall	.-3562   	; 0x116 <vListInitialise>
     f00:	87 ea       	ldi	r24, 0xA7	; 167
     f02:	97 e0       	ldi	r25, 0x07	; 7
     f04:	08 d9       	rcall	.-3568   	; 0x116 <vListInitialise>
     f06:	83 e8       	ldi	r24, 0x83	; 131
     f08:	97 e0       	ldi	r25, 0x07	; 7
     f0a:	05 d9       	rcall	.-3574   	; 0x116 <vListInitialise>
     f0c:	8a e7       	ldi	r24, 0x7A	; 122
     f0e:	97 e0       	ldi	r25, 0x07	; 7
     f10:	02 d9       	rcall	.-3580   	; 0x116 <vListInitialise>
     f12:	8d e6       	ldi	r24, 0x6D	; 109
     f14:	97 e0       	ldi	r25, 0x07	; 7
     f16:	ff d8       	rcall	.-3586   	; 0x116 <vListInitialise>
     f18:	84 e6       	ldi	r24, 0x64	; 100
     f1a:	97 e0       	ldi	r25, 0x07	; 7
     f1c:	fc d8       	rcall	.-3592   	; 0x116 <vListInitialise>
     f1e:	83 e8       	ldi	r24, 0x83	; 131
     f20:	97 e0       	ldi	r25, 0x07	; 7
     f22:	90 93 79 07 	sts	0x0779, r25	; 0x800779 <pxDelayedTaskList+0x1>
     f26:	80 93 78 07 	sts	0x0778, r24	; 0x800778 <pxDelayedTaskList>
     f2a:	8a e7       	ldi	r24, 0x7A	; 122
     f2c:	97 e0       	ldi	r25, 0x07	; 7
     f2e:	90 93 77 07 	sts	0x0777, r25	; 0x800777 <pxOverflowDelayedTaskList+0x1>
     f32:	80 93 76 07 	sts	0x0776, r24	; 0x800776 <pxOverflowDelayedTaskList>
     f36:	0f c0       	rjmp	.+30     	; 0xf56 <xTaskGenericCreate+0x152>
     f38:	80 91 5d 07 	lds	r24, 0x075D	; 0x80075d <xSchedulerRunning>
     f3c:	81 11       	cpse	r24, r1
     f3e:	0b c0       	rjmp	.+22     	; 0xf56 <xTaskGenericCreate+0x152>
     f40:	e0 91 b0 07 	lds	r30, 0x07B0	; 0x8007b0 <pxCurrentTCB>
     f44:	f0 91 b1 07 	lds	r31, 0x07B1	; 0x8007b1 <pxCurrentTCB+0x1>
     f48:	86 89       	ldd	r24, Z+22	; 0x16
     f4a:	08 17       	cp	r16, r24
     f4c:	20 f0       	brcs	.+8      	; 0xf56 <xTaskGenericCreate+0x152>
     f4e:	d0 93 b1 07 	sts	0x07B1, r29	; 0x8007b1 <pxCurrentTCB+0x1>
     f52:	c0 93 b0 07 	sts	0x07B0, r28	; 0x8007b0 <pxCurrentTCB>
     f56:	8e 89       	ldd	r24, Y+22	; 0x16
     f58:	90 91 5f 07 	lds	r25, 0x075F	; 0x80075f <uxTopUsedPriority>
     f5c:	98 17       	cp	r25, r24
     f5e:	10 f4       	brcc	.+4      	; 0xf64 <xTaskGenericCreate+0x160>
     f60:	80 93 5f 07 	sts	0x075F, r24	; 0x80075f <uxTopUsedPriority>
     f64:	90 91 58 07 	lds	r25, 0x0758	; 0x800758 <uxTaskNumber>
     f68:	9f 5f       	subi	r25, 0xFF	; 255
     f6a:	90 93 58 07 	sts	0x0758, r25	; 0x800758 <uxTaskNumber>
     f6e:	90 91 5e 07 	lds	r25, 0x075E	; 0x80075e <uxTopReadyPriority>
     f72:	98 17       	cp	r25, r24
     f74:	10 f4       	brcc	.+4      	; 0xf7a <xTaskGenericCreate+0x176>
     f76:	80 93 5e 07 	sts	0x075E, r24	; 0x80075e <uxTopReadyPriority>
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	9c 01       	movw	r18, r24
     f7e:	22 0f       	add	r18, r18
     f80:	33 1f       	adc	r19, r19
     f82:	22 0f       	add	r18, r18
     f84:	33 1f       	adc	r19, r19
     f86:	22 0f       	add	r18, r18
     f88:	33 1f       	adc	r19, r19
     f8a:	82 0f       	add	r24, r18
     f8c:	93 1f       	adc	r25, r19
     f8e:	b6 01       	movw	r22, r12
     f90:	84 57       	subi	r24, 0x74	; 116
     f92:	98 4f       	sbci	r25, 0xF8	; 248
     f94:	d2 d8       	rcall	.-3676   	; 0x13a <vListInsertEnd>
     f96:	0f 90       	pop	r0
     f98:	0f be       	out	0x3f, r0	; 63
     f9a:	80 91 5d 07 	lds	r24, 0x075D	; 0x80075d <xSchedulerRunning>
     f9e:	88 23       	and	r24, r24
     fa0:	51 f0       	breq	.+20     	; 0xfb6 <xTaskGenericCreate+0x1b2>
     fa2:	e0 91 b0 07 	lds	r30, 0x07B0	; 0x8007b0 <pxCurrentTCB>
     fa6:	f0 91 b1 07 	lds	r31, 0x07B1	; 0x8007b1 <pxCurrentTCB+0x1>
     faa:	86 89       	ldd	r24, Z+22	; 0x16
     fac:	80 17       	cp	r24, r16
     fae:	28 f4       	brcc	.+10     	; 0xfba <xTaskGenericCreate+0x1b6>
     fb0:	41 de       	rcall	.-894    	; 0xc34 <vPortYield>
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	09 c0       	rjmp	.+18     	; 0xfc8 <xTaskGenericCreate+0x1c4>
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	07 c0       	rjmp	.+14     	; 0xfc8 <xTaskGenericCreate+0x1c4>
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	05 c0       	rjmp	.+10     	; 0xfc8 <xTaskGenericCreate+0x1c4>
     fbe:	d8 8e       	std	Y+24, r13	; 0x18
     fc0:	cf 8a       	std	Y+23, r12	; 0x17
     fc2:	c6 01       	movw	r24, r12
     fc4:	47 cf       	rjmp	.-370    	; 0xe54 <xTaskGenericCreate+0x50>
     fc6:	8f ef       	ldi	r24, 0xFF	; 255
     fc8:	df 91       	pop	r29
     fca:	cf 91       	pop	r28
     fcc:	1f 91       	pop	r17
     fce:	0f 91       	pop	r16
     fd0:	ff 90       	pop	r15
     fd2:	ef 90       	pop	r14
     fd4:	df 90       	pop	r13
     fd6:	cf 90       	pop	r12
     fd8:	bf 90       	pop	r11
     fda:	af 90       	pop	r10
     fdc:	9f 90       	pop	r9
     fde:	8f 90       	pop	r8
     fe0:	7f 90       	pop	r7
     fe2:	6f 90       	pop	r6
     fe4:	5f 90       	pop	r5
     fe6:	4f 90       	pop	r4
     fe8:	08 95       	ret

00000fea <vTaskStartScheduler>:
     fea:	af 92       	push	r10
     fec:	bf 92       	push	r11
     fee:	cf 92       	push	r12
     ff0:	df 92       	push	r13
     ff2:	ef 92       	push	r14
     ff4:	ff 92       	push	r15
     ff6:	0f 93       	push	r16
     ff8:	a1 2c       	mov	r10, r1
     ffa:	b1 2c       	mov	r11, r1
     ffc:	c1 2c       	mov	r12, r1
     ffe:	d1 2c       	mov	r13, r1
    1000:	e1 2c       	mov	r14, r1
    1002:	f1 2c       	mov	r15, r1
    1004:	00 e0       	ldi	r16, 0x00	; 0
    1006:	20 e0       	ldi	r18, 0x00	; 0
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	45 e5       	ldi	r20, 0x55	; 85
    100c:	50 e0       	ldi	r21, 0x00	; 0
    100e:	60 e6       	ldi	r22, 0x60	; 96
    1010:	71 e0       	ldi	r23, 0x01	; 1
    1012:	86 e8       	ldi	r24, 0x86	; 134
    1014:	99 e0       	ldi	r25, 0x09	; 9
    1016:	f6 de       	rcall	.-532    	; 0xe04 <xTaskGenericCreate>
    1018:	81 30       	cpi	r24, 0x01	; 1
    101a:	41 f4       	brne	.+16     	; 0x102c <vTaskStartScheduler+0x42>
    101c:	f8 94       	cli
    101e:	80 93 5d 07 	sts	0x075D, r24	; 0x80075d <xSchedulerRunning>
    1022:	10 92 61 07 	sts	0x0761, r1	; 0x800761 <xTickCount+0x1>
    1026:	10 92 60 07 	sts	0x0760, r1	; 0x800760 <xTickCount>
    102a:	ca dd       	rcall	.-1132   	; 0xbc0 <xPortStartScheduler>
    102c:	0f 91       	pop	r16
    102e:	ff 90       	pop	r15
    1030:	ef 90       	pop	r14
    1032:	df 90       	pop	r13
    1034:	cf 90       	pop	r12
    1036:	bf 90       	pop	r11
    1038:	af 90       	pop	r10
    103a:	08 95       	ret

0000103c <vTaskSuspendAll>:
    103c:	80 91 5c 07 	lds	r24, 0x075C	; 0x80075c <uxSchedulerSuspended>
    1040:	8f 5f       	subi	r24, 0xFF	; 255
    1042:	80 93 5c 07 	sts	0x075C, r24	; 0x80075c <uxSchedulerSuspended>
    1046:	08 95       	ret

00001048 <vTaskIncrementTick>:
    1048:	0f 93       	push	r16
    104a:	1f 93       	push	r17
    104c:	cf 93       	push	r28
    104e:	df 93       	push	r29
    1050:	80 91 5c 07 	lds	r24, 0x075C	; 0x80075c <uxSchedulerSuspended>
    1054:	81 11       	cpse	r24, r1
    1056:	b0 c0       	rjmp	.+352    	; 0x11b8 <vTaskIncrementTick+0x170>
    1058:	80 91 60 07 	lds	r24, 0x0760	; 0x800760 <xTickCount>
    105c:	90 91 61 07 	lds	r25, 0x0761	; 0x800761 <xTickCount+0x1>
    1060:	01 96       	adiw	r24, 0x01	; 1
    1062:	90 93 61 07 	sts	0x0761, r25	; 0x800761 <xTickCount+0x1>
    1066:	80 93 60 07 	sts	0x0760, r24	; 0x800760 <xTickCount>
    106a:	80 91 60 07 	lds	r24, 0x0760	; 0x800760 <xTickCount>
    106e:	90 91 61 07 	lds	r25, 0x0761	; 0x800761 <xTickCount+0x1>
    1072:	89 2b       	or	r24, r25
    1074:	99 f5       	brne	.+102    	; 0x10dc <vTaskIncrementTick+0x94>
    1076:	80 91 78 07 	lds	r24, 0x0778	; 0x800778 <pxDelayedTaskList>
    107a:	90 91 79 07 	lds	r25, 0x0779	; 0x800779 <pxDelayedTaskList+0x1>
    107e:	20 91 76 07 	lds	r18, 0x0776	; 0x800776 <pxOverflowDelayedTaskList>
    1082:	30 91 77 07 	lds	r19, 0x0777	; 0x800777 <pxOverflowDelayedTaskList+0x1>
    1086:	30 93 79 07 	sts	0x0779, r19	; 0x800779 <pxDelayedTaskList+0x1>
    108a:	20 93 78 07 	sts	0x0778, r18	; 0x800778 <pxDelayedTaskList>
    108e:	90 93 77 07 	sts	0x0777, r25	; 0x800777 <pxOverflowDelayedTaskList+0x1>
    1092:	80 93 76 07 	sts	0x0776, r24	; 0x800776 <pxOverflowDelayedTaskList>
    1096:	80 91 59 07 	lds	r24, 0x0759	; 0x800759 <xNumOfOverflows>
    109a:	8f 5f       	subi	r24, 0xFF	; 255
    109c:	80 93 59 07 	sts	0x0759, r24	; 0x800759 <xNumOfOverflows>
    10a0:	e0 91 78 07 	lds	r30, 0x0778	; 0x800778 <pxDelayedTaskList>
    10a4:	f0 91 79 07 	lds	r31, 0x0779	; 0x800779 <pxDelayedTaskList+0x1>
    10a8:	80 81       	ld	r24, Z
    10aa:	81 11       	cpse	r24, r1
    10ac:	07 c0       	rjmp	.+14     	; 0x10bc <vTaskIncrementTick+0x74>
    10ae:	8f ef       	ldi	r24, 0xFF	; 255
    10b0:	9f ef       	ldi	r25, 0xFF	; 255
    10b2:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <xNextTaskUnblockTime+0x1>
    10b6:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <xNextTaskUnblockTime>
    10ba:	10 c0       	rjmp	.+32     	; 0x10dc <vTaskIncrementTick+0x94>
    10bc:	e0 91 78 07 	lds	r30, 0x0778	; 0x800778 <pxDelayedTaskList>
    10c0:	f0 91 79 07 	lds	r31, 0x0779	; 0x800779 <pxDelayedTaskList+0x1>
    10c4:	05 80       	ldd	r0, Z+5	; 0x05
    10c6:	f6 81       	ldd	r31, Z+6	; 0x06
    10c8:	e0 2d       	mov	r30, r0
    10ca:	06 80       	ldd	r0, Z+6	; 0x06
    10cc:	f7 81       	ldd	r31, Z+7	; 0x07
    10ce:	e0 2d       	mov	r30, r0
    10d0:	82 81       	ldd	r24, Z+2	; 0x02
    10d2:	93 81       	ldd	r25, Z+3	; 0x03
    10d4:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <xNextTaskUnblockTime+0x1>
    10d8:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <xNextTaskUnblockTime>
    10dc:	20 91 60 07 	lds	r18, 0x0760	; 0x800760 <xTickCount>
    10e0:	30 91 61 07 	lds	r19, 0x0761	; 0x800761 <xTickCount+0x1>
    10e4:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <xNextTaskUnblockTime>
    10e8:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <xNextTaskUnblockTime+0x1>
    10ec:	28 17       	cp	r18, r24
    10ee:	39 07       	cpc	r19, r25
    10f0:	08 f4       	brcc	.+2      	; 0x10f4 <vTaskIncrementTick+0xac>
    10f2:	67 c0       	rjmp	.+206    	; 0x11c2 <vTaskIncrementTick+0x17a>
    10f4:	e0 91 78 07 	lds	r30, 0x0778	; 0x800778 <pxDelayedTaskList>
    10f8:	f0 91 79 07 	lds	r31, 0x0779	; 0x800779 <pxDelayedTaskList+0x1>
    10fc:	80 81       	ld	r24, Z
    10fe:	88 23       	and	r24, r24
    1100:	99 f0       	breq	.+38     	; 0x1128 <vTaskIncrementTick+0xe0>
    1102:	e0 91 78 07 	lds	r30, 0x0778	; 0x800778 <pxDelayedTaskList>
    1106:	f0 91 79 07 	lds	r31, 0x0779	; 0x800779 <pxDelayedTaskList+0x1>
    110a:	05 80       	ldd	r0, Z+5	; 0x05
    110c:	f6 81       	ldd	r31, Z+6	; 0x06
    110e:	e0 2d       	mov	r30, r0
    1110:	c6 81       	ldd	r28, Z+6	; 0x06
    1112:	d7 81       	ldd	r29, Z+7	; 0x07
    1114:	8a 81       	ldd	r24, Y+2	; 0x02
    1116:	9b 81       	ldd	r25, Y+3	; 0x03
    1118:	20 91 60 07 	lds	r18, 0x0760	; 0x800760 <xTickCount>
    111c:	30 91 61 07 	lds	r19, 0x0761	; 0x800761 <xTickCount+0x1>
    1120:	28 17       	cp	r18, r24
    1122:	39 07       	cpc	r19, r25
    1124:	f8 f4       	brcc	.+62     	; 0x1164 <vTaskIncrementTick+0x11c>
    1126:	19 c0       	rjmp	.+50     	; 0x115a <vTaskIncrementTick+0x112>
    1128:	8f ef       	ldi	r24, 0xFF	; 255
    112a:	9f ef       	ldi	r25, 0xFF	; 255
    112c:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <xNextTaskUnblockTime+0x1>
    1130:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <xNextTaskUnblockTime>
    1134:	46 c0       	rjmp	.+140    	; 0x11c2 <vTaskIncrementTick+0x17a>
    1136:	e0 91 78 07 	lds	r30, 0x0778	; 0x800778 <pxDelayedTaskList>
    113a:	f0 91 79 07 	lds	r31, 0x0779	; 0x800779 <pxDelayedTaskList+0x1>
    113e:	05 80       	ldd	r0, Z+5	; 0x05
    1140:	f6 81       	ldd	r31, Z+6	; 0x06
    1142:	e0 2d       	mov	r30, r0
    1144:	c6 81       	ldd	r28, Z+6	; 0x06
    1146:	d7 81       	ldd	r29, Z+7	; 0x07
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	9b 81       	ldd	r25, Y+3	; 0x03
    114c:	20 91 60 07 	lds	r18, 0x0760	; 0x800760 <xTickCount>
    1150:	30 91 61 07 	lds	r19, 0x0761	; 0x800761 <xTickCount+0x1>
    1154:	28 17       	cp	r18, r24
    1156:	39 07       	cpc	r19, r25
    1158:	28 f4       	brcc	.+10     	; 0x1164 <vTaskIncrementTick+0x11c>
    115a:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <xNextTaskUnblockTime+0x1>
    115e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <xNextTaskUnblockTime>
    1162:	2f c0       	rjmp	.+94     	; 0x11c2 <vTaskIncrementTick+0x17a>
    1164:	8e 01       	movw	r16, r28
    1166:	0e 5f       	subi	r16, 0xFE	; 254
    1168:	1f 4f       	sbci	r17, 0xFF	; 255
    116a:	c8 01       	movw	r24, r16
    116c:	48 d8       	rcall	.-3952   	; 0x1fe <vListRemove>
    116e:	8c 89       	ldd	r24, Y+20	; 0x14
    1170:	9d 89       	ldd	r25, Y+21	; 0x15
    1172:	89 2b       	or	r24, r25
    1174:	19 f0       	breq	.+6      	; 0x117c <vTaskIncrementTick+0x134>
    1176:	ce 01       	movw	r24, r28
    1178:	0c 96       	adiw	r24, 0x0c	; 12
    117a:	41 d8       	rcall	.-3966   	; 0x1fe <vListRemove>
    117c:	8e 89       	ldd	r24, Y+22	; 0x16
    117e:	90 91 5e 07 	lds	r25, 0x075E	; 0x80075e <uxTopReadyPriority>
    1182:	98 17       	cp	r25, r24
    1184:	10 f4       	brcc	.+4      	; 0x118a <vTaskIncrementTick+0x142>
    1186:	80 93 5e 07 	sts	0x075E, r24	; 0x80075e <uxTopReadyPriority>
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	9c 01       	movw	r18, r24
    118e:	22 0f       	add	r18, r18
    1190:	33 1f       	adc	r19, r19
    1192:	22 0f       	add	r18, r18
    1194:	33 1f       	adc	r19, r19
    1196:	22 0f       	add	r18, r18
    1198:	33 1f       	adc	r19, r19
    119a:	82 0f       	add	r24, r18
    119c:	93 1f       	adc	r25, r19
    119e:	b8 01       	movw	r22, r16
    11a0:	84 57       	subi	r24, 0x74	; 116
    11a2:	98 4f       	sbci	r25, 0xF8	; 248
    11a4:	0e 94 9d 00 	call	0x13a	; 0x13a <vListInsertEnd>
    11a8:	e0 91 78 07 	lds	r30, 0x0778	; 0x800778 <pxDelayedTaskList>
    11ac:	f0 91 79 07 	lds	r31, 0x0779	; 0x800779 <pxDelayedTaskList+0x1>
    11b0:	80 81       	ld	r24, Z
    11b2:	81 11       	cpse	r24, r1
    11b4:	c0 cf       	rjmp	.-128    	; 0x1136 <vTaskIncrementTick+0xee>
    11b6:	b8 cf       	rjmp	.-144    	; 0x1128 <vTaskIncrementTick+0xe0>
    11b8:	80 91 5b 07 	lds	r24, 0x075B	; 0x80075b <uxMissedTicks>
    11bc:	8f 5f       	subi	r24, 0xFF	; 255
    11be:	80 93 5b 07 	sts	0x075B, r24	; 0x80075b <uxMissedTicks>
    11c2:	df 91       	pop	r29
    11c4:	cf 91       	pop	r28
    11c6:	1f 91       	pop	r17
    11c8:	0f 91       	pop	r16
    11ca:	08 95       	ret

000011cc <xTaskResumeAll>:
    11cc:	cf 92       	push	r12
    11ce:	df 92       	push	r13
    11d0:	ef 92       	push	r14
    11d2:	ff 92       	push	r15
    11d4:	0f 93       	push	r16
    11d6:	1f 93       	push	r17
    11d8:	cf 93       	push	r28
    11da:	df 93       	push	r29
    11dc:	0f b6       	in	r0, 0x3f	; 63
    11de:	f8 94       	cli
    11e0:	0f 92       	push	r0
    11e2:	80 91 5c 07 	lds	r24, 0x075C	; 0x80075c <uxSchedulerSuspended>
    11e6:	81 50       	subi	r24, 0x01	; 1
    11e8:	80 93 5c 07 	sts	0x075C, r24	; 0x80075c <uxSchedulerSuspended>
    11ec:	80 91 5c 07 	lds	r24, 0x075C	; 0x80075c <uxSchedulerSuspended>
    11f0:	81 11       	cpse	r24, r1
    11f2:	62 c0       	rjmp	.+196    	; 0x12b8 <xTaskResumeAll+0xec>
    11f4:	80 91 62 07 	lds	r24, 0x0762	; 0x800762 <uxCurrentNumberOfTasks>
    11f8:	81 11       	cpse	r24, r1
    11fa:	32 c0       	rjmp	.+100    	; 0x1260 <xTaskResumeAll+0x94>
    11fc:	60 c0       	rjmp	.+192    	; 0x12be <xTaskResumeAll+0xf2>
    11fe:	d7 01       	movw	r26, r14
    1200:	15 96       	adiw	r26, 0x05	; 5
    1202:	ed 91       	ld	r30, X+
    1204:	fc 91       	ld	r31, X
    1206:	16 97       	sbiw	r26, 0x06	; 6
    1208:	c6 81       	ldd	r28, Z+6	; 0x06
    120a:	d7 81       	ldd	r29, Z+7	; 0x07
    120c:	ce 01       	movw	r24, r28
    120e:	0c 96       	adiw	r24, 0x0c	; 12
    1210:	0e 94 ff 00 	call	0x1fe	; 0x1fe <vListRemove>
    1214:	8e 01       	movw	r16, r28
    1216:	0e 5f       	subi	r16, 0xFE	; 254
    1218:	1f 4f       	sbci	r17, 0xFF	; 255
    121a:	c8 01       	movw	r24, r16
    121c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <vListRemove>
    1220:	8e 89       	ldd	r24, Y+22	; 0x16
    1222:	90 91 5e 07 	lds	r25, 0x075E	; 0x80075e <uxTopReadyPriority>
    1226:	98 17       	cp	r25, r24
    1228:	10 f4       	brcc	.+4      	; 0x122e <xTaskResumeAll+0x62>
    122a:	80 93 5e 07 	sts	0x075E, r24	; 0x80075e <uxTopReadyPriority>
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	9c 01       	movw	r18, r24
    1232:	22 0f       	add	r18, r18
    1234:	33 1f       	adc	r19, r19
    1236:	22 0f       	add	r18, r18
    1238:	33 1f       	adc	r19, r19
    123a:	22 0f       	add	r18, r18
    123c:	33 1f       	adc	r19, r19
    123e:	82 0f       	add	r24, r18
    1240:	93 1f       	adc	r25, r19
    1242:	b8 01       	movw	r22, r16
    1244:	84 57       	subi	r24, 0x74	; 116
    1246:	98 4f       	sbci	r25, 0xF8	; 248
    1248:	0e 94 9d 00 	call	0x13a	; 0x13a <vListInsertEnd>
    124c:	e0 91 b0 07 	lds	r30, 0x07B0	; 0x8007b0 <pxCurrentTCB>
    1250:	f0 91 b1 07 	lds	r31, 0x07B1	; 0x8007b1 <pxCurrentTCB+0x1>
    1254:	9e 89       	ldd	r25, Y+22	; 0x16
    1256:	86 89       	ldd	r24, Z+22	; 0x16
    1258:	98 17       	cp	r25, r24
    125a:	58 f0       	brcs	.+22     	; 0x1272 <xTaskResumeAll+0xa6>
    125c:	dc 2c       	mov	r13, r12
    125e:	09 c0       	rjmp	.+18     	; 0x1272 <xTaskResumeAll+0xa6>
    1260:	d1 2c       	mov	r13, r1
    1262:	0f 2e       	mov	r0, r31
    1264:	fd e6       	ldi	r31, 0x6D	; 109
    1266:	ef 2e       	mov	r14, r31
    1268:	f7 e0       	ldi	r31, 0x07	; 7
    126a:	ff 2e       	mov	r15, r31
    126c:	f0 2d       	mov	r31, r0
    126e:	cc 24       	eor	r12, r12
    1270:	c3 94       	inc	r12
    1272:	f7 01       	movw	r30, r14
    1274:	80 81       	ld	r24, Z
    1276:	81 11       	cpse	r24, r1
    1278:	c2 cf       	rjmp	.-124    	; 0x11fe <xTaskResumeAll+0x32>
    127a:	80 91 5b 07 	lds	r24, 0x075B	; 0x80075b <uxMissedTicks>
    127e:	88 23       	and	r24, r24
    1280:	79 f0       	breq	.+30     	; 0x12a0 <xTaskResumeAll+0xd4>
    1282:	80 91 5b 07 	lds	r24, 0x075B	; 0x80075b <uxMissedTicks>
    1286:	88 23       	and	r24, r24
    1288:	91 f0       	breq	.+36     	; 0x12ae <xTaskResumeAll+0xe2>
    128a:	de de       	rcall	.-580    	; 0x1048 <vTaskIncrementTick>
    128c:	80 91 5b 07 	lds	r24, 0x075B	; 0x80075b <uxMissedTicks>
    1290:	81 50       	subi	r24, 0x01	; 1
    1292:	80 93 5b 07 	sts	0x075B, r24	; 0x80075b <uxMissedTicks>
    1296:	80 91 5b 07 	lds	r24, 0x075B	; 0x80075b <uxMissedTicks>
    129a:	81 11       	cpse	r24, r1
    129c:	f6 cf       	rjmp	.-20     	; 0x128a <xTaskResumeAll+0xbe>
    129e:	07 c0       	rjmp	.+14     	; 0x12ae <xTaskResumeAll+0xe2>
    12a0:	f1 e0       	ldi	r31, 0x01	; 1
    12a2:	df 16       	cp	r13, r31
    12a4:	21 f0       	breq	.+8      	; 0x12ae <xTaskResumeAll+0xe2>
    12a6:	80 91 5a 07 	lds	r24, 0x075A	; 0x80075a <xMissedYield>
    12aa:	81 30       	cpi	r24, 0x01	; 1
    12ac:	39 f4       	brne	.+14     	; 0x12bc <xTaskResumeAll+0xf0>
    12ae:	10 92 5a 07 	sts	0x075A, r1	; 0x80075a <xMissedYield>
    12b2:	c0 dc       	rcall	.-1664   	; 0xc34 <vPortYield>
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	03 c0       	rjmp	.+6      	; 0x12be <xTaskResumeAll+0xf2>
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	01 c0       	rjmp	.+2      	; 0x12be <xTaskResumeAll+0xf2>
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	0f 90       	pop	r0
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	df 91       	pop	r29
    12c4:	cf 91       	pop	r28
    12c6:	1f 91       	pop	r17
    12c8:	0f 91       	pop	r16
    12ca:	ff 90       	pop	r15
    12cc:	ef 90       	pop	r14
    12ce:	df 90       	pop	r13
    12d0:	cf 90       	pop	r12
    12d2:	08 95       	ret

000012d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    12d4:	cf 93       	push	r28
    12d6:	df 93       	push	r29
    12d8:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    12da:	89 2b       	or	r24, r25
		{
			vTaskSuspendAll();
    12dc:	99 f0       	breq	.+38     	; 0x1304 <vTaskDelay+0x30>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    12de:	ae de       	rcall	.-676    	; 0x103c <vTaskSuspendAll>
    12e0:	80 91 60 07 	lds	r24, 0x0760	; 0x800760 <xTickCount>
    12e4:	90 91 61 07 	lds	r25, 0x0761	; 0x800761 <xTickCount+0x1>
    12e8:	c8 0f       	add	r28, r24

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    12ea:	d9 1f       	adc	r29, r25
    12ec:	80 91 b0 07 	lds	r24, 0x07B0	; 0x8007b0 <pxCurrentTCB>
    12f0:	90 91 b1 07 	lds	r25, 0x07B1	; 0x8007b1 <pxCurrentTCB+0x1>
    12f4:	02 96       	adiw	r24, 0x02	; 2
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    12f6:	0e 94 ff 00 	call	0x1fe	; 0x1fe <vListRemove>
			xAlreadyYielded = xTaskResumeAll();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    12fa:	ce 01       	movw	r24, r28
    12fc:	4e dd       	rcall	.-1380   	; 0xd9a <prvAddCurrentTaskToDelayedList>
		{
			portYIELD_WITHIN_API();
    12fe:	66 df       	rcall	.-308    	; 0x11cc <xTaskResumeAll>
    1300:	81 11       	cpse	r24, r1
		}
	}
    1302:	01 c0       	rjmp	.+2      	; 0x1306 <vTaskDelay+0x32>
    1304:	97 dc       	rcall	.-1746   	; 0xc34 <vPortYield>
    1306:	df 91       	pop	r29
    1308:	cf 91       	pop	r28
    130a:	08 95       	ret

0000130c <prvIdleTask>:
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    130c:	0f 2e       	mov	r0, r31
    130e:	f4 e6       	ldi	r31, 0x64	; 100
    1310:	ef 2e       	mov	r14, r31
    1312:	f7 e0       	ldi	r31, 0x07	; 7
    1314:	ff 2e       	mov	r15, r31
    1316:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    1318:	cc e8       	ldi	r28, 0x8C	; 140
    131a:	d7 e0       	ldi	r29, 0x07	; 7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    131c:	80 91 63 07 	lds	r24, 0x0763	; 0x800763 <uxTasksDeleted>
    1320:	88 23       	and	r24, r24
		{
			vTaskSuspendAll();
    1322:	41 f1       	breq	.+80     	; 0x1374 <prvIdleTask+0x68>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1324:	8b de       	rcall	.-746    	; 0x103c <vTaskSuspendAll>
			xTaskResumeAll();
    1326:	d7 01       	movw	r26, r14
    1328:	1c 91       	ld	r17, X

			if( xListIsEmpty == pdFALSE )
    132a:	50 df       	rcall	.-352    	; 0x11cc <xTaskResumeAll>
    132c:	11 23       	and	r17, r17
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    132e:	11 f1       	breq	.+68     	; 0x1374 <prvIdleTask+0x68>
    1330:	0f b6       	in	r0, 0x3f	; 63
    1332:	f8 94       	cli
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    1334:	0f 92       	push	r0
    1336:	d7 01       	movw	r26, r14
    1338:	15 96       	adiw	r26, 0x05	; 5
    133a:	ed 91       	ld	r30, X+
    133c:	fc 91       	ld	r31, X
    133e:	16 97       	sbiw	r26, 0x06	; 6
    1340:	06 81       	ldd	r16, Z+6	; 0x06
					vListRemove( &( pxTCB->xGenericListItem ) );
    1342:	17 81       	ldd	r17, Z+7	; 0x07
    1344:	c8 01       	movw	r24, r16
    1346:	02 96       	adiw	r24, 0x02	; 2
    1348:	0e 94 ff 00 	call	0x1fe	; 0x1fe <vListRemove>
					--uxCurrentNumberOfTasks;
    134c:	80 91 62 07 	lds	r24, 0x0762	; 0x800762 <uxCurrentNumberOfTasks>
    1350:	81 50       	subi	r24, 0x01	; 1
    1352:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <uxCurrentNumberOfTasks>
					--uxTasksDeleted;
    1356:	80 91 63 07 	lds	r24, 0x0763	; 0x800763 <uxTasksDeleted>
    135a:	81 50       	subi	r24, 0x01	; 1
    135c:	80 93 63 07 	sts	0x0763, r24	; 0x800763 <uxTasksDeleted>
				}
				taskEXIT_CRITICAL();
    1360:	0f 90       	pop	r0
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    1362:	0f be       	out	0x3f, r0	; 63
    1364:	f8 01       	movw	r30, r16
    1366:	87 89       	ldd	r24, Z+23	; 0x17
    1368:	90 8d       	ldd	r25, Z+24	; 0x18
    136a:	0e 94 8a 00 	call	0x114	; 0x114 <vPortFree>
		vPortFree( pxTCB );
    136e:	c8 01       	movw	r24, r16
    1370:	0e 94 8a 00 	call	0x114	; 0x114 <vPortFree>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    1374:	88 81       	ld	r24, Y
			{
				taskYIELD();
    1376:	82 30       	cpi	r24, 0x02	; 2
    1378:	88 f2       	brcs	.-94     	; 0x131c <prvIdleTask+0x10>
    137a:	5c dc       	rcall	.-1864   	; 0xc34 <vPortYield>
    137c:	cf cf       	rjmp	.-98     	; 0x131c <prvIdleTask+0x10>

0000137e <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    137e:	80 91 5c 07 	lds	r24, 0x075C	; 0x80075c <uxSchedulerSuspended>
    1382:	81 11       	cpse	r24, r1
    1384:	13 c0       	rjmp	.+38     	; 0x13ac <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    1386:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <uxTopReadyPriority>
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	fc 01       	movw	r30, r24
    138e:	ee 0f       	add	r30, r30
    1390:	ff 1f       	adc	r31, r31
    1392:	ee 0f       	add	r30, r30
    1394:	ff 1f       	adc	r31, r31
    1396:	ee 0f       	add	r30, r30
    1398:	ff 1f       	adc	r31, r31
    139a:	8e 0f       	add	r24, r30
    139c:	9f 1f       	adc	r25, r31
    139e:	fc 01       	movw	r30, r24
    13a0:	e4 57       	subi	r30, 0x74	; 116
    13a2:	f8 4f       	sbci	r31, 0xF8	; 248
    13a4:	80 81       	ld	r24, Z
    13a6:	88 23       	and	r24, r24
    13a8:	29 f0       	breq	.+10     	; 0x13b4 <vTaskSwitchContext+0x36>
    13aa:	1b c0       	rjmp	.+54     	; 0x13e2 <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	80 93 5a 07 	sts	0x075A, r24	; 0x80075a <xMissedYield>
    13b2:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    13b4:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <uxTopReadyPriority>
    13b8:	81 50       	subi	r24, 0x01	; 1
    13ba:	80 93 5e 07 	sts	0x075E, r24	; 0x80075e <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    13be:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <uxTopReadyPriority>
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	fc 01       	movw	r30, r24
    13c6:	ee 0f       	add	r30, r30
    13c8:	ff 1f       	adc	r31, r31
    13ca:	ee 0f       	add	r30, r30
    13cc:	ff 1f       	adc	r31, r31
    13ce:	ee 0f       	add	r30, r30
    13d0:	ff 1f       	adc	r31, r31
    13d2:	8e 0f       	add	r24, r30
    13d4:	9f 1f       	adc	r25, r31
    13d6:	fc 01       	movw	r30, r24
    13d8:	e4 57       	subi	r30, 0x74	; 116
    13da:	f8 4f       	sbci	r31, 0xF8	; 248
    13dc:	80 81       	ld	r24, Z
    13de:	88 23       	and	r24, r24
    13e0:	49 f3       	breq	.-46     	; 0x13b4 <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    13e2:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <uxTopReadyPriority>
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	9c 01       	movw	r18, r24
    13ea:	22 0f       	add	r18, r18
    13ec:	33 1f       	adc	r19, r19
    13ee:	22 0f       	add	r18, r18
    13f0:	33 1f       	adc	r19, r19
    13f2:	22 0f       	add	r18, r18
    13f4:	33 1f       	adc	r19, r19
    13f6:	28 0f       	add	r18, r24
    13f8:	39 1f       	adc	r19, r25
    13fa:	d9 01       	movw	r26, r18
    13fc:	a4 57       	subi	r26, 0x74	; 116
    13fe:	b8 4f       	sbci	r27, 0xF8	; 248
    1400:	11 96       	adiw	r26, 0x01	; 1
    1402:	ed 91       	ld	r30, X+
    1404:	fc 91       	ld	r31, X
    1406:	12 97       	sbiw	r26, 0x02	; 2
    1408:	02 80       	ldd	r0, Z+2	; 0x02
    140a:	f3 81       	ldd	r31, Z+3	; 0x03
    140c:	e0 2d       	mov	r30, r0
    140e:	12 96       	adiw	r26, 0x02	; 2
    1410:	fc 93       	st	X, r31
    1412:	ee 93       	st	-X, r30
    1414:	11 97       	sbiw	r26, 0x01	; 1
    1416:	21 57       	subi	r18, 0x71	; 113
    1418:	38 4f       	sbci	r19, 0xF8	; 248
    141a:	e2 17       	cp	r30, r18
    141c:	f3 07       	cpc	r31, r19
    141e:	29 f4       	brne	.+10     	; 0x142a <vTaskSwitchContext+0xac>
    1420:	22 81       	ldd	r18, Z+2	; 0x02
    1422:	33 81       	ldd	r19, Z+3	; 0x03
    1424:	fd 01       	movw	r30, r26
    1426:	32 83       	std	Z+2, r19	; 0x02
    1428:	21 83       	std	Z+1, r18	; 0x01
    142a:	fc 01       	movw	r30, r24
    142c:	ee 0f       	add	r30, r30
    142e:	ff 1f       	adc	r31, r31
    1430:	ee 0f       	add	r30, r30
    1432:	ff 1f       	adc	r31, r31
    1434:	ee 0f       	add	r30, r30
    1436:	ff 1f       	adc	r31, r31
    1438:	8e 0f       	add	r24, r30
    143a:	9f 1f       	adc	r25, r31
    143c:	fc 01       	movw	r30, r24
    143e:	e4 57       	subi	r30, 0x74	; 116
    1440:	f8 4f       	sbci	r31, 0xF8	; 248
    1442:	01 80       	ldd	r0, Z+1	; 0x01
    1444:	f2 81       	ldd	r31, Z+2	; 0x02
    1446:	e0 2d       	mov	r30, r0
    1448:	86 81       	ldd	r24, Z+6	; 0x06
    144a:	97 81       	ldd	r25, Z+7	; 0x07
    144c:	90 93 b1 07 	sts	0x07B1, r25	; 0x8007b1 <pxCurrentTCB+0x1>
    1450:	80 93 b0 07 	sts	0x07B0, r24	; 0x8007b0 <pxCurrentTCB>
    1454:	08 95       	ret

00001456 <__umulhisi3>:
    1456:	a2 9f       	mul	r26, r18
    1458:	b0 01       	movw	r22, r0
    145a:	b3 9f       	mul	r27, r19
    145c:	c0 01       	movw	r24, r0
    145e:	a3 9f       	mul	r26, r19
    1460:	70 0d       	add	r23, r0
    1462:	81 1d       	adc	r24, r1
    1464:	11 24       	eor	r1, r1
    1466:	91 1d       	adc	r25, r1
    1468:	b2 9f       	mul	r27, r18
    146a:	70 0d       	add	r23, r0
    146c:	81 1d       	adc	r24, r1
    146e:	11 24       	eor	r1, r1
    1470:	91 1d       	adc	r25, r1
    1472:	08 95       	ret

00001474 <memset>:
    1474:	dc 01       	movw	r26, r24
    1476:	01 c0       	rjmp	.+2      	; 0x147a <memset+0x6>
    1478:	6d 93       	st	X+, r22
    147a:	41 50       	subi	r20, 0x01	; 1
    147c:	50 40       	sbci	r21, 0x00	; 0
    147e:	e0 f7       	brcc	.-8      	; 0x1478 <memset+0x4>
    1480:	08 95       	ret

00001482 <strncpy>:
    1482:	fb 01       	movw	r30, r22
    1484:	dc 01       	movw	r26, r24
    1486:	41 50       	subi	r20, 0x01	; 1
    1488:	50 40       	sbci	r21, 0x00	; 0
    148a:	48 f0       	brcs	.+18     	; 0x149e <strncpy+0x1c>
    148c:	01 90       	ld	r0, Z+
    148e:	0d 92       	st	X+, r0
    1490:	00 20       	and	r0, r0
    1492:	c9 f7       	brne	.-14     	; 0x1486 <strncpy+0x4>
    1494:	01 c0       	rjmp	.+2      	; 0x1498 <strncpy+0x16>
    1496:	1d 92       	st	X+, r1
    1498:	41 50       	subi	r20, 0x01	; 1
    149a:	50 40       	sbci	r21, 0x00	; 0
    149c:	e0 f7       	brcc	.-8      	; 0x1496 <strncpy+0x14>
    149e:	08 95       	ret

000014a0 <_exit>:
    14a0:	f8 94       	cli

000014a2 <__stop_program>:
    14a2:	ff cf       	rjmp	.-2      	; 0x14a2 <__stop_program>
