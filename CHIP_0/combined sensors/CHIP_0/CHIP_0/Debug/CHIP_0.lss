
CHIP_0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00000e06  00000e9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e06  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000642  00800120  00800120  00000eba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000eba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000eec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00000f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002593  00000000  00000000  00001154  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f45  00000000  00000000  000036e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016b2  00000000  00000000  0000462c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000054c  00000000  00000000  00005ce0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e25  00000000  00000000  0000622c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001401  00000000  00000000  00007051  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  00008452  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c3       	rjmp	.+1746   	; 0x708 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e0       	ldi	r30, 0x06	; 6
  a0:	fe e0       	ldi	r31, 0x0E	; 14
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 32       	cpi	r26, 0x20	; 32
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	27 e0       	ldi	r18, 0x07	; 7
  b4:	a0 e2       	ldi	r26, 0x20	; 32
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 36       	cpi	r26, 0x62	; 98
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	b9 d1       	rcall	.+882    	; 0x436 <main>
  c4:	9e c6       	rjmp	.+3388   	; 0xe02 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
  cc:	ec 01       	movw	r28, r24
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
  ce:	6f d4       	rcall	.+2270   	; 0x9ae <vTaskSuspendAll>
  d0:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <__data_end>
  d4:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <__data_end+0x1>
  d8:	c9 01       	movw	r24, r18
  da:	8c 0f       	add	r24, r28
  dc:	9d 1f       	adc	r25, r29
  de:	8c 3d       	cpi	r24, 0xDC	; 220
  e0:	45 e0       	ldi	r20, 0x05	; 5
  e2:	94 07       	cpc	r25, r20
  e4:	58 f4       	brcc	.+22     	; 0xfc <pvPortMalloc+0x34>
  e6:	28 17       	cp	r18, r24
  e8:	39 07       	cpc	r19, r25
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
  ea:	58 f4       	brcc	.+22     	; 0x102 <pvPortMalloc+0x3a>
  ec:	e9 01       	movw	r28, r18
  ee:	ce 5d       	subi	r28, 0xDE	; 222
			xNextFreeByte += xWantedSize;			
  f0:	de 4f       	sbci	r29, 0xFE	; 254
  f2:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__data_end+0x1>
  f6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
  fa:	05 c0       	rjmp	.+10     	; 0x106 <pvPortMalloc+0x3e>
  fc:	c0 e0       	ldi	r28, 0x00	; 0
  fe:	d0 e0       	ldi	r29, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <pvPortMalloc+0x3e>
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
 102:	c0 e0       	ldi	r28, 0x00	; 0
 104:	d0 e0       	ldi	r29, 0x00	; 0
		}
	}
	#endif	

	return pvReturn;
}
 106:	1a d5       	rcall	.+2612   	; 0xb3c <xTaskResumeAll>
 108:	ce 01       	movw	r24, r28
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 110:	08 95       	ret

00000112 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 112:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 114:	03 96       	adiw	r24, 0x03	; 3
 116:	92 83       	std	Z+2, r25	; 0x02
 118:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	3f ef       	ldi	r19, 0xFF	; 255
 11e:	34 83       	std	Z+4, r19	; 0x04
 120:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 122:	96 83       	std	Z+6, r25	; 0x06
 124:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 126:	90 87       	std	Z+8, r25	; 0x08
 128:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 12a:	10 82       	st	Z, r1
 12c:	08 95       	ret

0000012e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 12e:	fc 01       	movw	r30, r24
 130:	11 86       	std	Z+9, r1	; 0x09
 132:	10 86       	std	Z+8, r1	; 0x08
 134:	08 95       	ret

00000136 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	fc 01       	movw	r30, r24
 13c:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 13e:	21 81       	ldd	r18, Z+1	; 0x01
 140:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
 142:	e9 01       	movw	r28, r18
 144:	8a 81       	ldd	r24, Y+2	; 0x02
 146:	9b 81       	ldd	r25, Y+3	; 0x03
 148:	13 96       	adiw	r26, 0x03	; 3
 14a:	9c 93       	st	X, r25
 14c:	8e 93       	st	-X, r24
 14e:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
 150:	81 81       	ldd	r24, Z+1	; 0x01
 152:	92 81       	ldd	r25, Z+2	; 0x02
 154:	15 96       	adiw	r26, 0x05	; 5
 156:	9c 93       	st	X, r25
 158:	8e 93       	st	-X, r24
 15a:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 15c:	8a 81       	ldd	r24, Y+2	; 0x02
 15e:	9b 81       	ldd	r25, Y+3	; 0x03
 160:	ec 01       	movw	r28, r24
 162:	7d 83       	std	Y+5, r23	; 0x05
 164:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 166:	e9 01       	movw	r28, r18
 168:	7b 83       	std	Y+3, r23	; 0x03
 16a:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 16c:	72 83       	std	Z+2, r23	; 0x02
 16e:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 170:	19 96       	adiw	r26, 0x09	; 9
 172:	fc 93       	st	X, r31
 174:	ee 93       	st	-X, r30
 176:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
 178:	80 81       	ld	r24, Z
 17a:	8f 5f       	subi	r24, 0xFF	; 255
 17c:	80 83       	st	Z, r24
}
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 18a:	48 81       	ld	r20, Y
 18c:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 18e:	4f 3f       	cpi	r20, 0xFF	; 255
 190:	2f ef       	ldi	r18, 0xFF	; 255
 192:	52 07       	cpc	r21, r18
 194:	31 f4       	brne	.+12     	; 0x1a2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 196:	dc 01       	movw	r26, r24
 198:	17 96       	adiw	r26, 0x07	; 7
 19a:	ed 91       	ld	r30, X+
 19c:	fc 91       	ld	r31, X
 19e:	18 97       	sbiw	r26, 0x08	; 8
 1a0:	17 c0       	rjmp	.+46     	; 0x1d0 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 1a2:	fc 01       	movw	r30, r24
 1a4:	33 96       	adiw	r30, 0x03	; 3
 1a6:	dc 01       	movw	r26, r24
 1a8:	15 96       	adiw	r26, 0x05	; 5
 1aa:	2d 91       	ld	r18, X+
 1ac:	3c 91       	ld	r19, X
 1ae:	16 97       	sbiw	r26, 0x06	; 6
 1b0:	d9 01       	movw	r26, r18
 1b2:	2d 91       	ld	r18, X+
 1b4:	3c 91       	ld	r19, X
 1b6:	42 17       	cp	r20, r18
 1b8:	53 07       	cpc	r21, r19
 1ba:	50 f0       	brcs	.+20     	; 0x1d0 <vListInsert+0x4c>
 1bc:	02 80       	ldd	r0, Z+2	; 0x02
 1be:	f3 81       	ldd	r31, Z+3	; 0x03
 1c0:	e0 2d       	mov	r30, r0
 1c2:	a2 81       	ldd	r26, Z+2	; 0x02
 1c4:	b3 81       	ldd	r27, Z+3	; 0x03
 1c6:	2d 91       	ld	r18, X+
 1c8:	3c 91       	ld	r19, X
 1ca:	42 17       	cp	r20, r18
 1cc:	53 07       	cpc	r21, r19
 1ce:	b0 f7       	brcc	.-20     	; 0x1bc <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 1d0:	a2 81       	ldd	r26, Z+2	; 0x02
 1d2:	b3 81       	ldd	r27, Z+3	; 0x03
 1d4:	bb 83       	std	Y+3, r27	; 0x03
 1d6:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 1d8:	15 96       	adiw	r26, 0x05	; 5
 1da:	dc 93       	st	X, r29
 1dc:	ce 93       	st	-X, r28
 1de:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
 1e0:	fd 83       	std	Y+5, r31	; 0x05
 1e2:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 1e4:	d3 83       	std	Z+3, r29	; 0x03
 1e6:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 1e8:	99 87       	std	Y+9, r25	; 0x09
 1ea:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
 1ec:	fc 01       	movw	r30, r24
 1ee:	20 81       	ld	r18, Z
 1f0:	2f 5f       	subi	r18, 0xFF	; 255
 1f2:	20 83       	st	Z, r18
}
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 1fa:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 1fc:	a2 81       	ldd	r26, Z+2	; 0x02
 1fe:	b3 81       	ldd	r27, Z+3	; 0x03
 200:	84 81       	ldd	r24, Z+4	; 0x04
 202:	95 81       	ldd	r25, Z+5	; 0x05
 204:	15 96       	adiw	r26, 0x05	; 5
 206:	9c 93       	st	X, r25
 208:	8e 93       	st	-X, r24
 20a:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 20c:	a4 81       	ldd	r26, Z+4	; 0x04
 20e:	b5 81       	ldd	r27, Z+5	; 0x05
 210:	82 81       	ldd	r24, Z+2	; 0x02
 212:	93 81       	ldd	r25, Z+3	; 0x03
 214:	13 96       	adiw	r26, 0x03	; 3
 216:	9c 93       	st	X, r25
 218:	8e 93       	st	-X, r24
 21a:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 21c:	a0 85       	ldd	r26, Z+8	; 0x08
 21e:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 220:	11 96       	adiw	r26, 0x01	; 1
 222:	8d 91       	ld	r24, X+
 224:	9c 91       	ld	r25, X
 226:	12 97       	sbiw	r26, 0x02	; 2
 228:	e8 17       	cp	r30, r24
 22a:	f9 07       	cpc	r31, r25
 22c:	31 f4       	brne	.+12     	; 0x23a <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 22e:	84 81       	ldd	r24, Z+4	; 0x04
 230:	95 81       	ldd	r25, Z+5	; 0x05
 232:	12 96       	adiw	r26, 0x02	; 2
 234:	9c 93       	st	X, r25
 236:	8e 93       	st	-X, r24
 238:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
 23a:	11 86       	std	Z+9, r1	; 0x09
 23c:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 23e:	8c 91       	ld	r24, X
 240:	81 50       	subi	r24, 0x01	; 1
 242:	8c 93       	st	X, r24
 244:	08 95       	ret

00000246 <ADC_init>:
//ARMED MODE FSM
//READ TEMP FSM WHEN SYSTEM DISARMED
enum ARMState {ARM_wait, read_sensors } arm_state;

void ARM_Init(){
	arm_state = T_Wait;
 246:	ea e7       	ldi	r30, 0x7A	; 122
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	80 6e       	ori	r24, 0xE0	; 224
 24e:	80 83       	st	Z, r24
 250:	08 95       	ret

00000252 <TEMP_Tick>:
 252:	80 91 60 07 	lds	r24, 0x0760	; 0x800760 <temp_state>
 256:	81 30       	cpi	r24, 0x01	; 1
 258:	d1 f4       	brne	.+52     	; 0x28e <TEMP_Tick+0x3c>
 25a:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 25e:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 262:	22 0f       	add	r18, r18
 264:	33 1f       	adc	r19, r19
 266:	22 0f       	add	r18, r18
 268:	33 1f       	adc	r19, r19
 26a:	30 93 04 07 	sts	0x0704, r19	; 0x800704 <temp_MV+0x1>
 26e:	20 93 03 07 	sts	0x0703, r18	; 0x800703 <temp_MV>
 272:	24 5f       	subi	r18, 0xF4	; 244
 274:	31 40       	sbci	r19, 0x01	; 1
 276:	ad ec       	ldi	r26, 0xCD	; 205
 278:	bc ec       	ldi	r27, 0xCC	; 204
 27a:	9e d5       	rcall	.+2876   	; 0xdb8 <__umulhisi3>
 27c:	96 95       	lsr	r25
 27e:	87 95       	ror	r24
 280:	96 95       	lsr	r25
 282:	87 95       	ror	r24
 284:	96 95       	lsr	r25
 286:	87 95       	ror	r24
 288:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <temp_val>
 28c:	8b b9       	out	0x0b, r24	; 11
 28e:	80 91 60 07 	lds	r24, 0x0760	; 0x800760 <temp_state>
 292:	88 23       	and	r24, r24
 294:	19 f0       	breq	.+6      	; 0x29c <TEMP_Tick+0x4a>
 296:	81 30       	cpi	r24, 0x01	; 1
 298:	49 f0       	breq	.+18     	; 0x2ac <TEMP_Tick+0x5a>
 29a:	0f c0       	rjmp	.+30     	; 0x2ba <TEMP_Tick+0x68>
 29c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <ARM_DISARM>
 2a0:	81 11       	cpse	r24, r1
 2a2:	0d c0       	rjmp	.+26     	; 0x2be <TEMP_Tick+0x6c>
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	80 93 60 07 	sts	0x0760, r24	; 0x800760 <temp_state>
 2aa:	08 95       	ret
 2ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <ARM_DISARM>
 2b0:	88 23       	and	r24, r24
 2b2:	29 f0       	breq	.+10     	; 0x2be <TEMP_Tick+0x6c>
 2b4:	10 92 60 07 	sts	0x0760, r1	; 0x800760 <temp_state>
 2b8:	08 95       	ret
 2ba:	10 92 60 07 	sts	0x0760, r1	; 0x800760 <temp_state>
 2be:	08 95       	ret

000002c0 <TempSecTask>:
 2c0:	10 92 60 07 	sts	0x0760, r1	; 0x800760 <temp_state>
 2c4:	c6 df       	rcall	.-116    	; 0x252 <TEMP_Tick>
 2c6:	8a e0       	ldi	r24, 0x0A	; 10
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	b9 d4       	rcall	.+2418   	; 0xc3e <vTaskDelay>
 2cc:	fb cf       	rjmp	.-10     	; 0x2c4 <TempSecTask+0x4>

000002ce <StartTempPulse>:
 2ce:	af 92       	push	r10
 2d0:	bf 92       	push	r11
 2d2:	cf 92       	push	r12
 2d4:	df 92       	push	r13
 2d6:	ef 92       	push	r14
 2d8:	ff 92       	push	r15
 2da:	0f 93       	push	r16
 2dc:	a1 2c       	mov	r10, r1
 2de:	b1 2c       	mov	r11, r1
 2e0:	c1 2c       	mov	r12, r1
 2e2:	d1 2c       	mov	r13, r1
 2e4:	e1 2c       	mov	r14, r1
 2e6:	f1 2c       	mov	r15, r1
 2e8:	08 2f       	mov	r16, r24
 2ea:	20 e0       	ldi	r18, 0x00	; 0
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	45 e5       	ldi	r20, 0x55	; 85
 2f0:	50 e0       	ldi	r21, 0x00	; 0
 2f2:	63 e0       	ldi	r22, 0x03	; 3
 2f4:	71 e0       	ldi	r23, 0x01	; 1
 2f6:	80 e6       	ldi	r24, 0x60	; 96
 2f8:	91 e0       	ldi	r25, 0x01	; 1
 2fa:	3d d2       	rcall	.+1146   	; 0x776 <xTaskGenericCreate>
 2fc:	0f 91       	pop	r16
 2fe:	ff 90       	pop	r15
 300:	ef 90       	pop	r14
 302:	df 90       	pop	r13
 304:	cf 90       	pop	r12
 306:	bf 90       	pop	r11
 308:	af 90       	pop	r10
 30a:	08 95       	ret

0000030c <ARM_Tick>:
}

void ARM_Tick(){
	//Actions
	switch(arm_state){
 30c:	80 91 61 07 	lds	r24, 0x0761	; 0x800761 <arm_state>
 310:	88 23       	and	r24, r24
 312:	19 f0       	breq	.+6      	; 0x31a <ARM_Tick+0xe>
 314:	81 30       	cpi	r24, 0x01	; 1
 316:	61 f0       	breq	.+24     	; 0x330 <ARM_Tick+0x24>
 318:	50 c0       	rjmp	.+160    	; 0x3ba <ARM_Tick+0xae>
		case ARM_wait:
		//initialize values
		temp_trip = 0;
 31a:	10 92 02 07 	sts	0x0702, r1	; 0x800702 <temp_trip>
		IR_one_trip = 0;
 31e:	10 92 01 07 	sts	0x0701, r1	; 0x800701 <IR_one_trip>
		IR_two_trip = 0;
 322:	10 92 00 07 	sts	0x0700, r1	; 0x800700 <IR_two_trip>
		button_one_trip = 0;
 326:	10 92 ff 06 	sts	0x06FF, r1	; 0x8006ff <button_one_trip>
		button_two_trip = 0;
 32a:	10 92 fe 06 	sts	0x06FE, r1	; 0x8006fe <button_two_trip>
 32e:	4c c0       	rjmp	.+152    	; 0x3c8 <ARM_Tick+0xbc>
		break;

		case read_sensors:
			temp_MV = ADC * (5000/1024);
 330:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 334:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 338:	22 0f       	add	r18, r18
 33a:	33 1f       	adc	r19, r19
 33c:	22 0f       	add	r18, r18
 33e:	33 1f       	adc	r19, r19
 340:	30 93 04 07 	sts	0x0704, r19	; 0x800704 <temp_MV+0x1>
 344:	20 93 03 07 	sts	0x0703, r18	; 0x800703 <temp_MV>
			temp_val = ((temp_MV - 500)/10);
 348:	24 5f       	subi	r18, 0xF4	; 244
 34a:	31 40       	sbci	r19, 0x01	; 1
 34c:	ad ec       	ldi	r26, 0xCD	; 205
 34e:	bc ec       	ldi	r27, 0xCC	; 204
 350:	33 d5       	rcall	.+2662   	; 0xdb8 <__umulhisi3>
 352:	96 95       	lsr	r25
 354:	87 95       	ror	r24
 356:	96 95       	lsr	r25
 358:	87 95       	ror	r24
 35a:	96 95       	lsr	r25
 35c:	87 95       	ror	r24
 35e:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <temp_val>
			PORTD = 0x00;
 362:	1b b8       	out	0x0b, r1	; 11
			PORTB = 0x00;
 364:	15 b8       	out	0x05, r1	; 5
			if(temp_val >= 32){ //fire detected about 90 F
 366:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <temp_val>
 36a:	80 32       	cpi	r24, 0x20	; 32
 36c:	20 f0       	brcs	.+8      	; 0x376 <ARM_Tick+0x6a>
				temp_trip = 1; //fire detected trip
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	80 93 02 07 	sts	0x0702, r24	; 0x800702 <temp_trip>
				PORTB = 0x01;
 374:	85 b9       	out	0x05, r24	; 5
			}
			if((GetBit(~PINC, 3) == 1)){ //IR 2
 376:	86 b1       	in	r24, 0x06	; 6
 378:	80 95       	com	r24
 37a:	83 ff       	sbrs	r24, 3
 37c:	05 c0       	rjmp	.+10     	; 0x388 <ARM_Tick+0x7c>
				IR_two_trip = 1;
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	80 93 00 07 	sts	0x0700, r24	; 0x800700 <IR_two_trip>
				PORTD = 0x02;
 384:	82 e0       	ldi	r24, 0x02	; 2
 386:	8b b9       	out	0x0b, r24	; 11
			}
			if((GetBit(~PINC, 2) == 1)){ //IR 1
 388:	86 b1       	in	r24, 0x06	; 6
 38a:	80 95       	com	r24
 38c:	82 ff       	sbrs	r24, 2
 38e:	05 c0       	rjmp	.+10     	; 0x39a <ARM_Tick+0x8e>
				IR_one_trip = 1;
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	80 93 01 07 	sts	0x0701, r24	; 0x800701 <IR_one_trip>
				PORTD = 0x04;
 396:	84 e0       	ldi	r24, 0x04	; 4
 398:	8b b9       	out	0x0b, r24	; 11
			}
			if((GetBit(~PINC, 1) == 1)){ //button 2
 39a:	86 b1       	in	r24, 0x06	; 6
 39c:	80 95       	com	r24
 39e:	81 ff       	sbrs	r24, 1
 3a0:	05 c0       	rjmp	.+10     	; 0x3ac <ARM_Tick+0xa0>
				button_two_trip = 1;
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <button_two_trip>
				PORTD = 0x08;
 3a8:	88 e0       	ldi	r24, 0x08	; 8
 3aa:	8b b9       	out	0x0b, r24	; 11
			}
			if((GetBit(~PINC, 0) == 1)){ //button 1
 3ac:	30 99       	sbic	0x06, 0	; 6
 3ae:	05 c0       	rjmp	.+10     	; 0x3ba <ARM_Tick+0xae>
				button_one_trip = 1;
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	80 93 ff 06 	sts	0x06FF, r24	; 0x8006ff <button_one_trip>
				PORTD = 0x10;
 3b6:	80 e1       	ldi	r24, 0x10	; 16
 3b8:	8b b9       	out	0x0b, r24	; 11
		
		default:
		break;
	}
	//Transitions
	switch(arm_state){
 3ba:	80 91 61 07 	lds	r24, 0x0761	; 0x800761 <arm_state>
 3be:	88 23       	and	r24, r24
 3c0:	19 f0       	breq	.+6      	; 0x3c8 <ARM_Tick+0xbc>
 3c2:	81 30       	cpi	r24, 0x01	; 1
 3c4:	41 f0       	breq	.+16     	; 0x3d6 <ARM_Tick+0xca>
 3c6:	0e c0       	rjmp	.+28     	; 0x3e4 <ARM_Tick+0xd8>
		case ARM_wait:
		if(ARM_DISARM == 1){ //enter armed mode
 3c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <ARM_DISARM>
 3cc:	81 30       	cpi	r24, 0x01	; 1
 3ce:	61 f4       	brne	.+24     	; 0x3e8 <ARM_Tick+0xdc>
			arm_state = read_sensors;
 3d0:	80 93 61 07 	sts	0x0761, r24	; 0x800761 <arm_state>
 3d4:	08 95       	ret
			arm_state = ARM_wait;
		}
		break;

		case read_sensors:
		if(ARM_DISARM == 1){ //enter armed mode
 3d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <ARM_DISARM>
 3da:	81 30       	cpi	r24, 0x01	; 1
 3dc:	29 f0       	breq	.+10     	; 0x3e8 <ARM_Tick+0xdc>
			arm_state = read_sensors;
		}
		else{
			arm_state = ARM_wait;
 3de:	10 92 61 07 	sts	0x0761, r1	; 0x800761 <arm_state>
 3e2:	08 95       	ret
		}
		break;
		
		default:
		arm_state = ARM_wait;
 3e4:	10 92 61 07 	sts	0x0761, r1	; 0x800761 <arm_state>
 3e8:	08 95       	ret

000003ea <ARMSecTask>:
//ARMED MODE FSM
//READ TEMP FSM WHEN SYSTEM DISARMED
enum ARMState {ARM_wait, read_sensors } arm_state;

void ARM_Init(){
	arm_state = T_Wait;
 3ea:	10 92 61 07 	sts	0x0761, r1	; 0x800761 <arm_state>
{
	ARM_Init();
	for(;;)
	{
		ARM_Tick();
		vTaskDelay(10);
 3ee:	8e df       	rcall	.-228    	; 0x30c <ARM_Tick>
 3f0:	8a e0       	ldi	r24, 0x0A	; 10
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	24 d4       	rcall	.+2120   	; 0xc3e <vTaskDelay>
 3f6:	fb cf       	rjmp	.-10     	; 0x3ee <ARMSecTask+0x4>

000003f8 <StartARMPulse>:
	}
}

void StartARMPulse(unsigned portBASE_TYPE Priority)
{
 3f8:	af 92       	push	r10
 3fa:	bf 92       	push	r11
 3fc:	cf 92       	push	r12
 3fe:	df 92       	push	r13
 400:	ef 92       	push	r14
 402:	ff 92       	push	r15
 404:	0f 93       	push	r16
	xTaskCreate(ARMSecTask, (signed portCHAR *)"ARMSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
 406:	a1 2c       	mov	r10, r1
 408:	b1 2c       	mov	r11, r1
 40a:	c1 2c       	mov	r12, r1
 40c:	d1 2c       	mov	r13, r1
 40e:	e1 2c       	mov	r14, r1
 410:	f1 2c       	mov	r15, r1
 412:	08 2f       	mov	r16, r24
 414:	20 e0       	ldi	r18, 0x00	; 0
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	45 e5       	ldi	r20, 0x55	; 85
 41a:	50 e0       	ldi	r21, 0x00	; 0
 41c:	6f e0       	ldi	r22, 0x0F	; 15
 41e:	71 e0       	ldi	r23, 0x01	; 1
 420:	85 ef       	ldi	r24, 0xF5	; 245
 422:	91 e0       	ldi	r25, 0x01	; 1
 424:	a8 d1       	rcall	.+848    	; 0x776 <xTaskGenericCreate>
}
 426:	0f 91       	pop	r16
 428:	ff 90       	pop	r15
 42a:	ef 90       	pop	r14
 42c:	df 90       	pop	r13
 42e:	cf 90       	pop	r12
 430:	bf 90       	pop	r11
 432:	af 90       	pop	r10
 434:	08 95       	ret

00000436 <main>:

 
int main(void) 
{ 
 436:	07 df       	rcall	.-498    	; 0x246 <ADC_init>
 438:	11 b8       	out	0x01, r1	; 1
 43a:	8f ef       	ldi	r24, 0xFF	; 255
 43c:	82 b9       	out	0x02, r24	; 2
 43e:	17 b8       	out	0x07, r1	; 7
 440:	88 b9       	out	0x08, r24	; 8
 442:	8a b9       	out	0x0a, r24	; 10
 444:	1b b8       	out	0x0b, r1	; 11
 446:	84 b9       	out	0x04, r24	; 4
 448:	15 b8       	out	0x05, r1	; 5
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	40 df       	rcall	.-384    	; 0x2ce <StartTempPulse>
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	d3 df       	rcall	.-90     	; 0x3f8 <StartARMPulse>
 452:	84 d2       	rcall	.+1288   	; 0x95c <vTaskStartScheduler>
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	08 95       	ret

0000045a <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 45a:	31 e1       	ldi	r19, 0x11	; 17
 45c:	fc 01       	movw	r30, r24
 45e:	30 83       	st	Z, r19
 460:	31 97       	sbiw	r30, 0x01	; 1
 462:	22 e2       	ldi	r18, 0x22	; 34
 464:	20 83       	st	Z, r18
 466:	31 97       	sbiw	r30, 0x01	; 1
 468:	a3 e3       	ldi	r26, 0x33	; 51
 46a:	a0 83       	st	Z, r26
 46c:	31 97       	sbiw	r30, 0x01	; 1
 46e:	60 83       	st	Z, r22
 470:	31 97       	sbiw	r30, 0x01	; 1
 472:	70 83       	st	Z, r23
 474:	31 97       	sbiw	r30, 0x01	; 1
 476:	10 82       	st	Z, r1
 478:	31 97       	sbiw	r30, 0x01	; 1
 47a:	60 e8       	ldi	r22, 0x80	; 128
 47c:	60 83       	st	Z, r22
 47e:	31 97       	sbiw	r30, 0x01	; 1
 480:	10 82       	st	Z, r1
 482:	31 97       	sbiw	r30, 0x01	; 1
 484:	62 e0       	ldi	r22, 0x02	; 2
 486:	60 83       	st	Z, r22
 488:	31 97       	sbiw	r30, 0x01	; 1
 48a:	63 e0       	ldi	r22, 0x03	; 3
 48c:	60 83       	st	Z, r22
 48e:	31 97       	sbiw	r30, 0x01	; 1
 490:	64 e0       	ldi	r22, 0x04	; 4
 492:	60 83       	st	Z, r22
 494:	31 97       	sbiw	r30, 0x01	; 1
 496:	65 e0       	ldi	r22, 0x05	; 5
 498:	60 83       	st	Z, r22
 49a:	31 97       	sbiw	r30, 0x01	; 1
 49c:	66 e0       	ldi	r22, 0x06	; 6
 49e:	60 83       	st	Z, r22
 4a0:	31 97       	sbiw	r30, 0x01	; 1
 4a2:	67 e0       	ldi	r22, 0x07	; 7
 4a4:	60 83       	st	Z, r22
 4a6:	31 97       	sbiw	r30, 0x01	; 1
 4a8:	68 e0       	ldi	r22, 0x08	; 8
 4aa:	60 83       	st	Z, r22
 4ac:	31 97       	sbiw	r30, 0x01	; 1
 4ae:	69 e0       	ldi	r22, 0x09	; 9
 4b0:	60 83       	st	Z, r22
 4b2:	31 97       	sbiw	r30, 0x01	; 1
 4b4:	60 e1       	ldi	r22, 0x10	; 16
 4b6:	60 83       	st	Z, r22
 4b8:	31 97       	sbiw	r30, 0x01	; 1
 4ba:	30 83       	st	Z, r19
 4bc:	31 97       	sbiw	r30, 0x01	; 1
 4be:	32 e1       	ldi	r19, 0x12	; 18
 4c0:	30 83       	st	Z, r19
 4c2:	31 97       	sbiw	r30, 0x01	; 1
 4c4:	33 e1       	ldi	r19, 0x13	; 19
 4c6:	30 83       	st	Z, r19
 4c8:	31 97       	sbiw	r30, 0x01	; 1
 4ca:	34 e1       	ldi	r19, 0x14	; 20
 4cc:	30 83       	st	Z, r19
 4ce:	31 97       	sbiw	r30, 0x01	; 1
 4d0:	35 e1       	ldi	r19, 0x15	; 21
 4d2:	30 83       	st	Z, r19
 4d4:	31 97       	sbiw	r30, 0x01	; 1
 4d6:	36 e1       	ldi	r19, 0x16	; 22
 4d8:	30 83       	st	Z, r19
 4da:	31 97       	sbiw	r30, 0x01	; 1
 4dc:	37 e1       	ldi	r19, 0x17	; 23
 4de:	30 83       	st	Z, r19
 4e0:	31 97       	sbiw	r30, 0x01	; 1
 4e2:	38 e1       	ldi	r19, 0x18	; 24
 4e4:	30 83       	st	Z, r19
 4e6:	31 97       	sbiw	r30, 0x01	; 1
 4e8:	39 e1       	ldi	r19, 0x19	; 25
 4ea:	30 83       	st	Z, r19
 4ec:	31 97       	sbiw	r30, 0x01	; 1
 4ee:	30 e2       	ldi	r19, 0x20	; 32
 4f0:	30 83       	st	Z, r19
 4f2:	31 97       	sbiw	r30, 0x01	; 1
 4f4:	31 e2       	ldi	r19, 0x21	; 33
 4f6:	30 83       	st	Z, r19
 4f8:	31 97       	sbiw	r30, 0x01	; 1
 4fa:	20 83       	st	Z, r18
 4fc:	31 97       	sbiw	r30, 0x01	; 1
 4fe:	23 e2       	ldi	r18, 0x23	; 35
 500:	20 83       	st	Z, r18
 502:	31 97       	sbiw	r30, 0x01	; 1
 504:	40 83       	st	Z, r20
 506:	31 97       	sbiw	r30, 0x01	; 1
 508:	50 83       	st	Z, r21
 50a:	31 97       	sbiw	r30, 0x01	; 1
 50c:	26 e2       	ldi	r18, 0x26	; 38
 50e:	20 83       	st	Z, r18
 510:	31 97       	sbiw	r30, 0x01	; 1
 512:	27 e2       	ldi	r18, 0x27	; 39
 514:	20 83       	st	Z, r18
 516:	31 97       	sbiw	r30, 0x01	; 1
 518:	28 e2       	ldi	r18, 0x28	; 40
 51a:	20 83       	st	Z, r18
 51c:	31 97       	sbiw	r30, 0x01	; 1
 51e:	29 e2       	ldi	r18, 0x29	; 41
 520:	20 83       	st	Z, r18
 522:	31 97       	sbiw	r30, 0x01	; 1
 524:	20 e3       	ldi	r18, 0x30	; 48
 526:	20 83       	st	Z, r18
 528:	31 97       	sbiw	r30, 0x01	; 1
 52a:	21 e3       	ldi	r18, 0x31	; 49
 52c:	20 83       	st	Z, r18
 52e:	86 97       	sbiw	r24, 0x26	; 38
 530:	08 95       	ret

00000532 <xPortStartScheduler>:
 532:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 536:	8c e7       	ldi	r24, 0x7C	; 124
 538:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 53c:	8b e0       	ldi	r24, 0x0B	; 11
 53e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 542:	ef e6       	ldi	r30, 0x6F	; 111
 544:	f0 e0       	ldi	r31, 0x00	; 0
 546:	80 81       	ld	r24, Z
 548:	82 60       	ori	r24, 0x02	; 2
 54a:	80 83       	st	Z, r24
 54c:	a0 91 5e 07 	lds	r26, 0x075E	; 0x80075e <pxCurrentTCB>
 550:	b0 91 5f 07 	lds	r27, 0x075F	; 0x80075f <pxCurrentTCB+0x1>
 554:	cd 91       	ld	r28, X+
 556:	cd bf       	out	0x3d, r28	; 61
 558:	dd 91       	ld	r29, X+
 55a:	de bf       	out	0x3e, r29	; 62
 55c:	ff 91       	pop	r31
 55e:	ef 91       	pop	r30
 560:	df 91       	pop	r29
 562:	cf 91       	pop	r28
 564:	bf 91       	pop	r27
 566:	af 91       	pop	r26
 568:	9f 91       	pop	r25
 56a:	8f 91       	pop	r24
 56c:	7f 91       	pop	r23
 56e:	6f 91       	pop	r22
 570:	5f 91       	pop	r21
 572:	4f 91       	pop	r20
 574:	3f 91       	pop	r19
 576:	2f 91       	pop	r18
 578:	1f 91       	pop	r17
 57a:	0f 91       	pop	r16
 57c:	ff 90       	pop	r15
 57e:	ef 90       	pop	r14
 580:	df 90       	pop	r13
 582:	cf 90       	pop	r12
 584:	bf 90       	pop	r11
 586:	af 90       	pop	r10
 588:	9f 90       	pop	r9
 58a:	8f 90       	pop	r8
 58c:	7f 90       	pop	r7
 58e:	6f 90       	pop	r6
 590:	5f 90       	pop	r5
 592:	4f 90       	pop	r4
 594:	3f 90       	pop	r3
 596:	2f 90       	pop	r2
 598:	1f 90       	pop	r1
 59a:	0f 90       	pop	r0
 59c:	0f be       	out	0x3f, r0	; 63
 59e:	0f 90       	pop	r0
 5a0:	08 95       	ret
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	08 95       	ret

000005a6 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 5a6:	0f 92       	push	r0
 5a8:	0f b6       	in	r0, 0x3f	; 63
 5aa:	f8 94       	cli
 5ac:	0f 92       	push	r0
 5ae:	1f 92       	push	r1
 5b0:	11 24       	eor	r1, r1
 5b2:	2f 92       	push	r2
 5b4:	3f 92       	push	r3
 5b6:	4f 92       	push	r4
 5b8:	5f 92       	push	r5
 5ba:	6f 92       	push	r6
 5bc:	7f 92       	push	r7
 5be:	8f 92       	push	r8
 5c0:	9f 92       	push	r9
 5c2:	af 92       	push	r10
 5c4:	bf 92       	push	r11
 5c6:	cf 92       	push	r12
 5c8:	df 92       	push	r13
 5ca:	ef 92       	push	r14
 5cc:	ff 92       	push	r15
 5ce:	0f 93       	push	r16
 5d0:	1f 93       	push	r17
 5d2:	2f 93       	push	r18
 5d4:	3f 93       	push	r19
 5d6:	4f 93       	push	r20
 5d8:	5f 93       	push	r21
 5da:	6f 93       	push	r22
 5dc:	7f 93       	push	r23
 5de:	8f 93       	push	r24
 5e0:	9f 93       	push	r25
 5e2:	af 93       	push	r26
 5e4:	bf 93       	push	r27
 5e6:	cf 93       	push	r28
 5e8:	df 93       	push	r29
 5ea:	ef 93       	push	r30
 5ec:	ff 93       	push	r31
 5ee:	a0 91 5e 07 	lds	r26, 0x075E	; 0x80075e <pxCurrentTCB>
 5f2:	b0 91 5f 07 	lds	r27, 0x075F	; 0x80075f <pxCurrentTCB+0x1>
 5f6:	0d b6       	in	r0, 0x3d	; 61
 5f8:	0d 92       	st	X+, r0
 5fa:	0e b6       	in	r0, 0x3e	; 62
	vTaskSwitchContext();
 5fc:	0d 92       	st	X+, r0
	portRESTORE_CONTEXT();
 5fe:	70 d3       	rcall	.+1760   	; 0xce0 <vTaskSwitchContext>
 600:	a0 91 5e 07 	lds	r26, 0x075E	; 0x80075e <pxCurrentTCB>
 604:	b0 91 5f 07 	lds	r27, 0x075F	; 0x80075f <pxCurrentTCB+0x1>
 608:	cd 91       	ld	r28, X+
 60a:	cd bf       	out	0x3d, r28	; 61
 60c:	dd 91       	ld	r29, X+
 60e:	de bf       	out	0x3e, r29	; 62
 610:	ff 91       	pop	r31
 612:	ef 91       	pop	r30
 614:	df 91       	pop	r29
 616:	cf 91       	pop	r28
 618:	bf 91       	pop	r27
 61a:	af 91       	pop	r26
 61c:	9f 91       	pop	r25
 61e:	8f 91       	pop	r24
 620:	7f 91       	pop	r23
 622:	6f 91       	pop	r22
 624:	5f 91       	pop	r21
 626:	4f 91       	pop	r20
 628:	3f 91       	pop	r19
 62a:	2f 91       	pop	r18
 62c:	1f 91       	pop	r17
 62e:	0f 91       	pop	r16
 630:	ff 90       	pop	r15
 632:	ef 90       	pop	r14
 634:	df 90       	pop	r13
 636:	cf 90       	pop	r12
 638:	bf 90       	pop	r11
 63a:	af 90       	pop	r10
 63c:	9f 90       	pop	r9
 63e:	8f 90       	pop	r8
 640:	7f 90       	pop	r7
 642:	6f 90       	pop	r6
 644:	5f 90       	pop	r5
 646:	4f 90       	pop	r4
 648:	3f 90       	pop	r3
 64a:	2f 90       	pop	r2
 64c:	1f 90       	pop	r1
 64e:	0f 90       	pop	r0
 650:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
 652:	0f 90       	pop	r0
 654:	08 95       	ret

00000656 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 656:	0f 92       	push	r0
 658:	0f b6       	in	r0, 0x3f	; 63
 65a:	f8 94       	cli
 65c:	0f 92       	push	r0
 65e:	1f 92       	push	r1
 660:	11 24       	eor	r1, r1
 662:	2f 92       	push	r2
 664:	3f 92       	push	r3
 666:	4f 92       	push	r4
 668:	5f 92       	push	r5
 66a:	6f 92       	push	r6
 66c:	7f 92       	push	r7
 66e:	8f 92       	push	r8
 670:	9f 92       	push	r9
 672:	af 92       	push	r10
 674:	bf 92       	push	r11
 676:	cf 92       	push	r12
 678:	df 92       	push	r13
 67a:	ef 92       	push	r14
 67c:	ff 92       	push	r15
 67e:	0f 93       	push	r16
 680:	1f 93       	push	r17
 682:	2f 93       	push	r18
 684:	3f 93       	push	r19
 686:	4f 93       	push	r20
 688:	5f 93       	push	r21
 68a:	6f 93       	push	r22
 68c:	7f 93       	push	r23
 68e:	8f 93       	push	r24
 690:	9f 93       	push	r25
 692:	af 93       	push	r26
 694:	bf 93       	push	r27
 696:	cf 93       	push	r28
 698:	df 93       	push	r29
 69a:	ef 93       	push	r30
 69c:	ff 93       	push	r31
 69e:	a0 91 5e 07 	lds	r26, 0x075E	; 0x80075e <pxCurrentTCB>
 6a2:	b0 91 5f 07 	lds	r27, 0x075F	; 0x80075f <pxCurrentTCB+0x1>
 6a6:	0d b6       	in	r0, 0x3d	; 61
 6a8:	0d 92       	st	X+, r0
 6aa:	0e b6       	in	r0, 0x3e	; 62
	vTaskIncrementTick();
	vTaskSwitchContext();
 6ac:	0d 92       	st	X+, r0
 6ae:	85 d1       	rcall	.+778    	; 0x9ba <vTaskIncrementTick>
	portRESTORE_CONTEXT();
 6b0:	17 d3       	rcall	.+1582   	; 0xce0 <vTaskSwitchContext>
 6b2:	a0 91 5e 07 	lds	r26, 0x075E	; 0x80075e <pxCurrentTCB>
 6b6:	b0 91 5f 07 	lds	r27, 0x075F	; 0x80075f <pxCurrentTCB+0x1>
 6ba:	cd 91       	ld	r28, X+
 6bc:	cd bf       	out	0x3d, r28	; 61
 6be:	dd 91       	ld	r29, X+
 6c0:	de bf       	out	0x3e, r29	; 62
 6c2:	ff 91       	pop	r31
 6c4:	ef 91       	pop	r30
 6c6:	df 91       	pop	r29
 6c8:	cf 91       	pop	r28
 6ca:	bf 91       	pop	r27
 6cc:	af 91       	pop	r26
 6ce:	9f 91       	pop	r25
 6d0:	8f 91       	pop	r24
 6d2:	7f 91       	pop	r23
 6d4:	6f 91       	pop	r22
 6d6:	5f 91       	pop	r21
 6d8:	4f 91       	pop	r20
 6da:	3f 91       	pop	r19
 6dc:	2f 91       	pop	r18
 6de:	1f 91       	pop	r17
 6e0:	0f 91       	pop	r16
 6e2:	ff 90       	pop	r15
 6e4:	ef 90       	pop	r14
 6e6:	df 90       	pop	r13
 6e8:	cf 90       	pop	r12
 6ea:	bf 90       	pop	r11
 6ec:	af 90       	pop	r10
 6ee:	9f 90       	pop	r9
 6f0:	8f 90       	pop	r8
 6f2:	7f 90       	pop	r7
 6f4:	6f 90       	pop	r6
 6f6:	5f 90       	pop	r5
 6f8:	4f 90       	pop	r4
 6fa:	3f 90       	pop	r3
 6fc:	2f 90       	pop	r2
 6fe:	1f 90       	pop	r1
 700:	0f 90       	pop	r0
 702:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
 704:	0f 90       	pop	r0
 706:	08 95       	ret

00000708 <__vector_13>:
 708:	a6 df       	rcall	.-180    	; 0x656 <vPortYieldFromTick>
 70a:	18 95       	reti

0000070c <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
 70c:	cf 93       	push	r28
 70e:	df 93       	push	r29
 710:	ec 01       	movw	r28, r24
 712:	e0 91 5e 07 	lds	r30, 0x075E	; 0x80075e <pxCurrentTCB>
 716:	f0 91 5f 07 	lds	r31, 0x075F	; 0x80075f <pxCurrentTCB+0x1>
 71a:	93 83       	std	Z+3, r25	; 0x03
 71c:	82 83       	std	Z+2, r24	; 0x02
 71e:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <xTickCount>
 722:	90 91 0f 07 	lds	r25, 0x070F	; 0x80070f <xTickCount+0x1>
 726:	c8 17       	cp	r28, r24
 728:	d9 07       	cpc	r29, r25
 72a:	60 f4       	brcc	.+24     	; 0x744 <prvAddCurrentTaskToDelayedList+0x38>
 72c:	60 91 5e 07 	lds	r22, 0x075E	; 0x80075e <pxCurrentTCB>
 730:	70 91 5f 07 	lds	r23, 0x075F	; 0x80075f <pxCurrentTCB+0x1>
 734:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <pxOverflowDelayedTaskList>
 738:	90 91 25 07 	lds	r25, 0x0725	; 0x800725 <pxOverflowDelayedTaskList+0x1>
 73c:	6e 5f       	subi	r22, 0xFE	; 254
 73e:	7f 4f       	sbci	r23, 0xFF	; 255
 740:	21 dd       	rcall	.-1470   	; 0x184 <vListInsert>
 742:	16 c0       	rjmp	.+44     	; 0x770 <prvAddCurrentTaskToDelayedList+0x64>
 744:	60 91 5e 07 	lds	r22, 0x075E	; 0x80075e <pxCurrentTCB>
 748:	70 91 5f 07 	lds	r23, 0x075F	; 0x80075f <pxCurrentTCB+0x1>
 74c:	80 91 26 07 	lds	r24, 0x0726	; 0x800726 <pxDelayedTaskList>
 750:	90 91 27 07 	lds	r25, 0x0727	; 0x800727 <pxDelayedTaskList+0x1>
 754:	6e 5f       	subi	r22, 0xFE	; 254
 756:	7f 4f       	sbci	r23, 0xFF	; 255
 758:	15 dd       	rcall	.-1494   	; 0x184 <vListInsert>
 75a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <xNextTaskUnblockTime>
 75e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <xNextTaskUnblockTime+0x1>
 762:	c8 17       	cp	r28, r24
 764:	d9 07       	cpc	r29, r25
 766:	20 f4       	brcc	.+8      	; 0x770 <prvAddCurrentTaskToDelayedList+0x64>
 768:	d0 93 02 01 	sts	0x0102, r29	; 0x800102 <xNextTaskUnblockTime+0x1>
 76c:	c0 93 01 01 	sts	0x0101, r28	; 0x800101 <xNextTaskUnblockTime>
 770:	df 91       	pop	r29
 772:	cf 91       	pop	r28
 774:	08 95       	ret

00000776 <xTaskGenericCreate>:
 776:	4f 92       	push	r4
 778:	5f 92       	push	r5
 77a:	6f 92       	push	r6
 77c:	7f 92       	push	r7
 77e:	8f 92       	push	r8
 780:	9f 92       	push	r9
 782:	af 92       	push	r10
 784:	bf 92       	push	r11
 786:	cf 92       	push	r12
 788:	df 92       	push	r13
 78a:	ef 92       	push	r14
 78c:	ff 92       	push	r15
 78e:	0f 93       	push	r16
 790:	1f 93       	push	r17
 792:	cf 93       	push	r28
 794:	df 93       	push	r29
 796:	5c 01       	movw	r10, r24
 798:	4b 01       	movw	r8, r22
 79a:	3a 01       	movw	r6, r20
 79c:	29 01       	movw	r4, r18
 79e:	81 e2       	ldi	r24, 0x21	; 33
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	92 dc       	rcall	.-1756   	; 0xc8 <pvPortMalloc>
 7a4:	ec 01       	movw	r28, r24
 7a6:	89 2b       	or	r24, r25
 7a8:	09 f4       	brne	.+2      	; 0x7ac <xTaskGenericCreate+0x36>
 7aa:	c6 c0       	rjmp	.+396    	; 0x938 <xTaskGenericCreate+0x1c2>
 7ac:	c1 14       	cp	r12, r1
 7ae:	d1 04       	cpc	r13, r1
 7b0:	09 f0       	breq	.+2      	; 0x7b4 <xTaskGenericCreate+0x3e>
 7b2:	be c0       	rjmp	.+380    	; 0x930 <xTaskGenericCreate+0x1ba>
 7b4:	c3 01       	movw	r24, r6
 7b6:	88 dc       	rcall	.-1776   	; 0xc8 <pvPortMalloc>
 7b8:	98 8f       	std	Y+24, r25	; 0x18
 7ba:	8f 8b       	std	Y+23, r24	; 0x17
 7bc:	00 97       	sbiw	r24, 0x00	; 0
 7be:	19 f4       	brne	.+6      	; 0x7c6 <xTaskGenericCreate+0x50>
 7c0:	ce 01       	movw	r24, r28
 7c2:	a6 dc       	rcall	.-1716   	; 0x110 <vPortFree>
 7c4:	b9 c0       	rjmp	.+370    	; 0x938 <xTaskGenericCreate+0x1c2>
 7c6:	a3 01       	movw	r20, r6
 7c8:	65 ea       	ldi	r22, 0xA5	; 165
 7ca:	70 e0       	ldi	r23, 0x00	; 0
 7cc:	04 d3       	rcall	.+1544   	; 0xdd6 <memset>
 7ce:	93 01       	movw	r18, r6
 7d0:	21 50       	subi	r18, 0x01	; 1
 7d2:	31 09       	sbc	r19, r1
 7d4:	8f 89       	ldd	r24, Y+23	; 0x17
 7d6:	98 8d       	ldd	r25, Y+24	; 0x18
 7d8:	3c 01       	movw	r6, r24
 7da:	62 0e       	add	r6, r18
 7dc:	73 1e       	adc	r7, r19
 7de:	48 e0       	ldi	r20, 0x08	; 8
 7e0:	50 e0       	ldi	r21, 0x00	; 0
 7e2:	b4 01       	movw	r22, r8
 7e4:	ce 01       	movw	r24, r28
 7e6:	49 96       	adiw	r24, 0x19	; 25
 7e8:	fd d2       	rcall	.+1530   	; 0xde4 <strncpy>
 7ea:	18 a2       	std	Y+32, r1	; 0x20
 7ec:	10 2f       	mov	r17, r16
 7ee:	04 30       	cpi	r16, 0x04	; 4
 7f0:	08 f0       	brcs	.+2      	; 0x7f4 <xTaskGenericCreate+0x7e>
 7f2:	13 e0       	ldi	r17, 0x03	; 3
 7f4:	1e 8b       	std	Y+22, r17	; 0x16
 7f6:	6e 01       	movw	r12, r28
 7f8:	82 e0       	ldi	r24, 0x02	; 2
 7fa:	c8 0e       	add	r12, r24
 7fc:	d1 1c       	adc	r13, r1
 7fe:	c6 01       	movw	r24, r12
 800:	96 dc       	rcall	.-1748   	; 0x12e <vListInitialiseItem>
 802:	ce 01       	movw	r24, r28
 804:	0c 96       	adiw	r24, 0x0c	; 12
 806:	93 dc       	rcall	.-1754   	; 0x12e <vListInitialiseItem>
 808:	d9 87       	std	Y+9, r29	; 0x09
 80a:	c8 87       	std	Y+8, r28	; 0x08
 80c:	84 e0       	ldi	r24, 0x04	; 4
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	81 1b       	sub	r24, r17
 812:	91 09       	sbc	r25, r1
 814:	9d 87       	std	Y+13, r25	; 0x0d
 816:	8c 87       	std	Y+12, r24	; 0x0c
 818:	db 8b       	std	Y+19, r29	; 0x13
 81a:	ca 8b       	std	Y+18, r28	; 0x12
 81c:	a2 01       	movw	r20, r4
 81e:	b5 01       	movw	r22, r10
 820:	c3 01       	movw	r24, r6
 822:	1b de       	rcall	.-970    	; 0x45a <pxPortInitialiseStack>
 824:	99 83       	std	Y+1, r25	; 0x01
 826:	88 83       	st	Y, r24
 828:	e1 14       	cp	r14, r1
 82a:	f1 04       	cpc	r15, r1
 82c:	19 f0       	breq	.+6      	; 0x834 <xTaskGenericCreate+0xbe>
 82e:	f7 01       	movw	r30, r14
 830:	d1 83       	std	Z+1, r29	; 0x01
 832:	c0 83       	st	Z, r28
 834:	0f b6       	in	r0, 0x3f	; 63
 836:	f8 94       	cli
 838:	0f 92       	push	r0
 83a:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <uxCurrentNumberOfTasks>
 83e:	8f 5f       	subi	r24, 0xFF	; 255
 840:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <uxCurrentNumberOfTasks>
 844:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <pxCurrentTCB>
 848:	90 91 5f 07 	lds	r25, 0x075F	; 0x80075f <pxCurrentTCB+0x1>
 84c:	89 2b       	or	r24, r25
 84e:	69 f5       	brne	.+90     	; 0x8aa <xTaskGenericCreate+0x134>
 850:	d0 93 5f 07 	sts	0x075F, r29	; 0x80075f <pxCurrentTCB+0x1>
 854:	c0 93 5e 07 	sts	0x075E, r28	; 0x80075e <pxCurrentTCB>
 858:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <uxCurrentNumberOfTasks>
 85c:	81 30       	cpi	r24, 0x01	; 1
 85e:	a1 f5       	brne	.+104    	; 0x8c8 <xTaskGenericCreate+0x152>
 860:	8a e3       	ldi	r24, 0x3A	; 58
 862:	97 e0       	ldi	r25, 0x07	; 7
 864:	56 dc       	rcall	.-1876   	; 0x112 <vListInitialise>
 866:	83 e4       	ldi	r24, 0x43	; 67
 868:	97 e0       	ldi	r25, 0x07	; 7
 86a:	53 dc       	rcall	.-1882   	; 0x112 <vListInitialise>
 86c:	8c e4       	ldi	r24, 0x4C	; 76
 86e:	97 e0       	ldi	r25, 0x07	; 7
 870:	50 dc       	rcall	.-1888   	; 0x112 <vListInitialise>
 872:	85 e5       	ldi	r24, 0x55	; 85
 874:	97 e0       	ldi	r25, 0x07	; 7
 876:	4d dc       	rcall	.-1894   	; 0x112 <vListInitialise>
 878:	81 e3       	ldi	r24, 0x31	; 49
 87a:	97 e0       	ldi	r25, 0x07	; 7
 87c:	4a dc       	rcall	.-1900   	; 0x112 <vListInitialise>
 87e:	88 e2       	ldi	r24, 0x28	; 40
 880:	97 e0       	ldi	r25, 0x07	; 7
 882:	47 dc       	rcall	.-1906   	; 0x112 <vListInitialise>
 884:	8b e1       	ldi	r24, 0x1B	; 27
 886:	97 e0       	ldi	r25, 0x07	; 7
 888:	44 dc       	rcall	.-1912   	; 0x112 <vListInitialise>
 88a:	82 e1       	ldi	r24, 0x12	; 18
 88c:	97 e0       	ldi	r25, 0x07	; 7
 88e:	41 dc       	rcall	.-1918   	; 0x112 <vListInitialise>
 890:	81 e3       	ldi	r24, 0x31	; 49
 892:	97 e0       	ldi	r25, 0x07	; 7
 894:	90 93 27 07 	sts	0x0727, r25	; 0x800727 <pxDelayedTaskList+0x1>
 898:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <pxDelayedTaskList>
 89c:	88 e2       	ldi	r24, 0x28	; 40
 89e:	97 e0       	ldi	r25, 0x07	; 7
 8a0:	90 93 25 07 	sts	0x0725, r25	; 0x800725 <pxOverflowDelayedTaskList+0x1>
 8a4:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <pxOverflowDelayedTaskList>
 8a8:	0f c0       	rjmp	.+30     	; 0x8c8 <xTaskGenericCreate+0x152>
 8aa:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <xSchedulerRunning>
 8ae:	81 11       	cpse	r24, r1
 8b0:	0b c0       	rjmp	.+22     	; 0x8c8 <xTaskGenericCreate+0x152>
 8b2:	e0 91 5e 07 	lds	r30, 0x075E	; 0x80075e <pxCurrentTCB>
 8b6:	f0 91 5f 07 	lds	r31, 0x075F	; 0x80075f <pxCurrentTCB+0x1>
 8ba:	86 89       	ldd	r24, Z+22	; 0x16
 8bc:	08 17       	cp	r16, r24
 8be:	20 f0       	brcs	.+8      	; 0x8c8 <xTaskGenericCreate+0x152>
 8c0:	d0 93 5f 07 	sts	0x075F, r29	; 0x80075f <pxCurrentTCB+0x1>
 8c4:	c0 93 5e 07 	sts	0x075E, r28	; 0x80075e <pxCurrentTCB>
 8c8:	8e 89       	ldd	r24, Y+22	; 0x16
 8ca:	90 91 0d 07 	lds	r25, 0x070D	; 0x80070d <uxTopUsedPriority>
 8ce:	98 17       	cp	r25, r24
 8d0:	10 f4       	brcc	.+4      	; 0x8d6 <xTaskGenericCreate+0x160>
 8d2:	80 93 0d 07 	sts	0x070D, r24	; 0x80070d <uxTopUsedPriority>
 8d6:	90 91 06 07 	lds	r25, 0x0706	; 0x800706 <uxTaskNumber>
 8da:	9f 5f       	subi	r25, 0xFF	; 255
 8dc:	90 93 06 07 	sts	0x0706, r25	; 0x800706 <uxTaskNumber>
 8e0:	90 91 0c 07 	lds	r25, 0x070C	; 0x80070c <uxTopReadyPriority>
 8e4:	98 17       	cp	r25, r24
 8e6:	10 f4       	brcc	.+4      	; 0x8ec <xTaskGenericCreate+0x176>
 8e8:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <uxTopReadyPriority>
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	9c 01       	movw	r18, r24
 8f0:	22 0f       	add	r18, r18
 8f2:	33 1f       	adc	r19, r19
 8f4:	22 0f       	add	r18, r18
 8f6:	33 1f       	adc	r19, r19
 8f8:	22 0f       	add	r18, r18
 8fa:	33 1f       	adc	r19, r19
 8fc:	82 0f       	add	r24, r18
 8fe:	93 1f       	adc	r25, r19
 900:	b6 01       	movw	r22, r12
 902:	86 5c       	subi	r24, 0xC6	; 198
 904:	98 4f       	sbci	r25, 0xF8	; 248
 906:	17 dc       	rcall	.-2002   	; 0x136 <vListInsertEnd>
 908:	0f 90       	pop	r0
 90a:	0f be       	out	0x3f, r0	; 63
 90c:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <xSchedulerRunning>
 910:	88 23       	and	r24, r24
 912:	51 f0       	breq	.+20     	; 0x928 <xTaskGenericCreate+0x1b2>
 914:	e0 91 5e 07 	lds	r30, 0x075E	; 0x80075e <pxCurrentTCB>
 918:	f0 91 5f 07 	lds	r31, 0x075F	; 0x80075f <pxCurrentTCB+0x1>
 91c:	86 89       	ldd	r24, Z+22	; 0x16
 91e:	80 17       	cp	r24, r16
 920:	28 f4       	brcc	.+10     	; 0x92c <xTaskGenericCreate+0x1b6>
 922:	41 de       	rcall	.-894    	; 0x5a6 <vPortYield>
 924:	81 e0       	ldi	r24, 0x01	; 1
 926:	09 c0       	rjmp	.+18     	; 0x93a <xTaskGenericCreate+0x1c4>
 928:	81 e0       	ldi	r24, 0x01	; 1
 92a:	07 c0       	rjmp	.+14     	; 0x93a <xTaskGenericCreate+0x1c4>
 92c:	81 e0       	ldi	r24, 0x01	; 1
 92e:	05 c0       	rjmp	.+10     	; 0x93a <xTaskGenericCreate+0x1c4>
 930:	d8 8e       	std	Y+24, r13	; 0x18
 932:	cf 8a       	std	Y+23, r12	; 0x17
 934:	c6 01       	movw	r24, r12
 936:	47 cf       	rjmp	.-370    	; 0x7c6 <xTaskGenericCreate+0x50>
 938:	8f ef       	ldi	r24, 0xFF	; 255
 93a:	df 91       	pop	r29
 93c:	cf 91       	pop	r28
 93e:	1f 91       	pop	r17
 940:	0f 91       	pop	r16
 942:	ff 90       	pop	r15
 944:	ef 90       	pop	r14
 946:	df 90       	pop	r13
 948:	cf 90       	pop	r12
 94a:	bf 90       	pop	r11
 94c:	af 90       	pop	r10
 94e:	9f 90       	pop	r9
 950:	8f 90       	pop	r8
 952:	7f 90       	pop	r7
 954:	6f 90       	pop	r6
 956:	5f 90       	pop	r5
 958:	4f 90       	pop	r4
 95a:	08 95       	ret

0000095c <vTaskStartScheduler>:
 95c:	af 92       	push	r10
 95e:	bf 92       	push	r11
 960:	cf 92       	push	r12
 962:	df 92       	push	r13
 964:	ef 92       	push	r14
 966:	ff 92       	push	r15
 968:	0f 93       	push	r16
 96a:	a1 2c       	mov	r10, r1
 96c:	b1 2c       	mov	r11, r1
 96e:	c1 2c       	mov	r12, r1
 970:	d1 2c       	mov	r13, r1
 972:	e1 2c       	mov	r14, r1
 974:	f1 2c       	mov	r15, r1
 976:	00 e0       	ldi	r16, 0x00	; 0
 978:	20 e0       	ldi	r18, 0x00	; 0
 97a:	30 e0       	ldi	r19, 0x00	; 0
 97c:	45 e5       	ldi	r20, 0x55	; 85
 97e:	50 e0       	ldi	r21, 0x00	; 0
 980:	6a e1       	ldi	r22, 0x1A	; 26
 982:	71 e0       	ldi	r23, 0x01	; 1
 984:	8a e3       	ldi	r24, 0x3A	; 58
 986:	96 e0       	ldi	r25, 0x06	; 6
 988:	f6 de       	rcall	.-532    	; 0x776 <xTaskGenericCreate>
 98a:	81 30       	cpi	r24, 0x01	; 1
 98c:	41 f4       	brne	.+16     	; 0x99e <vTaskStartScheduler+0x42>
 98e:	f8 94       	cli
 990:	80 93 0b 07 	sts	0x070B, r24	; 0x80070b <xSchedulerRunning>
 994:	10 92 0f 07 	sts	0x070F, r1	; 0x80070f <xTickCount+0x1>
 998:	10 92 0e 07 	sts	0x070E, r1	; 0x80070e <xTickCount>
 99c:	ca dd       	rcall	.-1132   	; 0x532 <xPortStartScheduler>
 99e:	0f 91       	pop	r16
 9a0:	ff 90       	pop	r15
 9a2:	ef 90       	pop	r14
 9a4:	df 90       	pop	r13
 9a6:	cf 90       	pop	r12
 9a8:	bf 90       	pop	r11
 9aa:	af 90       	pop	r10
 9ac:	08 95       	ret

000009ae <vTaskSuspendAll>:
 9ae:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <uxSchedulerSuspended>
 9b2:	8f 5f       	subi	r24, 0xFF	; 255
 9b4:	80 93 0a 07 	sts	0x070A, r24	; 0x80070a <uxSchedulerSuspended>
 9b8:	08 95       	ret

000009ba <vTaskIncrementTick>:
 9ba:	0f 93       	push	r16
 9bc:	1f 93       	push	r17
 9be:	cf 93       	push	r28
 9c0:	df 93       	push	r29
 9c2:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <uxSchedulerSuspended>
 9c6:	81 11       	cpse	r24, r1
 9c8:	af c0       	rjmp	.+350    	; 0xb28 <vTaskIncrementTick+0x16e>
 9ca:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <xTickCount>
 9ce:	90 91 0f 07 	lds	r25, 0x070F	; 0x80070f <xTickCount+0x1>
 9d2:	01 96       	adiw	r24, 0x01	; 1
 9d4:	90 93 0f 07 	sts	0x070F, r25	; 0x80070f <xTickCount+0x1>
 9d8:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <xTickCount>
 9dc:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <xTickCount>
 9e0:	90 91 0f 07 	lds	r25, 0x070F	; 0x80070f <xTickCount+0x1>
 9e4:	89 2b       	or	r24, r25
 9e6:	99 f5       	brne	.+102    	; 0xa4e <vTaskIncrementTick+0x94>
 9e8:	80 91 26 07 	lds	r24, 0x0726	; 0x800726 <pxDelayedTaskList>
 9ec:	90 91 27 07 	lds	r25, 0x0727	; 0x800727 <pxDelayedTaskList+0x1>
 9f0:	20 91 24 07 	lds	r18, 0x0724	; 0x800724 <pxOverflowDelayedTaskList>
 9f4:	30 91 25 07 	lds	r19, 0x0725	; 0x800725 <pxOverflowDelayedTaskList+0x1>
 9f8:	30 93 27 07 	sts	0x0727, r19	; 0x800727 <pxDelayedTaskList+0x1>
 9fc:	20 93 26 07 	sts	0x0726, r18	; 0x800726 <pxDelayedTaskList>
 a00:	90 93 25 07 	sts	0x0725, r25	; 0x800725 <pxOverflowDelayedTaskList+0x1>
 a04:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <pxOverflowDelayedTaskList>
 a08:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <xNumOfOverflows>
 a0c:	8f 5f       	subi	r24, 0xFF	; 255
 a0e:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <xNumOfOverflows>
 a12:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxDelayedTaskList>
 a16:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxDelayedTaskList+0x1>
 a1a:	80 81       	ld	r24, Z
 a1c:	81 11       	cpse	r24, r1
 a1e:	07 c0       	rjmp	.+14     	; 0xa2e <vTaskIncrementTick+0x74>
 a20:	8f ef       	ldi	r24, 0xFF	; 255
 a22:	9f ef       	ldi	r25, 0xFF	; 255
 a24:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <xNextTaskUnblockTime+0x1>
 a28:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <xNextTaskUnblockTime>
 a2c:	10 c0       	rjmp	.+32     	; 0xa4e <vTaskIncrementTick+0x94>
 a2e:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxDelayedTaskList>
 a32:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxDelayedTaskList+0x1>
 a36:	05 80       	ldd	r0, Z+5	; 0x05
 a38:	f6 81       	ldd	r31, Z+6	; 0x06
 a3a:	e0 2d       	mov	r30, r0
 a3c:	06 80       	ldd	r0, Z+6	; 0x06
 a3e:	f7 81       	ldd	r31, Z+7	; 0x07
 a40:	e0 2d       	mov	r30, r0
 a42:	82 81       	ldd	r24, Z+2	; 0x02
 a44:	93 81       	ldd	r25, Z+3	; 0x03
 a46:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <xNextTaskUnblockTime+0x1>
 a4a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <xNextTaskUnblockTime>
 a4e:	20 91 0e 07 	lds	r18, 0x070E	; 0x80070e <xTickCount>
 a52:	30 91 0f 07 	lds	r19, 0x070F	; 0x80070f <xTickCount+0x1>
 a56:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <xNextTaskUnblockTime>
 a5a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <xNextTaskUnblockTime+0x1>
 a5e:	28 17       	cp	r18, r24
 a60:	39 07       	cpc	r19, r25
 a62:	08 f4       	brcc	.+2      	; 0xa66 <vTaskIncrementTick+0xac>
 a64:	66 c0       	rjmp	.+204    	; 0xb32 <vTaskIncrementTick+0x178>
 a66:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxDelayedTaskList>
 a6a:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxDelayedTaskList+0x1>
 a6e:	80 81       	ld	r24, Z
 a70:	88 23       	and	r24, r24
 a72:	99 f0       	breq	.+38     	; 0xa9a <vTaskIncrementTick+0xe0>
 a74:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxDelayedTaskList>
 a78:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxDelayedTaskList+0x1>
 a7c:	05 80       	ldd	r0, Z+5	; 0x05
 a7e:	f6 81       	ldd	r31, Z+6	; 0x06
 a80:	e0 2d       	mov	r30, r0
 a82:	c6 81       	ldd	r28, Z+6	; 0x06
 a84:	d7 81       	ldd	r29, Z+7	; 0x07
 a86:	8a 81       	ldd	r24, Y+2	; 0x02
 a88:	9b 81       	ldd	r25, Y+3	; 0x03
 a8a:	20 91 0e 07 	lds	r18, 0x070E	; 0x80070e <xTickCount>
 a8e:	30 91 0f 07 	lds	r19, 0x070F	; 0x80070f <xTickCount+0x1>
 a92:	28 17       	cp	r18, r24
 a94:	39 07       	cpc	r19, r25
 a96:	f8 f4       	brcc	.+62     	; 0xad6 <vTaskIncrementTick+0x11c>
 a98:	19 c0       	rjmp	.+50     	; 0xacc <vTaskIncrementTick+0x112>
 a9a:	8f ef       	ldi	r24, 0xFF	; 255
 a9c:	9f ef       	ldi	r25, 0xFF	; 255
 a9e:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <xNextTaskUnblockTime+0x1>
 aa2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <xNextTaskUnblockTime>
 aa6:	45 c0       	rjmp	.+138    	; 0xb32 <vTaskIncrementTick+0x178>
 aa8:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxDelayedTaskList>
 aac:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxDelayedTaskList+0x1>
 ab0:	05 80       	ldd	r0, Z+5	; 0x05
 ab2:	f6 81       	ldd	r31, Z+6	; 0x06
 ab4:	e0 2d       	mov	r30, r0
 ab6:	c6 81       	ldd	r28, Z+6	; 0x06
 ab8:	d7 81       	ldd	r29, Z+7	; 0x07
 aba:	8a 81       	ldd	r24, Y+2	; 0x02
 abc:	9b 81       	ldd	r25, Y+3	; 0x03
 abe:	20 91 0e 07 	lds	r18, 0x070E	; 0x80070e <xTickCount>
 ac2:	30 91 0f 07 	lds	r19, 0x070F	; 0x80070f <xTickCount+0x1>
 ac6:	28 17       	cp	r18, r24
 ac8:	39 07       	cpc	r19, r25
 aca:	28 f4       	brcc	.+10     	; 0xad6 <vTaskIncrementTick+0x11c>
 acc:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <xNextTaskUnblockTime+0x1>
 ad0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <xNextTaskUnblockTime>
 ad4:	2e c0       	rjmp	.+92     	; 0xb32 <vTaskIncrementTick+0x178>
 ad6:	8e 01       	movw	r16, r28
 ad8:	0e 5f       	subi	r16, 0xFE	; 254
 ada:	1f 4f       	sbci	r17, 0xFF	; 255
 adc:	c8 01       	movw	r24, r16
 ade:	8d db       	rcall	.-2278   	; 0x1fa <vListRemove>
 ae0:	8c 89       	ldd	r24, Y+20	; 0x14
 ae2:	9d 89       	ldd	r25, Y+21	; 0x15
 ae4:	89 2b       	or	r24, r25
 ae6:	19 f0       	breq	.+6      	; 0xaee <vTaskIncrementTick+0x134>
 ae8:	ce 01       	movw	r24, r28
 aea:	0c 96       	adiw	r24, 0x0c	; 12
 aec:	86 db       	rcall	.-2292   	; 0x1fa <vListRemove>
 aee:	8e 89       	ldd	r24, Y+22	; 0x16
 af0:	90 91 0c 07 	lds	r25, 0x070C	; 0x80070c <uxTopReadyPriority>
 af4:	98 17       	cp	r25, r24
 af6:	10 f4       	brcc	.+4      	; 0xafc <vTaskIncrementTick+0x142>
 af8:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <uxTopReadyPriority>
 afc:	90 e0       	ldi	r25, 0x00	; 0
 afe:	9c 01       	movw	r18, r24
 b00:	22 0f       	add	r18, r18
 b02:	33 1f       	adc	r19, r19
 b04:	22 0f       	add	r18, r18
 b06:	33 1f       	adc	r19, r19
 b08:	22 0f       	add	r18, r18
 b0a:	33 1f       	adc	r19, r19
 b0c:	82 0f       	add	r24, r18
 b0e:	93 1f       	adc	r25, r19
 b10:	b8 01       	movw	r22, r16
 b12:	86 5c       	subi	r24, 0xC6	; 198
 b14:	98 4f       	sbci	r25, 0xF8	; 248
 b16:	0f db       	rcall	.-2530   	; 0x136 <vListInsertEnd>
 b18:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxDelayedTaskList>
 b1c:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxDelayedTaskList+0x1>
 b20:	80 81       	ld	r24, Z
 b22:	81 11       	cpse	r24, r1
 b24:	c1 cf       	rjmp	.-126    	; 0xaa8 <vTaskIncrementTick+0xee>
 b26:	b9 cf       	rjmp	.-142    	; 0xa9a <vTaskIncrementTick+0xe0>
 b28:	80 91 09 07 	lds	r24, 0x0709	; 0x800709 <uxMissedTicks>
 b2c:	8f 5f       	subi	r24, 0xFF	; 255
 b2e:	80 93 09 07 	sts	0x0709, r24	; 0x800709 <uxMissedTicks>
 b32:	df 91       	pop	r29
 b34:	cf 91       	pop	r28
 b36:	1f 91       	pop	r17
 b38:	0f 91       	pop	r16
 b3a:	08 95       	ret

00000b3c <xTaskResumeAll>:
 b3c:	cf 92       	push	r12
 b3e:	df 92       	push	r13
 b40:	ef 92       	push	r14
 b42:	ff 92       	push	r15
 b44:	0f 93       	push	r16
 b46:	1f 93       	push	r17
 b48:	cf 93       	push	r28
 b4a:	df 93       	push	r29
 b4c:	0f b6       	in	r0, 0x3f	; 63
 b4e:	f8 94       	cli
 b50:	0f 92       	push	r0
 b52:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <uxSchedulerSuspended>
 b56:	81 50       	subi	r24, 0x01	; 1
 b58:	80 93 0a 07 	sts	0x070A, r24	; 0x80070a <uxSchedulerSuspended>
 b5c:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <uxSchedulerSuspended>
 b60:	81 11       	cpse	r24, r1
 b62:	5f c0       	rjmp	.+190    	; 0xc22 <xTaskResumeAll+0xe6>
 b64:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <uxCurrentNumberOfTasks>
 b68:	81 11       	cpse	r24, r1
 b6a:	2f c0       	rjmp	.+94     	; 0xbca <xTaskResumeAll+0x8e>
 b6c:	5d c0       	rjmp	.+186    	; 0xc28 <xTaskResumeAll+0xec>
 b6e:	d7 01       	movw	r26, r14
 b70:	15 96       	adiw	r26, 0x05	; 5
 b72:	ed 91       	ld	r30, X+
 b74:	fc 91       	ld	r31, X
 b76:	16 97       	sbiw	r26, 0x06	; 6
 b78:	c6 81       	ldd	r28, Z+6	; 0x06
 b7a:	d7 81       	ldd	r29, Z+7	; 0x07
 b7c:	ce 01       	movw	r24, r28
 b7e:	0c 96       	adiw	r24, 0x0c	; 12
 b80:	3c db       	rcall	.-2440   	; 0x1fa <vListRemove>
 b82:	8e 01       	movw	r16, r28
 b84:	0e 5f       	subi	r16, 0xFE	; 254
 b86:	1f 4f       	sbci	r17, 0xFF	; 255
 b88:	c8 01       	movw	r24, r16
 b8a:	37 db       	rcall	.-2450   	; 0x1fa <vListRemove>
 b8c:	8e 89       	ldd	r24, Y+22	; 0x16
 b8e:	90 91 0c 07 	lds	r25, 0x070C	; 0x80070c <uxTopReadyPriority>
 b92:	98 17       	cp	r25, r24
 b94:	10 f4       	brcc	.+4      	; 0xb9a <xTaskResumeAll+0x5e>
 b96:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <uxTopReadyPriority>
 b9a:	90 e0       	ldi	r25, 0x00	; 0
 b9c:	9c 01       	movw	r18, r24
 b9e:	22 0f       	add	r18, r18
 ba0:	33 1f       	adc	r19, r19
 ba2:	22 0f       	add	r18, r18
 ba4:	33 1f       	adc	r19, r19
 ba6:	22 0f       	add	r18, r18
 ba8:	33 1f       	adc	r19, r19
 baa:	82 0f       	add	r24, r18
 bac:	93 1f       	adc	r25, r19
 bae:	b8 01       	movw	r22, r16
 bb0:	86 5c       	subi	r24, 0xC6	; 198
 bb2:	98 4f       	sbci	r25, 0xF8	; 248
 bb4:	c0 da       	rcall	.-2688   	; 0x136 <vListInsertEnd>
 bb6:	e0 91 5e 07 	lds	r30, 0x075E	; 0x80075e <pxCurrentTCB>
 bba:	f0 91 5f 07 	lds	r31, 0x075F	; 0x80075f <pxCurrentTCB+0x1>
 bbe:	9e 89       	ldd	r25, Y+22	; 0x16
 bc0:	86 89       	ldd	r24, Z+22	; 0x16
 bc2:	98 17       	cp	r25, r24
 bc4:	58 f0       	brcs	.+22     	; 0xbdc <xTaskResumeAll+0xa0>
 bc6:	dc 2c       	mov	r13, r12
 bc8:	09 c0       	rjmp	.+18     	; 0xbdc <xTaskResumeAll+0xa0>
 bca:	d1 2c       	mov	r13, r1
 bcc:	0f 2e       	mov	r0, r31
 bce:	fb e1       	ldi	r31, 0x1B	; 27
 bd0:	ef 2e       	mov	r14, r31
 bd2:	f7 e0       	ldi	r31, 0x07	; 7
 bd4:	ff 2e       	mov	r15, r31
 bd6:	f0 2d       	mov	r31, r0
 bd8:	cc 24       	eor	r12, r12
 bda:	c3 94       	inc	r12
 bdc:	f7 01       	movw	r30, r14
 bde:	80 81       	ld	r24, Z
 be0:	81 11       	cpse	r24, r1
 be2:	c5 cf       	rjmp	.-118    	; 0xb6e <xTaskResumeAll+0x32>
 be4:	80 91 09 07 	lds	r24, 0x0709	; 0x800709 <uxMissedTicks>
 be8:	88 23       	and	r24, r24
 bea:	79 f0       	breq	.+30     	; 0xc0a <xTaskResumeAll+0xce>
 bec:	80 91 09 07 	lds	r24, 0x0709	; 0x800709 <uxMissedTicks>
 bf0:	88 23       	and	r24, r24
 bf2:	91 f0       	breq	.+36     	; 0xc18 <xTaskResumeAll+0xdc>
 bf4:	e2 de       	rcall	.-572    	; 0x9ba <vTaskIncrementTick>
 bf6:	80 91 09 07 	lds	r24, 0x0709	; 0x800709 <uxMissedTicks>
 bfa:	81 50       	subi	r24, 0x01	; 1
 bfc:	80 93 09 07 	sts	0x0709, r24	; 0x800709 <uxMissedTicks>
 c00:	80 91 09 07 	lds	r24, 0x0709	; 0x800709 <uxMissedTicks>
 c04:	81 11       	cpse	r24, r1
 c06:	f6 cf       	rjmp	.-20     	; 0xbf4 <xTaskResumeAll+0xb8>
 c08:	07 c0       	rjmp	.+14     	; 0xc18 <xTaskResumeAll+0xdc>
 c0a:	f1 e0       	ldi	r31, 0x01	; 1
 c0c:	df 16       	cp	r13, r31
 c0e:	21 f0       	breq	.+8      	; 0xc18 <xTaskResumeAll+0xdc>
 c10:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <xMissedYield>
 c14:	81 30       	cpi	r24, 0x01	; 1
 c16:	39 f4       	brne	.+14     	; 0xc26 <xTaskResumeAll+0xea>
 c18:	10 92 08 07 	sts	0x0708, r1	; 0x800708 <xMissedYield>
 c1c:	c4 dc       	rcall	.-1656   	; 0x5a6 <vPortYield>
 c1e:	81 e0       	ldi	r24, 0x01	; 1
 c20:	03 c0       	rjmp	.+6      	; 0xc28 <xTaskResumeAll+0xec>
 c22:	80 e0       	ldi	r24, 0x00	; 0
 c24:	01 c0       	rjmp	.+2      	; 0xc28 <xTaskResumeAll+0xec>
 c26:	80 e0       	ldi	r24, 0x00	; 0
 c28:	0f 90       	pop	r0
 c2a:	0f be       	out	0x3f, r0	; 63
 c2c:	df 91       	pop	r29
 c2e:	cf 91       	pop	r28
 c30:	1f 91       	pop	r17
 c32:	0f 91       	pop	r16
 c34:	ff 90       	pop	r15
 c36:	ef 90       	pop	r14
 c38:	df 90       	pop	r13
 c3a:	cf 90       	pop	r12
 c3c:	08 95       	ret

00000c3e <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 c3e:	cf 93       	push	r28
 c40:	df 93       	push	r29
 c42:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 c44:	89 2b       	or	r24, r25
		{
			vTaskSuspendAll();
 c46:	91 f0       	breq	.+36     	; 0xc6c <vTaskDelay+0x2e>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 c48:	b2 de       	rcall	.-668    	; 0x9ae <vTaskSuspendAll>
 c4a:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <xTickCount>
 c4e:	90 91 0f 07 	lds	r25, 0x070F	; 0x80070f <xTickCount+0x1>
 c52:	c8 0f       	add	r28, r24

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 c54:	d9 1f       	adc	r29, r25
 c56:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <pxCurrentTCB>
 c5a:	90 91 5f 07 	lds	r25, 0x075F	; 0x80075f <pxCurrentTCB+0x1>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
			}
			xAlreadyYielded = xTaskResumeAll();
 c5e:	02 96       	adiw	r24, 0x02	; 2
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 c60:	cc da       	rcall	.-2664   	; 0x1fa <vListRemove>
 c62:	ce 01       	movw	r24, r28
		{
			portYIELD_WITHIN_API();
 c64:	53 dd       	rcall	.-1370   	; 0x70c <prvAddCurrentTaskToDelayedList>
 c66:	6a df       	rcall	.-300    	; 0xb3c <xTaskResumeAll>
		}
	}
 c68:	81 11       	cpse	r24, r1
 c6a:	01 c0       	rjmp	.+2      	; 0xc6e <vTaskDelay+0x30>
 c6c:	9c dc       	rcall	.-1736   	; 0x5a6 <vPortYield>
 c6e:	df 91       	pop	r29
 c70:	cf 91       	pop	r28
 c72:	08 95       	ret

00000c74 <prvIdleTask>:
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 c74:	0f 2e       	mov	r0, r31
 c76:	f2 e1       	ldi	r31, 0x12	; 18
 c78:	ef 2e       	mov	r14, r31
 c7a:	f7 e0       	ldi	r31, 0x07	; 7
 c7c:	ff 2e       	mov	r15, r31
 c7e:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 c80:	ca e3       	ldi	r28, 0x3A	; 58
 c82:	d7 e0       	ldi	r29, 0x07	; 7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 c84:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <uxTasksDeleted>
 c88:	88 23       	and	r24, r24
		{
			vTaskSuspendAll();
 c8a:	29 f1       	breq	.+74     	; 0xcd6 <prvIdleTask+0x62>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 c8c:	90 de       	rcall	.-736    	; 0x9ae <vTaskSuspendAll>
			xTaskResumeAll();
 c8e:	d7 01       	movw	r26, r14
 c90:	1c 91       	ld	r17, X

			if( xListIsEmpty == pdFALSE )
 c92:	54 df       	rcall	.-344    	; 0xb3c <xTaskResumeAll>
 c94:	11 23       	and	r17, r17
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 c96:	f9 f0       	breq	.+62     	; 0xcd6 <prvIdleTask+0x62>
 c98:	0f b6       	in	r0, 0x3f	; 63
 c9a:	f8 94       	cli
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 c9c:	0f 92       	push	r0
 c9e:	d7 01       	movw	r26, r14
 ca0:	15 96       	adiw	r26, 0x05	; 5
 ca2:	ed 91       	ld	r30, X+
 ca4:	fc 91       	ld	r31, X
 ca6:	16 97       	sbiw	r26, 0x06	; 6
					vListRemove( &( pxTCB->xGenericListItem ) );
 ca8:	06 81       	ldd	r16, Z+6	; 0x06
 caa:	17 81       	ldd	r17, Z+7	; 0x07
 cac:	c8 01       	movw	r24, r16
					--uxCurrentNumberOfTasks;
 cae:	02 96       	adiw	r24, 0x02	; 2
 cb0:	a4 da       	rcall	.-2744   	; 0x1fa <vListRemove>
 cb2:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <uxCurrentNumberOfTasks>
 cb6:	81 50       	subi	r24, 0x01	; 1
					--uxTasksDeleted;
 cb8:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <uxCurrentNumberOfTasks>
 cbc:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <uxTasksDeleted>
 cc0:	81 50       	subi	r24, 0x01	; 1
				}
				taskEXIT_CRITICAL();
 cc2:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <uxTasksDeleted>
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 cc6:	0f 90       	pop	r0
 cc8:	0f be       	out	0x3f, r0	; 63
		vPortFree( pxTCB );
 cca:	f8 01       	movw	r30, r16
 ccc:	87 89       	ldd	r24, Z+23	; 0x17

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 cce:	90 8d       	ldd	r25, Z+24	; 0x18
 cd0:	1f da       	rcall	.-3010   	; 0x110 <vPortFree>
 cd2:	c8 01       	movw	r24, r16
			{
				taskYIELD();
 cd4:	1d da       	rcall	.-3014   	; 0x110 <vPortFree>
 cd6:	88 81       	ld	r24, Y
 cd8:	82 30       	cpi	r24, 0x02	; 2
 cda:	a0 f2       	brcs	.-88     	; 0xc84 <prvIdleTask+0x10>
 cdc:	64 dc       	rcall	.-1848   	; 0x5a6 <vPortYield>
 cde:	d2 cf       	rjmp	.-92     	; 0xc84 <prvIdleTask+0x10>

00000ce0 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 ce0:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <uxSchedulerSuspended>
 ce4:	81 11       	cpse	r24, r1
 ce6:	13 c0       	rjmp	.+38     	; 0xd0e <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 ce8:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <uxTopReadyPriority>
 cec:	90 e0       	ldi	r25, 0x00	; 0
 cee:	fc 01       	movw	r30, r24
 cf0:	ee 0f       	add	r30, r30
 cf2:	ff 1f       	adc	r31, r31
 cf4:	ee 0f       	add	r30, r30
 cf6:	ff 1f       	adc	r31, r31
 cf8:	ee 0f       	add	r30, r30
 cfa:	ff 1f       	adc	r31, r31
 cfc:	8e 0f       	add	r24, r30
 cfe:	9f 1f       	adc	r25, r31
 d00:	fc 01       	movw	r30, r24
 d02:	e6 5c       	subi	r30, 0xC6	; 198
 d04:	f8 4f       	sbci	r31, 0xF8	; 248
 d06:	80 81       	ld	r24, Z
 d08:	88 23       	and	r24, r24
 d0a:	29 f0       	breq	.+10     	; 0xd16 <vTaskSwitchContext+0x36>
 d0c:	1b c0       	rjmp	.+54     	; 0xd44 <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 d0e:	81 e0       	ldi	r24, 0x01	; 1
 d10:	80 93 08 07 	sts	0x0708, r24	; 0x800708 <xMissedYield>
 d14:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
 d16:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <uxTopReadyPriority>
 d1a:	81 50       	subi	r24, 0x01	; 1
 d1c:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 d20:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <uxTopReadyPriority>
 d24:	90 e0       	ldi	r25, 0x00	; 0
 d26:	fc 01       	movw	r30, r24
 d28:	ee 0f       	add	r30, r30
 d2a:	ff 1f       	adc	r31, r31
 d2c:	ee 0f       	add	r30, r30
 d2e:	ff 1f       	adc	r31, r31
 d30:	ee 0f       	add	r30, r30
 d32:	ff 1f       	adc	r31, r31
 d34:	8e 0f       	add	r24, r30
 d36:	9f 1f       	adc	r25, r31
 d38:	fc 01       	movw	r30, r24
 d3a:	e6 5c       	subi	r30, 0xC6	; 198
 d3c:	f8 4f       	sbci	r31, 0xF8	; 248
 d3e:	80 81       	ld	r24, Z
 d40:	88 23       	and	r24, r24
 d42:	49 f3       	breq	.-46     	; 0xd16 <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 d44:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <uxTopReadyPriority>
 d48:	90 e0       	ldi	r25, 0x00	; 0
 d4a:	9c 01       	movw	r18, r24
 d4c:	22 0f       	add	r18, r18
 d4e:	33 1f       	adc	r19, r19
 d50:	22 0f       	add	r18, r18
 d52:	33 1f       	adc	r19, r19
 d54:	22 0f       	add	r18, r18
 d56:	33 1f       	adc	r19, r19
 d58:	28 0f       	add	r18, r24
 d5a:	39 1f       	adc	r19, r25
 d5c:	d9 01       	movw	r26, r18
 d5e:	a6 5c       	subi	r26, 0xC6	; 198
 d60:	b8 4f       	sbci	r27, 0xF8	; 248
 d62:	11 96       	adiw	r26, 0x01	; 1
 d64:	ed 91       	ld	r30, X+
 d66:	fc 91       	ld	r31, X
 d68:	12 97       	sbiw	r26, 0x02	; 2
 d6a:	02 80       	ldd	r0, Z+2	; 0x02
 d6c:	f3 81       	ldd	r31, Z+3	; 0x03
 d6e:	e0 2d       	mov	r30, r0
 d70:	12 96       	adiw	r26, 0x02	; 2
 d72:	fc 93       	st	X, r31
 d74:	ee 93       	st	-X, r30
 d76:	11 97       	sbiw	r26, 0x01	; 1
 d78:	23 5c       	subi	r18, 0xC3	; 195
 d7a:	38 4f       	sbci	r19, 0xF8	; 248
 d7c:	e2 17       	cp	r30, r18
 d7e:	f3 07       	cpc	r31, r19
 d80:	29 f4       	brne	.+10     	; 0xd8c <vTaskSwitchContext+0xac>
 d82:	22 81       	ldd	r18, Z+2	; 0x02
 d84:	33 81       	ldd	r19, Z+3	; 0x03
 d86:	fd 01       	movw	r30, r26
 d88:	32 83       	std	Z+2, r19	; 0x02
 d8a:	21 83       	std	Z+1, r18	; 0x01
 d8c:	fc 01       	movw	r30, r24
 d8e:	ee 0f       	add	r30, r30
 d90:	ff 1f       	adc	r31, r31
 d92:	ee 0f       	add	r30, r30
 d94:	ff 1f       	adc	r31, r31
 d96:	ee 0f       	add	r30, r30
 d98:	ff 1f       	adc	r31, r31
 d9a:	8e 0f       	add	r24, r30
 d9c:	9f 1f       	adc	r25, r31
 d9e:	fc 01       	movw	r30, r24
 da0:	e6 5c       	subi	r30, 0xC6	; 198
 da2:	f8 4f       	sbci	r31, 0xF8	; 248
 da4:	01 80       	ldd	r0, Z+1	; 0x01
 da6:	f2 81       	ldd	r31, Z+2	; 0x02
 da8:	e0 2d       	mov	r30, r0
 daa:	86 81       	ldd	r24, Z+6	; 0x06
 dac:	97 81       	ldd	r25, Z+7	; 0x07
 dae:	90 93 5f 07 	sts	0x075F, r25	; 0x80075f <pxCurrentTCB+0x1>
 db2:	80 93 5e 07 	sts	0x075E, r24	; 0x80075e <pxCurrentTCB>
 db6:	08 95       	ret

00000db8 <__umulhisi3>:
 db8:	a2 9f       	mul	r26, r18
 dba:	b0 01       	movw	r22, r0
 dbc:	b3 9f       	mul	r27, r19
 dbe:	c0 01       	movw	r24, r0
 dc0:	a3 9f       	mul	r26, r19
 dc2:	70 0d       	add	r23, r0
 dc4:	81 1d       	adc	r24, r1
 dc6:	11 24       	eor	r1, r1
 dc8:	91 1d       	adc	r25, r1
 dca:	b2 9f       	mul	r27, r18
 dcc:	70 0d       	add	r23, r0
 dce:	81 1d       	adc	r24, r1
 dd0:	11 24       	eor	r1, r1
 dd2:	91 1d       	adc	r25, r1
 dd4:	08 95       	ret

00000dd6 <memset>:
 dd6:	dc 01       	movw	r26, r24
 dd8:	01 c0       	rjmp	.+2      	; 0xddc <memset+0x6>
 dda:	6d 93       	st	X+, r22
 ddc:	41 50       	subi	r20, 0x01	; 1
 dde:	50 40       	sbci	r21, 0x00	; 0
 de0:	e0 f7       	brcc	.-8      	; 0xdda <memset+0x4>
 de2:	08 95       	ret

00000de4 <strncpy>:
 de4:	fb 01       	movw	r30, r22
 de6:	dc 01       	movw	r26, r24
 de8:	41 50       	subi	r20, 0x01	; 1
 dea:	50 40       	sbci	r21, 0x00	; 0
 dec:	48 f0       	brcs	.+18     	; 0xe00 <strncpy+0x1c>
 dee:	01 90       	ld	r0, Z+
 df0:	0d 92       	st	X+, r0
 df2:	00 20       	and	r0, r0
 df4:	c9 f7       	brne	.-14     	; 0xde8 <strncpy+0x4>
 df6:	01 c0       	rjmp	.+2      	; 0xdfa <strncpy+0x16>
 df8:	1d 92       	st	X+, r1
 dfa:	41 50       	subi	r20, 0x01	; 1
 dfc:	50 40       	sbci	r21, 0x00	; 0
 dfe:	e0 f7       	brcc	.-8      	; 0xdf8 <strncpy+0x14>
 e00:	08 95       	ret

00000e02 <_exit>:
 e02:	f8 94       	cli

00000e04 <__stop_program>:
 e04:	ff cf       	rjmp	.-2      	; 0xe04 <__stop_program>
