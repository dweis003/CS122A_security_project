
Lab4_part_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  000010b8  0000114c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000644  00800146  00800146  00001192  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001192  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  00001204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025c3  00000000  00000000  0000140c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fd7  00000000  00000000  000039cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016b0  00000000  00000000  000049a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000530  00000000  00000000  00006058  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e2c  00000000  00000000  00006588  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001341  00000000  00000000  000073b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  000086f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
       6:	00 00       	nop
       8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
       a:	00 00       	nop
       c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
       e:	00 00       	nop
      10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
      12:	00 00       	nop
      14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
      16:	00 00       	nop
      18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
      22:	00 00       	nop
      24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
      26:	00 00       	nop
      28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
      32:	00 00       	nop
      34:	d1 c4       	rjmp	.+2466   	; 0x9d8 <__vector_13>
      36:	00 00       	nop
      38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
      42:	00 00       	nop
      44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
      46:	00 00       	nop
      48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
      52:	00 00       	nop
      54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
      56:	00 00       	nop
      58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
      62:	00 00       	nop
      64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
      66:	00 00       	nop
      68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
      72:	00 00       	nop
      74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
      76:	00 00       	nop
      78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
      82:	00 00       	nop
      84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
      86:	00 00       	nop
      88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e8 eb       	ldi	r30, 0xB8	; 184
      a0:	f0 e1       	ldi	r31, 0x10	; 16
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 34       	cpi	r26, 0x46	; 70
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	27 e0       	ldi	r18, 0x07	; 7
      b4:	a6 e4       	ldi	r26, 0x46	; 70
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	aa 38       	cpi	r26, 0x8A	; 138
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	24 d3       	rcall	.+1608   	; 0x70c <main>
      c4:	f7 c7       	rjmp	.+4078   	; 0x10b4 <_exit>

000000c6 <__bad_interrupt>:
      c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
      c8:	cf 93       	push	r28
      ca:	df 93       	push	r29
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
      cc:	ec 01       	movw	r28, r24
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
      ce:	d7 d5       	rcall	.+2990   	; 0xc7e <vTaskSuspendAll>
      d0:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <__data_end>
      d4:	30 91 47 01 	lds	r19, 0x0147	; 0x800147 <__data_end+0x1>
      d8:	c9 01       	movw	r24, r18
      da:	8c 0f       	add	r24, r28
      dc:	9d 1f       	adc	r25, r29
      de:	8c 3d       	cpi	r24, 0xDC	; 220
      e0:	45 e0       	ldi	r20, 0x05	; 5
      e2:	94 07       	cpc	r25, r20
      e4:	58 f4       	brcc	.+22     	; 0xfc <pvPortMalloc+0x34>
      e6:	28 17       	cp	r18, r24
      e8:	39 07       	cpc	r19, r25
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
      ea:	58 f4       	brcc	.+22     	; 0x102 <pvPortMalloc+0x3a>
      ec:	e9 01       	movw	r28, r18
      ee:	c8 5b       	subi	r28, 0xB8	; 184
			xNextFreeByte += xWantedSize;			
      f0:	de 4f       	sbci	r29, 0xFE	; 254
      f2:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <__data_end+0x1>
      f6:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <__data_end>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
      fa:	05 c0       	rjmp	.+10     	; 0x106 <pvPortMalloc+0x3e>
      fc:	c0 e0       	ldi	r28, 0x00	; 0
      fe:	d0 e0       	ldi	r29, 0x00	; 0
     100:	02 c0       	rjmp	.+4      	; 0x106 <pvPortMalloc+0x3e>
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     102:	c0 e0       	ldi	r28, 0x00	; 0
     104:	d0 e0       	ldi	r29, 0x00	; 0
		}
	}
	#endif	

	return pvReturn;
}
     106:	82 d6       	rcall	.+3332   	; 0xe0c <xTaskResumeAll>
     108:	ce 01       	movw	r24, r28
     10a:	df 91       	pop	r29
     10c:	cf 91       	pop	r28
     10e:	08 95       	ret

00000110 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     110:	08 95       	ret

00000112 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     112:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     114:	03 96       	adiw	r24, 0x03	; 3
     116:	92 83       	std	Z+2, r25	; 0x02
     118:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     11a:	2f ef       	ldi	r18, 0xFF	; 255
     11c:	3f ef       	ldi	r19, 0xFF	; 255
     11e:	34 83       	std	Z+4, r19	; 0x04
     120:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     122:	96 83       	std	Z+6, r25	; 0x06
     124:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     126:	90 87       	std	Z+8, r25	; 0x08
     128:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     12a:	10 82       	st	Z, r1
     12c:	08 95       	ret

0000012e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     12e:	fc 01       	movw	r30, r24
     130:	11 86       	std	Z+9, r1	; 0x09
     132:	10 86       	std	Z+8, r1	; 0x08
     134:	08 95       	ret

00000136 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     136:	cf 93       	push	r28
     138:	df 93       	push	r29
     13a:	fc 01       	movw	r30, r24
     13c:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     13e:	21 81       	ldd	r18, Z+1	; 0x01
     140:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
     142:	e9 01       	movw	r28, r18
     144:	8a 81       	ldd	r24, Y+2	; 0x02
     146:	9b 81       	ldd	r25, Y+3	; 0x03
     148:	13 96       	adiw	r26, 0x03	; 3
     14a:	9c 93       	st	X, r25
     14c:	8e 93       	st	-X, r24
     14e:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
     150:	81 81       	ldd	r24, Z+1	; 0x01
     152:	92 81       	ldd	r25, Z+2	; 0x02
     154:	15 96       	adiw	r26, 0x05	; 5
     156:	9c 93       	st	X, r25
     158:	8e 93       	st	-X, r24
     15a:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     15c:	8a 81       	ldd	r24, Y+2	; 0x02
     15e:	9b 81       	ldd	r25, Y+3	; 0x03
     160:	ec 01       	movw	r28, r24
     162:	7d 83       	std	Y+5, r23	; 0x05
     164:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     166:	e9 01       	movw	r28, r18
     168:	7b 83       	std	Y+3, r23	; 0x03
     16a:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     16c:	72 83       	std	Z+2, r23	; 0x02
     16e:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     170:	19 96       	adiw	r26, 0x09	; 9
     172:	fc 93       	st	X, r31
     174:	ee 93       	st	-X, r30
     176:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
     178:	80 81       	ld	r24, Z
     17a:	8f 5f       	subi	r24, 0xFF	; 255
     17c:	80 83       	st	Z, r24
}
     17e:	df 91       	pop	r29
     180:	cf 91       	pop	r28
     182:	08 95       	ret

00000184 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     184:	cf 93       	push	r28
     186:	df 93       	push	r29
     188:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     18a:	48 81       	ld	r20, Y
     18c:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     18e:	4f 3f       	cpi	r20, 0xFF	; 255
     190:	2f ef       	ldi	r18, 0xFF	; 255
     192:	52 07       	cpc	r21, r18
     194:	31 f4       	brne	.+12     	; 0x1a2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     196:	dc 01       	movw	r26, r24
     198:	17 96       	adiw	r26, 0x07	; 7
     19a:	ed 91       	ld	r30, X+
     19c:	fc 91       	ld	r31, X
     19e:	18 97       	sbiw	r26, 0x08	; 8
     1a0:	17 c0       	rjmp	.+46     	; 0x1d0 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     1a2:	fc 01       	movw	r30, r24
     1a4:	33 96       	adiw	r30, 0x03	; 3
     1a6:	dc 01       	movw	r26, r24
     1a8:	15 96       	adiw	r26, 0x05	; 5
     1aa:	2d 91       	ld	r18, X+
     1ac:	3c 91       	ld	r19, X
     1ae:	16 97       	sbiw	r26, 0x06	; 6
     1b0:	d9 01       	movw	r26, r18
     1b2:	2d 91       	ld	r18, X+
     1b4:	3c 91       	ld	r19, X
     1b6:	42 17       	cp	r20, r18
     1b8:	53 07       	cpc	r21, r19
     1ba:	50 f0       	brcs	.+20     	; 0x1d0 <vListInsert+0x4c>
     1bc:	02 80       	ldd	r0, Z+2	; 0x02
     1be:	f3 81       	ldd	r31, Z+3	; 0x03
     1c0:	e0 2d       	mov	r30, r0
     1c2:	a2 81       	ldd	r26, Z+2	; 0x02
     1c4:	b3 81       	ldd	r27, Z+3	; 0x03
     1c6:	2d 91       	ld	r18, X+
     1c8:	3c 91       	ld	r19, X
     1ca:	42 17       	cp	r20, r18
     1cc:	53 07       	cpc	r21, r19
     1ce:	b0 f7       	brcc	.-20     	; 0x1bc <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     1d0:	a2 81       	ldd	r26, Z+2	; 0x02
     1d2:	b3 81       	ldd	r27, Z+3	; 0x03
     1d4:	bb 83       	std	Y+3, r27	; 0x03
     1d6:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     1d8:	15 96       	adiw	r26, 0x05	; 5
     1da:	dc 93       	st	X, r29
     1dc:	ce 93       	st	-X, r28
     1de:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
     1e0:	fd 83       	std	Y+5, r31	; 0x05
     1e2:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     1e4:	d3 83       	std	Z+3, r29	; 0x03
     1e6:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     1e8:	99 87       	std	Y+9, r25	; 0x09
     1ea:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     1ec:	fc 01       	movw	r30, r24
     1ee:	20 81       	ld	r18, Z
     1f0:	2f 5f       	subi	r18, 0xFF	; 255
     1f2:	20 83       	st	Z, r18
}
     1f4:	df 91       	pop	r29
     1f6:	cf 91       	pop	r28
     1f8:	08 95       	ret

000001fa <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     1fa:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     1fc:	a2 81       	ldd	r26, Z+2	; 0x02
     1fe:	b3 81       	ldd	r27, Z+3	; 0x03
     200:	84 81       	ldd	r24, Z+4	; 0x04
     202:	95 81       	ldd	r25, Z+5	; 0x05
     204:	15 96       	adiw	r26, 0x05	; 5
     206:	9c 93       	st	X, r25
     208:	8e 93       	st	-X, r24
     20a:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     20c:	a4 81       	ldd	r26, Z+4	; 0x04
     20e:	b5 81       	ldd	r27, Z+5	; 0x05
     210:	82 81       	ldd	r24, Z+2	; 0x02
     212:	93 81       	ldd	r25, Z+3	; 0x03
     214:	13 96       	adiw	r26, 0x03	; 3
     216:	9c 93       	st	X, r25
     218:	8e 93       	st	-X, r24
     21a:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     21c:	a0 85       	ldd	r26, Z+8	; 0x08
     21e:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     220:	11 96       	adiw	r26, 0x01	; 1
     222:	8d 91       	ld	r24, X+
     224:	9c 91       	ld	r25, X
     226:	12 97       	sbiw	r26, 0x02	; 2
     228:	e8 17       	cp	r30, r24
     22a:	f9 07       	cpc	r31, r25
     22c:	31 f4       	brne	.+12     	; 0x23a <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     22e:	84 81       	ldd	r24, Z+4	; 0x04
     230:	95 81       	ldd	r25, Z+5	; 0x05
     232:	12 96       	adiw	r26, 0x02	; 2
     234:	9c 93       	st	X, r25
     236:	8e 93       	st	-X, r24
     238:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
     23a:	11 86       	std	Z+9, r1	; 0x09
     23c:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     23e:	8c 91       	ld	r24, X
     240:	81 50       	subi	r24, 0x01	; 1
     242:	8c 93       	st	X, r24
     244:	08 95       	ret

00000246 <Motor_Tick>:

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum ButtonState {b_release, b_push} button_state;

void Button_Init(){
	button_state = b_release;
     246:	80 91 87 07 	lds	r24, 0x0787	; 0x800787 <motor_state>
     24a:	81 30       	cpi	r24, 0x01	; 1
     24c:	89 f0       	breq	.+34     	; 0x270 <Motor_Tick+0x2a>
     24e:	20 f0       	brcs	.+8      	; 0x258 <Motor_Tick+0x12>
     250:	82 30       	cpi	r24, 0x02	; 2
     252:	09 f4       	brne	.+2      	; 0x256 <Motor_Tick+0x10>
     254:	69 c0       	rjmp	.+210    	; 0x328 <Motor_Tick+0xe2>
     256:	b6 c0       	rjmp	.+364    	; 0x3c4 <Motor_Tick+0x17e>
     258:	10 92 29 07 	sts	0x0729, r1	; 0x800729 <finished_reset_1>
     25c:	10 92 2c 07 	sts	0x072C, r1	; 0x80072c <p_index>
     260:	10 92 2b 07 	sts	0x072B, r1	; 0x80072b <numCounter+0x1>
     264:	10 92 2a 07 	sts	0x072A, r1	; 0x80072a <numCounter>
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <orientation>
     26e:	b2 c0       	rjmp	.+356    	; 0x3d4 <Motor_Tick+0x18e>
     270:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <orientation>
     274:	88 23       	and	r24, r24
     276:	59 f1       	breq	.+86     	; 0x2ce <Motor_Tick+0x88>
     278:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <numCounter>
     27c:	90 91 2b 07 	lds	r25, 0x072B	; 0x80072b <numCounter+0x1>
     280:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <numPhases>
     284:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <numPhases+0x1>
     288:	82 17       	cp	r24, r18
     28a:	93 07       	cpc	r25, r19
     28c:	bc f4       	brge	.+46     	; 0x2bc <Motor_Tick+0x76>
     28e:	01 96       	adiw	r24, 0x01	; 1
     290:	90 93 2b 07 	sts	0x072B, r25	; 0x80072b <numCounter+0x1>
     294:	80 93 2a 07 	sts	0x072A, r24	; 0x80072a <numCounter>
     298:	e0 91 2c 07 	lds	r30, 0x072C	; 0x80072c <p_index>
     29c:	f0 e0       	ldi	r31, 0x00	; 0
     29e:	e7 5f       	subi	r30, 0xF7	; 247
     2a0:	fe 4f       	sbci	r31, 0xFE	; 254
     2a2:	80 81       	ld	r24, Z
     2a4:	85 b9       	out	0x05, r24	; 5
     2a6:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <p_index>
     2aa:	87 30       	cpi	r24, 0x07	; 7
     2ac:	19 f4       	brne	.+6      	; 0x2b4 <Motor_Tick+0x6e>
     2ae:	10 92 2c 07 	sts	0x072C, r1	; 0x80072c <p_index>
     2b2:	88 c0       	rjmp	.+272    	; 0x3c4 <Motor_Tick+0x17e>
     2b4:	8f 5f       	subi	r24, 0xFF	; 255
     2b6:	80 93 2c 07 	sts	0x072C, r24	; 0x80072c <p_index>
     2ba:	84 c0       	rjmp	.+264    	; 0x3c4 <Motor_Tick+0x17e>
     2bc:	10 92 2b 07 	sts	0x072B, r1	; 0x80072b <numCounter+0x1>
     2c0:	10 92 2a 07 	sts	0x072A, r1	; 0x80072a <numCounter>
     2c4:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <orientation>
     2c8:	10 92 2c 07 	sts	0x072C, r1	; 0x80072c <p_index>
     2cc:	8b c0       	rjmp	.+278    	; 0x3e4 <Motor_Tick+0x19e>
     2ce:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <numCounter>
     2d2:	90 91 2b 07 	lds	r25, 0x072B	; 0x80072b <numCounter+0x1>
     2d6:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <numPhases>
     2da:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <numPhases+0x1>
     2de:	82 17       	cp	r24, r18
     2e0:	93 07       	cpc	r25, r19
     2e2:	c4 f4       	brge	.+48     	; 0x314 <Motor_Tick+0xce>
     2e4:	01 96       	adiw	r24, 0x01	; 1
     2e6:	90 93 2b 07 	sts	0x072B, r25	; 0x80072b <numCounter+0x1>
     2ea:	80 93 2a 07 	sts	0x072A, r24	; 0x80072a <numCounter>
     2ee:	e0 91 2c 07 	lds	r30, 0x072C	; 0x80072c <p_index>
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	e7 5f       	subi	r30, 0xF7	; 247
     2f6:	fe 4f       	sbci	r31, 0xFE	; 254
     2f8:	80 81       	ld	r24, Z
     2fa:	85 b9       	out	0x05, r24	; 5
     2fc:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <p_index>
     300:	81 11       	cpse	r24, r1
     302:	04 c0       	rjmp	.+8      	; 0x30c <Motor_Tick+0xc6>
     304:	87 e0       	ldi	r24, 0x07	; 7
     306:	80 93 2c 07 	sts	0x072C, r24	; 0x80072c <p_index>
     30a:	5c c0       	rjmp	.+184    	; 0x3c4 <Motor_Tick+0x17e>
     30c:	81 50       	subi	r24, 0x01	; 1
     30e:	80 93 2c 07 	sts	0x072C, r24	; 0x80072c <p_index>
     312:	58 c0       	rjmp	.+176    	; 0x3c4 <Motor_Tick+0x17e>
     314:	10 92 2b 07 	sts	0x072B, r1	; 0x80072b <numCounter+0x1>
     318:	10 92 2a 07 	sts	0x072A, r1	; 0x80072a <numCounter>
     31c:	81 e0       	ldi	r24, 0x01	; 1
     31e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <orientation>
     322:	10 92 2c 07 	sts	0x072C, r1	; 0x80072c <p_index>
     326:	5e c0       	rjmp	.+188    	; 0x3e4 <Motor_Tick+0x19e>
     328:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <orientation>
     32c:	88 23       	and	r24, r24
     32e:	19 f1       	breq	.+70     	; 0x376 <Motor_Tick+0x130>
     330:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <numCounter>
     334:	90 91 2b 07 	lds	r25, 0x072B	; 0x80072b <numCounter+0x1>
     338:	18 16       	cp	r1, r24
     33a:	19 06       	cpc	r1, r25
     33c:	c4 f4       	brge	.+48     	; 0x36e <Motor_Tick+0x128>
     33e:	01 97       	sbiw	r24, 0x01	; 1
     340:	90 93 2b 07 	sts	0x072B, r25	; 0x80072b <numCounter+0x1>
     344:	80 93 2a 07 	sts	0x072A, r24	; 0x80072a <numCounter>
     348:	e0 91 2c 07 	lds	r30, 0x072C	; 0x80072c <p_index>
     34c:	f0 e0       	ldi	r31, 0x00	; 0
     34e:	e7 5f       	subi	r30, 0xF7	; 247
     350:	fe 4f       	sbci	r31, 0xFE	; 254
     352:	80 81       	ld	r24, Z
     354:	85 b9       	out	0x05, r24	; 5
     356:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <p_index>
     35a:	81 11       	cpse	r24, r1
     35c:	04 c0       	rjmp	.+8      	; 0x366 <Motor_Tick+0x120>
     35e:	87 e0       	ldi	r24, 0x07	; 7
     360:	80 93 2c 07 	sts	0x072C, r24	; 0x80072c <p_index>
     364:	2f c0       	rjmp	.+94     	; 0x3c4 <Motor_Tick+0x17e>
     366:	81 50       	subi	r24, 0x01	; 1
     368:	80 93 2c 07 	sts	0x072C, r24	; 0x80072c <p_index>
     36c:	2b c0       	rjmp	.+86     	; 0x3c4 <Motor_Tick+0x17e>
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	80 93 29 07 	sts	0x0729, r24	; 0x800729 <finished_reset_1>
     374:	43 c0       	rjmp	.+134    	; 0x3fc <Motor_Tick+0x1b6>
     376:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <numCounter>
     37a:	90 91 2b 07 	lds	r25, 0x072B	; 0x80072b <numCounter+0x1>
     37e:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <numPhases>
     382:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <numPhases+0x1>
     386:	82 17       	cp	r24, r18
     388:	93 07       	cpc	r25, r19
     38a:	c4 f4       	brge	.+48     	; 0x3bc <Motor_Tick+0x176>
     38c:	01 96       	adiw	r24, 0x01	; 1
     38e:	90 93 2b 07 	sts	0x072B, r25	; 0x80072b <numCounter+0x1>
     392:	80 93 2a 07 	sts	0x072A, r24	; 0x80072a <numCounter>
     396:	e0 91 2c 07 	lds	r30, 0x072C	; 0x80072c <p_index>
     39a:	f0 e0       	ldi	r31, 0x00	; 0
     39c:	e7 5f       	subi	r30, 0xF7	; 247
     39e:	fe 4f       	sbci	r31, 0xFE	; 254
     3a0:	80 81       	ld	r24, Z
     3a2:	85 b9       	out	0x05, r24	; 5
     3a4:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <p_index>
     3a8:	81 11       	cpse	r24, r1
     3aa:	04 c0       	rjmp	.+8      	; 0x3b4 <Motor_Tick+0x16e>
     3ac:	87 e0       	ldi	r24, 0x07	; 7
     3ae:	80 93 2c 07 	sts	0x072C, r24	; 0x80072c <p_index>
     3b2:	08 c0       	rjmp	.+16     	; 0x3c4 <Motor_Tick+0x17e>
     3b4:	81 50       	subi	r24, 0x01	; 1
     3b6:	80 93 2c 07 	sts	0x072C, r24	; 0x80072c <p_index>
     3ba:	04 c0       	rjmp	.+8      	; 0x3c4 <Motor_Tick+0x17e>
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	80 93 29 07 	sts	0x0729, r24	; 0x800729 <finished_reset_1>
     3c2:	1c c0       	rjmp	.+56     	; 0x3fc <Motor_Tick+0x1b6>
     3c4:	80 91 87 07 	lds	r24, 0x0787	; 0x800787 <motor_state>
     3c8:	81 30       	cpi	r24, 0x01	; 1
     3ca:	61 f0       	breq	.+24     	; 0x3e4 <Motor_Tick+0x19e>
     3cc:	18 f0       	brcs	.+6      	; 0x3d4 <Motor_Tick+0x18e>
     3ce:	82 30       	cpi	r24, 0x02	; 2
     3d0:	c1 f4       	brne	.+48     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3d2:	10 c0       	rjmp	.+32     	; 0x3f4 <Motor_Tick+0x1ae>
     3d4:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <ARM_DISARM>
     3d8:	88 23       	and	r24, r24
     3da:	a9 f0       	breq	.+42     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	80 93 87 07 	sts	0x0787, r24	; 0x800787 <motor_state>
     3e2:	08 95       	ret
     3e4:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <ARM_DISARM>
     3e8:	81 30       	cpi	r24, 0x01	; 1
     3ea:	69 f0       	breq	.+26     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     3ec:	82 e0       	ldi	r24, 0x02	; 2
     3ee:	80 93 87 07 	sts	0x0787, r24	; 0x800787 <motor_state>
     3f2:	08 95       	ret
     3f4:	80 91 29 07 	lds	r24, 0x0729	; 0x800729 <finished_reset_1>
     3f8:	81 30       	cpi	r24, 0x01	; 1
     3fa:	29 f4       	brne	.+10     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     3fc:	10 92 87 07 	sts	0x0787, r1	; 0x800787 <motor_state>
     400:	08 95       	ret
     402:	10 92 87 07 	sts	0x0787, r1	; 0x800787 <motor_state>
     406:	08 95       	ret

00000408 <MotorSecTask>:
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	80 93 87 07 	sts	0x0787, r24	; 0x800787 <motor_state>
     40e:	1b df       	rcall	.-458    	; 0x246 <Motor_Tick>
     410:	83 e0       	ldi	r24, 0x03	; 3
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	7c d5       	rcall	.+2808   	; 0xf0e <vTaskDelay>
     416:	fb cf       	rjmp	.-10     	; 0x40e <MotorSecTask+0x6>

00000418 <MotorSecPulse>:
     418:	af 92       	push	r10
     41a:	bf 92       	push	r11
     41c:	cf 92       	push	r12
     41e:	df 92       	push	r13
     420:	ef 92       	push	r14
     422:	ff 92       	push	r15
     424:	0f 93       	push	r16
     426:	a1 2c       	mov	r10, r1
     428:	b1 2c       	mov	r11, r1
     42a:	c1 2c       	mov	r12, r1
     42c:	d1 2c       	mov	r13, r1
     42e:	e1 2c       	mov	r14, r1
     430:	f1 2c       	mov	r15, r1
     432:	08 2f       	mov	r16, r24
     434:	20 e0       	ldi	r18, 0x00	; 0
     436:	30 e0       	ldi	r19, 0x00	; 0
     438:	45 e5       	ldi	r20, 0x55	; 85
     43a:	50 e0       	ldi	r21, 0x00	; 0
     43c:	66 e1       	ldi	r22, 0x16	; 22
     43e:	71 e0       	ldi	r23, 0x01	; 1
     440:	84 e0       	ldi	r24, 0x04	; 4
     442:	92 e0       	ldi	r25, 0x02	; 2
     444:	00 d3       	rcall	.+1536   	; 0xa46 <xTaskGenericCreate>
     446:	0f 91       	pop	r16
     448:	ff 90       	pop	r15
     44a:	ef 90       	pop	r14
     44c:	df 90       	pop	r13
     44e:	cf 90       	pop	r12
     450:	bf 90       	pop	r11
     452:	af 90       	pop	r10
     454:	08 95       	ret

00000456 <Motor_Tick_2>:
     456:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <motor_state_2>
     45a:	81 30       	cpi	r24, 0x01	; 1
     45c:	81 f0       	breq	.+32     	; 0x47e <Motor_Tick_2+0x28>
     45e:	20 f0       	brcs	.+8      	; 0x468 <Motor_Tick_2+0x12>
     460:	82 30       	cpi	r24, 0x02	; 2
     462:	09 f4       	brne	.+2      	; 0x466 <Motor_Tick_2+0x10>
     464:	6c c0       	rjmp	.+216    	; 0x53e <Motor_Tick_2+0xe8>
     466:	bb c0       	rjmp	.+374    	; 0x5de <Motor_Tick_2+0x188>
     468:	10 92 24 07 	sts	0x0724, r1	; 0x800724 <finished_reset_2>
     46c:	10 92 27 07 	sts	0x0727, r1	; 0x800727 <p_index_2>
     470:	10 92 26 07 	sts	0x0726, r1	; 0x800726 <numCounter_2+0x1>
     474:	10 92 25 07 	sts	0x0725, r1	; 0x800725 <numCounter_2>
     478:	10 92 28 07 	sts	0x0728, r1	; 0x800728 <orientation_2>
     47c:	b8 c0       	rjmp	.+368    	; 0x5ee <Motor_Tick_2+0x198>
     47e:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <orientation_2>
     482:	88 23       	and	r24, r24
     484:	69 f1       	breq	.+90     	; 0x4e0 <Motor_Tick_2+0x8a>
     486:	80 91 25 07 	lds	r24, 0x0725	; 0x800725 <numCounter_2>
     48a:	90 91 26 07 	lds	r25, 0x0726	; 0x800726 <numCounter_2+0x1>
     48e:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <numPhases>
     492:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <numPhases+0x1>
     496:	82 17       	cp	r24, r18
     498:	93 07       	cpc	r25, r19
     49a:	cc f4       	brge	.+50     	; 0x4ce <Motor_Tick_2+0x78>
     49c:	01 96       	adiw	r24, 0x01	; 1
     49e:	90 93 26 07 	sts	0x0726, r25	; 0x800726 <numCounter_2+0x1>
     4a2:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <numCounter_2>
     4a6:	95 b1       	in	r25, 0x05	; 5
     4a8:	e0 91 27 07 	lds	r30, 0x0727	; 0x800727 <p_index_2>
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	e0 50       	subi	r30, 0x00	; 0
     4b0:	ff 4f       	sbci	r31, 0xFF	; 255
     4b2:	80 81       	ld	r24, Z
     4b4:	89 2b       	or	r24, r25
     4b6:	85 b9       	out	0x05, r24	; 5
     4b8:	80 91 27 07 	lds	r24, 0x0727	; 0x800727 <p_index_2>
     4bc:	87 30       	cpi	r24, 0x07	; 7
     4be:	19 f4       	brne	.+6      	; 0x4c6 <Motor_Tick_2+0x70>
     4c0:	10 92 27 07 	sts	0x0727, r1	; 0x800727 <p_index_2>
     4c4:	8c c0       	rjmp	.+280    	; 0x5de <Motor_Tick_2+0x188>
     4c6:	8f 5f       	subi	r24, 0xFF	; 255
     4c8:	80 93 27 07 	sts	0x0727, r24	; 0x800727 <p_index_2>
     4cc:	88 c0       	rjmp	.+272    	; 0x5de <Motor_Tick_2+0x188>
     4ce:	10 92 26 07 	sts	0x0726, r1	; 0x800726 <numCounter_2+0x1>
     4d2:	10 92 25 07 	sts	0x0725, r1	; 0x800725 <numCounter_2>
     4d6:	10 92 28 07 	sts	0x0728, r1	; 0x800728 <orientation_2>
     4da:	10 92 27 07 	sts	0x0727, r1	; 0x800727 <p_index_2>
     4de:	8f c0       	rjmp	.+286    	; 0x5fe <Motor_Tick_2+0x1a8>
     4e0:	80 91 25 07 	lds	r24, 0x0725	; 0x800725 <numCounter_2>
     4e4:	90 91 26 07 	lds	r25, 0x0726	; 0x800726 <numCounter_2+0x1>
     4e8:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <numPhases>
     4ec:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <numPhases+0x1>
     4f0:	82 17       	cp	r24, r18
     4f2:	93 07       	cpc	r25, r19
     4f4:	d4 f4       	brge	.+52     	; 0x52a <Motor_Tick_2+0xd4>
     4f6:	01 96       	adiw	r24, 0x01	; 1
     4f8:	90 93 26 07 	sts	0x0726, r25	; 0x800726 <numCounter_2+0x1>
     4fc:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <numCounter_2>
     500:	95 b1       	in	r25, 0x05	; 5
     502:	e0 91 27 07 	lds	r30, 0x0727	; 0x800727 <p_index_2>
     506:	f0 e0       	ldi	r31, 0x00	; 0
     508:	e0 50       	subi	r30, 0x00	; 0
     50a:	ff 4f       	sbci	r31, 0xFF	; 255
     50c:	80 81       	ld	r24, Z
     50e:	89 2b       	or	r24, r25
     510:	85 b9       	out	0x05, r24	; 5
     512:	80 91 27 07 	lds	r24, 0x0727	; 0x800727 <p_index_2>
     516:	81 11       	cpse	r24, r1
     518:	04 c0       	rjmp	.+8      	; 0x522 <Motor_Tick_2+0xcc>
     51a:	87 e0       	ldi	r24, 0x07	; 7
     51c:	80 93 27 07 	sts	0x0727, r24	; 0x800727 <p_index_2>
     520:	5e c0       	rjmp	.+188    	; 0x5de <Motor_Tick_2+0x188>
     522:	81 50       	subi	r24, 0x01	; 1
     524:	80 93 27 07 	sts	0x0727, r24	; 0x800727 <p_index_2>
     528:	5a c0       	rjmp	.+180    	; 0x5de <Motor_Tick_2+0x188>
     52a:	10 92 26 07 	sts	0x0726, r1	; 0x800726 <numCounter_2+0x1>
     52e:	10 92 25 07 	sts	0x0725, r1	; 0x800725 <numCounter_2>
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	80 93 28 07 	sts	0x0728, r24	; 0x800728 <orientation_2>
     538:	10 92 27 07 	sts	0x0727, r1	; 0x800727 <p_index_2>
     53c:	60 c0       	rjmp	.+192    	; 0x5fe <Motor_Tick_2+0x1a8>
     53e:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <orientation_2>
     542:	81 11       	cpse	r24, r1
     544:	24 c0       	rjmp	.+72     	; 0x58e <Motor_Tick_2+0x138>
     546:	80 91 25 07 	lds	r24, 0x0725	; 0x800725 <numCounter_2>
     54a:	90 91 26 07 	lds	r25, 0x0726	; 0x800726 <numCounter_2+0x1>
     54e:	18 16       	cp	r1, r24
     550:	19 06       	cpc	r1, r25
     552:	cc f4       	brge	.+50     	; 0x586 <Motor_Tick_2+0x130>
     554:	01 97       	sbiw	r24, 0x01	; 1
     556:	90 93 26 07 	sts	0x0726, r25	; 0x800726 <numCounter_2+0x1>
     55a:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <numCounter_2>
     55e:	95 b1       	in	r25, 0x05	; 5
     560:	e0 91 27 07 	lds	r30, 0x0727	; 0x800727 <p_index_2>
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	e0 50       	subi	r30, 0x00	; 0
     568:	ff 4f       	sbci	r31, 0xFF	; 255
     56a:	80 81       	ld	r24, Z
     56c:	89 2b       	or	r24, r25
     56e:	85 b9       	out	0x05, r24	; 5
     570:	80 91 27 07 	lds	r24, 0x0727	; 0x800727 <p_index_2>
     574:	87 30       	cpi	r24, 0x07	; 7
     576:	19 f4       	brne	.+6      	; 0x57e <Motor_Tick_2+0x128>
     578:	10 92 27 07 	sts	0x0727, r1	; 0x800727 <p_index_2>
     57c:	30 c0       	rjmp	.+96     	; 0x5de <Motor_Tick_2+0x188>
     57e:	8f 5f       	subi	r24, 0xFF	; 255
     580:	80 93 27 07 	sts	0x0727, r24	; 0x800727 <p_index_2>
     584:	2c c0       	rjmp	.+88     	; 0x5de <Motor_Tick_2+0x188>
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <finished_reset_2>
     58c:	44 c0       	rjmp	.+136    	; 0x616 <Motor_Tick_2+0x1c0>
     58e:	80 91 25 07 	lds	r24, 0x0725	; 0x800725 <numCounter_2>
     592:	90 91 26 07 	lds	r25, 0x0726	; 0x800726 <numCounter_2+0x1>
     596:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <numPhases>
     59a:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <numPhases+0x1>
     59e:	82 17       	cp	r24, r18
     5a0:	93 07       	cpc	r25, r19
     5a2:	cc f4       	brge	.+50     	; 0x5d6 <Motor_Tick_2+0x180>
     5a4:	01 96       	adiw	r24, 0x01	; 1
     5a6:	90 93 26 07 	sts	0x0726, r25	; 0x800726 <numCounter_2+0x1>
     5aa:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <numCounter_2>
     5ae:	95 b1       	in	r25, 0x05	; 5
     5b0:	e0 91 27 07 	lds	r30, 0x0727	; 0x800727 <p_index_2>
     5b4:	f0 e0       	ldi	r31, 0x00	; 0
     5b6:	e0 50       	subi	r30, 0x00	; 0
     5b8:	ff 4f       	sbci	r31, 0xFF	; 255
     5ba:	80 81       	ld	r24, Z
     5bc:	89 2b       	or	r24, r25
     5be:	85 b9       	out	0x05, r24	; 5
     5c0:	80 91 27 07 	lds	r24, 0x0727	; 0x800727 <p_index_2>
     5c4:	87 30       	cpi	r24, 0x07	; 7
     5c6:	19 f4       	brne	.+6      	; 0x5ce <Motor_Tick_2+0x178>
     5c8:	10 92 27 07 	sts	0x0727, r1	; 0x800727 <p_index_2>
     5cc:	08 c0       	rjmp	.+16     	; 0x5de <Motor_Tick_2+0x188>
     5ce:	8f 5f       	subi	r24, 0xFF	; 255
     5d0:	80 93 27 07 	sts	0x0727, r24	; 0x800727 <p_index_2>
     5d4:	04 c0       	rjmp	.+8      	; 0x5de <Motor_Tick_2+0x188>
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <finished_reset_2>
     5dc:	1c c0       	rjmp	.+56     	; 0x616 <Motor_Tick_2+0x1c0>
     5de:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <motor_state_2>
     5e2:	81 30       	cpi	r24, 0x01	; 1
     5e4:	61 f0       	breq	.+24     	; 0x5fe <Motor_Tick_2+0x1a8>
     5e6:	18 f0       	brcs	.+6      	; 0x5ee <Motor_Tick_2+0x198>
     5e8:	82 30       	cpi	r24, 0x02	; 2
     5ea:	c1 f4       	brne	.+48     	; 0x61c <Motor_Tick_2+0x1c6>
     5ec:	10 c0       	rjmp	.+32     	; 0x60e <Motor_Tick_2+0x1b8>
     5ee:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <ARM_DISARM>
     5f2:	88 23       	and	r24, r24
     5f4:	a9 f0       	breq	.+42     	; 0x620 <Motor_Tick_2+0x1ca>
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	80 93 88 07 	sts	0x0788, r24	; 0x800788 <motor_state_2>
     5fc:	08 95       	ret
     5fe:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <ARM_DISARM>
     602:	81 30       	cpi	r24, 0x01	; 1
     604:	69 f0       	breq	.+26     	; 0x620 <Motor_Tick_2+0x1ca>
     606:	82 e0       	ldi	r24, 0x02	; 2
     608:	80 93 88 07 	sts	0x0788, r24	; 0x800788 <motor_state_2>
     60c:	08 95       	ret
     60e:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <finished_reset_2>
     612:	81 30       	cpi	r24, 0x01	; 1
     614:	29 f4       	brne	.+10     	; 0x620 <Motor_Tick_2+0x1ca>
     616:	10 92 88 07 	sts	0x0788, r1	; 0x800788 <motor_state_2>
     61a:	08 95       	ret
     61c:	10 92 88 07 	sts	0x0788, r1	; 0x800788 <motor_state_2>
     620:	08 95       	ret

00000622 <MotorSecTask_2>:
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	80 93 88 07 	sts	0x0788, r24	; 0x800788 <motor_state_2>
     628:	16 df       	rcall	.-468    	; 0x456 <Motor_Tick_2>
     62a:	83 e0       	ldi	r24, 0x03	; 3
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	6f d4       	rcall	.+2270   	; 0xf0e <vTaskDelay>
     630:	fb cf       	rjmp	.-10     	; 0x628 <MotorSecTask_2+0x6>

00000632 <Motor2SecPulse>:
     632:	af 92       	push	r10
     634:	bf 92       	push	r11
     636:	cf 92       	push	r12
     638:	df 92       	push	r13
     63a:	ef 92       	push	r14
     63c:	ff 92       	push	r15
     63e:	0f 93       	push	r16
     640:	a1 2c       	mov	r10, r1
     642:	b1 2c       	mov	r11, r1
     644:	c1 2c       	mov	r12, r1
     646:	d1 2c       	mov	r13, r1
     648:	e1 2c       	mov	r14, r1
     64a:	f1 2c       	mov	r15, r1
     64c:	08 2f       	mov	r16, r24
     64e:	20 e0       	ldi	r18, 0x00	; 0
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	45 e5       	ldi	r20, 0x55	; 85
     654:	50 e0       	ldi	r21, 0x00	; 0
     656:	63 e2       	ldi	r22, 0x23	; 35
     658:	71 e0       	ldi	r23, 0x01	; 1
     65a:	81 e1       	ldi	r24, 0x11	; 17
     65c:	93 e0       	ldi	r25, 0x03	; 3
     65e:	f3 d1       	rcall	.+998    	; 0xa46 <xTaskGenericCreate>
     660:	0f 91       	pop	r16
     662:	ff 90       	pop	r15
     664:	ef 90       	pop	r14
     666:	df 90       	pop	r13
     668:	cf 90       	pop	r12
     66a:	bf 90       	pop	r11
     66c:	af 90       	pop	r10
     66e:	08 95       	ret

00000670 <Button_Tick>:
}

void Button_Tick(){
	//Transitions
	switch(button_state){
     670:	80 91 89 07 	lds	r24, 0x0789	; 0x800789 <button_state>
     674:	88 23       	and	r24, r24
     676:	19 f0       	breq	.+6      	; 0x67e <Button_Tick+0xe>
     678:	81 30       	cpi	r24, 0x01	; 1
     67a:	99 f0       	breq	.+38     	; 0x6a2 <Button_Tick+0x32>
     67c:	19 c0       	rjmp	.+50     	; 0x6b0 <Button_Tick+0x40>
		case b_release:
		if(GetBit(~PINC, 4) == 1){ // 
     67e:	86 b1       	in	r24, 0x06	; 6
     680:	80 95       	com	r24
     682:	84 ff       	sbrs	r24, 4
     684:	1b c0       	rjmp	.+54     	; 0x6bc <Button_Tick+0x4c>
			button_state = b_push;
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	80 93 89 07 	sts	0x0789, r24	; 0x800789 <button_state>
			if(ARM_DISARM == 1){
     68c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <ARM_DISARM>
     690:	81 30       	cpi	r24, 0x01	; 1
     692:	19 f4       	brne	.+6      	; 0x69a <Button_Tick+0x2a>
				ARM_DISARM = 0;
     694:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <ARM_DISARM>
     698:	0e c0       	rjmp	.+28     	; 0x6b6 <Button_Tick+0x46>
			}
			else{
				ARM_DISARM = 1;
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <ARM_DISARM>
     6a0:	0a c0       	rjmp	.+20     	; 0x6b6 <Button_Tick+0x46>
			button_state = b_release;
		}
		break;

		case b_push:
		if(GetBit(~PINC, 4) == 1){ 
     6a2:	86 b1       	in	r24, 0x06	; 6
     6a4:	80 95       	com	r24
     6a6:	84 fd       	sbrc	r24, 4
     6a8:	06 c0       	rjmp	.+12     	; 0x6b6 <Button_Tick+0x46>
			button_state = b_push;
		}
		else{
			button_state = b_release;
     6aa:	10 92 89 07 	sts	0x0789, r1	; 0x800789 <button_state>
     6ae:	06 c0       	rjmp	.+12     	; 0x6bc <Button_Tick+0x4c>
		}
		break;

		default:
		button_state = b_release;
     6b0:	10 92 89 07 	sts	0x0789, r1	; 0x800789 <button_state>
		break;
     6b4:	03 c0       	rjmp	.+6      	; 0x6bc <Button_Tick+0x4c>
	switch(button_state){
		case b_release:
		PORTD = 0x00;
		break;
		case b_push:
		PORTD =0xFF;
     6b6:	8f ef       	ldi	r24, 0xFF	; 255
     6b8:	8b b9       	out	0x0b, r24	; 11
		break;
     6ba:	08 95       	ret
	}
	
	//Actions
	switch(button_state){
		case b_release:
		PORTD = 0x00;
     6bc:	1b b8       	out	0x0b, r1	; 11
     6be:	08 95       	ret

000006c0 <ButtonSecTask>:

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum ButtonState {b_release, b_push} button_state;

void Button_Init(){
	button_state = b_release;
     6c0:	10 92 89 07 	sts	0x0789, r1	; 0x800789 <button_state>
void ButtonSecTask(){
	
	Button_Init();
	for(;;){
		Button_Tick();
		vTaskDelay(10);
     6c4:	d5 df       	rcall	.-86     	; 0x670 <Button_Tick>
     6c6:	8a e0       	ldi	r24, 0x0A	; 10
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	21 d4       	rcall	.+2114   	; 0xf0e <vTaskDelay>
     6cc:	fb cf       	rjmp	.-10     	; 0x6c4 <ButtonSecTask+0x4>

000006ce <ButtonSecPulse>:
	}
}

void ButtonSecPulse(unsigned portBASE_TYPE Priority){
     6ce:	af 92       	push	r10
     6d0:	bf 92       	push	r11
     6d2:	cf 92       	push	r12
     6d4:	df 92       	push	r13
     6d6:	ef 92       	push	r14
     6d8:	ff 92       	push	r15
     6da:	0f 93       	push	r16
	xTaskCreate(ButtonSecTask, (signed portCHAR *)"ButtonSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
     6dc:	a1 2c       	mov	r10, r1
     6de:	b1 2c       	mov	r11, r1
     6e0:	c1 2c       	mov	r12, r1
     6e2:	d1 2c       	mov	r13, r1
     6e4:	e1 2c       	mov	r14, r1
     6e6:	f1 2c       	mov	r15, r1
     6e8:	08 2f       	mov	r16, r24
     6ea:	20 e0       	ldi	r18, 0x00	; 0
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	45 e5       	ldi	r20, 0x55	; 85
     6f0:	50 e0       	ldi	r21, 0x00	; 0
     6f2:	62 e3       	ldi	r22, 0x32	; 50
     6f4:	71 e0       	ldi	r23, 0x01	; 1
     6f6:	80 e6       	ldi	r24, 0x60	; 96
     6f8:	93 e0       	ldi	r25, 0x03	; 3
     6fa:	a5 d1       	rcall	.+842    	; 0xa46 <xTaskGenericCreate>
}
     6fc:	0f 91       	pop	r16
     6fe:	ff 90       	pop	r15
     700:	ef 90       	pop	r14
     702:	df 90       	pop	r13
     704:	cf 90       	pop	r12
     706:	bf 90       	pop	r11
     708:	af 90       	pop	r10
     70a:	08 95       	ret

0000070c <main>:


int main(void)
{
	DDRC = 0x00; PORTC = 0xFF; 
     70c:	17 b8       	out	0x07, r1	; 7
     70e:	8f ef       	ldi	r24, 0xFF	; 255
     710:	88 b9       	out	0x08, r24	; 8
	DDRB = 0xFF; PORTB = 0x00; //output
     712:	84 b9       	out	0x04, r24	; 4
     714:	15 b8       	out	0x05, r1	; 5


	
	
	//Start Tasks
	MotorSecPulse(1);
     716:	81 e0       	ldi	r24, 0x01	; 1
	Motor2SecPulse(1);
	ButtonSecPulse(1);
     718:	7f de       	rcall	.-770    	; 0x418 <MotorSecPulse>
     71a:	81 e0       	ldi	r24, 0x01	; 1
	//RunSchedular
	vTaskStartScheduler();
     71c:	8a df       	rcall	.-236    	; 0x632 <Motor2SecPulse>
     71e:	81 e0       	ldi	r24, 0x01	; 1
	
	return 0;
}
     720:	d6 df       	rcall	.-84     	; 0x6ce <ButtonSecPulse>
     722:	84 d2       	rcall	.+1288   	; 0xc2c <vTaskStartScheduler>
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	08 95       	ret

0000072a <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     72a:	31 e1       	ldi	r19, 0x11	; 17
     72c:	fc 01       	movw	r30, r24
     72e:	30 83       	st	Z, r19
     730:	31 97       	sbiw	r30, 0x01	; 1
     732:	22 e2       	ldi	r18, 0x22	; 34
     734:	20 83       	st	Z, r18
     736:	31 97       	sbiw	r30, 0x01	; 1
     738:	a3 e3       	ldi	r26, 0x33	; 51
     73a:	a0 83       	st	Z, r26
     73c:	31 97       	sbiw	r30, 0x01	; 1
     73e:	60 83       	st	Z, r22
     740:	31 97       	sbiw	r30, 0x01	; 1
     742:	70 83       	st	Z, r23
     744:	31 97       	sbiw	r30, 0x01	; 1
     746:	10 82       	st	Z, r1
     748:	31 97       	sbiw	r30, 0x01	; 1
     74a:	60 e8       	ldi	r22, 0x80	; 128
     74c:	60 83       	st	Z, r22
     74e:	31 97       	sbiw	r30, 0x01	; 1
     750:	10 82       	st	Z, r1
     752:	31 97       	sbiw	r30, 0x01	; 1
     754:	62 e0       	ldi	r22, 0x02	; 2
     756:	60 83       	st	Z, r22
     758:	31 97       	sbiw	r30, 0x01	; 1
     75a:	63 e0       	ldi	r22, 0x03	; 3
     75c:	60 83       	st	Z, r22
     75e:	31 97       	sbiw	r30, 0x01	; 1
     760:	64 e0       	ldi	r22, 0x04	; 4
     762:	60 83       	st	Z, r22
     764:	31 97       	sbiw	r30, 0x01	; 1
     766:	65 e0       	ldi	r22, 0x05	; 5
     768:	60 83       	st	Z, r22
     76a:	31 97       	sbiw	r30, 0x01	; 1
     76c:	66 e0       	ldi	r22, 0x06	; 6
     76e:	60 83       	st	Z, r22
     770:	31 97       	sbiw	r30, 0x01	; 1
     772:	67 e0       	ldi	r22, 0x07	; 7
     774:	60 83       	st	Z, r22
     776:	31 97       	sbiw	r30, 0x01	; 1
     778:	68 e0       	ldi	r22, 0x08	; 8
     77a:	60 83       	st	Z, r22
     77c:	31 97       	sbiw	r30, 0x01	; 1
     77e:	69 e0       	ldi	r22, 0x09	; 9
     780:	60 83       	st	Z, r22
     782:	31 97       	sbiw	r30, 0x01	; 1
     784:	60 e1       	ldi	r22, 0x10	; 16
     786:	60 83       	st	Z, r22
     788:	31 97       	sbiw	r30, 0x01	; 1
     78a:	30 83       	st	Z, r19
     78c:	31 97       	sbiw	r30, 0x01	; 1
     78e:	32 e1       	ldi	r19, 0x12	; 18
     790:	30 83       	st	Z, r19
     792:	31 97       	sbiw	r30, 0x01	; 1
     794:	33 e1       	ldi	r19, 0x13	; 19
     796:	30 83       	st	Z, r19
     798:	31 97       	sbiw	r30, 0x01	; 1
     79a:	34 e1       	ldi	r19, 0x14	; 20
     79c:	30 83       	st	Z, r19
     79e:	31 97       	sbiw	r30, 0x01	; 1
     7a0:	35 e1       	ldi	r19, 0x15	; 21
     7a2:	30 83       	st	Z, r19
     7a4:	31 97       	sbiw	r30, 0x01	; 1
     7a6:	36 e1       	ldi	r19, 0x16	; 22
     7a8:	30 83       	st	Z, r19
     7aa:	31 97       	sbiw	r30, 0x01	; 1
     7ac:	37 e1       	ldi	r19, 0x17	; 23
     7ae:	30 83       	st	Z, r19
     7b0:	31 97       	sbiw	r30, 0x01	; 1
     7b2:	38 e1       	ldi	r19, 0x18	; 24
     7b4:	30 83       	st	Z, r19
     7b6:	31 97       	sbiw	r30, 0x01	; 1
     7b8:	39 e1       	ldi	r19, 0x19	; 25
     7ba:	30 83       	st	Z, r19
     7bc:	31 97       	sbiw	r30, 0x01	; 1
     7be:	30 e2       	ldi	r19, 0x20	; 32
     7c0:	30 83       	st	Z, r19
     7c2:	31 97       	sbiw	r30, 0x01	; 1
     7c4:	31 e2       	ldi	r19, 0x21	; 33
     7c6:	30 83       	st	Z, r19
     7c8:	31 97       	sbiw	r30, 0x01	; 1
     7ca:	20 83       	st	Z, r18
     7cc:	31 97       	sbiw	r30, 0x01	; 1
     7ce:	23 e2       	ldi	r18, 0x23	; 35
     7d0:	20 83       	st	Z, r18
     7d2:	31 97       	sbiw	r30, 0x01	; 1
     7d4:	40 83       	st	Z, r20
     7d6:	31 97       	sbiw	r30, 0x01	; 1
     7d8:	50 83       	st	Z, r21
     7da:	31 97       	sbiw	r30, 0x01	; 1
     7dc:	26 e2       	ldi	r18, 0x26	; 38
     7de:	20 83       	st	Z, r18
     7e0:	31 97       	sbiw	r30, 0x01	; 1
     7e2:	27 e2       	ldi	r18, 0x27	; 39
     7e4:	20 83       	st	Z, r18
     7e6:	31 97       	sbiw	r30, 0x01	; 1
     7e8:	28 e2       	ldi	r18, 0x28	; 40
     7ea:	20 83       	st	Z, r18
     7ec:	31 97       	sbiw	r30, 0x01	; 1
     7ee:	29 e2       	ldi	r18, 0x29	; 41
     7f0:	20 83       	st	Z, r18
     7f2:	31 97       	sbiw	r30, 0x01	; 1
     7f4:	20 e3       	ldi	r18, 0x30	; 48
     7f6:	20 83       	st	Z, r18
     7f8:	31 97       	sbiw	r30, 0x01	; 1
     7fa:	21 e3       	ldi	r18, 0x31	; 49
     7fc:	20 83       	st	Z, r18
     7fe:	86 97       	sbiw	r24, 0x26	; 38
     800:	08 95       	ret

00000802 <xPortStartScheduler>:
     802:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     806:	8c e7       	ldi	r24, 0x7C	; 124
     808:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     80c:	8b e0       	ldi	r24, 0x0B	; 11
     80e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     812:	ef e6       	ldi	r30, 0x6F	; 111
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	80 81       	ld	r24, Z
     818:	82 60       	ori	r24, 0x02	; 2
     81a:	80 83       	st	Z, r24
     81c:	a0 91 85 07 	lds	r26, 0x0785	; 0x800785 <pxCurrentTCB>
     820:	b0 91 86 07 	lds	r27, 0x0786	; 0x800786 <pxCurrentTCB+0x1>
     824:	cd 91       	ld	r28, X+
     826:	cd bf       	out	0x3d, r28	; 61
     828:	dd 91       	ld	r29, X+
     82a:	de bf       	out	0x3e, r29	; 62
     82c:	ff 91       	pop	r31
     82e:	ef 91       	pop	r30
     830:	df 91       	pop	r29
     832:	cf 91       	pop	r28
     834:	bf 91       	pop	r27
     836:	af 91       	pop	r26
     838:	9f 91       	pop	r25
     83a:	8f 91       	pop	r24
     83c:	7f 91       	pop	r23
     83e:	6f 91       	pop	r22
     840:	5f 91       	pop	r21
     842:	4f 91       	pop	r20
     844:	3f 91       	pop	r19
     846:	2f 91       	pop	r18
     848:	1f 91       	pop	r17
     84a:	0f 91       	pop	r16
     84c:	ff 90       	pop	r15
     84e:	ef 90       	pop	r14
     850:	df 90       	pop	r13
     852:	cf 90       	pop	r12
     854:	bf 90       	pop	r11
     856:	af 90       	pop	r10
     858:	9f 90       	pop	r9
     85a:	8f 90       	pop	r8
     85c:	7f 90       	pop	r7
     85e:	6f 90       	pop	r6
     860:	5f 90       	pop	r5
     862:	4f 90       	pop	r4
     864:	3f 90       	pop	r3
     866:	2f 90       	pop	r2
     868:	1f 90       	pop	r1
     86a:	0f 90       	pop	r0
     86c:	0f be       	out	0x3f, r0	; 63
     86e:	0f 90       	pop	r0
     870:	08 95       	ret
     872:	81 e0       	ldi	r24, 0x01	; 1
     874:	08 95       	ret

00000876 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     876:	0f 92       	push	r0
     878:	0f b6       	in	r0, 0x3f	; 63
     87a:	f8 94       	cli
     87c:	0f 92       	push	r0
     87e:	1f 92       	push	r1
     880:	11 24       	eor	r1, r1
     882:	2f 92       	push	r2
     884:	3f 92       	push	r3
     886:	4f 92       	push	r4
     888:	5f 92       	push	r5
     88a:	6f 92       	push	r6
     88c:	7f 92       	push	r7
     88e:	8f 92       	push	r8
     890:	9f 92       	push	r9
     892:	af 92       	push	r10
     894:	bf 92       	push	r11
     896:	cf 92       	push	r12
     898:	df 92       	push	r13
     89a:	ef 92       	push	r14
     89c:	ff 92       	push	r15
     89e:	0f 93       	push	r16
     8a0:	1f 93       	push	r17
     8a2:	2f 93       	push	r18
     8a4:	3f 93       	push	r19
     8a6:	4f 93       	push	r20
     8a8:	5f 93       	push	r21
     8aa:	6f 93       	push	r22
     8ac:	7f 93       	push	r23
     8ae:	8f 93       	push	r24
     8b0:	9f 93       	push	r25
     8b2:	af 93       	push	r26
     8b4:	bf 93       	push	r27
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	ef 93       	push	r30
     8bc:	ff 93       	push	r31
     8be:	a0 91 85 07 	lds	r26, 0x0785	; 0x800785 <pxCurrentTCB>
     8c2:	b0 91 86 07 	lds	r27, 0x0786	; 0x800786 <pxCurrentTCB+0x1>
     8c6:	0d b6       	in	r0, 0x3d	; 61
     8c8:	0d 92       	st	X+, r0
     8ca:	0e b6       	in	r0, 0x3e	; 62
	vTaskSwitchContext();
     8cc:	0d 92       	st	X+, r0
	portRESTORE_CONTEXT();
     8ce:	70 d3       	rcall	.+1760   	; 0xfb0 <vTaskSwitchContext>
     8d0:	a0 91 85 07 	lds	r26, 0x0785	; 0x800785 <pxCurrentTCB>
     8d4:	b0 91 86 07 	lds	r27, 0x0786	; 0x800786 <pxCurrentTCB+0x1>
     8d8:	cd 91       	ld	r28, X+
     8da:	cd bf       	out	0x3d, r28	; 61
     8dc:	dd 91       	ld	r29, X+
     8de:	de bf       	out	0x3e, r29	; 62
     8e0:	ff 91       	pop	r31
     8e2:	ef 91       	pop	r30
     8e4:	df 91       	pop	r29
     8e6:	cf 91       	pop	r28
     8e8:	bf 91       	pop	r27
     8ea:	af 91       	pop	r26
     8ec:	9f 91       	pop	r25
     8ee:	8f 91       	pop	r24
     8f0:	7f 91       	pop	r23
     8f2:	6f 91       	pop	r22
     8f4:	5f 91       	pop	r21
     8f6:	4f 91       	pop	r20
     8f8:	3f 91       	pop	r19
     8fa:	2f 91       	pop	r18
     8fc:	1f 91       	pop	r17
     8fe:	0f 91       	pop	r16
     900:	ff 90       	pop	r15
     902:	ef 90       	pop	r14
     904:	df 90       	pop	r13
     906:	cf 90       	pop	r12
     908:	bf 90       	pop	r11
     90a:	af 90       	pop	r10
     90c:	9f 90       	pop	r9
     90e:	8f 90       	pop	r8
     910:	7f 90       	pop	r7
     912:	6f 90       	pop	r6
     914:	5f 90       	pop	r5
     916:	4f 90       	pop	r4
     918:	3f 90       	pop	r3
     91a:	2f 90       	pop	r2
     91c:	1f 90       	pop	r1
     91e:	0f 90       	pop	r0
     920:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
     922:	0f 90       	pop	r0
     924:	08 95       	ret

00000926 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     926:	0f 92       	push	r0
     928:	0f b6       	in	r0, 0x3f	; 63
     92a:	f8 94       	cli
     92c:	0f 92       	push	r0
     92e:	1f 92       	push	r1
     930:	11 24       	eor	r1, r1
     932:	2f 92       	push	r2
     934:	3f 92       	push	r3
     936:	4f 92       	push	r4
     938:	5f 92       	push	r5
     93a:	6f 92       	push	r6
     93c:	7f 92       	push	r7
     93e:	8f 92       	push	r8
     940:	9f 92       	push	r9
     942:	af 92       	push	r10
     944:	bf 92       	push	r11
     946:	cf 92       	push	r12
     948:	df 92       	push	r13
     94a:	ef 92       	push	r14
     94c:	ff 92       	push	r15
     94e:	0f 93       	push	r16
     950:	1f 93       	push	r17
     952:	2f 93       	push	r18
     954:	3f 93       	push	r19
     956:	4f 93       	push	r20
     958:	5f 93       	push	r21
     95a:	6f 93       	push	r22
     95c:	7f 93       	push	r23
     95e:	8f 93       	push	r24
     960:	9f 93       	push	r25
     962:	af 93       	push	r26
     964:	bf 93       	push	r27
     966:	cf 93       	push	r28
     968:	df 93       	push	r29
     96a:	ef 93       	push	r30
     96c:	ff 93       	push	r31
     96e:	a0 91 85 07 	lds	r26, 0x0785	; 0x800785 <pxCurrentTCB>
     972:	b0 91 86 07 	lds	r27, 0x0786	; 0x800786 <pxCurrentTCB+0x1>
     976:	0d b6       	in	r0, 0x3d	; 61
     978:	0d 92       	st	X+, r0
     97a:	0e b6       	in	r0, 0x3e	; 62
	vTaskIncrementTick();
	vTaskSwitchContext();
     97c:	0d 92       	st	X+, r0
     97e:	85 d1       	rcall	.+778    	; 0xc8a <vTaskIncrementTick>
	portRESTORE_CONTEXT();
     980:	17 d3       	rcall	.+1582   	; 0xfb0 <vTaskSwitchContext>
     982:	a0 91 85 07 	lds	r26, 0x0785	; 0x800785 <pxCurrentTCB>
     986:	b0 91 86 07 	lds	r27, 0x0786	; 0x800786 <pxCurrentTCB+0x1>
     98a:	cd 91       	ld	r28, X+
     98c:	cd bf       	out	0x3d, r28	; 61
     98e:	dd 91       	ld	r29, X+
     990:	de bf       	out	0x3e, r29	; 62
     992:	ff 91       	pop	r31
     994:	ef 91       	pop	r30
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	bf 91       	pop	r27
     99c:	af 91       	pop	r26
     99e:	9f 91       	pop	r25
     9a0:	8f 91       	pop	r24
     9a2:	7f 91       	pop	r23
     9a4:	6f 91       	pop	r22
     9a6:	5f 91       	pop	r21
     9a8:	4f 91       	pop	r20
     9aa:	3f 91       	pop	r19
     9ac:	2f 91       	pop	r18
     9ae:	1f 91       	pop	r17
     9b0:	0f 91       	pop	r16
     9b2:	ff 90       	pop	r15
     9b4:	ef 90       	pop	r14
     9b6:	df 90       	pop	r13
     9b8:	cf 90       	pop	r12
     9ba:	bf 90       	pop	r11
     9bc:	af 90       	pop	r10
     9be:	9f 90       	pop	r9
     9c0:	8f 90       	pop	r8
     9c2:	7f 90       	pop	r7
     9c4:	6f 90       	pop	r6
     9c6:	5f 90       	pop	r5
     9c8:	4f 90       	pop	r4
     9ca:	3f 90       	pop	r3
     9cc:	2f 90       	pop	r2
     9ce:	1f 90       	pop	r1
     9d0:	0f 90       	pop	r0
     9d2:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
     9d4:	0f 90       	pop	r0
     9d6:	08 95       	ret

000009d8 <__vector_13>:
}
     9d8:	a6 df       	rcall	.-180    	; 0x926 <vPortYieldFromTick>
     9da:	18 95       	reti

000009dc <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
     9dc:	cf 93       	push	r28
     9de:	df 93       	push	r29
     9e0:	ec 01       	movw	r28, r24
     9e2:	e0 91 85 07 	lds	r30, 0x0785	; 0x800785 <pxCurrentTCB>
     9e6:	f0 91 86 07 	lds	r31, 0x0786	; 0x800786 <pxCurrentTCB+0x1>
     9ea:	93 83       	std	Z+3, r25	; 0x03
     9ec:	82 83       	std	Z+2, r24	; 0x02
     9ee:	80 91 35 07 	lds	r24, 0x0735	; 0x800735 <xTickCount>
     9f2:	90 91 36 07 	lds	r25, 0x0736	; 0x800736 <xTickCount+0x1>
     9f6:	c8 17       	cp	r28, r24
     9f8:	d9 07       	cpc	r29, r25
     9fa:	60 f4       	brcc	.+24     	; 0xa14 <prvAddCurrentTaskToDelayedList+0x38>
     9fc:	60 91 85 07 	lds	r22, 0x0785	; 0x800785 <pxCurrentTCB>
     a00:	70 91 86 07 	lds	r23, 0x0786	; 0x800786 <pxCurrentTCB+0x1>
     a04:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <pxOverflowDelayedTaskList>
     a08:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <pxOverflowDelayedTaskList+0x1>
     a0c:	6e 5f       	subi	r22, 0xFE	; 254
     a0e:	7f 4f       	sbci	r23, 0xFF	; 255
     a10:	b9 db       	rcall	.-2190   	; 0x184 <vListInsert>
     a12:	16 c0       	rjmp	.+44     	; 0xa40 <prvAddCurrentTaskToDelayedList+0x64>
     a14:	60 91 85 07 	lds	r22, 0x0785	; 0x800785 <pxCurrentTCB>
     a18:	70 91 86 07 	lds	r23, 0x0786	; 0x800786 <pxCurrentTCB+0x1>
     a1c:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <pxDelayedTaskList>
     a20:	90 91 4e 07 	lds	r25, 0x074E	; 0x80074e <pxDelayedTaskList+0x1>
     a24:	6e 5f       	subi	r22, 0xFE	; 254
     a26:	7f 4f       	sbci	r23, 0xFF	; 255
     a28:	ad db       	rcall	.-2214   	; 0x184 <vListInsert>
     a2a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <xNextTaskUnblockTime>
     a2e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <xNextTaskUnblockTime+0x1>
     a32:	c8 17       	cp	r28, r24
     a34:	d9 07       	cpc	r29, r25
     a36:	20 f4       	brcc	.+8      	; 0xa40 <prvAddCurrentTaskToDelayedList+0x64>
     a38:	d0 93 15 01 	sts	0x0115, r29	; 0x800115 <xNextTaskUnblockTime+0x1>
     a3c:	c0 93 14 01 	sts	0x0114, r28	; 0x800114 <xNextTaskUnblockTime>
     a40:	df 91       	pop	r29
     a42:	cf 91       	pop	r28
     a44:	08 95       	ret

00000a46 <xTaskGenericCreate>:
     a46:	4f 92       	push	r4
     a48:	5f 92       	push	r5
     a4a:	6f 92       	push	r6
     a4c:	7f 92       	push	r7
     a4e:	8f 92       	push	r8
     a50:	9f 92       	push	r9
     a52:	af 92       	push	r10
     a54:	bf 92       	push	r11
     a56:	cf 92       	push	r12
     a58:	df 92       	push	r13
     a5a:	ef 92       	push	r14
     a5c:	ff 92       	push	r15
     a5e:	0f 93       	push	r16
     a60:	1f 93       	push	r17
     a62:	cf 93       	push	r28
     a64:	df 93       	push	r29
     a66:	5c 01       	movw	r10, r24
     a68:	4b 01       	movw	r8, r22
     a6a:	3a 01       	movw	r6, r20
     a6c:	29 01       	movw	r4, r18
     a6e:	81 e2       	ldi	r24, 0x21	; 33
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	2a db       	rcall	.-2476   	; 0xc8 <pvPortMalloc>
     a74:	ec 01       	movw	r28, r24
     a76:	89 2b       	or	r24, r25
     a78:	09 f4       	brne	.+2      	; 0xa7c <xTaskGenericCreate+0x36>
     a7a:	c6 c0       	rjmp	.+396    	; 0xc08 <xTaskGenericCreate+0x1c2>
     a7c:	c1 14       	cp	r12, r1
     a7e:	d1 04       	cpc	r13, r1
     a80:	09 f0       	breq	.+2      	; 0xa84 <xTaskGenericCreate+0x3e>
     a82:	be c0       	rjmp	.+380    	; 0xc00 <xTaskGenericCreate+0x1ba>
     a84:	c3 01       	movw	r24, r6
     a86:	20 db       	rcall	.-2496   	; 0xc8 <pvPortMalloc>
     a88:	98 8f       	std	Y+24, r25	; 0x18
     a8a:	8f 8b       	std	Y+23, r24	; 0x17
     a8c:	00 97       	sbiw	r24, 0x00	; 0
     a8e:	19 f4       	brne	.+6      	; 0xa96 <xTaskGenericCreate+0x50>
     a90:	ce 01       	movw	r24, r28
     a92:	3e db       	rcall	.-2436   	; 0x110 <vPortFree>
     a94:	b9 c0       	rjmp	.+370    	; 0xc08 <xTaskGenericCreate+0x1c2>
     a96:	a3 01       	movw	r20, r6
     a98:	65 ea       	ldi	r22, 0xA5	; 165
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	f5 d2       	rcall	.+1514   	; 0x1088 <memset>
     a9e:	93 01       	movw	r18, r6
     aa0:	21 50       	subi	r18, 0x01	; 1
     aa2:	31 09       	sbc	r19, r1
     aa4:	8f 89       	ldd	r24, Y+23	; 0x17
     aa6:	98 8d       	ldd	r25, Y+24	; 0x18
     aa8:	3c 01       	movw	r6, r24
     aaa:	62 0e       	add	r6, r18
     aac:	73 1e       	adc	r7, r19
     aae:	48 e0       	ldi	r20, 0x08	; 8
     ab0:	50 e0       	ldi	r21, 0x00	; 0
     ab2:	b4 01       	movw	r22, r8
     ab4:	ce 01       	movw	r24, r28
     ab6:	49 96       	adiw	r24, 0x19	; 25
     ab8:	ee d2       	rcall	.+1500   	; 0x1096 <strncpy>
     aba:	18 a2       	std	Y+32, r1	; 0x20
     abc:	10 2f       	mov	r17, r16
     abe:	04 30       	cpi	r16, 0x04	; 4
     ac0:	08 f0       	brcs	.+2      	; 0xac4 <xTaskGenericCreate+0x7e>
     ac2:	13 e0       	ldi	r17, 0x03	; 3
     ac4:	1e 8b       	std	Y+22, r17	; 0x16
     ac6:	6e 01       	movw	r12, r28
     ac8:	82 e0       	ldi	r24, 0x02	; 2
     aca:	c8 0e       	add	r12, r24
     acc:	d1 1c       	adc	r13, r1
     ace:	c6 01       	movw	r24, r12
     ad0:	2e db       	rcall	.-2468   	; 0x12e <vListInitialiseItem>
     ad2:	ce 01       	movw	r24, r28
     ad4:	0c 96       	adiw	r24, 0x0c	; 12
     ad6:	2b db       	rcall	.-2474   	; 0x12e <vListInitialiseItem>
     ad8:	d9 87       	std	Y+9, r29	; 0x09
     ada:	c8 87       	std	Y+8, r28	; 0x08
     adc:	84 e0       	ldi	r24, 0x04	; 4
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	81 1b       	sub	r24, r17
     ae2:	91 09       	sbc	r25, r1
     ae4:	9d 87       	std	Y+13, r25	; 0x0d
     ae6:	8c 87       	std	Y+12, r24	; 0x0c
     ae8:	db 8b       	std	Y+19, r29	; 0x13
     aea:	ca 8b       	std	Y+18, r28	; 0x12
     aec:	a2 01       	movw	r20, r4
     aee:	b5 01       	movw	r22, r10
     af0:	c3 01       	movw	r24, r6
     af2:	1b de       	rcall	.-970    	; 0x72a <pxPortInitialiseStack>
     af4:	99 83       	std	Y+1, r25	; 0x01
     af6:	88 83       	st	Y, r24
     af8:	e1 14       	cp	r14, r1
     afa:	f1 04       	cpc	r15, r1
     afc:	19 f0       	breq	.+6      	; 0xb04 <xTaskGenericCreate+0xbe>
     afe:	f7 01       	movw	r30, r14
     b00:	d1 83       	std	Z+1, r29	; 0x01
     b02:	c0 83       	st	Z, r28
     b04:	0f b6       	in	r0, 0x3f	; 63
     b06:	f8 94       	cli
     b08:	0f 92       	push	r0
     b0a:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <uxCurrentNumberOfTasks>
     b0e:	8f 5f       	subi	r24, 0xFF	; 255
     b10:	80 93 37 07 	sts	0x0737, r24	; 0x800737 <uxCurrentNumberOfTasks>
     b14:	80 91 85 07 	lds	r24, 0x0785	; 0x800785 <pxCurrentTCB>
     b18:	90 91 86 07 	lds	r25, 0x0786	; 0x800786 <pxCurrentTCB+0x1>
     b1c:	89 2b       	or	r24, r25
     b1e:	69 f5       	brne	.+90     	; 0xb7a <xTaskGenericCreate+0x134>
     b20:	d0 93 86 07 	sts	0x0786, r29	; 0x800786 <pxCurrentTCB+0x1>
     b24:	c0 93 85 07 	sts	0x0785, r28	; 0x800785 <pxCurrentTCB>
     b28:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <uxCurrentNumberOfTasks>
     b2c:	81 30       	cpi	r24, 0x01	; 1
     b2e:	a1 f5       	brne	.+104    	; 0xb98 <xTaskGenericCreate+0x152>
     b30:	81 e6       	ldi	r24, 0x61	; 97
     b32:	97 e0       	ldi	r25, 0x07	; 7
     b34:	ee da       	rcall	.-2596   	; 0x112 <vListInitialise>
     b36:	8a e6       	ldi	r24, 0x6A	; 106
     b38:	97 e0       	ldi	r25, 0x07	; 7
     b3a:	eb da       	rcall	.-2602   	; 0x112 <vListInitialise>
     b3c:	83 e7       	ldi	r24, 0x73	; 115
     b3e:	97 e0       	ldi	r25, 0x07	; 7
     b40:	e8 da       	rcall	.-2608   	; 0x112 <vListInitialise>
     b42:	8c e7       	ldi	r24, 0x7C	; 124
     b44:	97 e0       	ldi	r25, 0x07	; 7
     b46:	e5 da       	rcall	.-2614   	; 0x112 <vListInitialise>
     b48:	88 e5       	ldi	r24, 0x58	; 88
     b4a:	97 e0       	ldi	r25, 0x07	; 7
     b4c:	e2 da       	rcall	.-2620   	; 0x112 <vListInitialise>
     b4e:	8f e4       	ldi	r24, 0x4F	; 79
     b50:	97 e0       	ldi	r25, 0x07	; 7
     b52:	df da       	rcall	.-2626   	; 0x112 <vListInitialise>
     b54:	82 e4       	ldi	r24, 0x42	; 66
     b56:	97 e0       	ldi	r25, 0x07	; 7
     b58:	dc da       	rcall	.-2632   	; 0x112 <vListInitialise>
     b5a:	89 e3       	ldi	r24, 0x39	; 57
     b5c:	97 e0       	ldi	r25, 0x07	; 7
     b5e:	d9 da       	rcall	.-2638   	; 0x112 <vListInitialise>
     b60:	88 e5       	ldi	r24, 0x58	; 88
     b62:	97 e0       	ldi	r25, 0x07	; 7
     b64:	90 93 4e 07 	sts	0x074E, r25	; 0x80074e <pxDelayedTaskList+0x1>
     b68:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <pxDelayedTaskList>
     b6c:	8f e4       	ldi	r24, 0x4F	; 79
     b6e:	97 e0       	ldi	r25, 0x07	; 7
     b70:	90 93 4c 07 	sts	0x074C, r25	; 0x80074c <pxOverflowDelayedTaskList+0x1>
     b74:	80 93 4b 07 	sts	0x074B, r24	; 0x80074b <pxOverflowDelayedTaskList>
     b78:	0f c0       	rjmp	.+30     	; 0xb98 <xTaskGenericCreate+0x152>
     b7a:	80 91 32 07 	lds	r24, 0x0732	; 0x800732 <xSchedulerRunning>
     b7e:	81 11       	cpse	r24, r1
     b80:	0b c0       	rjmp	.+22     	; 0xb98 <xTaskGenericCreate+0x152>
     b82:	e0 91 85 07 	lds	r30, 0x0785	; 0x800785 <pxCurrentTCB>
     b86:	f0 91 86 07 	lds	r31, 0x0786	; 0x800786 <pxCurrentTCB+0x1>
     b8a:	86 89       	ldd	r24, Z+22	; 0x16
     b8c:	08 17       	cp	r16, r24
     b8e:	20 f0       	brcs	.+8      	; 0xb98 <xTaskGenericCreate+0x152>
     b90:	d0 93 86 07 	sts	0x0786, r29	; 0x800786 <pxCurrentTCB+0x1>
     b94:	c0 93 85 07 	sts	0x0785, r28	; 0x800785 <pxCurrentTCB>
     b98:	8e 89       	ldd	r24, Y+22	; 0x16
     b9a:	90 91 34 07 	lds	r25, 0x0734	; 0x800734 <uxTopUsedPriority>
     b9e:	98 17       	cp	r25, r24
     ba0:	10 f4       	brcc	.+4      	; 0xba6 <xTaskGenericCreate+0x160>
     ba2:	80 93 34 07 	sts	0x0734, r24	; 0x800734 <uxTopUsedPriority>
     ba6:	90 91 2d 07 	lds	r25, 0x072D	; 0x80072d <uxTaskNumber>
     baa:	9f 5f       	subi	r25, 0xFF	; 255
     bac:	90 93 2d 07 	sts	0x072D, r25	; 0x80072d <uxTaskNumber>
     bb0:	90 91 33 07 	lds	r25, 0x0733	; 0x800733 <uxTopReadyPriority>
     bb4:	98 17       	cp	r25, r24
     bb6:	10 f4       	brcc	.+4      	; 0xbbc <xTaskGenericCreate+0x176>
     bb8:	80 93 33 07 	sts	0x0733, r24	; 0x800733 <uxTopReadyPriority>
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	9c 01       	movw	r18, r24
     bc0:	22 0f       	add	r18, r18
     bc2:	33 1f       	adc	r19, r19
     bc4:	22 0f       	add	r18, r18
     bc6:	33 1f       	adc	r19, r19
     bc8:	22 0f       	add	r18, r18
     bca:	33 1f       	adc	r19, r19
     bcc:	82 0f       	add	r24, r18
     bce:	93 1f       	adc	r25, r19
     bd0:	b6 01       	movw	r22, r12
     bd2:	8f 59       	subi	r24, 0x9F	; 159
     bd4:	98 4f       	sbci	r25, 0xF8	; 248
     bd6:	af da       	rcall	.-2722   	; 0x136 <vListInsertEnd>
     bd8:	0f 90       	pop	r0
     bda:	0f be       	out	0x3f, r0	; 63
     bdc:	80 91 32 07 	lds	r24, 0x0732	; 0x800732 <xSchedulerRunning>
     be0:	88 23       	and	r24, r24
     be2:	51 f0       	breq	.+20     	; 0xbf8 <xTaskGenericCreate+0x1b2>
     be4:	e0 91 85 07 	lds	r30, 0x0785	; 0x800785 <pxCurrentTCB>
     be8:	f0 91 86 07 	lds	r31, 0x0786	; 0x800786 <pxCurrentTCB+0x1>
     bec:	86 89       	ldd	r24, Z+22	; 0x16
     bee:	80 17       	cp	r24, r16
     bf0:	28 f4       	brcc	.+10     	; 0xbfc <xTaskGenericCreate+0x1b6>
     bf2:	41 de       	rcall	.-894    	; 0x876 <vPortYield>
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	09 c0       	rjmp	.+18     	; 0xc0a <xTaskGenericCreate+0x1c4>
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	07 c0       	rjmp	.+14     	; 0xc0a <xTaskGenericCreate+0x1c4>
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	05 c0       	rjmp	.+10     	; 0xc0a <xTaskGenericCreate+0x1c4>
     c00:	d8 8e       	std	Y+24, r13	; 0x18
     c02:	cf 8a       	std	Y+23, r12	; 0x17
     c04:	c6 01       	movw	r24, r12
     c06:	47 cf       	rjmp	.-370    	; 0xa96 <xTaskGenericCreate+0x50>
     c08:	8f ef       	ldi	r24, 0xFF	; 255
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	1f 91       	pop	r17
     c10:	0f 91       	pop	r16
     c12:	ff 90       	pop	r15
     c14:	ef 90       	pop	r14
     c16:	df 90       	pop	r13
     c18:	cf 90       	pop	r12
     c1a:	bf 90       	pop	r11
     c1c:	af 90       	pop	r10
     c1e:	9f 90       	pop	r9
     c20:	8f 90       	pop	r8
     c22:	7f 90       	pop	r7
     c24:	6f 90       	pop	r6
     c26:	5f 90       	pop	r5
     c28:	4f 90       	pop	r4
     c2a:	08 95       	ret

00000c2c <vTaskStartScheduler>:
     c2c:	af 92       	push	r10
     c2e:	bf 92       	push	r11
     c30:	cf 92       	push	r12
     c32:	df 92       	push	r13
     c34:	ef 92       	push	r14
     c36:	ff 92       	push	r15
     c38:	0f 93       	push	r16
     c3a:	a1 2c       	mov	r10, r1
     c3c:	b1 2c       	mov	r11, r1
     c3e:	c1 2c       	mov	r12, r1
     c40:	d1 2c       	mov	r13, r1
     c42:	e1 2c       	mov	r14, r1
     c44:	f1 2c       	mov	r15, r1
     c46:	00 e0       	ldi	r16, 0x00	; 0
     c48:	20 e0       	ldi	r18, 0x00	; 0
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	45 e5       	ldi	r20, 0x55	; 85
     c4e:	50 e0       	ldi	r21, 0x00	; 0
     c50:	60 e4       	ldi	r22, 0x40	; 64
     c52:	71 e0       	ldi	r23, 0x01	; 1
     c54:	82 ea       	ldi	r24, 0xA2	; 162
     c56:	97 e0       	ldi	r25, 0x07	; 7
     c58:	f6 de       	rcall	.-532    	; 0xa46 <xTaskGenericCreate>
     c5a:	81 30       	cpi	r24, 0x01	; 1
     c5c:	41 f4       	brne	.+16     	; 0xc6e <vTaskStartScheduler+0x42>
     c5e:	f8 94       	cli
     c60:	80 93 32 07 	sts	0x0732, r24	; 0x800732 <xSchedulerRunning>
     c64:	10 92 36 07 	sts	0x0736, r1	; 0x800736 <xTickCount+0x1>
     c68:	10 92 35 07 	sts	0x0735, r1	; 0x800735 <xTickCount>
     c6c:	ca dd       	rcall	.-1132   	; 0x802 <xPortStartScheduler>
     c6e:	0f 91       	pop	r16
     c70:	ff 90       	pop	r15
     c72:	ef 90       	pop	r14
     c74:	df 90       	pop	r13
     c76:	cf 90       	pop	r12
     c78:	bf 90       	pop	r11
     c7a:	af 90       	pop	r10
     c7c:	08 95       	ret

00000c7e <vTaskSuspendAll>:
     c7e:	80 91 31 07 	lds	r24, 0x0731	; 0x800731 <uxSchedulerSuspended>
     c82:	8f 5f       	subi	r24, 0xFF	; 255
     c84:	80 93 31 07 	sts	0x0731, r24	; 0x800731 <uxSchedulerSuspended>
     c88:	08 95       	ret

00000c8a <vTaskIncrementTick>:
     c8a:	0f 93       	push	r16
     c8c:	1f 93       	push	r17
     c8e:	cf 93       	push	r28
     c90:	df 93       	push	r29
     c92:	80 91 31 07 	lds	r24, 0x0731	; 0x800731 <uxSchedulerSuspended>
     c96:	81 11       	cpse	r24, r1
     c98:	af c0       	rjmp	.+350    	; 0xdf8 <vTaskIncrementTick+0x16e>
     c9a:	80 91 35 07 	lds	r24, 0x0735	; 0x800735 <xTickCount>
     c9e:	90 91 36 07 	lds	r25, 0x0736	; 0x800736 <xTickCount+0x1>
     ca2:	01 96       	adiw	r24, 0x01	; 1
     ca4:	90 93 36 07 	sts	0x0736, r25	; 0x800736 <xTickCount+0x1>
     ca8:	80 93 35 07 	sts	0x0735, r24	; 0x800735 <xTickCount>
     cac:	80 91 35 07 	lds	r24, 0x0735	; 0x800735 <xTickCount>
     cb0:	90 91 36 07 	lds	r25, 0x0736	; 0x800736 <xTickCount+0x1>
     cb4:	89 2b       	or	r24, r25
     cb6:	99 f5       	brne	.+102    	; 0xd1e <vTaskIncrementTick+0x94>
     cb8:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <pxDelayedTaskList>
     cbc:	90 91 4e 07 	lds	r25, 0x074E	; 0x80074e <pxDelayedTaskList+0x1>
     cc0:	20 91 4b 07 	lds	r18, 0x074B	; 0x80074b <pxOverflowDelayedTaskList>
     cc4:	30 91 4c 07 	lds	r19, 0x074C	; 0x80074c <pxOverflowDelayedTaskList+0x1>
     cc8:	30 93 4e 07 	sts	0x074E, r19	; 0x80074e <pxDelayedTaskList+0x1>
     ccc:	20 93 4d 07 	sts	0x074D, r18	; 0x80074d <pxDelayedTaskList>
     cd0:	90 93 4c 07 	sts	0x074C, r25	; 0x80074c <pxOverflowDelayedTaskList+0x1>
     cd4:	80 93 4b 07 	sts	0x074B, r24	; 0x80074b <pxOverflowDelayedTaskList>
     cd8:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <xNumOfOverflows>
     cdc:	8f 5f       	subi	r24, 0xFF	; 255
     cde:	80 93 2e 07 	sts	0x072E, r24	; 0x80072e <xNumOfOverflows>
     ce2:	e0 91 4d 07 	lds	r30, 0x074D	; 0x80074d <pxDelayedTaskList>
     ce6:	f0 91 4e 07 	lds	r31, 0x074E	; 0x80074e <pxDelayedTaskList+0x1>
     cea:	80 81       	ld	r24, Z
     cec:	81 11       	cpse	r24, r1
     cee:	07 c0       	rjmp	.+14     	; 0xcfe <vTaskIncrementTick+0x74>
     cf0:	8f ef       	ldi	r24, 0xFF	; 255
     cf2:	9f ef       	ldi	r25, 0xFF	; 255
     cf4:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <xNextTaskUnblockTime+0x1>
     cf8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <xNextTaskUnblockTime>
     cfc:	10 c0       	rjmp	.+32     	; 0xd1e <vTaskIncrementTick+0x94>
     cfe:	e0 91 4d 07 	lds	r30, 0x074D	; 0x80074d <pxDelayedTaskList>
     d02:	f0 91 4e 07 	lds	r31, 0x074E	; 0x80074e <pxDelayedTaskList+0x1>
     d06:	05 80       	ldd	r0, Z+5	; 0x05
     d08:	f6 81       	ldd	r31, Z+6	; 0x06
     d0a:	e0 2d       	mov	r30, r0
     d0c:	06 80       	ldd	r0, Z+6	; 0x06
     d0e:	f7 81       	ldd	r31, Z+7	; 0x07
     d10:	e0 2d       	mov	r30, r0
     d12:	82 81       	ldd	r24, Z+2	; 0x02
     d14:	93 81       	ldd	r25, Z+3	; 0x03
     d16:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <xNextTaskUnblockTime+0x1>
     d1a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <xNextTaskUnblockTime>
     d1e:	20 91 35 07 	lds	r18, 0x0735	; 0x800735 <xTickCount>
     d22:	30 91 36 07 	lds	r19, 0x0736	; 0x800736 <xTickCount+0x1>
     d26:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <xNextTaskUnblockTime>
     d2a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <xNextTaskUnblockTime+0x1>
     d2e:	28 17       	cp	r18, r24
     d30:	39 07       	cpc	r19, r25
     d32:	08 f4       	brcc	.+2      	; 0xd36 <vTaskIncrementTick+0xac>
     d34:	66 c0       	rjmp	.+204    	; 0xe02 <vTaskIncrementTick+0x178>
     d36:	e0 91 4d 07 	lds	r30, 0x074D	; 0x80074d <pxDelayedTaskList>
     d3a:	f0 91 4e 07 	lds	r31, 0x074E	; 0x80074e <pxDelayedTaskList+0x1>
     d3e:	80 81       	ld	r24, Z
     d40:	88 23       	and	r24, r24
     d42:	99 f0       	breq	.+38     	; 0xd6a <vTaskIncrementTick+0xe0>
     d44:	e0 91 4d 07 	lds	r30, 0x074D	; 0x80074d <pxDelayedTaskList>
     d48:	f0 91 4e 07 	lds	r31, 0x074E	; 0x80074e <pxDelayedTaskList+0x1>
     d4c:	05 80       	ldd	r0, Z+5	; 0x05
     d4e:	f6 81       	ldd	r31, Z+6	; 0x06
     d50:	e0 2d       	mov	r30, r0
     d52:	c6 81       	ldd	r28, Z+6	; 0x06
     d54:	d7 81       	ldd	r29, Z+7	; 0x07
     d56:	8a 81       	ldd	r24, Y+2	; 0x02
     d58:	9b 81       	ldd	r25, Y+3	; 0x03
     d5a:	20 91 35 07 	lds	r18, 0x0735	; 0x800735 <xTickCount>
     d5e:	30 91 36 07 	lds	r19, 0x0736	; 0x800736 <xTickCount+0x1>
     d62:	28 17       	cp	r18, r24
     d64:	39 07       	cpc	r19, r25
     d66:	f8 f4       	brcc	.+62     	; 0xda6 <vTaskIncrementTick+0x11c>
     d68:	19 c0       	rjmp	.+50     	; 0xd9c <vTaskIncrementTick+0x112>
     d6a:	8f ef       	ldi	r24, 0xFF	; 255
     d6c:	9f ef       	ldi	r25, 0xFF	; 255
     d6e:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <xNextTaskUnblockTime+0x1>
     d72:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <xNextTaskUnblockTime>
     d76:	45 c0       	rjmp	.+138    	; 0xe02 <vTaskIncrementTick+0x178>
     d78:	e0 91 4d 07 	lds	r30, 0x074D	; 0x80074d <pxDelayedTaskList>
     d7c:	f0 91 4e 07 	lds	r31, 0x074E	; 0x80074e <pxDelayedTaskList+0x1>
     d80:	05 80       	ldd	r0, Z+5	; 0x05
     d82:	f6 81       	ldd	r31, Z+6	; 0x06
     d84:	e0 2d       	mov	r30, r0
     d86:	c6 81       	ldd	r28, Z+6	; 0x06
     d88:	d7 81       	ldd	r29, Z+7	; 0x07
     d8a:	8a 81       	ldd	r24, Y+2	; 0x02
     d8c:	9b 81       	ldd	r25, Y+3	; 0x03
     d8e:	20 91 35 07 	lds	r18, 0x0735	; 0x800735 <xTickCount>
     d92:	30 91 36 07 	lds	r19, 0x0736	; 0x800736 <xTickCount+0x1>
     d96:	28 17       	cp	r18, r24
     d98:	39 07       	cpc	r19, r25
     d9a:	28 f4       	brcc	.+10     	; 0xda6 <vTaskIncrementTick+0x11c>
     d9c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <xNextTaskUnblockTime+0x1>
     da0:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <xNextTaskUnblockTime>
     da4:	2e c0       	rjmp	.+92     	; 0xe02 <vTaskIncrementTick+0x178>
     da6:	8e 01       	movw	r16, r28
     da8:	0e 5f       	subi	r16, 0xFE	; 254
     daa:	1f 4f       	sbci	r17, 0xFF	; 255
     dac:	c8 01       	movw	r24, r16
     dae:	25 da       	rcall	.-2998   	; 0x1fa <vListRemove>
     db0:	8c 89       	ldd	r24, Y+20	; 0x14
     db2:	9d 89       	ldd	r25, Y+21	; 0x15
     db4:	89 2b       	or	r24, r25
     db6:	19 f0       	breq	.+6      	; 0xdbe <vTaskIncrementTick+0x134>
     db8:	ce 01       	movw	r24, r28
     dba:	0c 96       	adiw	r24, 0x0c	; 12
     dbc:	1e da       	rcall	.-3012   	; 0x1fa <vListRemove>
     dbe:	8e 89       	ldd	r24, Y+22	; 0x16
     dc0:	90 91 33 07 	lds	r25, 0x0733	; 0x800733 <uxTopReadyPriority>
     dc4:	98 17       	cp	r25, r24
     dc6:	10 f4       	brcc	.+4      	; 0xdcc <vTaskIncrementTick+0x142>
     dc8:	80 93 33 07 	sts	0x0733, r24	; 0x800733 <uxTopReadyPriority>
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	9c 01       	movw	r18, r24
     dd0:	22 0f       	add	r18, r18
     dd2:	33 1f       	adc	r19, r19
     dd4:	22 0f       	add	r18, r18
     dd6:	33 1f       	adc	r19, r19
     dd8:	22 0f       	add	r18, r18
     dda:	33 1f       	adc	r19, r19
     ddc:	82 0f       	add	r24, r18
     dde:	93 1f       	adc	r25, r19
     de0:	b8 01       	movw	r22, r16
     de2:	8f 59       	subi	r24, 0x9F	; 159
     de4:	98 4f       	sbci	r25, 0xF8	; 248
     de6:	a7 d9       	rcall	.-3250   	; 0x136 <vListInsertEnd>
     de8:	e0 91 4d 07 	lds	r30, 0x074D	; 0x80074d <pxDelayedTaskList>
     dec:	f0 91 4e 07 	lds	r31, 0x074E	; 0x80074e <pxDelayedTaskList+0x1>
     df0:	80 81       	ld	r24, Z
     df2:	81 11       	cpse	r24, r1
     df4:	c1 cf       	rjmp	.-126    	; 0xd78 <vTaskIncrementTick+0xee>
     df6:	b9 cf       	rjmp	.-142    	; 0xd6a <vTaskIncrementTick+0xe0>
     df8:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <uxMissedTicks>
     dfc:	8f 5f       	subi	r24, 0xFF	; 255
     dfe:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <uxMissedTicks>
     e02:	df 91       	pop	r29
     e04:	cf 91       	pop	r28
     e06:	1f 91       	pop	r17
     e08:	0f 91       	pop	r16
     e0a:	08 95       	ret

00000e0c <xTaskResumeAll>:
     e0c:	cf 92       	push	r12
     e0e:	df 92       	push	r13
     e10:	ef 92       	push	r14
     e12:	ff 92       	push	r15
     e14:	0f 93       	push	r16
     e16:	1f 93       	push	r17
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	0f b6       	in	r0, 0x3f	; 63
     e1e:	f8 94       	cli
     e20:	0f 92       	push	r0
     e22:	80 91 31 07 	lds	r24, 0x0731	; 0x800731 <uxSchedulerSuspended>
     e26:	81 50       	subi	r24, 0x01	; 1
     e28:	80 93 31 07 	sts	0x0731, r24	; 0x800731 <uxSchedulerSuspended>
     e2c:	80 91 31 07 	lds	r24, 0x0731	; 0x800731 <uxSchedulerSuspended>
     e30:	81 11       	cpse	r24, r1
     e32:	5f c0       	rjmp	.+190    	; 0xef2 <xTaskResumeAll+0xe6>
     e34:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <uxCurrentNumberOfTasks>
     e38:	81 11       	cpse	r24, r1
     e3a:	2f c0       	rjmp	.+94     	; 0xe9a <xTaskResumeAll+0x8e>
     e3c:	5d c0       	rjmp	.+186    	; 0xef8 <xTaskResumeAll+0xec>
     e3e:	d7 01       	movw	r26, r14
     e40:	15 96       	adiw	r26, 0x05	; 5
     e42:	ed 91       	ld	r30, X+
     e44:	fc 91       	ld	r31, X
     e46:	16 97       	sbiw	r26, 0x06	; 6
     e48:	c6 81       	ldd	r28, Z+6	; 0x06
     e4a:	d7 81       	ldd	r29, Z+7	; 0x07
     e4c:	ce 01       	movw	r24, r28
     e4e:	0c 96       	adiw	r24, 0x0c	; 12
     e50:	d4 d9       	rcall	.-3160   	; 0x1fa <vListRemove>
     e52:	8e 01       	movw	r16, r28
     e54:	0e 5f       	subi	r16, 0xFE	; 254
     e56:	1f 4f       	sbci	r17, 0xFF	; 255
     e58:	c8 01       	movw	r24, r16
     e5a:	cf d9       	rcall	.-3170   	; 0x1fa <vListRemove>
     e5c:	8e 89       	ldd	r24, Y+22	; 0x16
     e5e:	90 91 33 07 	lds	r25, 0x0733	; 0x800733 <uxTopReadyPriority>
     e62:	98 17       	cp	r25, r24
     e64:	10 f4       	brcc	.+4      	; 0xe6a <xTaskResumeAll+0x5e>
     e66:	80 93 33 07 	sts	0x0733, r24	; 0x800733 <uxTopReadyPriority>
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	9c 01       	movw	r18, r24
     e6e:	22 0f       	add	r18, r18
     e70:	33 1f       	adc	r19, r19
     e72:	22 0f       	add	r18, r18
     e74:	33 1f       	adc	r19, r19
     e76:	22 0f       	add	r18, r18
     e78:	33 1f       	adc	r19, r19
     e7a:	82 0f       	add	r24, r18
     e7c:	93 1f       	adc	r25, r19
     e7e:	b8 01       	movw	r22, r16
     e80:	8f 59       	subi	r24, 0x9F	; 159
     e82:	98 4f       	sbci	r25, 0xF8	; 248
     e84:	58 d9       	rcall	.-3408   	; 0x136 <vListInsertEnd>
     e86:	e0 91 85 07 	lds	r30, 0x0785	; 0x800785 <pxCurrentTCB>
     e8a:	f0 91 86 07 	lds	r31, 0x0786	; 0x800786 <pxCurrentTCB+0x1>
     e8e:	9e 89       	ldd	r25, Y+22	; 0x16
     e90:	86 89       	ldd	r24, Z+22	; 0x16
     e92:	98 17       	cp	r25, r24
     e94:	58 f0       	brcs	.+22     	; 0xeac <xTaskResumeAll+0xa0>
     e96:	dc 2c       	mov	r13, r12
     e98:	09 c0       	rjmp	.+18     	; 0xeac <xTaskResumeAll+0xa0>
     e9a:	d1 2c       	mov	r13, r1
     e9c:	0f 2e       	mov	r0, r31
     e9e:	f2 e4       	ldi	r31, 0x42	; 66
     ea0:	ef 2e       	mov	r14, r31
     ea2:	f7 e0       	ldi	r31, 0x07	; 7
     ea4:	ff 2e       	mov	r15, r31
     ea6:	f0 2d       	mov	r31, r0
     ea8:	cc 24       	eor	r12, r12
     eaa:	c3 94       	inc	r12
     eac:	f7 01       	movw	r30, r14
     eae:	80 81       	ld	r24, Z
     eb0:	81 11       	cpse	r24, r1
     eb2:	c5 cf       	rjmp	.-118    	; 0xe3e <xTaskResumeAll+0x32>
     eb4:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <uxMissedTicks>
     eb8:	88 23       	and	r24, r24
     eba:	79 f0       	breq	.+30     	; 0xeda <xTaskResumeAll+0xce>
     ebc:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <uxMissedTicks>
     ec0:	88 23       	and	r24, r24
     ec2:	91 f0       	breq	.+36     	; 0xee8 <xTaskResumeAll+0xdc>
     ec4:	e2 de       	rcall	.-572    	; 0xc8a <vTaskIncrementTick>
     ec6:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <uxMissedTicks>
     eca:	81 50       	subi	r24, 0x01	; 1
     ecc:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <uxMissedTicks>
     ed0:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <uxMissedTicks>
     ed4:	81 11       	cpse	r24, r1
     ed6:	f6 cf       	rjmp	.-20     	; 0xec4 <xTaskResumeAll+0xb8>
     ed8:	07 c0       	rjmp	.+14     	; 0xee8 <xTaskResumeAll+0xdc>
     eda:	f1 e0       	ldi	r31, 0x01	; 1
     edc:	df 16       	cp	r13, r31
     ede:	21 f0       	breq	.+8      	; 0xee8 <xTaskResumeAll+0xdc>
     ee0:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <xMissedYield>
     ee4:	81 30       	cpi	r24, 0x01	; 1
     ee6:	39 f4       	brne	.+14     	; 0xef6 <xTaskResumeAll+0xea>
     ee8:	10 92 2f 07 	sts	0x072F, r1	; 0x80072f <xMissedYield>
     eec:	c4 dc       	rcall	.-1656   	; 0x876 <vPortYield>
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	03 c0       	rjmp	.+6      	; 0xef8 <xTaskResumeAll+0xec>
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	01 c0       	rjmp	.+2      	; 0xef8 <xTaskResumeAll+0xec>
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	0f 90       	pop	r0
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	df 91       	pop	r29
     efe:	cf 91       	pop	r28
     f00:	1f 91       	pop	r17
     f02:	0f 91       	pop	r16
     f04:	ff 90       	pop	r15
     f06:	ef 90       	pop	r14
     f08:	df 90       	pop	r13
     f0a:	cf 90       	pop	r12
     f0c:	08 95       	ret

00000f0e <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
     f0e:	cf 93       	push	r28
     f10:	df 93       	push	r29
     f12:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
     f14:	89 2b       	or	r24, r25
		{
			vTaskSuspendAll();
     f16:	91 f0       	breq	.+36     	; 0xf3c <vTaskDelay+0x2e>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
     f18:	b2 de       	rcall	.-668    	; 0xc7e <vTaskSuspendAll>
     f1a:	80 91 35 07 	lds	r24, 0x0735	; 0x800735 <xTickCount>
     f1e:	90 91 36 07 	lds	r25, 0x0736	; 0x800736 <xTickCount+0x1>
     f22:	c8 0f       	add	r28, r24

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
     f24:	d9 1f       	adc	r29, r25
     f26:	80 91 85 07 	lds	r24, 0x0785	; 0x800785 <pxCurrentTCB>
     f2a:	90 91 86 07 	lds	r25, 0x0786	; 0x800786 <pxCurrentTCB+0x1>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
			}
			xAlreadyYielded = xTaskResumeAll();
     f2e:	02 96       	adiw	r24, 0x02	; 2
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
     f30:	64 d9       	rcall	.-3384   	; 0x1fa <vListRemove>
     f32:	ce 01       	movw	r24, r28
		{
			portYIELD_WITHIN_API();
     f34:	53 dd       	rcall	.-1370   	; 0x9dc <prvAddCurrentTaskToDelayedList>
     f36:	6a df       	rcall	.-300    	; 0xe0c <xTaskResumeAll>
		}
	}
     f38:	81 11       	cpse	r24, r1
     f3a:	01 c0       	rjmp	.+2      	; 0xf3e <vTaskDelay+0x30>
     f3c:	9c dc       	rcall	.-1736   	; 0x876 <vPortYield>
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	08 95       	ret

00000f44 <prvIdleTask>:
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
     f44:	0f 2e       	mov	r0, r31
     f46:	f9 e3       	ldi	r31, 0x39	; 57
     f48:	ef 2e       	mov	r14, r31
     f4a:	f7 e0       	ldi	r31, 0x07	; 7
     f4c:	ff 2e       	mov	r15, r31
     f4e:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
     f50:	c1 e6       	ldi	r28, 0x61	; 97
     f52:	d7 e0       	ldi	r29, 0x07	; 7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
     f54:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <uxTasksDeleted>
     f58:	88 23       	and	r24, r24
		{
			vTaskSuspendAll();
     f5a:	29 f1       	breq	.+74     	; 0xfa6 <prvIdleTask+0x62>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
     f5c:	90 de       	rcall	.-736    	; 0xc7e <vTaskSuspendAll>
			xTaskResumeAll();
     f5e:	d7 01       	movw	r26, r14
     f60:	1c 91       	ld	r17, X

			if( xListIsEmpty == pdFALSE )
     f62:	54 df       	rcall	.-344    	; 0xe0c <xTaskResumeAll>
     f64:	11 23       	and	r17, r17
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
     f66:	f9 f0       	breq	.+62     	; 0xfa6 <prvIdleTask+0x62>
     f68:	0f b6       	in	r0, 0x3f	; 63
     f6a:	f8 94       	cli
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
     f6c:	0f 92       	push	r0
     f6e:	d7 01       	movw	r26, r14
     f70:	15 96       	adiw	r26, 0x05	; 5
     f72:	ed 91       	ld	r30, X+
     f74:	fc 91       	ld	r31, X
     f76:	16 97       	sbiw	r26, 0x06	; 6
					vListRemove( &( pxTCB->xGenericListItem ) );
     f78:	06 81       	ldd	r16, Z+6	; 0x06
     f7a:	17 81       	ldd	r17, Z+7	; 0x07
     f7c:	c8 01       	movw	r24, r16
					--uxCurrentNumberOfTasks;
     f7e:	02 96       	adiw	r24, 0x02	; 2
     f80:	3c d9       	rcall	.-3464   	; 0x1fa <vListRemove>
     f82:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <uxCurrentNumberOfTasks>
     f86:	81 50       	subi	r24, 0x01	; 1
					--uxTasksDeleted;
     f88:	80 93 37 07 	sts	0x0737, r24	; 0x800737 <uxCurrentNumberOfTasks>
     f8c:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <uxTasksDeleted>
     f90:	81 50       	subi	r24, 0x01	; 1
				}
				taskEXIT_CRITICAL();
     f92:	80 93 38 07 	sts	0x0738, r24	; 0x800738 <uxTasksDeleted>
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
     f96:	0f 90       	pop	r0
     f98:	0f be       	out	0x3f, r0	; 63
		vPortFree( pxTCB );
     f9a:	f8 01       	movw	r30, r16
     f9c:	87 89       	ldd	r24, Z+23	; 0x17

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
     f9e:	90 8d       	ldd	r25, Z+24	; 0x18
     fa0:	b7 d8       	rcall	.-3730   	; 0x110 <vPortFree>
     fa2:	c8 01       	movw	r24, r16
			{
				taskYIELD();
     fa4:	b5 d8       	rcall	.-3734   	; 0x110 <vPortFree>
     fa6:	88 81       	ld	r24, Y
     fa8:	82 30       	cpi	r24, 0x02	; 2
     faa:	a0 f2       	brcs	.-88     	; 0xf54 <prvIdleTask+0x10>
     fac:	64 dc       	rcall	.-1848   	; 0x876 <vPortYield>
     fae:	d2 cf       	rjmp	.-92     	; 0xf54 <prvIdleTask+0x10>

00000fb0 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
     fb0:	80 91 31 07 	lds	r24, 0x0731	; 0x800731 <uxSchedulerSuspended>
     fb4:	81 11       	cpse	r24, r1
     fb6:	13 c0       	rjmp	.+38     	; 0xfde <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
     fb8:	80 91 33 07 	lds	r24, 0x0733	; 0x800733 <uxTopReadyPriority>
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	fc 01       	movw	r30, r24
     fc0:	ee 0f       	add	r30, r30
     fc2:	ff 1f       	adc	r31, r31
     fc4:	ee 0f       	add	r30, r30
     fc6:	ff 1f       	adc	r31, r31
     fc8:	ee 0f       	add	r30, r30
     fca:	ff 1f       	adc	r31, r31
     fcc:	8e 0f       	add	r24, r30
     fce:	9f 1f       	adc	r25, r31
     fd0:	fc 01       	movw	r30, r24
     fd2:	ef 59       	subi	r30, 0x9F	; 159
     fd4:	f8 4f       	sbci	r31, 0xF8	; 248
     fd6:	80 81       	ld	r24, Z
     fd8:	88 23       	and	r24, r24
     fda:	29 f0       	breq	.+10     	; 0xfe6 <vTaskSwitchContext+0x36>
     fdc:	1b c0       	rjmp	.+54     	; 0x1014 <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	80 93 2f 07 	sts	0x072F, r24	; 0x80072f <xMissedYield>
     fe4:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
     fe6:	80 91 33 07 	lds	r24, 0x0733	; 0x800733 <uxTopReadyPriority>
     fea:	81 50       	subi	r24, 0x01	; 1
     fec:	80 93 33 07 	sts	0x0733, r24	; 0x800733 <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
     ff0:	80 91 33 07 	lds	r24, 0x0733	; 0x800733 <uxTopReadyPriority>
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	fc 01       	movw	r30, r24
     ff8:	ee 0f       	add	r30, r30
     ffa:	ff 1f       	adc	r31, r31
     ffc:	ee 0f       	add	r30, r30
     ffe:	ff 1f       	adc	r31, r31
    1000:	ee 0f       	add	r30, r30
    1002:	ff 1f       	adc	r31, r31
    1004:	8e 0f       	add	r24, r30
    1006:	9f 1f       	adc	r25, r31
    1008:	fc 01       	movw	r30, r24
    100a:	ef 59       	subi	r30, 0x9F	; 159
    100c:	f8 4f       	sbci	r31, 0xF8	; 248
    100e:	80 81       	ld	r24, Z
    1010:	88 23       	and	r24, r24
    1012:	49 f3       	breq	.-46     	; 0xfe6 <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    1014:	80 91 33 07 	lds	r24, 0x0733	; 0x800733 <uxTopReadyPriority>
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	9c 01       	movw	r18, r24
    101c:	22 0f       	add	r18, r18
    101e:	33 1f       	adc	r19, r19
    1020:	22 0f       	add	r18, r18
    1022:	33 1f       	adc	r19, r19
    1024:	22 0f       	add	r18, r18
    1026:	33 1f       	adc	r19, r19
    1028:	28 0f       	add	r18, r24
    102a:	39 1f       	adc	r19, r25
    102c:	d9 01       	movw	r26, r18
    102e:	af 59       	subi	r26, 0x9F	; 159
    1030:	b8 4f       	sbci	r27, 0xF8	; 248
    1032:	11 96       	adiw	r26, 0x01	; 1
    1034:	ed 91       	ld	r30, X+
    1036:	fc 91       	ld	r31, X
    1038:	12 97       	sbiw	r26, 0x02	; 2
    103a:	02 80       	ldd	r0, Z+2	; 0x02
    103c:	f3 81       	ldd	r31, Z+3	; 0x03
    103e:	e0 2d       	mov	r30, r0
    1040:	12 96       	adiw	r26, 0x02	; 2
    1042:	fc 93       	st	X, r31
    1044:	ee 93       	st	-X, r30
    1046:	11 97       	sbiw	r26, 0x01	; 1
    1048:	2c 59       	subi	r18, 0x9C	; 156
    104a:	38 4f       	sbci	r19, 0xF8	; 248
    104c:	e2 17       	cp	r30, r18
    104e:	f3 07       	cpc	r31, r19
    1050:	29 f4       	brne	.+10     	; 0x105c <vTaskSwitchContext+0xac>
    1052:	22 81       	ldd	r18, Z+2	; 0x02
    1054:	33 81       	ldd	r19, Z+3	; 0x03
    1056:	fd 01       	movw	r30, r26
    1058:	32 83       	std	Z+2, r19	; 0x02
    105a:	21 83       	std	Z+1, r18	; 0x01
    105c:	fc 01       	movw	r30, r24
    105e:	ee 0f       	add	r30, r30
    1060:	ff 1f       	adc	r31, r31
    1062:	ee 0f       	add	r30, r30
    1064:	ff 1f       	adc	r31, r31
    1066:	ee 0f       	add	r30, r30
    1068:	ff 1f       	adc	r31, r31
    106a:	8e 0f       	add	r24, r30
    106c:	9f 1f       	adc	r25, r31
    106e:	fc 01       	movw	r30, r24
    1070:	ef 59       	subi	r30, 0x9F	; 159
    1072:	f8 4f       	sbci	r31, 0xF8	; 248
    1074:	01 80       	ldd	r0, Z+1	; 0x01
    1076:	f2 81       	ldd	r31, Z+2	; 0x02
    1078:	e0 2d       	mov	r30, r0
    107a:	86 81       	ldd	r24, Z+6	; 0x06
    107c:	97 81       	ldd	r25, Z+7	; 0x07
    107e:	90 93 86 07 	sts	0x0786, r25	; 0x800786 <pxCurrentTCB+0x1>
    1082:	80 93 85 07 	sts	0x0785, r24	; 0x800785 <pxCurrentTCB>
    1086:	08 95       	ret

00001088 <memset>:
    1088:	dc 01       	movw	r26, r24
    108a:	01 c0       	rjmp	.+2      	; 0x108e <memset+0x6>
    108c:	6d 93       	st	X+, r22
    108e:	41 50       	subi	r20, 0x01	; 1
    1090:	50 40       	sbci	r21, 0x00	; 0
    1092:	e0 f7       	brcc	.-8      	; 0x108c <memset+0x4>
    1094:	08 95       	ret

00001096 <strncpy>:
    1096:	fb 01       	movw	r30, r22
    1098:	dc 01       	movw	r26, r24
    109a:	41 50       	subi	r20, 0x01	; 1
    109c:	50 40       	sbci	r21, 0x00	; 0
    109e:	48 f0       	brcs	.+18     	; 0x10b2 <strncpy+0x1c>
    10a0:	01 90       	ld	r0, Z+
    10a2:	0d 92       	st	X+, r0
    10a4:	00 20       	and	r0, r0
    10a6:	c9 f7       	brne	.-14     	; 0x109a <strncpy+0x4>
    10a8:	01 c0       	rjmp	.+2      	; 0x10ac <strncpy+0x16>
    10aa:	1d 92       	st	X+, r1
    10ac:	41 50       	subi	r20, 0x01	; 1
    10ae:	50 40       	sbci	r21, 0x00	; 0
    10b0:	e0 f7       	brcc	.-8      	; 0x10aa <strncpy+0x14>
    10b2:	08 95       	ret

000010b4 <_exit>:
    10b4:	f8 94       	cli

000010b6 <__stop_program>:
    10b6:	ff cf       	rjmp	.-2      	; 0x10b6 <__stop_program>
